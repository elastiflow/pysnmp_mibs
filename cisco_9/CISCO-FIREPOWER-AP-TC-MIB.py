# SNMP MIB module (CISCO-FIREPOWER-AP-TC-MIB) expressed in pysnmp data model.
#
# This Python module is designed to be imported and executed by the
# pysnmp library.
#
# See https://www.pysnmp.com/pysnmp for further information.
#
# Notes
# -----
# ASN.1 source file:///Users/rob/MIBs/cisco_9/CISCO-FIREPOWER-AP-TC-MIB.mib
# Produced by pysmi-1.5.11 at Fri May 23 23:21:39 2025
# On host e-ws1-mac.muc.elastiflow.net platform Darwin version 24.3.0 by user rob
# Using Python version 3.13.3 (main, Apr  8 2025, 13:54:08) [Clang 16.0.0 (clang-1600.0.26.6)]

if 'mibBuilder' not in globals():
    import sys

    sys.stderr.write(__doc__)
    sys.exit(1)

# Import base ASN.1 objects even if this MIB does not use it

(Integer,
 OctetString,
 ObjectIdentifier) = mibBuilder.importSymbols(
    "ASN1",
    "Integer",
    "OctetString",
    "ObjectIdentifier")

(NamedValues,) = mibBuilder.importSymbols(
    "ASN1-ENUMERATION",
    "NamedValues")
(ConstraintsIntersection,
 ConstraintsUnion,
 SingleValueConstraint,
 ValueRangeConstraint,
 ValueSizeConstraint) = mibBuilder.importSymbols(
    "ASN1-REFINEMENT",
    "ConstraintsIntersection",
    "ConstraintsUnion",
    "SingleValueConstraint",
    "ValueRangeConstraint",
    "ValueSizeConstraint")

# Import SMI symbols from the MIBs this MIB depends on

(CfprApManagedObjectDn,
 CfprApManagedObjectId,
 ciscoFirepowerApMIB) = mibBuilder.importSymbols(
    "CISCO-FIREPOWER-AP-MIB",
    "CfprApManagedObjectDn",
    "CfprApManagedObjectId",
    "ciscoFirepowerApMIB")

(ciscoMgmt,) = mibBuilder.importSymbols(
    "CISCO-SMI",
    "ciscoMgmt")

(CiscoAlarmSeverity,
 CiscoInetAddressMask,
 CiscoNetworkAddress,
 TimeIntervalSec,
 Unsigned64) = mibBuilder.importSymbols(
    "CISCO-TC",
    "CiscoAlarmSeverity",
    "CiscoInetAddressMask",
    "CiscoNetworkAddress",
    "TimeIntervalSec",
    "Unsigned64")

(InetAddressIPv4,
 InetAddressIPv6) = mibBuilder.importSymbols(
    "INET-ADDRESS-MIB",
    "InetAddressIPv4",
    "InetAddressIPv6")

(SnmpAdminString,) = mibBuilder.importSymbols(
    "SNMP-FRAMEWORK-MIB",
    "SnmpAdminString")

(ModuleCompliance,
 NotificationGroup) = mibBuilder.importSymbols(
    "SNMPv2-CONF",
    "ModuleCompliance",
    "NotificationGroup")

(Bits,
 Counter32,
 Counter64,
 Gauge32,
 Integer32,
 IpAddress,
 ModuleIdentity,
 MibIdentifier,
 NotificationType,
 ObjectIdentity,
 MibScalar,
 MibTable,
 MibTableRow,
 MibTableColumn,
 TimeTicks,
 Unsigned32,
 iso) = mibBuilder.importSymbols(
    "SNMPv2-SMI",
    "Bits",
    "Counter32",
    "Counter64",
    "Gauge32",
    "Integer32",
    "IpAddress",
    "ModuleIdentity",
    "MibIdentifier",
    "NotificationType",
    "ObjectIdentity",
    "MibScalar",
    "MibTable",
    "MibTableRow",
    "MibTableColumn",
    "TimeTicks",
    "Unsigned32",
    "iso")

(DateAndTime,
 DisplayString,
 MacAddress,
 PhysAddress,
 RowPointer,
 TextualConvention,
 TimeInterval,
 TimeStamp,
 TruthValue) = mibBuilder.importSymbols(
    "SNMPv2-TC",
    "DateAndTime",
    "DisplayString",
    "MacAddress",
    "PhysAddress",
    "RowPointer",
    "TextualConvention",
    "TimeInterval",
    "TimeStamp",
    "TruthValue")


# MODULE-IDENTITY

cfprApTextualConventionsObjects = ModuleIdentity(
    (1, 3, 6, 1, 4, 1, 9, 9, 826, 2, 4)
)


# Types definitions


# TEXTUAL-CONVENTIONS



class CfprApAaaAccess(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("readOnly", 0),
          ("admin", 1),
          ("operations", 2),
          ("fault", 3),
          ("aaa", 4),
          ("podConfig", 5),
          ("podPolicy", 6),
          ("podSecurity", 7),
          ("podQos", 8),
          ("extLanConfig", 9),
          ("extLanPolicy", 10),
          ("extLanSecurity", 11),
          ("extLanQos", 12),
          ("extSanConfig", 13),
          ("extSanPolicy", 14),
          ("extSanSecurity", 15),
          ("extSanQos", 16),
          ("pnEquipment", 17),
          ("pnPolicy", 18),
          ("pnSecurity", 19),
          ("pnMaintenance", 20),
          ("lsConfig", 21),
          ("lsStorage", 22),
          ("lsNetwork", 23),
          ("lsSecurity", 24),
          ("lsServer", 25),
          ("lsQos", 26),
          ("lsConfigPolicy", 27),
          ("lsStoragePolicy", 28),
          ("lsNetworkPolicy", 29),
          ("lsSecurityPolicy", 30),
          ("lsServerPolicy", 31),
          ("lsQosPolicy", 32),
          ("lsExtAccess", 33),
          ("powerMgmt", 34),
          ("lsServerOper", 36),
          ("lsCompute", 37),
          ("orgManagement", 38))
    )


class CfprApAaaAccountStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("active", 0),
          ("inactive", 1))
    )



class CfprApAaaAuthRealmFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              352)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateRealm", 352))
    )



class CfprApAaaAuthRealmFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              352,
              353,
              354,
              538,
              539)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateRealmBegin", 352),
          ("updateRealmSetRealmLocal", 353),
          ("updateRealmSetRealmPeer", 354),
          ("updateRealmFail", 538),
          ("updateRealmSuccess", 539))
    )



class CfprApAaaCimcSessionType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("all", 0),
          ("kvm", 1),
          ("vmedia", 2),
          ("sol", 3))
    )



class CfprApAaaClear(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )



class CfprApAaaConfigState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("ok", 0),
          ("notApplied", 1))
    )



class CfprApAaaDomainAuthRealm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("local", 0),
          ("radius", 1),
          ("tacacs", 2),
          ("ldap", 3),
          ("none", 4))
    )



class CfprApAaaEpAccess(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("readonly", 1),
          ("admin", 2))
    )



class CfprApAaaEpFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              349)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateEp", 349))
    )



class CfprApAaaEpFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              349,
              350,
              351,
              536,
              537)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateEpBegin", 349),
          ("updateEpSetEpLocal", 350),
          ("updateEpSetEpPeer", 351),
          ("updateEpFail", 536),
          ("updateEpSuccess", 537))
    )



class CfprApAaaEpFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              349)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateEp", 349))
    )



class CfprApAaaExtMgmtAccess(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("kvm", 1)
    )



class CfprApAaaIpmiOverLan(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )



class CfprApAaaLdapEpFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              349)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateEp", 349))
    )



class CfprApAaaLdapEpFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              349,
              350,
              351,
              536,
              537)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateEpBegin", 349),
          ("updateEpSetEpLocal", 350),
          ("updateEpSetEpPeer", 351),
          ("updateEpFail", 536),
          ("updateEpSuccess", 537))
    )



class CfprApAaaLdapGroupRuleAuthorization(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )



class CfprApAaaLdapGroupRuleTraversal(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("nonRecursive", 0),
          ("recursive", 1))
    )



class CfprApAaaLdapVendor(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("openLdap", 0),
          ("msAd", 1))
    )



class CfprApAaaNoRolePolicy(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("noLogin", 0),
          ("assignDefaultRole", 1))
    )



class CfprApAaaPwdPolicy(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("enable", 0),
          ("disable", 1))
    )



class CfprApAaaRadiusEpFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              349)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateEp", 349))
    )



class CfprApAaaRadiusEpFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              349,
              350,
              351,
              536,
              537)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateEpBegin", 349),
          ("updateEpSetEpLocal", 350),
          ("updateEpSetEpPeer", 351),
          ("updateEpFail", 536),
          ("updateEpSuccess", 537))
    )



class CfprApAaaRadiusService(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("all", 0),
          ("authorization", 1),
          ("accounting", 2))
    )



class CfprApAaaRealm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("local", 0),
          ("radius", 1),
          ("tacacs", 2),
          ("ldap", 3),
          ("none", 4))
    )



class CfprApAaaRealmFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              352)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateRealm", 352))
    )



class CfprApAaaRealmFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              352,
              353,
              354,
              538,
              539)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateRealmBegin", 352),
          ("updateRealmSetRealmLocal", 353),
          ("updateRealmSetRealmPeer", 354),
          ("updateRealmFail", 538),
          ("updateRealmSuccess", 539))
    )



class CfprApAaaRealmFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              352)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateRealm", 352))
    )



class CfprApAaaSession(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("local", 0),
          ("remote", 1),
          ("ipmi", 2))
    )



class CfprApAaaSessionState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("active", 0),
          ("inactive", 1))
    )



class CfprApAaaSshStr(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("key", 1))
    )



class CfprApAaaTacacsPlusEpFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              349)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateEp", 349))
    )



class CfprApAaaTacacsPlusEpFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              349,
              350,
              351,
              536,
              537)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateEpBegin", 349),
          ("updateEpSetEpLocal", 350),
          ("updateEpSetEpPeer", 351),
          ("updateEpFail", 536),
          ("updateEpSuccess", 537))
    )



class CfprApAaaUserEpFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              355)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateUserEp", 355))
    )



class CfprApAaaUserEpFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              355,
              356,
              357,
              540,
              541)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateUserEpBegin", 355),
          ("updateUserEpSetUserLocal", 356),
          ("updateUserEpSetUserPeer", 357),
          ("updateUserEpFail", 540),
          ("updateUserEpSuccess", 541))
    )



class CfprApAaaUserEpFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              355)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateUserEp", 355))
    )



class CfprApAaaUserInterface(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("shell", 1),
          ("web", 2),
          ("ep", 3),
          ("kvm", 4),
          ("vmedia", 5),
          ("sol", 6))
    )



class CfprApAdaptorAdapterStatsTrafficDir(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("tx", 1),
          ("rx", 2))
    )



class CfprApAdaptorAdminPowerState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("resetPower", 1))
    )



class CfprApAdaptorCIoEpIfType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("physical", 1),
          ("aggregation", 2),
          ("virtual", 3),
          ("fabric", 4))
    )



class CfprApAdaptorCapDefFwVersionOpr(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("gt", 1),
          ("lt", 2),
          ("range", 3))
    )



class CfprApAdaptorCapDefType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20)
        )
    )
    namedValues = NamedValues(
        *(("virtualizedEthIf", 1),
          ("virtualizedFcIf", 2),
          ("virtualizedScsiIf", 3),
          ("nonVirtualizedEthIf", 4),
          ("nonVirtualizedFcIf", 5),
          ("fcoe", 6),
          ("protectedEthIf", 7),
          ("protectedFcIf", 8),
          ("protectedFcoe", 9),
          ("pathEncapVirtual", 10),
          ("pathEncapConsolidated", 11),
          ("uplinkAggregation", 12),
          ("virtualizedEthSriov", 13),
          ("virtualizedFcSriov", 14),
          ("virtualizedEthSriovUsnic", 15),
          ("virtualizedEthVmq", 16),
          ("ethFlowMonitoringNetflow", 17),
          ("ethRoce", 18),
          ("ethVxlan", 19),
          ("ethNvgre", 20))
    )



class CfprApAdaptorCapSpecType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20)
        )
    )
    namedValues = NamedValues(
        *(("virtualizedEthIf", 1),
          ("virtualizedFcIf", 2),
          ("virtualizedScsiIf", 3),
          ("nonVirtualizedEthIf", 4),
          ("nonVirtualizedFcIf", 5),
          ("fcoe", 6),
          ("protectedEthIf", 7),
          ("protectedFcIf", 8),
          ("protectedFcoe", 9),
          ("pathEncapVirtual", 10),
          ("pathEncapConsolidated", 11),
          ("uplinkAggregation", 12),
          ("virtualizedEthSriov", 13),
          ("virtualizedFcSriov", 14),
          ("virtualizedEthSriovUsnic", 15),
          ("virtualizedEthVmq", 16),
          ("ethFlowMonitoringNetflow", 17),
          ("ethRoce", 18),
          ("ethVxlan", 19),
          ("ethNvgre", 20))
    )



class CfprApAdaptorDefaultAction(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )



class CfprApAdaptorEthArfsProfileAccelaratedRFS(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApAdaptorEthInterruptProfileCoalescingType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("min", 0),
          ("idle", 1))
    )



class CfprApAdaptorEthNVGREProfileAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApAdaptorEthOffloadProfileLargeReceive(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApAdaptorEthOffloadProfileTcpRxChecksum(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApAdaptorEthOffloadProfileTcpSegment(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApAdaptorEthOffloadProfileTcpTxChecksum(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApAdaptorEthPortBySizeLargeStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("greaterThanOrEqualTo9216Delta", 0),
          ("greaterThanOrEqualTo9216DeltaAvg", 1),
          ("greaterThanOrEqualTo9216DeltaMax", 2),
          ("greaterThanOrEqualTo9216DeltaMin", 3),
          ("lessThan2048Delta", 4),
          ("lessThan2048DeltaAvg", 5),
          ("lessThan2048DeltaMax", 6),
          ("lessThan2048DeltaMin", 7),
          ("lessThan4096Delta", 8),
          ("lessThan4096DeltaAvg", 9),
          ("lessThan4096DeltaMax", 10),
          ("lessThan4096DeltaMin", 11),
          ("lessThan8192Delta", 12),
          ("lessThan8192DeltaAvg", 13),
          ("lessThan8192DeltaMax", 14),
          ("lessThan8192DeltaMin", 15),
          ("lessThan9216Delta", 16),
          ("lessThan9216DeltaAvg", 17),
          ("lessThan9216DeltaMax", 18),
          ("lessThan9216DeltaMin", 19),
          ("lessThanOrEqualTo1518Delta", 20),
          ("lessThanOrEqualTo1518DeltaAvg", 21),
          ("lessThanOrEqualTo1518DeltaMax", 22),
          ("lessThanOrEqualTo1518DeltaMin", 23),
          ("noBreakdownGreaterThan1518Delta", 24),
          ("noBreakdownGreaterThan1518DeltaAvg", 25),
          ("noBreakdownGreaterThan1518DeltaMax", 26),
          ("noBreakdownGreaterThan1518DeltaMin", 27))
    )


class CfprApAdaptorEthPortBySizeLargeStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("greaterThanOrEqualTo9216Delta", 0),
          ("greaterThanOrEqualTo9216DeltaAvg", 1),
          ("greaterThanOrEqualTo9216DeltaMax", 2),
          ("greaterThanOrEqualTo9216DeltaMin", 3),
          ("lessThan2048Delta", 4),
          ("lessThan2048DeltaAvg", 5),
          ("lessThan2048DeltaMax", 6),
          ("lessThan2048DeltaMin", 7),
          ("lessThan4096Delta", 8),
          ("lessThan4096DeltaAvg", 9),
          ("lessThan4096DeltaMax", 10),
          ("lessThan4096DeltaMin", 11),
          ("lessThan8192Delta", 12),
          ("lessThan8192DeltaAvg", 13),
          ("lessThan8192DeltaMax", 14),
          ("lessThan8192DeltaMin", 15),
          ("lessThan9216Delta", 16),
          ("lessThan9216DeltaAvg", 17),
          ("lessThan9216DeltaMax", 18),
          ("lessThan9216DeltaMin", 19),
          ("lessThanOrEqualTo1518Delta", 20),
          ("lessThanOrEqualTo1518DeltaAvg", 21),
          ("lessThanOrEqualTo1518DeltaMax", 22),
          ("lessThanOrEqualTo1518DeltaMin", 23),
          ("noBreakdownGreaterThan1518Delta", 24),
          ("noBreakdownGreaterThan1518DeltaAvg", 25),
          ("noBreakdownGreaterThan1518DeltaMax", 26),
          ("noBreakdownGreaterThan1518DeltaMin", 27))
    )


class CfprApAdaptorEthPortBySizeSmallStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("equals64Delta", 0),
          ("equals64DeltaAvg", 1),
          ("equals64DeltaMax", 2),
          ("equals64DeltaMin", 3),
          ("lessThan1024Delta", 4),
          ("lessThan1024DeltaAvg", 5),
          ("lessThan1024DeltaMax", 6),
          ("lessThan1024DeltaMin", 7),
          ("lessThan128Delta", 8),
          ("lessThan128DeltaAvg", 9),
          ("lessThan128DeltaMax", 10),
          ("lessThan128DeltaMin", 11),
          ("lessThan256Delta", 12),
          ("lessThan256DeltaAvg", 13),
          ("lessThan256DeltaMax", 14),
          ("lessThan256DeltaMin", 15),
          ("lessThan512Delta", 16),
          ("lessThan512DeltaAvg", 17),
          ("lessThan512DeltaMax", 18),
          ("lessThan512DeltaMin", 19),
          ("lessThan64Delta", 20),
          ("lessThan64DeltaAvg", 21),
          ("lessThan64DeltaMax", 22),
          ("lessThan64DeltaMin", 23))
    )


class CfprApAdaptorEthPortBySizeSmallStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("equals64Delta", 0),
          ("equals64DeltaAvg", 1),
          ("equals64DeltaMax", 2),
          ("equals64DeltaMin", 3),
          ("lessThan1024Delta", 4),
          ("lessThan1024DeltaAvg", 5),
          ("lessThan1024DeltaMax", 6),
          ("lessThan1024DeltaMin", 7),
          ("lessThan128Delta", 8),
          ("lessThan128DeltaAvg", 9),
          ("lessThan128DeltaMax", 10),
          ("lessThan128DeltaMin", 11),
          ("lessThan256Delta", 12),
          ("lessThan256DeltaAvg", 13),
          ("lessThan256DeltaMax", 14),
          ("lessThan256DeltaMin", 15),
          ("lessThan512Delta", 16),
          ("lessThan512DeltaAvg", 17),
          ("lessThan512DeltaMax", 18),
          ("lessThan512DeltaMin", 19),
          ("lessThan64Delta", 20),
          ("lessThan64DeltaAvg", 21),
          ("lessThan64DeltaMax", 22),
          ("lessThan64DeltaMin", 23))
    )


class CfprApAdaptorEthPortErrStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("badCrcPacketsDelta", 0),
          ("badCrcPacketsDeltaAvg", 1),
          ("badCrcPacketsDeltaMax", 2),
          ("badCrcPacketsDeltaMin", 3),
          ("badLengthPacketsDelta", 4),
          ("badLengthPacketsDeltaAvg", 5),
          ("badLengthPacketsDeltaMax", 6),
          ("badLengthPacketsDeltaMin", 7),
          ("macDiscardedPacketsDelta", 8),
          ("macDiscardedPacketsDeltaAvg", 9),
          ("macDiscardedPacketsDeltaMax", 10),
          ("macDiscardedPacketsDeltaMin", 11))
    )


class CfprApAdaptorEthPortErrStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("badCrcPacketsDelta", 0),
          ("badCrcPacketsDeltaAvg", 1),
          ("badCrcPacketsDeltaMax", 2),
          ("badCrcPacketsDeltaMin", 3),
          ("badLengthPacketsDelta", 4),
          ("badLengthPacketsDeltaAvg", 5),
          ("badLengthPacketsDeltaMax", 6),
          ("badLengthPacketsDeltaMin", 7),
          ("macDiscardedPacketsDelta", 8),
          ("macDiscardedPacketsDeltaAvg", 9),
          ("macDiscardedPacketsDeltaMax", 10),
          ("macDiscardedPacketsDeltaMin", 11))
    )


class CfprApAdaptorEthPortMcastStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("broadcastPacketsDelta", 0),
          ("broadcastPacketsDeltaAvg", 1),
          ("broadcastPacketsDeltaMax", 2),
          ("broadcastPacketsDeltaMin", 3),
          ("multicastPacketsDelta", 4),
          ("multicastPacketsDeltaAvg", 5),
          ("multicastPacketsDeltaMax", 6),
          ("multicastPacketsDeltaMin", 7),
          ("unicastPacketsDelta", 8),
          ("unicastPacketsDeltaAvg", 9),
          ("unicastPacketsDeltaMax", 10),
          ("unicastPacketsDeltaMin", 11))
    )


class CfprApAdaptorEthPortMcastStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("broadcastPacketsDelta", 0),
          ("broadcastPacketsDeltaAvg", 1),
          ("broadcastPacketsDeltaMax", 2),
          ("broadcastPacketsDeltaMin", 3),
          ("multicastPacketsDelta", 4),
          ("multicastPacketsDeltaAvg", 5),
          ("multicastPacketsDeltaMax", 6),
          ("multicastPacketsDeltaMin", 7),
          ("unicastPacketsDelta", 8),
          ("unicastPacketsDeltaAvg", 9),
          ("unicastPacketsDeltaMax", 10),
          ("unicastPacketsDeltaMin", 11))
    )


class CfprApAdaptorEthPortOutsizedStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("oversizedBadCrcPacketsDelta", 0),
          ("oversizedBadCrcPacketsDeltaAvg", 1),
          ("oversizedBadCrcPacketsDeltaMax", 2),
          ("oversizedBadCrcPacketsDeltaMin", 3),
          ("oversizedGoodCrcPacketsDelta", 4),
          ("oversizedGoodCrcPacketsDeltaAvg", 5),
          ("oversizedGoodCrcPacketsDeltaMax", 6),
          ("oversizedGoodCrcPacketsDeltaMin", 7),
          ("oversizedPacketsDelta", 8),
          ("oversizedPacketsDeltaAvg", 9),
          ("oversizedPacketsDeltaMax", 10),
          ("oversizedPacketsDeltaMin", 11),
          ("undersizedBadCrcPacketsDelta", 12),
          ("undersizedBadCrcPacketsDeltaAvg", 13),
          ("undersizedBadCrcPacketsDeltaMax", 14),
          ("undersizedBadCrcPacketsDeltaMin", 15),
          ("undersizedGoodCrcPacketsDelta", 16),
          ("undersizedGoodCrcPacketsDeltaAvg", 17),
          ("undersizedGoodCrcPacketsDeltaMax", 18),
          ("undersizedGoodCrcPacketsDeltaMin", 19))
    )


class CfprApAdaptorEthPortOutsizedStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("oversizedBadCrcPacketsDelta", 0),
          ("oversizedBadCrcPacketsDeltaAvg", 1),
          ("oversizedBadCrcPacketsDeltaMax", 2),
          ("oversizedBadCrcPacketsDeltaMin", 3),
          ("oversizedGoodCrcPacketsDelta", 4),
          ("oversizedGoodCrcPacketsDeltaAvg", 5),
          ("oversizedGoodCrcPacketsDeltaMax", 6),
          ("oversizedGoodCrcPacketsDeltaMin", 7),
          ("oversizedPacketsDelta", 8),
          ("oversizedPacketsDeltaAvg", 9),
          ("oversizedPacketsDeltaMax", 10),
          ("oversizedPacketsDeltaMin", 11),
          ("undersizedBadCrcPacketsDelta", 12),
          ("undersizedBadCrcPacketsDeltaAvg", 13),
          ("undersizedBadCrcPacketsDeltaMax", 14),
          ("undersizedBadCrcPacketsDeltaMin", 15),
          ("undersizedGoodCrcPacketsDelta", 16),
          ("undersizedGoodCrcPacketsDeltaAvg", 17),
          ("undersizedGoodCrcPacketsDeltaMax", 18),
          ("undersizedGoodCrcPacketsDeltaMin", 19))
    )


class CfprApAdaptorEthPortStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("goodPacketsDelta", 0),
          ("goodPacketsDeltaAvg", 1),
          ("goodPacketsDeltaMax", 2),
          ("goodPacketsDeltaMin", 3),
          ("pausePacketsDelta", 4),
          ("pausePacketsDeltaAvg", 5),
          ("pausePacketsDeltaMax", 6),
          ("pausePacketsDeltaMin", 7),
          ("perPriorityPausePacketsDelta", 8),
          ("perPriorityPausePacketsDeltaAvg", 9),
          ("perPriorityPausePacketsDeltaMax", 10),
          ("perPriorityPausePacketsDeltaMin", 11),
          ("pppPacketsDelta", 12),
          ("pppPacketsDeltaAvg", 13),
          ("pppPacketsDeltaMax", 14),
          ("pppPacketsDeltaMin", 15),
          ("totalPacketsDelta", 16),
          ("totalPacketsDeltaAvg", 17),
          ("totalPacketsDeltaMax", 18),
          ("totalPacketsDeltaMin", 19),
          ("vlanPacketsDelta", 20),
          ("vlanPacketsDeltaAvg", 21),
          ("vlanPacketsDeltaMax", 22),
          ("vlanPacketsDeltaMin", 23))
    )


class CfprApAdaptorEthPortStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("goodPacketsDelta", 0),
          ("goodPacketsDeltaAvg", 1),
          ("goodPacketsDeltaMax", 2),
          ("goodPacketsDeltaMin", 3),
          ("pausePacketsDelta", 4),
          ("pausePacketsDeltaAvg", 5),
          ("pausePacketsDeltaMax", 6),
          ("pausePacketsDeltaMin", 7),
          ("perPriorityPausePacketsDelta", 8),
          ("perPriorityPausePacketsDeltaAvg", 9),
          ("perPriorityPausePacketsDeltaMax", 10),
          ("perPriorityPausePacketsDeltaMin", 11),
          ("pppPacketsDelta", 12),
          ("pppPacketsDeltaAvg", 13),
          ("pppPacketsDeltaMax", 14),
          ("pppPacketsDeltaMin", 15),
          ("totalPacketsDelta", 16),
          ("totalPacketsDeltaAvg", 17),
          ("totalPacketsDeltaMax", 18),
          ("totalPacketsDeltaMin", 19),
          ("vlanPacketsDelta", 20),
          ("vlanPacketsDeltaAvg", 21),
          ("vlanPacketsDeltaMax", 22),
          ("vlanPacketsDeltaMin", 23))
    )


class CfprApAdaptorEthRoCEProfileAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApAdaptorEthVxLANProfileAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApAdaptorEtherIfStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("rxBytesDelta", 0),
          ("rxBytesDeltaAvg", 1),
          ("rxBytesDeltaMax", 2),
          ("rxBytesDeltaMin", 3),
          ("rxDroppedDelta", 4),
          ("rxDroppedDeltaAvg", 5),
          ("rxDroppedDeltaMax", 6),
          ("rxDroppedDeltaMin", 7),
          ("rxErrorsDelta", 8),
          ("rxErrorsDeltaAvg", 9),
          ("rxErrorsDeltaMax", 10),
          ("rxErrorsDeltaMin", 11),
          ("rxPacketsDelta", 12),
          ("rxPacketsDeltaAvg", 13),
          ("rxPacketsDeltaMax", 14),
          ("rxPacketsDeltaMin", 15),
          ("txBytesDelta", 16),
          ("txBytesDeltaAvg", 17),
          ("txBytesDeltaMax", 18),
          ("txBytesDeltaMin", 19),
          ("txDroppedDelta", 20),
          ("txDroppedDeltaAvg", 21),
          ("txDroppedDeltaMax", 22),
          ("txDroppedDeltaMin", 23),
          ("txErrorsDelta", 24),
          ("txErrorsDeltaAvg", 25),
          ("txErrorsDeltaMax", 26),
          ("txErrorsDeltaMin", 27),
          ("txPacketsDelta", 28),
          ("txPacketsDeltaAvg", 29),
          ("txPacketsDeltaMax", 30),
          ("txPacketsDeltaMin", 31))
    )


class CfprApAdaptorEtherIfStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("rxBytesDelta", 0),
          ("rxBytesDeltaAvg", 1),
          ("rxBytesDeltaMax", 2),
          ("rxBytesDeltaMin", 3),
          ("rxDroppedDelta", 4),
          ("rxDroppedDeltaAvg", 5),
          ("rxDroppedDeltaMax", 6),
          ("rxDroppedDeltaMin", 7),
          ("rxErrorsDelta", 8),
          ("rxErrorsDeltaAvg", 9),
          ("rxErrorsDeltaMax", 10),
          ("rxErrorsDeltaMin", 11),
          ("rxPacketsDelta", 12),
          ("rxPacketsDeltaAvg", 13),
          ("rxPacketsDeltaMax", 14),
          ("rxPacketsDeltaMin", 15),
          ("txBytesDelta", 16),
          ("txBytesDeltaAvg", 17),
          ("txBytesDeltaMax", 18),
          ("txBytesDeltaMin", 19),
          ("txDroppedDelta", 20),
          ("txDroppedDeltaAvg", 21),
          ("txDroppedDeltaMax", 22),
          ("txDroppedDeltaMin", 23),
          ("txErrorsDelta", 24),
          ("txErrorsDeltaAvg", 25),
          ("txErrorsDeltaMax", 26),
          ("txErrorsDeltaMin", 27),
          ("txPacketsDelta", 28),
          ("txPacketsDeltaAvg", 29),
          ("txPacketsDeltaMax", 30),
          ("txPacketsDeltaMin", 31))
    )


class CfprApAdaptorExtEthIfFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              127)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("pathReset", 127))
    )



class CfprApAdaptorExtEthIfFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              127,
              128,
              129,
              542,
              543)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("pathResetBegin", 127),
          ("pathResetDisable", 128),
          ("pathResetEnable", 129),
          ("pathResetFail", 542),
          ("pathResetSuccess", 543))
    )



class CfprApAdaptorExtEthIfFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              127)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("pathReset", 127))
    )



class CfprApAdaptorExtEthIfPcPortId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1024, 4096),
    )



class CfprApAdaptorExtEthIfPcTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApAdaptorExtEthIfPcEpPortId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )



class CfprApAdaptorExtEthIfPcEpSlotId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )



class CfprApAdaptorExtIfAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              44)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 0),
          ("resetConnectivity", 44))
    )



class CfprApAdaptorExtIfEpIfRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApAdaptorExtIfEpType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApAdaptorExtIfPcIfRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApAdaptorExtIfPcType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApAdaptorExtIpV6RssHashProfileIpHash(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApAdaptorExtIpV6RssHashProfileTcpHash(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApAdaptorExternalEpLocale(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("server", 0),
          ("chassis", 1),
          ("internal", 2),
          ("external", 3))
    )


class CfprApAdaptorExternalPcLocale(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("server", 0),
          ("chassis", 1),
          ("internal", 2),
          ("external", 3))
    )


class CfprApAdaptorFcErrorRecoveryProfileFcpErrorRecovery(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApAdaptorFcIfEventStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("invalidCRCCountDelta", 0),
          ("invalidCRCCountDeltaAvg", 1),
          ("invalidCRCCountDeltaMax", 2),
          ("invalidCRCCountDeltaMin", 3),
          ("linkFailureCountDelta", 4),
          ("linkFailureCountDeltaAvg", 5),
          ("linkFailureCountDeltaMax", 6),
          ("linkFailureCountDeltaMin", 7),
          ("lipCountDelta", 8),
          ("lipCountDeltaAvg", 9),
          ("lipCountDeltaMax", 10),
          ("lipCountDeltaMin", 11),
          ("lossOfSignalCountDelta", 12),
          ("lossOfSignalCountDeltaAvg", 13),
          ("lossOfSignalCountDeltaMax", 14),
          ("lossOfSignalCountDeltaMin", 15),
          ("lossOfSyncCountDelta", 16),
          ("lossOfSyncCountDeltaAvg", 17),
          ("lossOfSyncCountDeltaMax", 18),
          ("lossOfSyncCountDeltaMin", 19),
          ("nOSCountDelta", 20),
          ("nOSCountDeltaAvg", 21),
          ("nOSCountDeltaMax", 22),
          ("nOSCountDeltaMin", 23),
          ("secondsSinceLastResetDelta", 24),
          ("secondsSinceLastResetDeltaAvg", 25),
          ("secondsSinceLastResetDeltaMax", 26),
          ("secondsSinceLastResetDeltaMin", 27),
          ("seqProtocolErrCountDelta", 28),
          ("seqProtocolErrCountDeltaAvg", 29),
          ("seqProtocolErrCountDeltaMax", 30),
          ("seqProtocolErrCountDeltaMin", 31))
    )


class CfprApAdaptorFcIfEventStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("invalidCRCCountDelta", 0),
          ("invalidCRCCountDeltaAvg", 1),
          ("invalidCRCCountDeltaMax", 2),
          ("invalidCRCCountDeltaMin", 3),
          ("linkFailureCountDelta", 4),
          ("linkFailureCountDeltaAvg", 5),
          ("linkFailureCountDeltaMax", 6),
          ("linkFailureCountDeltaMin", 7),
          ("lipCountDelta", 8),
          ("lipCountDeltaAvg", 9),
          ("lipCountDeltaMax", 10),
          ("lipCountDeltaMin", 11),
          ("lossOfSignalCountDelta", 12),
          ("lossOfSignalCountDeltaAvg", 13),
          ("lossOfSignalCountDeltaMax", 14),
          ("lossOfSignalCountDeltaMin", 15),
          ("lossOfSyncCountDelta", 16),
          ("lossOfSyncCountDeltaAvg", 17),
          ("lossOfSyncCountDeltaMax", 18),
          ("lossOfSyncCountDeltaMin", 19),
          ("nOSCountDelta", 20),
          ("nOSCountDeltaAvg", 21),
          ("nOSCountDeltaMax", 22),
          ("nOSCountDeltaMin", 23),
          ("secondsSinceLastResetDelta", 24),
          ("secondsSinceLastResetDeltaAvg", 25),
          ("secondsSinceLastResetDeltaMax", 26),
          ("secondsSinceLastResetDeltaMin", 27),
          ("seqProtocolErrCountDelta", 28),
          ("seqProtocolErrCountDeltaAvg", 29),
          ("seqProtocolErrCountDeltaMax", 30),
          ("seqProtocolErrCountDeltaMin", 31))
    )


class CfprApAdaptorFcIfFC4StatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("controlRequestsDelta", 0),
          ("controlRequestsDeltaAvg", 1),
          ("controlRequestsDeltaMax", 2),
          ("controlRequestsDeltaMin", 3),
          ("inputMegabytesDelta", 4),
          ("inputMegabytesDeltaAvg", 5),
          ("inputMegabytesDeltaMax", 6),
          ("inputMegabytesDeltaMin", 7),
          ("inputRequestsDelta", 8),
          ("inputRequestsDeltaAvg", 9),
          ("inputRequestsDeltaMax", 10),
          ("inputRequestsDeltaMin", 11),
          ("outputMegabytesDelta", 12),
          ("outputMegabytesDeltaAvg", 13),
          ("outputMegabytesDeltaMax", 14),
          ("outputMegabytesDeltaMin", 15),
          ("outputRequestsDelta", 16),
          ("outputRequestsDeltaAvg", 17),
          ("outputRequestsDeltaMax", 18),
          ("outputRequestsDeltaMin", 19))
    )


class CfprApAdaptorFcIfFC4StatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("controlRequestsDelta", 0),
          ("controlRequestsDeltaAvg", 1),
          ("controlRequestsDeltaMax", 2),
          ("controlRequestsDeltaMin", 3),
          ("inputMegabytesDelta", 4),
          ("inputMegabytesDeltaAvg", 5),
          ("inputMegabytesDeltaMax", 6),
          ("inputMegabytesDeltaMin", 7),
          ("inputRequestsDelta", 8),
          ("inputRequestsDeltaAvg", 9),
          ("inputRequestsDeltaMax", 10),
          ("inputRequestsDeltaMin", 11),
          ("outputMegabytesDelta", 12),
          ("outputMegabytesDeltaAvg", 13),
          ("outputMegabytesDeltaMax", 14),
          ("outputMegabytesDeltaMin", 15),
          ("outputRequestsDelta", 16),
          ("outputRequestsDeltaAvg", 17),
          ("outputRequestsDeltaMax", 18),
          ("outputRequestsDeltaMin", 19))
    )


class CfprApAdaptorFcIfFrameStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("dumpedFramesDelta", 0),
          ("dumpedFramesDeltaAvg", 1),
          ("dumpedFramesDeltaMax", 2),
          ("dumpedFramesDeltaMin", 3),
          ("errorFramesDelta", 4),
          ("errorFramesDeltaAvg", 5),
          ("errorFramesDeltaMax", 6),
          ("errorFramesDeltaMin", 7),
          ("rxFramesDelta", 8),
          ("rxFramesDeltaAvg", 9),
          ("rxFramesDeltaMax", 10),
          ("rxFramesDeltaMin", 11),
          ("txFramesDelta", 12),
          ("txFramesDeltaAvg", 13),
          ("txFramesDeltaMax", 14),
          ("txFramesDeltaMin", 15))
    )


class CfprApAdaptorFcIfFrameStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("dumpedFramesDelta", 0),
          ("dumpedFramesDeltaAvg", 1),
          ("dumpedFramesDeltaMax", 2),
          ("dumpedFramesDeltaMin", 3),
          ("errorFramesDelta", 4),
          ("errorFramesDeltaAvg", 5),
          ("errorFramesDeltaMax", 6),
          ("errorFramesDeltaMin", 7),
          ("rxFramesDelta", 8),
          ("rxFramesDeltaAvg", 9),
          ("rxFramesDeltaMax", 10),
          ("rxFramesDeltaMin", 11),
          ("txFramesDelta", 12),
          ("txFramesDeltaAvg", 13),
          ("txFramesDeltaMax", 14),
          ("txFramesDeltaMin", 15))
    )


class CfprApAdaptorFcPortStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("rxBadFramesDelta", 0),
          ("rxBadFramesDeltaAvg", 1),
          ("rxBadFramesDeltaMax", 2),
          ("rxBadFramesDeltaMin", 3),
          ("rxFramesDelta", 4),
          ("rxFramesDeltaAvg", 5),
          ("rxFramesDeltaMax", 6),
          ("rxFramesDeltaMin", 7),
          ("txBadFramesDelta", 8),
          ("txBadFramesDeltaAvg", 9),
          ("txBadFramesDeltaMax", 10),
          ("txBadFramesDeltaMin", 11),
          ("txFramesDelta", 12),
          ("txFramesDeltaAvg", 13),
          ("txFramesDeltaMax", 14),
          ("txFramesDeltaMin", 15))
    )


class CfprApAdaptorFcPortStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("rxBadFramesDelta", 0),
          ("rxBadFramesDeltaAvg", 1),
          ("rxBadFramesDeltaMax", 2),
          ("rxBadFramesDeltaMin", 3),
          ("rxFramesDelta", 4),
          ("rxFramesDeltaAvg", 5),
          ("rxFramesDeltaMax", 6),
          ("rxFramesDeltaMin", 7),
          ("txBadFramesDelta", 8),
          ("txBadFramesDeltaAvg", 9),
          ("txBadFramesDeltaMax", 10),
          ("txBadFramesDeltaMin", 11),
          ("txFramesDelta", 12),
          ("txFramesDeltaAvg", 13),
          ("txFramesDeltaMax", 14),
          ("txFramesDeltaMin", 15))
    )


class CfprApAdaptorHostEthIfHostPort(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              10)
        )
    )
    namedValues = NamedValues(
        *(("any", 0),
          ("n1", 1),
          ("n2", 2),
          ("none", 10))
    )



class CfprApAdaptorHostEthIfFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              130)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("circuitReset", 130))
    )



class CfprApAdaptorHostEthIfFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              130,
              131,
              132,
              133,
              134,
              544,
              545)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("circuitResetBegin", 130),
          ("circuitResetDisableA", 131),
          ("circuitResetEnableA", 132),
          ("circuitResetDisableB", 133),
          ("circuitResetEnableB", 134),
          ("circuitResetFail", 544),
          ("circuitResetSuccess", 545))
    )



class CfprApAdaptorHostEthIfFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              130)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("circuitReset", 130))
    )



class CfprApAdaptorHostFcIfAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 0),
          ("resetConnectivityActive", 44),
          ("resetConnectivityPassive", 45),
          ("resetConnectivity", 46),
          ("disabled", 47),
          ("disabledPassive", 48),
          ("disabledActive", 49),
          ("enabledPassive", 50),
          ("enabledActive", 51))
    )



class CfprApAdaptorHostFcIfHostPort(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              10)
        )
    )
    namedValues = NamedValues(
        *(("any", 0),
          ("n1", 1),
          ("n2", 2),
          ("none", 10))
    )



class CfprApAdaptorHostFcIfPersBind(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 4))
    )



class CfprApAdaptorHostFcIfFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              135)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("circuitReset", 135))
    )



class CfprApAdaptorHostFcIfFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              135,
              136,
              137,
              138,
              139,
              546,
              547)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("circuitResetBegin", 135),
          ("circuitResetDisableA", 136),
          ("circuitResetEnableA", 137),
          ("circuitResetDisableB", 138),
          ("circuitResetEnableB", 139),
          ("circuitResetFail", 546),
          ("circuitResetSuccess", 547))
    )



class CfprApAdaptorHostFcIfFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              135)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("circuitReset", 135))
    )



class CfprApAdaptorHostIfAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 0),
          ("resetConnectivityActive", 44),
          ("resetConnectivityPassive", 45),
          ("resetConnectivity", 46),
          ("disabled", 47),
          ("disabledPassive", 48),
          ("disabledActive", 49),
          ("enabledPassive", 50),
          ("enabledActive", 51))
    )



class CfprApAdaptorHostIfBootDev(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApAdaptorHostMgmtCapPreboot(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("pnuOS", 1),
          ("efi", 2))
    )



class CfprApAdaptorHostMgmtCapPresence(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unspecified", 0),
          ("host", 1),
          ("cimc", 2))
    )



class CfprApAdaptorHostPortId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5000),
    )



class CfprApAdaptorHostServiceEthIfIfRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApAdaptorHostVisibility(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1),
          ("osDependent", 2))
    )



class CfprApAdaptorIScsiCapBootOrderType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              6,
              16,
              99,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              128)
        )
    )
    namedValues = NamedValues(
        *(("systemBootOrder", 0),
          ("fddOrder", 1),
          ("hddOrder", 2),
          ("cdOrder", 3),
          ("networkDeviceOrder", 6),
          ("internalEfiShell", 16),
          ("unknownDeviceOrder", 99),
          ("localStorageAnyDeviceOrder", 100),
          ("sanDeviceOrder", 101),
          ("sanAnyDeviceOrder", 102),
          ("internalUsbDeviceOrder", 103),
          ("externalUsbDeviceOrder", 104),
          ("sdcardDeviceOrder", 105),
          ("lanAnyDeviceOrder", 106),
          ("uefiTargetDeviceOrder", 107),
          ("iscsiDeviceOrder", 108),
          ("iscsiAnyDeviceOrder", 109),
          ("cimcVmediaCddDeviceOrder", 110),
          ("cimcVmediaHddDeviceOrder", 111),
          ("cimcVmediaFddDeviceOrder", 112),
          ("kvmVmediaCddDeviceOrder", 113),
          ("kvmVmediaHddDeviceOrder", 114),
          ("kvmVmediaFddDeviceOrder", 115),
          ("bevOrder", 128))
    )



class CfprApAdaptorInterruptMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("msiX", 1),
          ("msi", 2),
          ("intx", 3))
    )



class CfprApAdaptorIpV4RssHashProfileIpHash(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApAdaptorIpV4RssHashProfileTcpHash(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApAdaptorIpV6RssHashProfileIpHash(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApAdaptorIpV6RssHashProfileTcpHash(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApAdaptorIscsiProtConnectionTimeOut(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )



class CfprApAdaptorIscsiProtDhcpTimeOut(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(60, 300),
    )



class CfprApAdaptorIscsiProtLunBusyRetryCount(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 60),
    )



class CfprApAdaptorLanCapDefaultVlan(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("nativeVlan", 1),
          ("defaultVlan", 2))
    )



class CfprApAdaptorLinkState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("adminDown", 1),
          ("down", 2),
          ("error", 3),
          ("up", 4),
          ("unallocated", 5),
          ("unavailable", 6))
    )



class CfprApAdaptorLldpCapSupport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("full", 2))
    )



class CfprApAdaptorMenloBaseErrorStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("correctableErrorsDelta", 0),
          ("correctableErrorsDeltaAvg", 1),
          ("correctableErrorsDeltaMax", 2),
          ("correctableErrorsDeltaMin", 3),
          ("uncorrectableErrorsDelta", 4),
          ("uncorrectableErrorsDeltaAvg", 5),
          ("uncorrectableErrorsDeltaMax", 6),
          ("uncorrectableErrorsDeltaMin", 7))
    )


class CfprApAdaptorMenloBaseErrorStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("correctableErrorsDelta", 0),
          ("correctableErrorsDeltaAvg", 1),
          ("correctableErrorsDeltaMax", 2),
          ("correctableErrorsDeltaMin", 3),
          ("uncorrectableErrorsDelta", 4),
          ("uncorrectableErrorsDeltaAvg", 5),
          ("uncorrectableErrorsDeltaMax", 6),
          ("uncorrectableErrorsDeltaMin", 7))
    )


class CfprApAdaptorMenloDcePortStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("rxPauseCFCDelta", 0),
          ("rxPauseCFCDeltaAvg", 1),
          ("rxPauseCFCDeltaMax", 2),
          ("rxPauseCFCDeltaMin", 3),
          ("rxPausePFCDelta", 4),
          ("rxPausePFCDeltaAvg", 5),
          ("rxPausePFCDeltaMax", 6),
          ("rxPausePFCDeltaMin", 7),
          ("txPauseCFCDelta", 8),
          ("txPauseCFCDeltaAvg", 9),
          ("txPauseCFCDeltaMax", 10),
          ("txPauseCFCDeltaMin", 11),
          ("txPausePFCDelta", 12),
          ("txPausePFCDeltaAvg", 13),
          ("txPausePFCDeltaMax", 14),
          ("txPausePFCDeltaMin", 15))
    )


class CfprApAdaptorMenloDcePortStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("rxPauseCFCDelta", 0),
          ("rxPauseCFCDeltaAvg", 1),
          ("rxPauseCFCDeltaMax", 2),
          ("rxPauseCFCDeltaMin", 3),
          ("rxPausePFCDelta", 4),
          ("rxPausePFCDeltaAvg", 5),
          ("rxPausePFCDeltaMax", 6),
          ("rxPausePFCDeltaMin", 7),
          ("txPauseCFCDelta", 8),
          ("txPauseCFCDeltaAvg", 9),
          ("txPauseCFCDeltaMax", 10),
          ("txPauseCFCDeltaMin", 11),
          ("txPausePFCDelta", 12),
          ("txPausePFCDeltaAvg", 13),
          ("txPausePFCDeltaMax", 14),
          ("txPausePFCDeltaMin", 15))
    )


class CfprApAdaptorMenloEthErrorStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("correctableErrorsDelta", 0),
          ("correctableErrorsDeltaAvg", 1),
          ("correctableErrorsDeltaMax", 2),
          ("correctableErrorsDeltaMin", 3),
          ("dropAclDelta", 4),
          ("dropAclDeltaAvg", 5),
          ("dropAclDeltaMax", 6),
          ("dropAclDeltaMin", 7),
          ("popErrorsDelta", 8),
          ("popErrorsDeltaAvg", 9),
          ("popErrorsDeltaMax", 10),
          ("popErrorsDeltaMin", 11),
          ("pushErrorsDelta", 12),
          ("pushErrorsDeltaAvg", 13),
          ("pushErrorsDeltaMax", 14),
          ("pushErrorsDeltaMin", 15),
          ("uncorrectableErrorsDelta", 16),
          ("uncorrectableErrorsDeltaAvg", 17),
          ("uncorrectableErrorsDeltaMax", 18),
          ("uncorrectableErrorsDeltaMin", 19))
    )


class CfprApAdaptorMenloEthErrorStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("correctableErrorsDelta", 0),
          ("correctableErrorsDeltaAvg", 1),
          ("correctableErrorsDeltaMax", 2),
          ("correctableErrorsDeltaMin", 3),
          ("dropAclDelta", 4),
          ("dropAclDeltaAvg", 5),
          ("dropAclDeltaMax", 6),
          ("dropAclDeltaMin", 7),
          ("popErrorsDelta", 8),
          ("popErrorsDeltaAvg", 9),
          ("popErrorsDeltaMax", 10),
          ("popErrorsDeltaMin", 11),
          ("pushErrorsDelta", 12),
          ("pushErrorsDeltaAvg", 13),
          ("pushErrorsDeltaMax", 14),
          ("pushErrorsDeltaMin", 15),
          ("uncorrectableErrorsDelta", 16),
          ("uncorrectableErrorsDeltaAvg", 17),
          ("uncorrectableErrorsDeltaMax", 18),
          ("uncorrectableErrorsDeltaMin", 19))
    )


class CfprApAdaptorMenloEthStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("dropOverrunDelta", 0),
          ("dropOverrunDeltaAvg", 1),
          ("dropOverrunDeltaMax", 2),
          ("dropOverrunDeltaMin", 3),
          ("dropRuntDelta", 4),
          ("dropRuntDeltaAvg", 5),
          ("dropRuntDeltaMax", 6),
          ("dropRuntDeltaMin", 7),
          ("truncateOverrunDelta", 8),
          ("truncateOverrunDeltaAvg", 9),
          ("truncateOverrunDeltaMax", 10),
          ("truncateOverrunDeltaMin", 11))
    )


class CfprApAdaptorMenloEthStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("dropOverrunDelta", 0),
          ("dropOverrunDeltaAvg", 1),
          ("dropOverrunDeltaMax", 2),
          ("dropOverrunDeltaMin", 3),
          ("dropRuntDelta", 4),
          ("dropRuntDeltaAvg", 5),
          ("dropRuntDeltaMax", 6),
          ("dropRuntDeltaMin", 7),
          ("truncateOverrunDelta", 8),
          ("truncateOverrunDeltaAvg", 9),
          ("truncateOverrunDeltaMax", 10),
          ("truncateOverrunDeltaMin", 11))
    )


class CfprApAdaptorMenloFcErrorStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("correctableErrorsDelta", 0),
          ("correctableErrorsDeltaAvg", 1),
          ("correctableErrorsDeltaMax", 2),
          ("correctableErrorsDeltaMin", 3),
          ("popErrorsDelta", 4),
          ("popErrorsDeltaAvg", 5),
          ("popErrorsDeltaMax", 6),
          ("popErrorsDeltaMin", 7),
          ("pushErrorsDelta", 8),
          ("pushErrorsDeltaAvg", 9),
          ("pushErrorsDeltaMax", 10),
          ("pushErrorsDeltaMin", 11),
          ("uncorrectableErrorsDelta", 12),
          ("uncorrectableErrorsDeltaAvg", 13),
          ("uncorrectableErrorsDeltaMax", 14),
          ("uncorrectableErrorsDeltaMin", 15))
    )


class CfprApAdaptorMenloFcErrorStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("correctableErrorsDelta", 0),
          ("correctableErrorsDeltaAvg", 1),
          ("correctableErrorsDeltaMax", 2),
          ("correctableErrorsDeltaMin", 3),
          ("popErrorsDelta", 4),
          ("popErrorsDeltaAvg", 5),
          ("popErrorsDeltaMax", 6),
          ("popErrorsDeltaMin", 7),
          ("pushErrorsDelta", 8),
          ("pushErrorsDeltaAvg", 9),
          ("pushErrorsDeltaMax", 10),
          ("pushErrorsDeltaMin", 11),
          ("uncorrectableErrorsDelta", 12),
          ("uncorrectableErrorsDeltaAvg", 13),
          ("uncorrectableErrorsDeltaMax", 14),
          ("uncorrectableErrorsDeltaMin", 15))
    )


class CfprApAdaptorMenloFcStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("dropAclDelta", 0),
          ("dropAclDeltaAvg", 1),
          ("dropAclDeltaMax", 2),
          ("dropAclDeltaMin", 3),
          ("dropOverrunDelta", 4),
          ("dropOverrunDeltaAvg", 5),
          ("dropOverrunDeltaMax", 6),
          ("dropOverrunDeltaMin", 7),
          ("dropRuntDelta", 8),
          ("dropRuntDeltaAvg", 9),
          ("dropRuntDeltaMax", 10),
          ("dropRuntDeltaMin", 11),
          ("truncateOverrunDelta", 12),
          ("truncateOverrunDeltaAvg", 13),
          ("truncateOverrunDeltaMax", 14),
          ("truncateOverrunDeltaMin", 15))
    )


class CfprApAdaptorMenloFcStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("dropAclDelta", 0),
          ("dropAclDeltaAvg", 1),
          ("dropAclDeltaMax", 2),
          ("dropAclDeltaMin", 3),
          ("dropOverrunDelta", 4),
          ("dropOverrunDeltaAvg", 5),
          ("dropOverrunDeltaMax", 6),
          ("dropOverrunDeltaMin", 7),
          ("dropRuntDelta", 8),
          ("dropRuntDeltaAvg", 9),
          ("dropRuntDeltaMax", 10),
          ("dropRuntDeltaMin", 11),
          ("truncateOverrunDelta", 12),
          ("truncateOverrunDeltaAvg", 13),
          ("truncateOverrunDeltaMax", 14),
          ("truncateOverrunDeltaMin", 15))
    )


class CfprApAdaptorMenloHostPortStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("rxPauseCFCDelta", 0),
          ("rxPauseCFCDeltaAvg", 1),
          ("rxPauseCFCDeltaMax", 2),
          ("rxPauseCFCDeltaMin", 3),
          ("rxPausePFCDelta", 4),
          ("rxPausePFCDeltaAvg", 5),
          ("rxPausePFCDeltaMax", 6),
          ("rxPausePFCDeltaMin", 7),
          ("txPauseCFCDelta", 8),
          ("txPauseCFCDeltaAvg", 9),
          ("txPauseCFCDeltaMax", 10),
          ("txPauseCFCDeltaMin", 11),
          ("txPausePFCDelta", 12),
          ("txPausePFCDeltaAvg", 13),
          ("txPausePFCDeltaMax", 14),
          ("txPausePFCDeltaMin", 15))
    )


class CfprApAdaptorMenloHostPortStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("rxPauseCFCDelta", 0),
          ("rxPauseCFCDeltaAvg", 1),
          ("rxPauseCFCDeltaMax", 2),
          ("rxPauseCFCDeltaMin", 3),
          ("rxPausePFCDelta", 4),
          ("rxPausePFCDeltaAvg", 5),
          ("rxPausePFCDeltaMax", 6),
          ("rxPausePFCDeltaMin", 7),
          ("txPauseCFCDelta", 8),
          ("txPauseCFCDeltaAvg", 9),
          ("txPauseCFCDeltaMax", 10),
          ("txPauseCFCDeltaMin", 11),
          ("txPausePFCDelta", 12),
          ("txPausePFCDeltaAvg", 13),
          ("txPausePFCDeltaMax", 14),
          ("txPausePFCDeltaMin", 15))
    )


class CfprApAdaptorMenloMcpuErrorStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("correctableErrorsDelta", 0),
          ("correctableErrorsDeltaAvg", 1),
          ("correctableErrorsDeltaMax", 2),
          ("correctableErrorsDeltaMin", 3),
          ("popErrorsDelta", 4),
          ("popErrorsDeltaAvg", 5),
          ("popErrorsDeltaMax", 6),
          ("popErrorsDeltaMin", 7),
          ("pushErrorsDelta", 8),
          ("pushErrorsDeltaAvg", 9),
          ("pushErrorsDeltaMax", 10),
          ("pushErrorsDeltaMin", 11),
          ("uncorrectableErrorsDelta", 12),
          ("uncorrectableErrorsDeltaAvg", 13),
          ("uncorrectableErrorsDeltaMax", 14),
          ("uncorrectableErrorsDeltaMin", 15))
    )


class CfprApAdaptorMenloMcpuErrorStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("correctableErrorsDelta", 0),
          ("correctableErrorsDeltaAvg", 1),
          ("correctableErrorsDeltaMax", 2),
          ("correctableErrorsDeltaMin", 3),
          ("popErrorsDelta", 4),
          ("popErrorsDeltaAvg", 5),
          ("popErrorsDeltaMax", 6),
          ("popErrorsDeltaMin", 7),
          ("pushErrorsDelta", 8),
          ("pushErrorsDeltaAvg", 9),
          ("pushErrorsDeltaMax", 10),
          ("pushErrorsDeltaMin", 11),
          ("uncorrectableErrorsDelta", 12),
          ("uncorrectableErrorsDeltaAvg", 13),
          ("uncorrectableErrorsDeltaMax", 14),
          ("uncorrectableErrorsDeltaMin", 15))
    )


class CfprApAdaptorMenloMcpuStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("dropAclDelta", 0),
          ("dropAclDeltaAvg", 1),
          ("dropAclDeltaMax", 2),
          ("dropAclDeltaMin", 3),
          ("dropOverrunDelta", 4),
          ("dropOverrunDeltaAvg", 5),
          ("dropOverrunDeltaMax", 6),
          ("dropOverrunDeltaMin", 7),
          ("dropRuntDelta", 8),
          ("dropRuntDeltaAvg", 9),
          ("dropRuntDeltaMax", 10),
          ("dropRuntDeltaMin", 11),
          ("truncateOverrunDelta", 12),
          ("truncateOverrunDeltaAvg", 13),
          ("truncateOverrunDeltaMax", 14),
          ("truncateOverrunDeltaMin", 15))
    )


class CfprApAdaptorMenloMcpuStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("dropAclDelta", 0),
          ("dropAclDeltaAvg", 1),
          ("dropAclDeltaMax", 2),
          ("dropAclDeltaMin", 3),
          ("dropOverrunDelta", 4),
          ("dropOverrunDeltaAvg", 5),
          ("dropOverrunDeltaMax", 6),
          ("dropOverrunDeltaMin", 7),
          ("dropRuntDelta", 8),
          ("dropRuntDeltaAvg", 9),
          ("dropRuntDeltaMax", 10),
          ("dropRuntDeltaMin", 11),
          ("truncateOverrunDelta", 12),
          ("truncateOverrunDeltaAvg", 13),
          ("truncateOverrunDeltaMax", 14),
          ("truncateOverrunDeltaMin", 15))
    )


class CfprApAdaptorMenloNetEgStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("dropCmdDelta", 0),
          ("dropCmdDeltaAvg", 1),
          ("dropCmdDeltaMax", 2),
          ("dropCmdDeltaMin", 3),
          ("dropLifCfgInvalidDelta", 4),
          ("dropLifCfgInvalidDeltaAvg", 5),
          ("dropLifCfgInvalidDeltaMax", 6),
          ("dropLifCfgInvalidDeltaMin", 7),
          ("dropLifMapNoHitDelta", 8),
          ("dropLifMapNoHitDeltaAvg", 9),
          ("dropLifMapNoHitDeltaMax", 10),
          ("dropLifMapNoHitDeltaMin", 11),
          ("dropSrcBindDelta", 12),
          ("dropSrcBindDeltaAvg", 13),
          ("dropSrcBindDeltaMax", 14),
          ("dropSrcBindDeltaMin", 15),
          ("learnReqDropDelta", 16),
          ("learnReqDropDeltaAvg", 17),
          ("learnReqDropDeltaMax", 18),
          ("learnReqDropDeltaMin", 19))
    )


class CfprApAdaptorMenloNetEgStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("dropCmdDelta", 0),
          ("dropCmdDeltaAvg", 1),
          ("dropCmdDeltaMax", 2),
          ("dropCmdDeltaMin", 3),
          ("dropLifCfgInvalidDelta", 4),
          ("dropLifCfgInvalidDeltaAvg", 5),
          ("dropLifCfgInvalidDeltaMax", 6),
          ("dropLifCfgInvalidDeltaMin", 7),
          ("dropLifMapNoHitDelta", 8),
          ("dropLifMapNoHitDeltaAvg", 9),
          ("dropLifMapNoHitDeltaMax", 10),
          ("dropLifMapNoHitDeltaMin", 11),
          ("dropSrcBindDelta", 12),
          ("dropSrcBindDeltaAvg", 13),
          ("dropSrcBindDeltaMax", 14),
          ("dropSrcBindDeltaMin", 15),
          ("learnReqDropDelta", 16),
          ("learnReqDropDeltaAvg", 17),
          ("learnReqDropDeltaMax", 18),
          ("learnReqDropDeltaMin", 19))
    )


class CfprApAdaptorMenloNetInStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("dropFcLifInvalidDelta", 0),
          ("dropFcLifInvalidDeltaAvg", 1),
          ("dropFcLifInvalidDeltaMax", 2),
          ("dropFcLifInvalidDeltaMin", 3),
          ("dropFcMulticastDelta", 4),
          ("dropFcMulticastDeltaAvg", 5),
          ("dropFcMulticastDeltaMax", 6),
          ("dropFcMulticastDeltaMin", 7),
          ("dropNullPifDelta", 8),
          ("dropNullPifDeltaAvg", 9),
          ("dropNullPifDeltaMax", 10),
          ("dropNullPifDeltaMin", 11),
          ("fwdLookupNoHitDelta", 12),
          ("fwdLookupNoHitDeltaAvg", 13),
          ("fwdLookupNoHitDeltaMax", 14),
          ("fwdLookupNoHitDeltaMin", 15))
    )


class CfprApAdaptorMenloNetInStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("dropFcLifInvalidDelta", 0),
          ("dropFcLifInvalidDeltaAvg", 1),
          ("dropFcLifInvalidDeltaMax", 2),
          ("dropFcLifInvalidDeltaMin", 3),
          ("dropFcMulticastDelta", 4),
          ("dropFcMulticastDeltaAvg", 5),
          ("dropFcMulticastDeltaMax", 6),
          ("dropFcMulticastDeltaMin", 7),
          ("dropNullPifDelta", 8),
          ("dropNullPifDeltaAvg", 9),
          ("dropNullPifDeltaMax", 10),
          ("dropNullPifDeltaMin", 11),
          ("fwdLookupNoHitDelta", 12),
          ("fwdLookupNoHitDeltaAvg", 13),
          ("fwdLookupNoHitDeltaMax", 14),
          ("fwdLookupNoHitDeltaMin", 15))
    )


class CfprApAdaptorMenloQErrorStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("correctableErrorsDelta", 0),
          ("correctableErrorsDeltaAvg", 1),
          ("correctableErrorsDeltaMax", 2),
          ("correctableErrorsDeltaMin", 3),
          ("popErrorsDelta", 4),
          ("popErrorsDeltaAvg", 5),
          ("popErrorsDeltaMax", 6),
          ("popErrorsDeltaMin", 7),
          ("pushErrorsDelta", 8),
          ("pushErrorsDeltaAvg", 9),
          ("pushErrorsDeltaMax", 10),
          ("pushErrorsDeltaMin", 11),
          ("uncorrectableErrorsDelta", 12),
          ("uncorrectableErrorsDeltaAvg", 13),
          ("uncorrectableErrorsDeltaMax", 14),
          ("uncorrectableErrorsDeltaMin", 15))
    )


class CfprApAdaptorMenloQErrorStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("correctableErrorsDelta", 0),
          ("correctableErrorsDeltaAvg", 1),
          ("correctableErrorsDeltaMax", 2),
          ("correctableErrorsDeltaMin", 3),
          ("popErrorsDelta", 4),
          ("popErrorsDeltaAvg", 5),
          ("popErrorsDeltaMax", 6),
          ("popErrorsDeltaMin", 7),
          ("pushErrorsDelta", 8),
          ("pushErrorsDeltaAvg", 9),
          ("pushErrorsDeltaMax", 10),
          ("pushErrorsDeltaMin", 11),
          ("uncorrectableErrorsDelta", 12),
          ("uncorrectableErrorsDeltaAvg", 13),
          ("uncorrectableErrorsDeltaMax", 14),
          ("uncorrectableErrorsDeltaMin", 15))
    )


class CfprApAdaptorMenloQStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("dropOverrunN0Delta", 0),
          ("dropOverrunN0DeltaAvg", 1),
          ("dropOverrunN0DeltaMax", 2),
          ("dropOverrunN0DeltaMin", 3),
          ("dropOverrunN1Delta", 4),
          ("dropOverrunN1DeltaAvg", 5),
          ("dropOverrunN1DeltaMax", 6),
          ("dropOverrunN1DeltaMin", 7),
          ("truncateOverrunN0Delta", 8),
          ("truncateOverrunN0DeltaAvg", 9),
          ("truncateOverrunN0DeltaMax", 10),
          ("truncateOverrunN0DeltaMin", 11),
          ("truncateOverrunN1Delta", 12),
          ("truncateOverrunN1DeltaAvg", 13),
          ("truncateOverrunN1DeltaMax", 14),
          ("truncateOverrunN1DeltaMin", 15))
    )


class CfprApAdaptorMenloQStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("dropOverrunN0Delta", 0),
          ("dropOverrunN0DeltaAvg", 1),
          ("dropOverrunN0DeltaMax", 2),
          ("dropOverrunN0DeltaMin", 3),
          ("dropOverrunN1Delta", 4),
          ("dropOverrunN1DeltaAvg", 5),
          ("dropOverrunN1DeltaMax", 6),
          ("dropOverrunN1DeltaMin", 7),
          ("truncateOverrunN0Delta", 8),
          ("truncateOverrunN0DeltaAvg", 9),
          ("truncateOverrunN0DeltaMax", 10),
          ("truncateOverrunN0DeltaMin", 11),
          ("truncateOverrunN1Delta", 12),
          ("truncateOverrunN1DeltaAvg", 13),
          ("truncateOverrunN1DeltaMax", 14),
          ("truncateOverrunN1DeltaMin", 15))
    )


class CfprApAdaptorMenloQueueStatsComponent(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("cpu", 1),
          ("eth", 2),
          ("fc", 3),
          ("n", 4))
    )



class CfprApAdaptorMenloStatsIndex(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("n0", 1),
          ("n1", 2),
          ("n0A", 3),
          ("n0B", 4),
          ("n1A", 5),
          ("n1B", 6))
    )



class CfprApAdaptorMgmtCapMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("partial", 2))
    )



class CfprApAdaptorMgmtCapOperPowerRequirement(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("standby", 1),
          ("full", 2))
    )



class CfprApAdaptorMgmtCapRebootActionOnDestructive(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("host", 1),
          ("adaptor", 2))
    )



class CfprApAdaptorNwMgmtCapApi(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("menlo", 1),
          ("palo", 2))
    )



class CfprApAdaptorNwMgmtCapMgmtTransport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("l2", 0),
          ("l3", 1))
    )



class CfprApAdaptorOffloadMethod(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("virtual", 0),
          ("physical", 1),
          ("none", 2))
    )



class CfprApAdaptorPIoEpIfType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("physical", 1),
          ("aggregation", 2),
          ("virtual", 3),
          ("fabric", 4))
    )



class CfprApAdaptorProtocolProfileConnectionTimeOut(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )



class CfprApAdaptorProtocolProfileLunBusyRetryCount(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 60),
    )



class CfprApAdaptorPurpose(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unused", 0),
          ("general", 1),
          ("management", 2),
          ("utility", 3))
    )



class CfprApAdaptorReachability(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("a", 0),
          ("b", 1),
          ("unmanaged", 7))
    )


class CfprApAdaptorRssProfileReceiveSideScaling(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApAdaptorSanCapHostNvram(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("full", 2))
    )



class CfprApAdaptorServiceState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("outOfService", 0),
          ("inService", 1))
    )



class CfprApAdaptorUnitId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5000),
    )



class CfprApAdaptorUnitExtnId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5000),
    )



class CfprApAdaptorVnicStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("bytesRxDelta", 0),
          ("bytesRxDeltaAvg", 1),
          ("bytesRxDeltaMax", 2),
          ("bytesRxDeltaMin", 3),
          ("bytesTxDelta", 4),
          ("bytesTxDeltaAvg", 5),
          ("bytesTxDeltaMax", 6),
          ("bytesTxDeltaMin", 7),
          ("droppedRxDelta", 8),
          ("droppedRxDeltaAvg", 9),
          ("droppedRxDeltaMax", 10),
          ("droppedRxDeltaMin", 11),
          ("droppedTxDelta", 12),
          ("droppedTxDeltaAvg", 13),
          ("droppedTxDeltaMax", 14),
          ("droppedTxDeltaMin", 15),
          ("errorsRxDelta", 16),
          ("errorsRxDeltaAvg", 17),
          ("errorsRxDeltaMax", 18),
          ("errorsRxDeltaMin", 19),
          ("errorsTxDelta", 20),
          ("errorsTxDeltaAvg", 21),
          ("errorsTxDeltaMax", 22),
          ("errorsTxDeltaMin", 23),
          ("packetsRxDelta", 24),
          ("packetsRxDeltaAvg", 25),
          ("packetsRxDeltaMax", 26),
          ("packetsRxDeltaMin", 27),
          ("packetsTxDelta", 28),
          ("packetsTxDeltaAvg", 29),
          ("packetsTxDeltaMax", 30),
          ("packetsTxDeltaMin", 31))
    )


class CfprApAdaptorVnicStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("bytesRxDelta", 0),
          ("bytesRxDeltaAvg", 1),
          ("bytesRxDeltaMax", 2),
          ("bytesRxDeltaMin", 3),
          ("bytesTxDelta", 4),
          ("bytesTxDeltaAvg", 5),
          ("bytesTxDeltaMax", 6),
          ("bytesTxDeltaMin", 7),
          ("droppedRxDelta", 8),
          ("droppedRxDeltaAvg", 9),
          ("droppedRxDeltaMax", 10),
          ("droppedRxDeltaMin", 11),
          ("droppedTxDelta", 12),
          ("droppedTxDeltaAvg", 13),
          ("droppedTxDeltaMax", 14),
          ("droppedTxDeltaMin", 15),
          ("errorsRxDelta", 16),
          ("errorsRxDeltaAvg", 17),
          ("errorsRxDeltaMax", 18),
          ("errorsRxDeltaMin", 19),
          ("errorsTxDelta", 20),
          ("errorsTxDeltaAvg", 21),
          ("errorsTxDeltaMax", 22),
          ("errorsTxDeltaMin", 23),
          ("packetsRxDelta", 24),
          ("packetsRxDeltaAvg", 25),
          ("packetsRxDeltaMax", 26),
          ("packetsRxDeltaMin", 27),
          ("packetsTxDelta", 28),
          ("packetsTxDeltaAvg", 29),
          ("packetsTxDeltaMax", 30),
          ("packetsTxDeltaMin", 31))
    )


class CfprApAddressMACMask(TextualConvention, Counter64):
    status = "current"


class CfprApAddressType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("operational", 1),
          ("floating", 2))
    )



class CfprApAddressUIDSuffxMask(TextualConvention, Counter64):
    status = "current"


class CfprApAddressWWNMask(TextualConvention, Counter64):
    status = "current"


class CfprApApplicationDownloaderFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              332)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("download", 332))
    )



class CfprApApplicationDownloaderFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              332,
              333,
              334,
              548,
              549)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("downloadBegin", 332),
          ("downloadLocal", 333),
          ("downloadUnpackLocal", 334),
          ("downloadFail", 548),
          ("downloadSuccess", 549))
    )



class CfprApApplicationDownloaderFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              332)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("download", 332))
    )



class CfprApBiosBootDevErrorCode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("success", 0),
          ("failure", 1))
    )



class CfprApBiosBootDevGrpType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              6,
              16,
              99,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              128)
        )
    )
    namedValues = NamedValues(
        *(("systemBootOrder", 0),
          ("fddOrder", 1),
          ("hddOrder", 2),
          ("cdOrder", 3),
          ("networkDeviceOrder", 6),
          ("internalEfiShell", 16),
          ("unknownDeviceOrder", 99),
          ("localStorageAnyDeviceOrder", 100),
          ("sanDeviceOrder", 101),
          ("sanAnyDeviceOrder", 102),
          ("internalUsbDeviceOrder", 103),
          ("externalUsbDeviceOrder", 104),
          ("sdcardDeviceOrder", 105),
          ("lanAnyDeviceOrder", 106),
          ("uefiTargetDeviceOrder", 107),
          ("iscsiDeviceOrder", 108),
          ("iscsiAnyDeviceOrder", 109),
          ("cimcVmediaCddDeviceOrder", 110),
          ("cimcVmediaHddDeviceOrder", 111),
          ("cimcVmediaFddDeviceOrder", 112),
          ("kvmVmediaCddDeviceOrder", 113),
          ("kvmVmediaHddDeviceOrder", 114),
          ("kvmVmediaFddDeviceOrder", 115),
          ("bevOrder", 128))
    )



class CfprApBiosBootDevOrder(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("n1", 1),
          ("n2", 2),
          ("n3", 3),
          ("n4", 4),
          ("n5", 5),
          ("n6", 6),
          ("n7", 7))
    )



class CfprApBiosDefaultAction(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )



class CfprApBiosSupportedAction(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )



class CfprApBiosVfACPI10SupportVpACPI10Support(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              159,
              160)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 159),
          ("enabled", 160))
    )



class CfprApBiosVfAllUSBDevicesVpAllUSBDevices(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              300,
              301)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 300),
          ("enabled", 301))
    )



class CfprApBiosVfAltitudeVpAltitude(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              361,
              362,
              363,
              364,
              365)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("auto", 361),
          ("n300M", 362),
          ("n900M", 363),
          ("n1500M", 364),
          ("n3000M", 365))
    )



class CfprApBiosVfAssertNMIOnPERRVpAssertNMIOnPERR(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              98,
              99)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 98),
          ("enabled", 99))
    )



class CfprApBiosVfAssertNMIOnSERRVpAssertNMIOnSERR(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              96,
              97)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 96),
          ("enabled", 97))
    )



class CfprApBiosVfBootOptionRetryVpBootOptionRetry(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              129,
              130)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 129),
          ("enabled", 130))
    )



class CfprApBiosVfCPUPerformanceVpCPUPerformance(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              282,
              283,
              284)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("enterprise", 282),
          ("highThroughput", 283),
          ("hpc", 284))
    )



class CfprApBiosVfConsoleRedirectionVpBaudRate(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              110,
              111,
              112,
              113,
              114)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("n9600", 110),
          ("n19200", 111),
          ("n38400", 112),
          ("n57600", 113),
          ("n115200", 114))
    )



class CfprApBiosVfConsoleRedirectionVpConsoleRedirection(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              103,
              104,
              105,
              106,
              107)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 103),
          ("enabled", 104),
          ("serialPortA", 105),
          ("serialPortB", 106),
          ("com0", 107))
    )



class CfprApBiosVfConsoleRedirectionVpFlowControl(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              108,
              109)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("none", 108),
          ("rtsCts", 109))
    )



class CfprApBiosVfConsoleRedirectionVpLegacyOSRedirection(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              119,
              120)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 119),
          ("enabled", 120))
    )



class CfprApBiosVfConsoleRedirectionVpPuttyKeyPad(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              121,
              122,
              123,
              124,
              125,
              126)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("vt100", 121),
          ("linux", 122),
          ("xtermr6", 123),
          ("sco", 124),
          ("escn", 125),
          ("vt400", 126))
    )



class CfprApBiosVfConsoleRedirectionVpTerminalType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              115,
              116,
              117,
              118)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("pcAnsi", 115),
          ("vt100", 116),
          ("vt100Plus", 117),
          ("vtUtf8", 118))
    )



class CfprApBiosVfCoreMultiProcessingVpCoreMultiProcessing(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("all", 29),
          ("n1", 30),
          ("n2", 31),
          ("n3", 32),
          ("n4", 33),
          ("n5", 34),
          ("n6", 35),
          ("n7", 36),
          ("n8", 37),
          ("n9", 38),
          ("n10", 39),
          ("n11", 40),
          ("n12", 41),
          ("n13", 42),
          ("n14", 43),
          ("n15", 44),
          ("n16", 45),
          ("n17", 46),
          ("n18", 47))
    )



class CfprApBiosVfDRAMClockThrottlingVpDRAMClockThrottling(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              346,
              347,
              348,
              349)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("auto", 346),
          ("balanced", 347),
          ("performance", 348),
          ("energyEfficient", 349))
    )



class CfprApBiosVfDirectCacheAccessVpDirectCacheAccess(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              62,
              63)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 62),
          ("enabled", 63))
    )



class CfprApBiosVfDramRefreshRateVpDramRefreshRate(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              17,
              18,
              19,
              20,
              21)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("n1x", 17),
          ("n2x", 18),
          ("n3x", 19),
          ("n4x", 20),
          ("auto", 21))
    )



class CfprApBiosVfEnhancedIntelSpeedStepTechVpEnhancedIntelSpeedStepTech(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              22,
              23)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 22),
          ("enabled", 23))
    )



class CfprApBiosVfExecuteDisableBitVpExecuteDisableBit(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              48,
              49)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 48),
          ("enabled", 49))
    )



class CfprApBiosVfFRB2TimerVpFRB2Timer(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              331,
              332)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 331),
          ("enabled", 332))
    )



class CfprApBiosVfFrequencyFloorOverrideVpFrequencyFloorOverride(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              341,
              342)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 341),
          ("enabled", 342))
    )



class CfprApBiosVfFrontPanelLockoutVpFrontPanelLockout(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              94,
              95)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 94),
          ("enabled", 95))
    )



class CfprApBiosVfIntelEntrySASRAIDModuleVpSASRAID(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              74,
              75)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 74),
          ("enabled", 75))
    )



class CfprApBiosVfIntelEntrySASRAIDModuleVpSASRAIDModule(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              76,
              77)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("itIrRaid", 76),
          ("intelEsrtii", 77))
    )



class CfprApBiosVfIntelHyperThreadingTechVpIntelHyperThreadingTech(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              24,
              25)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 24),
          ("enabled", 25))
    )



class CfprApBiosVfIntelTurboBoostTechVpIntelTurboBoostTech(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 1),
          ("enabled", 2))
    )



class CfprApBiosVfIntelVTForDirectedIOVpIntelVTDATSSupport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              58,
              59)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 58),
          ("enabled", 59))
    )



class CfprApBiosVfIntelVTForDirectedIOVpIntelVTDCoherencySupport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              56,
              57)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 56),
          ("enabled", 57))
    )



class CfprApBiosVfIntelVTForDirectedIOVpIntelVTDInterruptRemapping(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              54,
              55)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 54),
          ("enabled", 55))
    )



class CfprApBiosVfIntelVTForDirectedIOVpIntelVTDPassThroughDMASupport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              60,
              61)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 60),
          ("enabled", 61))
    )



class CfprApBiosVfIntelVTForDirectedIOVpIntelVTForDirectedIO(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              52,
              53)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 52),
          ("enabled", 53))
    )



class CfprApBiosVfIntelVirtualizationTechnologyVpIntelVirtTechnology(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              50,
              51)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 50),
          ("enabled", 51))
    )



class CfprApBiosVfInterleaveConfigurationVpChannelInterleaving(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("auto", 7),
          ("n1Way", 8),
          ("n2Way", 9),
          ("n3Way", 10),
          ("n4Way", 11))
    )



class CfprApBiosVfInterleaveConfigurationVpMemoryInterleaving(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("numa1WayNodeInterleave", 3),
          ("n2WayNodeInterleave", 4),
          ("n4WayNodeInterleave", 5),
          ("n8WayInterleavingInterSocket", 6))
    )



class CfprApBiosVfInterleaveConfigurationVpRankInterleaving(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("auto", 12),
          ("n1Way", 13),
          ("n2Way", 14),
          ("n4Way", 15),
          ("n8Way", 16))
    )



class CfprApBiosVfLocalX2ApicVpLocalX2Apic(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              26,
              27,
              28)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("xapic", 26),
          ("x2apic", 27),
          ("auto", 28))
    )



class CfprApBiosVfLvDIMMSupportVpLvDDRMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              161,
              162,
              163)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("powerSavingMode", 161),
          ("performanceMode", 162),
          ("auto", 163))
    )



class CfprApBiosVfMaxVariableMTRRSettingVpProcessorMtrr(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              285,
              286)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("autoMax", 285),
          ("n8", 286))
    )



class CfprApBiosVfMaximumMemoryBelow4GBVpMaximumMemoryBelow4GB(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              88,
              89)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 88),
          ("enabled", 89))
    )



class CfprApBiosVfMemoryMappedIOAbove4GBVpMemoryMappedIOAbove4GB(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              90,
              91)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 90),
          ("enabled", 91))
    )



class CfprApBiosVfMirroringModeVpMirroringMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              70,
              71)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("interSocket", 70),
          ("intraSocket", 71))
    )



class CfprApBiosVfNUMAOptimizedVpNUMAOptimized(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              72,
              73)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 72),
          ("enabled", 73))
    )



class CfprApBiosVfOSBootWatchdogTimerVpOSBootWatchdogTimer(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              151,
              152)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 151),
          ("enabled", 152))
    )



class CfprApBiosVfOSBootWatchdogTimerPolicyVpOSBootWatchdogTimerPolicy(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              153,
              154)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("reset", 153),
          ("powerOff", 154))
    )



class CfprApBiosVfOSBootWatchdogTimerTimeoutVpOSBootWatchdogTimerTimeout(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              155,
              156,
              157,
              158)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("n5Minutes", 155),
          ("n10Minutes", 156),
          ("n15Minutes", 157),
          ("n20Minutes", 158))
    )



class CfprApBiosVfOnboardSATAControllerVpOnboardSATAController(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              78,
              79)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 78),
          ("enabled", 79))
    )



class CfprApBiosVfOnboardSATAControllerVpSATAMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              80,
              81,
              82,
              83)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("enhanced", 80),
          ("ahci", 81),
          ("swRaid", 82),
          ("compatibility", 83))
    )



class CfprApBiosVfOnboardStorageVpOnboardSCUStorageSupport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              84,
              85)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 84),
          ("enabled", 85))
    )



class CfprApBiosVfOptionROMEnableVpState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              166,
              167,
              168,
              169)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 166),
          ("enabled", 167),
          ("uefiOnly", 168),
          ("legacyOnly", 169))
    )



class CfprApBiosVfOptionROMLoadVpLoad(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              164,
              165)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("enabled", 164),
          ("disabled", 165))
    )



class CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot10LinkSpeed(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              277,
              278,
              279,
              280,
              281)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("gen1", 277),
          ("gen2", 278),
          ("gen3", 279),
          ("auto", 280),
          ("disabled", 281))
    )



class CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot1LinkSpeed(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              232,
              233,
              234,
              235,
              236)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("gen1", 232),
          ("gen2", 233),
          ("gen3", 234),
          ("auto", 235),
          ("disabled", 236))
    )



class CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot2LinkSpeed(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              237,
              238,
              239,
              240,
              241)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("gen1", 237),
          ("gen2", 238),
          ("gen3", 239),
          ("auto", 240),
          ("disabled", 241))
    )



class CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot3LinkSpeed(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              242,
              243,
              244,
              245,
              246)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("gen1", 242),
          ("gen2", 243),
          ("gen3", 244),
          ("auto", 245),
          ("disabled", 246))
    )



class CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot4LinkSpeed(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              247,
              248,
              249,
              250,
              251)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("gen1", 247),
          ("gen2", 248),
          ("gen3", 249),
          ("auto", 250),
          ("disabled", 251))
    )



class CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot5LinkSpeed(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              252,
              253,
              254,
              255,
              256)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("gen1", 252),
          ("gen2", 253),
          ("gen3", 254),
          ("auto", 255),
          ("disabled", 256))
    )



class CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot6LinkSpeed(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              257,
              258,
              259,
              260,
              261)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("gen1", 257),
          ("gen2", 258),
          ("gen3", 259),
          ("auto", 260),
          ("disabled", 261))
    )



class CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot7LinkSpeed(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              262,
              263,
              264,
              265,
              266)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("gen1", 262),
          ("gen2", 263),
          ("gen3", 264),
          ("auto", 265),
          ("disabled", 266))
    )



class CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot8LinkSpeed(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              267,
              268,
              269,
              270,
              271)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("gen1", 267),
          ("gen2", 268),
          ("gen3", 269),
          ("auto", 270),
          ("disabled", 271))
    )



class CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot9LinkSpeed(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              272,
              273,
              274,
              275,
              276)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("gen1", 272),
          ("gen2", 273),
          ("gen3", 274),
          ("auto", 275),
          ("disabled", 276))
    )



class CfprApBiosVfPCISlotOptionROMEnableVpPCIeSlotHBAOptionROM(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              220,
              221,
              222,
              223)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 220),
          ("enabled", 221),
          ("uefiOnly", 222),
          ("legacyOnly", 223))
    )



class CfprApBiosVfPCISlotOptionROMEnableVpPCIeSlotMLOMOptionROM(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              216,
              217,
              218,
              219)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 216),
          ("enabled", 217),
          ("uefiOnly", 218),
          ("legacyOnly", 219))
    )



class CfprApBiosVfPCISlotOptionROMEnableVpPCIeSlotN1OptionROM(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              224,
              225,
              226,
              227)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 224),
          ("enabled", 225),
          ("uefiOnly", 226),
          ("legacyOnly", 227))
    )



class CfprApBiosVfPCISlotOptionROMEnableVpPCIeSlotN2OptionROM(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              228,
              229,
              230,
              231)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 228),
          ("enabled", 229),
          ("uefiOnly", 230),
          ("legacyOnly", 231))
    )



class CfprApBiosVfPCISlotOptionROMEnableVpPCIeSlotSASOptionROM(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              170,
              171,
              172,
              173)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 170),
          ("enabled", 171),
          ("uefiOnly", 172),
          ("legacyOnly", 173))
    )



class CfprApBiosVfPCISlotOptionROMEnableVpSlot10State(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              210,
              211,
              212,
              213)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 210),
          ("enabled", 211),
          ("uefiOnly", 212),
          ("legacyOnly", 213))
    )



class CfprApBiosVfPCISlotOptionROMEnableVpSlot1State(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              174,
              175,
              176,
              177)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 174),
          ("enabled", 175),
          ("uefiOnly", 176),
          ("legacyOnly", 177))
    )



class CfprApBiosVfPCISlotOptionROMEnableVpSlot2State(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              178,
              179,
              180,
              181)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 178),
          ("enabled", 179),
          ("uefiOnly", 180),
          ("legacyOnly", 181))
    )



class CfprApBiosVfPCISlotOptionROMEnableVpSlot3State(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              182,
              183,
              184,
              185)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 182),
          ("enabled", 183),
          ("uefiOnly", 184),
          ("legacyOnly", 185))
    )



class CfprApBiosVfPCISlotOptionROMEnableVpSlot4State(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              186,
              187,
              188,
              189)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 186),
          ("enabled", 187),
          ("uefiOnly", 188),
          ("legacyOnly", 189))
    )



class CfprApBiosVfPCISlotOptionROMEnableVpSlot5State(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              190,
              191,
              192,
              193)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 190),
          ("enabled", 191),
          ("uefiOnly", 192),
          ("legacyOnly", 193))
    )



class CfprApBiosVfPCISlotOptionROMEnableVpSlot6State(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              194,
              195,
              196,
              197)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 194),
          ("enabled", 195),
          ("uefiOnly", 196),
          ("legacyOnly", 197))
    )



class CfprApBiosVfPCISlotOptionROMEnableVpSlot7State(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              198,
              199,
              200,
              201)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 198),
          ("enabled", 199),
          ("uefiOnly", 200),
          ("legacyOnly", 201))
    )



class CfprApBiosVfPCISlotOptionROMEnableVpSlot8State(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              202,
              203,
              204,
              205)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 202),
          ("enabled", 203),
          ("uefiOnly", 204),
          ("legacyOnly", 205))
    )



class CfprApBiosVfPCISlotOptionROMEnableVpSlot9State(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              206,
              207,
              208,
              209)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 206),
          ("enabled", 207),
          ("uefiOnly", 208),
          ("legacyOnly", 209))
    )



class CfprApBiosVfPCISlotOptionROMEnableVpSlotMezzState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              214,
              215)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 214),
          ("enabled", 215))
    )



class CfprApBiosVfPOSTErrorPauseVpPOSTErrorPause(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              138,
              139)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 138),
          ("enabled", 139))
    )



class CfprApBiosVfPSTATECoordinationVpPSTATECoordination(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              343,
              344,
              345)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("hwAll", 343),
          ("swAll", 344),
          ("swAny", 345))
    )



class CfprApBiosVfPackageCStateLimitVpPackageCStateLimit(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              295,
              296,
              297,
              298,
              299)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("noLimit", 295),
          ("c0", 296),
          ("c1", 297),
          ("c3", 298),
          ("c6", 299))
    )



class CfprApBiosVfProcessorC1EVpProcessorC1E(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              149,
              150)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 149),
          ("enabled", 150))
    )



class CfprApBiosVfProcessorC3ReportVpProcessorC3Report(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              140,
              141,
              142)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 140),
          ("acpiC2", 141),
          ("acpiC3", 142))
    )



class CfprApBiosVfProcessorC6ReportVpProcessorC6Report(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              143,
              144)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 143),
          ("enabled", 144))
    )



class CfprApBiosVfProcessorC7ReportVpProcessorC7Report(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              147,
              148)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 147),
          ("enabled", 148))
    )



class CfprApBiosVfProcessorCStateVpProcessorCState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              145,
              146)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 145),
          ("enabled", 146))
    )



class CfprApBiosVfProcessorEnergyConfigurationVpEnergyPerformance(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              337,
              338,
              339,
              340)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("performance", 337),
          ("balancedPerformance", 338),
          ("balancedEnergy", 339),
          ("energyEfficient", 340))
    )



class CfprApBiosVfProcessorEnergyConfigurationVpPowerTechnology(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              333,
              334,
              335,
              336)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 333),
          ("energyEfficient", 334),
          ("performance", 335),
          ("custom", 336))
    )



class CfprApBiosVfProcessorPrefetchConfigVpAdjacentCacheLinePrefetcher(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              318,
              319)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 318),
          ("enabled", 319))
    )



class CfprApBiosVfProcessorPrefetchConfigVpDCUIPPrefetcher(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              322,
              323)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 322),
          ("enabled", 323))
    )



class CfprApBiosVfProcessorPrefetchConfigVpDCUStreamerPrefetch(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              320,
              321)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 320),
          ("enabled", 321))
    )



class CfprApBiosVfProcessorPrefetchConfigVpHardwarePrefetcher(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              316,
              317)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 316),
          ("enabled", 317))
    )



class CfprApBiosVfQPILinkFrequencySelectVpQPILinkFrequencySelect(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              350,
              351,
              352,
              353)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("n6400", 350),
          ("n7200", 351),
          ("n8000", 352),
          ("auto", 353))
    )



class CfprApBiosVfQuietBootVpQuietBoot(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              136,
              137)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 136),
          ("enabled", 137))
    )



class CfprApBiosVfResumeOnACPowerLossVpResumeOnACPowerLoss(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              100,
              101,
              102)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("stayOff", 100),
          ("lastState", 101),
          ("reset", 102))
    )



class CfprApBiosVfScrubPoliciesVpDemandScrub(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              326,
              327)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 326),
          ("enabled", 327))
    )



class CfprApBiosVfScrubPoliciesVpPatrolScrub(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              324,
              325)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 324),
          ("enabled", 325))
    )



class CfprApBiosVfSelectMemoryRASConfigurationVpSelectMemoryRASConf(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              64,
              65,
              66,
              67)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("maximumPerformance", 64),
          ("mirroring", 65),
          ("lockstep", 66),
          ("sparing", 67))
    )



class CfprApBiosVfSerialPortAEnableVpSerialPortAEnable(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              86,
              87)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 86),
          ("enabled", 87))
    )



class CfprApBiosVfSparingModeVpSparingMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              68,
              69)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("dimmSparing", 68),
          ("rankSparing", 69))
    )



class CfprApBiosVfSriovConfigVpSriov(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              92,
              93)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 92),
          ("enabled", 93))
    )



class CfprApBiosVfTPMSupportVpTPMSupport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              354,
              355)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 354),
          ("enabled", 355))
    )



class CfprApBiosVfUCSMBootModeControlVpUEFIBootMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              293,
              294)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 293),
          ("enabled", 294))
    )



class CfprApBiosVfUCSMBootOrderRuleControlVpUCSMBootOrderRule(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              291,
              292)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("strict", 291),
          ("loose", 292))
    )



class CfprApBiosVfUEFIOSUseLegacyVideoVpUEFIOSUseLegacyVideo(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              127,
              128)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 127),
          ("enabled", 128))
    )



class CfprApBiosVfUSBBootConfigVpLegacyUSBSupport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              133,
              134,
              135)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 133),
          ("enabled", 134),
          ("auto", 135))
    )



class CfprApBiosVfUSBBootConfigVpMakeDeviceNonBootable(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              131,
              132)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 131),
          ("enabled", 132))
    )



class CfprApBiosVfUSBConfigurationVpLegacyUSBSupport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              358,
              359,
              360)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 358),
          ("enabled", 359),
          ("auto", 360))
    )



class CfprApBiosVfUSBConfigurationVpXHCIMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              356,
              357)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 356),
          ("enabled", 357))
    )



class CfprApBiosVfUSBFrontPanelAccessLockVpUSBFrontPanelLock(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              289,
              290)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 289),
          ("enabled", 290))
    )



class CfprApBiosVfUSBPortConfigurationVpPort6064Emulation(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              302,
              303)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 302),
          ("enabled", 303))
    )



class CfprApBiosVfUSBPortConfigurationVpUSBPortFront(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              306,
              307)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 306),
          ("enabled", 307))
    )



class CfprApBiosVfUSBPortConfigurationVpUSBPortInternal(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              308,
              309)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 308),
          ("enabled", 309))
    )



class CfprApBiosVfUSBPortConfigurationVpUSBPortKVM(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              310,
              311)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 310),
          ("enabled", 311))
    )



class CfprApBiosVfUSBPortConfigurationVpUSBPortRear(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              304,
              305)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 304),
          ("enabled", 305))
    )



class CfprApBiosVfUSBPortConfigurationVpUSBPortSDCard(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              314,
              315)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 314),
          ("enabled", 315))
    )



class CfprApBiosVfUSBPortConfigurationVpUSBPortVMedia(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              312,
              313)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("disabled", 312),
          ("enabled", 313))
    )



class CfprApBiosVfUSBSysIdlePowerOptimizingSettingVpUSBIdlePowerOptimize(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              287,
              288)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("highPerformance", 287),
          ("lowerIdlePower", 288))
    )



class CfprApBiosVfVGAPriorityVpVGAPriority(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              328,
              329,
              330)
        )
    )
    namedValues = NamedValues(
        *(("platformRecommended", 0),
          ("onboard", 328),
          ("offboard", 329),
          ("onboardVgaDisabled", 330))
    )



class CfprApBmcSELCntEqptClassId(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              125,
              250,
              352)
        )
    )
    namedValues = NamedValues(
        *(("unspecified", 0),
          ("computeBoard", 125),
          ("memoryUnit", 250),
          ("processorUnit", 352))
    )



class CfprApBmcSELCntEqptInstIdPropId(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              673,
              1006)
        )
    )
    namedValues = NamedValues(
        *(("unspecified", 0),
          ("memoryUnitId", 673),
          ("processorUnitId", 1006))
    )



class CfprApBmcSELCntStatsClassId(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              544,
              545,
              546,
              547,
              941,
              1511)
        )
    )
    namedValues = NamedValues(
        *(("unspecified", 0),
          ("computePCIeFatalProtocolStats", 544),
          ("computePCIeFatalReceiveStats", 545),
          ("computePCIeFatalCompletionStats", 546),
          ("computePCIeFatalStats", 547),
          ("memoryErrorStats", 941),
          ("processorErrorStats", 1511))
    )



class CfprApCallhomeAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )



class CfprApCallhomeAlertGroup(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              100)
        )
    )
    namedValues = NamedValues(
        *(("diagnostic", 0),
          ("environmental", 1),
          ("unknown", 100))
    )



class CfprApCallhomeAlertGroups(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("system", 0),
          ("environmental", 1),
          ("linecard", 2),
          ("supervisor", 3),
          ("inventory", 4),
          ("test", 5),
          ("ciscoTac", 6),
          ("syslogPort", 7),
          ("license", 8),
          ("lifeCycle", 9),
          ("diagnostic", 10),
          ("smartLicense", 11))
    )


class CfprApCallhomeAlertLevel(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              100)
        )
    )
    namedValues = NamedValues(
        *(("debug", 0),
          ("normal", 1),
          ("notify", 2),
          ("warning", 3),
          ("minor", 4),
          ("major", 5),
          ("critical", 6),
          ("fatal", 7),
          ("unknown", 100))
    )



class CfprApCallhomeAlertMessageSubtype(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              100)
        )
    )
    namedValues = NamedValues(
        *(("nosubtype", 0),
          ("test", 1),
          ("full", 2),
          ("delta", 3),
          ("minor", 4),
          ("major", 5),
          ("goldnormal", 6),
          ("goldminor", 7),
          ("goldmajor", 8),
          ("unknown", 100))
    )



class CfprApCallhomeAlertMessageType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              100)
        )
    )
    namedValues = NamedValues(
        *(("inventory", 0),
          ("syslog", 1),
          ("test", 2),
          ("diag", 3),
          ("env", 4),
          ("conf", 5),
          ("telemetry", 6),
          ("unknown", 100))
    )



class CfprApCallhomeAlertThrottlingAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )



class CfprApCallhomeAnonymousReportingAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )



class CfprApCallhomeCallhomeProtocol(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("email", 0),
          ("https", 1),
          ("http", 2))
    )



class CfprApCallhomeEpConfigState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("ok", 0),
          ("notApplied", 1))
    )



class CfprApCallhomeEpFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              124)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configCallhome", 124))
    )



class CfprApCallhomeEpFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              124,
              125,
              126,
              550,
              551)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configCallhomeBegin", 124),
          ("configCallhomeSetLocal", 125),
          ("configCallhomeSetPeer", 126),
          ("configCallhomeFail", 550),
          ("configCallhomeSuccess", 551))
    )



class CfprApCallhomeEpFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              124)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configCallhome", 124))
    )



class CfprApCallhomeFormat(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4)
        )
    )
    namedValues = NamedValues(
        *(("xml", 1),
          ("fullTxt", 2),
          ("shortTxt", 4))
    )



class CfprApCallhomeHttpProxyEnable(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )



class CfprApCallhomeLevel(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("debug", 0),
          ("normal", 1),
          ("notification", 2),
          ("warning", 3),
          ("minor", 4),
          ("major", 5),
          ("critical", 6),
          ("fatal", 7),
          ("disaster", 8))
    )



class CfprApCallhomePolicyAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApCallhomeUrgency(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("emergency", 0),
          ("alert", 1),
          ("critical", 2),
          ("error", 3),
          ("warning", 4),
          ("notice", 5),
          ("info", 6),
          ("debug", 7))
    )



class CfprApCallhomeReportingType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("smartLicenseData", 0),
          ("smartCallHomeData", 1))
    )



class CfprApCapabilityAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("restart", 0),
          ("idle", 1))
    )



class CfprApCapabilityCatalogueFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              421,
              435)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("activateCatalog", 421),
          ("deployCatalogue", 435))
    )



class CfprApCapabilityCatalogueFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              421,
              422,
              423,
              424,
              425,
              426,
              427,
              428,
              435,
              436,
              437,
              438,
              552,
              553,
              554,
              555)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("activateCatalogBegin", 421),
          ("activateCatalogCopyCatFromRep", 422),
          ("activateCatalogUnpackLocal", 423),
          ("activateCatalogCopyExternalRepToRemote", 424),
          ("activateCatalogCopyRemote", 425),
          ("activateCatalogApplyCatalog", 426),
          ("activateCatalogRescanImages", 427),
          ("activateCatalogEvaluateStatus", 428),
          ("deployCatalogueBegin", 435),
          ("deployCatalogueSyncPortAGLocal", 436),
          ("deployCatalogueSyncPortAGRemote", 437),
          ("deployCatalogueFinalize", 438),
          ("activateCatalogFail", 552),
          ("activateCatalogSuccess", 553),
          ("deployCatalogueFail", 554),
          ("deployCatalogueSuccess", 555))
    )



class CfprApCapabilityCatalogueFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              421,
              435)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("activateCatalog", 421),
          ("deployCatalogue", 435))
    )



class CfprApCapabilityFeatureStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("supported", 0),
          ("unsupported", 1))
    )



class CfprApCapabilityMgmtExtensionFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              429)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("activateMgmtExt", 429))
    )



class CfprApCapabilityMgmtExtensionFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              429,
              430,
              431,
              432,
              433,
              434,
              556,
              557)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("activateMgmtExtBegin", 429),
          ("activateMgmtExtUnpackLocal", 430),
          ("activateMgmtExtCopyRemote", 431),
          ("activateMgmtExtApplyCatalog", 432),
          ("activateMgmtExtRescanImages", 433),
          ("activateMgmtExtEvaluateStatus", 434),
          ("activateMgmtExtFail", 556),
          ("activateMgmtExtSuccess", 557))
    )



class CfprApCapabilityMgmtExtensionFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              429)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("activateMgmtExt", 429))
    )



class CfprApCapabilityOperStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("init", 0),
          ("downloading", 1),
          ("downloaded", 2),
          ("applied", 3),
          ("failed", 4))
    )



class CfprApCapabilityPlatform(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ucs6100", 0),
          ("ucs6200", 1),
          ("ucs6324", 2))
    )



class CfprApCapabilityUpdaterFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              413)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updater", 413))
    )



class CfprApCapabilityUpdaterFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              413,
              414,
              415,
              416,
              417,
              418,
              419,
              420,
              558,
              559)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updaterBegin", 413),
          ("updaterLocal", 414),
          ("updaterUnpackLocal", 415),
          ("updaterDeleteLocal", 416),
          ("updaterCopyRemote", 417),
          ("updaterApply", 418),
          ("updaterRescanImages", 419),
          ("updaterEvaluateStatus", 420),
          ("updaterFail", 558),
          ("updaterSuccess", 559))
    )



class CfprApCapabilityUpdaterFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              413)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updater", 413))
    )



class CfprApChangeStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("modified", 0),
          ("created", 1),
          ("deleted", 2),
          ("intentDeletion", 3))
    )



class CfprApCimcvmediaDeviceType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("cdd", 1),
          ("hdd", 2))
    )



class CfprApCimcvmediaErrorType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("none", 1),
          ("genericFailure", 2),
          ("connectionTimeout", 3),
          ("connectionRejected", 4),
          ("authenticationFailed", 5),
          ("badPath", 6),
          ("badParam", 7),
          ("invalidVdiskUsage", 8),
          ("invalidVdiskType", 9),
          ("alreadyMapped", 10),
          ("imageStoreFull", 11),
          ("fileNotFound", 12),
          ("openRoFailed", 13),
          ("openRwFailed", 14),
          ("diskEjected", 15),
          ("diskIoFailure", 16),
          ("writeToReadonlyFile", 17),
          ("mountInUse", 18),
          ("invalidArgument", 19),
          ("imgageDeleted", 20),
          ("postmapError", 21))
    )



class CfprApCimcvmediaMountConfigRetryOnMountFail(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )



class CfprApCimcvmediaMountStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("mounting", 1),
          ("mounted", 2),
          ("unmounting", 3),
          ("notMounted", 4),
          ("mountFailed", 5),
          ("unmountFailed", 6))
    )



class CfprApCimcvmediaTransport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("nfs", 1),
          ("cifs", 2),
          ("http", 3),
          ("https", 4))
    )



class CfprApCommAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApCommChannel(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fullssl", 0),
          ("noencssl", 1),
          ("plain", 2))
    )



class CfprApCommCipherSuiteMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("highStrength", 1),
          ("mediumStrength", 2),
          ("lowStrength", 3),
          ("custom", 4))
    )



class CfprApCommClientAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApCommDnsProviderAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApCommFilePathProtocol(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("workspace", 1),
          ("volatile", 2),
          ("ftp", 3),
          ("tftp", 4),
          ("scp", 5),
          ("sftp", 6),
          ("usbdrive", 7),
          ("usbA", 8),
          ("usbB", 9))
    )



class CfprApCommNtpProviderAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApCommProtocol(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("tcp", 1),
          ("udp", 2),
          ("all", 3))
    )



class CfprApCommShellProto(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("tcp", 1),
          ("udp", 2),
          ("all", 3))
    )



class CfprApCommSnmpConfigState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("ok", 0),
          ("notApplied", 1))
    )



class CfprApCommSnmpProto(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("tcp", 1),
          ("udp", 2),
          ("all", 3))
    )



class CfprApCommSnmpAuth(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            2
        )
    )
    namedValues = NamedValues(
        ("sha", 2)
    )



class CfprApCommSnmpNotificationType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("traps", 1),
          ("informs", 2))
    )



class CfprApCommSnmpV3Privilege(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auth", 1),
          ("noauth", 2),
          ("priv", 3))
    )



class CfprApCommSnmpVersion(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("v1", 1),
          ("v2c", 2),
          ("v3", 3))
    )



class CfprApCommSshAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApCommSvcEpFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              335,
              341)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateSvcEp", 335),
          ("restartWebSvc", 341))
    )



class CfprApCommSvcEpFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              335,
              336,
              337,
              338,
              339,
              340,
              341,
              342,
              343,
              560,
              561,
              562,
              563)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateSvcEpBegin", 335),
          ("updateSvcEpSetEpLocal", 336),
          ("updateSvcEpSetEpPeer", 337),
          ("updateSvcEpPropogateEpSettings", 338),
          ("updateSvcEpPropogateEpTimeZoneSettingsToFexIomLocal", 339),
          ("updateSvcEpPropogateEpTimeZoneSettingsToFexIomPeer", 340),
          ("restartWebSvcBegin", 341),
          ("restartWebSvcLocal", 342),
          ("restartWebSvcPeer", 343),
          ("restartWebSvcFail", 560),
          ("restartWebSvcSuccess", 561),
          ("updateSvcEpFail", 562),
          ("updateSvcEpSuccess", 563))
    )



class CfprApCommSvcEpFsmTaskFlags(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("samDmeCommSvcEpUpdateSvcEpEpChange", 24),
          ("samDmeCommSvcEpUpdateSvcEpPropogateSettings", 25))
    )


class CfprApCommSvcEpFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              335,
              341)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateSvcEp", 335),
          ("restartWebSvc", 341))
    )



class CfprApCommSyslogProto(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("tcp", 1),
          ("udp", 2),
          ("all", 3))
    )



class CfprApCommSyslogAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApCommSyslogClientEnum(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("primary", 1),
          ("secondary", 2),
          ("tertiary", 3))
    )



class CfprApCommSyslogFileSize(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4096, 4194304),
    )



class CfprApCommSyslogForwardingFacility(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("local0", 0),
          ("local1", 1),
          ("local2", 2),
          ("local3", 3),
          ("local4", 4),
          ("local5", 5),
          ("local6", 6),
          ("local7", 7))
    )



class CfprApCommSyslogRestrictedSeverity(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("emergencies", 0),
          ("alerts", 1),
          ("critical", 2))
    )



class CfprApCommSyslogSeverity(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("emergencies", 0),
          ("alerts", 1),
          ("critical", 2),
          ("errors", 3),
          ("warnings", 4),
          ("notifications", 5),
          ("information", 6),
          ("debugging", 7))
    )



class CfprApCommSyslogSourceAudits(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApCommSyslogSourceEvents(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApCommSyslogSourceFaults(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApCommTimeZoneConfigState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("success", 0),
          ("failure", 1))
    )



class CfprApCommWebProto(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("tcp", 1),
          ("udp", 2),
          ("all", 3))
    )



class CfprApComputeABoardPower(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              100)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("on", 1),
          ("test", 2),
          ("off", 3),
          ("online", 4),
          ("offline", 5),
          ("offduty", 6),
          ("degraded", 7),
          ("powerSave", 8),
          ("error", 9),
          ("ok", 10),
          ("failed", 11),
          ("notSupported", 100))
    )



class CfprApComputeAdminLinkAggregation(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("portChannel", 1),
          ("global", 2))
    )



class CfprApComputeAdminMemoryState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("policy", 1),
          ("resetMemoryErrors", 2),
          ("resetInProgress", 3))
    )



class CfprApComputeAdminPowerState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              12,
              13,
              14,
              15,
              16,
              30,
              31,
              32,
              33)
        )
    )
    namedValues = NamedValues(
        *(("cycleImmediate", 2),
          ("cycleWait", 3),
          ("hardResetImmediate", 4),
          ("hardResetWait", 5),
          ("cmosResetImmediate", 12),
          ("bmcResetImmediate", 13),
          ("bmcResetWait", 14),
          ("diagnosticInterrupt", 15),
          ("kvmReset", 16),
          ("policy", 30),
          ("adminUp", 31),
          ("adminDown", 32),
          ("ipmiReset", 33))
    )



class CfprApComputeAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("inService", 1),
          ("outOfService", 2))
    )



class CfprApComputeAdminTrigger(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("undiscovered", 0),
          ("rediscover", 1),
          ("resetToFactory", 2),
          ("discovered", 3),
          ("remove", 4),
          ("migrate", 5),
          ("decommission", 6),
          ("upgradeFirmware", 7))
    )



class CfprApComputeAlarmSeverity(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("minor", 1),
          ("severe", 2))
    )



class CfprApComputeAssociation(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("establishing", 1),
          ("associated", 2),
          ("removing", 3),
          ("failed", 4),
          ("throttled", 5))
    )



class CfprApComputeAvailability(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("unavailable", 0),
          ("available", 1))
    )



class CfprApComputeBlackListing(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApComputeBladeSlotId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )



class CfprApComputeBladeFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              186,
              208,
              213,
              216)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("diag", 186),
          ("swConnUpd", 208),
          ("serviceInfraDeploy", 213),
          ("serviceInfraWithdraw", 216))
    )



class CfprApComputeBladeFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              186,
              187,
              188,
              189,
              190,
              191,
              192,
              193,
              194,
              195,
              196,
              197,
              198,
              199,
              200,
              201,
              202,
              203,
              204,
              208,
              209,
              210,
              213,
              214,
              215,
              216,
              217,
              218,
              564,
              565,
              566,
              567,
              568,
              569)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("diagBegin", 186),
          ("diagConfigFeLocal", 187),
          ("diagConfigFePeer", 188),
          ("diagSwConfigLocal", 189),
          ("diagSwConfigPeer", 190),
          ("diagDisableServerConnSwB", 191),
          ("diagEnableServerConnSwA", 192),
          ("diagDisableServerConnSwA", 193),
          ("diagEnableServerConnSwB", 194),
          ("diagCleanupServerConnSwA", 195),
          ("diagCleanupServerConnSwB", 196),
          ("diagSwUnconfigLocal", 197),
          ("diagSwUnconfigPeer", 198),
          ("diagRemoveConfig", 199),
          ("diagRestoreConfigFeLocal", 200),
          ("diagRestoreConfigFePeer", 201),
          ("diagEvaluateStatus", 202),
          ("diagSuccess", 203),
          ("diagFail", 204),
          ("swConnUpdBegin", 208),
          ("swConnUpdA", 209),
          ("swConnUpdB", 210),
          ("serviceInfraDeployBegin", 213),
          ("serviceInfraDeploySwConfigLocal", 214),
          ("serviceInfraDeploySwConfigPeer", 215),
          ("serviceInfraWithdrawBegin", 216),
          ("serviceInfraWithdrawSwUnConfigLocal", 217),
          ("serviceInfraWithdrawSwUnConfigPeer", 218),
          ("serviceInfraDeployFail", 564),
          ("serviceInfraDeploySuccess", 565),
          ("serviceInfraWithdrawFail", 566),
          ("serviceInfraWithdrawSuccess", 567),
          ("swConnUpdFail", 568),
          ("swConnUpdSuccess", 569))
    )



class CfprApComputeBladeFsmTaskFlags(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("samDmeComputeBladeDiagDetailDiag", 17),
          ("samDmeComputeBladeDiagEfiDiag", 18),
          ("samDmeComputeBladeDiagCancelDiag", 19))
    )


class CfprApComputeBladeFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              186)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("diag", 186))
    )



class CfprApComputeChassisConnPolicyChassisId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )



class CfprApComputeChassisDiscAction(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("immediate", 0),
          ("userAcknowledged", 1),
          ("n1Link", 2),
          ("n2Link", 3),
          ("n4Link", 4),
          ("n8Link", 5),
          ("platformMax", 6))
    )



class CfprApComputeChassisQualMaxId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )



class CfprApComputeChassisQualMinId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )



class CfprApComputeCheckPoint(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("removing", 1),
          ("shallowCheckpoint", 2),
          ("deepCheckpoint", 3),
          ("discovered", 4))
    )



class CfprApComputeConnectivityRebalancing(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("immediate", 0),
          ("userAcknowledged", 1))
    )



class CfprApComputeDiscovery(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              8,
              16,
              32,
              64,
              128,
              129,
              130,
              131,
              132,
              133,
              134,
              135,
              136,
              137,
              138)
        )
    )
    namedValues = NamedValues(
        *(("undiscovered", 0),
          ("inProgress", 1),
          ("malformedFruInfo", 2),
          ("fruNotReady", 3),
          ("insufficientlyEquipped", 4),
          ("invalidAdaptorIocard", 5),
          ("failed", 8),
          ("complete", 16),
          ("retry", 32),
          ("throttled", 64),
          ("illegalFru", 128),
          ("fruIdentityIndeterminate", 129),
          ("fruStateIndeterminate", 130),
          ("diagnosticsInProgress", 131),
          ("efidiagnosticsInProgress", 132),
          ("diagnosticsFailed", 133),
          ("diagnosticsComplete", 134),
          ("waitingForUserAck", 135),
          ("userAcknowledged", 136),
          ("waitingForMgmtAck", 137),
          ("illegalPartNumber", 138))
    )



class CfprApComputeIOHubEnvStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("temperature", 0),
          ("temperatureAvg", 1),
          ("temperatureMax", 2),
          ("temperatureMin", 3))
    )


class CfprApComputeIOHubEnvStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("temperature", 0),
          ("temperatureAvg", 1),
          ("temperatureMax", 2),
          ("temperatureMin", 3))
    )


class CfprApComputeIssues(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("computeThermal", 0),
          ("computeInoperable", 1),
          ("computeVoltage", 2),
          ("computePerf", 3),
          ("computePower", 4),
          ("removed", 5),
          ("config", 6),
          ("computePostFailure", 7),
          ("cpuThermal", 8),
          ("cpuInoperable", 9),
          ("cpuVoltage", 10),
          ("cpuPerf", 11),
          ("cpuPower", 12),
          ("memoryThermal", 13),
          ("memoryInoperable", 14),
          ("memoryVoltage", 15),
          ("memoryPerf", 16),
          ("memoryPower", 17),
          ("adaptorThermal", 18),
          ("adaptorInoperable", 19),
          ("adaptorVoltage", 20),
          ("adaptorPerf", 21),
          ("adaptorPower", 22),
          ("nicThermal", 23),
          ("nicInoperable", 24),
          ("nicVoltage", 25),
          ("nicPerf", 26),
          ("nicPower", 27),
          ("hbaThermal", 28),
          ("hbaInoperable", 29),
          ("hbaVoltage", 30),
          ("hbaPerf", 31),
          ("hbaPower", 32),
          ("mismatch", 33),
          ("powerInoperable", 34),
          ("networkMisconfig", 35),
          ("adaptorMismatch", 36))
    )


class CfprApComputeKvmMgmtPolicyVmediaEncryption(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )



class CfprApComputeLinkAggregation(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("portChannel", 1))
    )



class CfprApComputeLinkAggregationCap(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        ("portChannel", 0)
    )


class CfprApComputeMbPowerStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("consumedPower", 0),
          ("consumedPowerAvg", 1),
          ("consumedPowerMax", 2),
          ("consumedPowerMin", 3),
          ("inputCurrent", 4),
          ("inputCurrentAvg", 5),
          ("inputCurrentMax", 6),
          ("inputCurrentMin", 7),
          ("inputVoltage", 8),
          ("inputVoltageAvg", 9),
          ("inputVoltageMax", 10),
          ("inputVoltageMin", 11))
    )


class CfprApComputeMbPowerStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("consumedPower", 0),
          ("consumedPowerAvg", 1),
          ("consumedPowerMax", 2),
          ("consumedPowerMin", 3),
          ("inputCurrent", 4),
          ("inputCurrentAvg", 5),
          ("inputCurrentMax", 6),
          ("inputCurrentMin", 7),
          ("inputVoltage", 8),
          ("inputVoltageAvg", 9),
          ("inputVoltageMax", 10),
          ("inputVoltageMin", 11))
    )


class CfprApComputeMbTempStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("fmTempSenIo", 0),
          ("fmTempSenIoAvg", 1),
          ("fmTempSenIoMax", 2),
          ("fmTempSenIoMin", 3),
          ("fmTempSenRear", 4),
          ("fmTempSenRearAvg", 5),
          ("fmTempSenRearL", 6),
          ("fmTempSenRearLAvg", 7),
          ("fmTempSenRearLMax", 8),
          ("fmTempSenRearLMin", 9),
          ("fmTempSenRearMax", 10),
          ("fmTempSenRearMin", 11),
          ("fmTempSenRearR", 12),
          ("fmTempSenRearRAvg", 13),
          ("fmTempSenRearRMax", 14),
          ("fmTempSenRearRMin", 15))
    )


class CfprApComputeMbTempStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("fmTempSenIo", 0),
          ("fmTempSenIoAvg", 1),
          ("fmTempSenIoMax", 2),
          ("fmTempSenIoMin", 3),
          ("fmTempSenRear", 4),
          ("fmTempSenRearAvg", 5),
          ("fmTempSenRearL", 6),
          ("fmTempSenRearLAvg", 7),
          ("fmTempSenRearLMax", 8),
          ("fmTempSenRearLMin", 9),
          ("fmTempSenRearMax", 10),
          ("fmTempSenRearMin", 11),
          ("fmTempSenRearR", 12),
          ("fmTempSenRearRAvg", 13),
          ("fmTempSenRearRMax", 14),
          ("fmTempSenRearRMin", 15))
    )


class CfprApComputeMemoryUnitConstraintType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("kit", 1))
    )



class CfprApComputeMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("single", 1),
          ("scaled", 2))
    )



class CfprApComputeOwner(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("policy", 1),
          ("management", 2))
    )



class CfprApComputePCIeFatalCompletionStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("abortErrors", 0),
          ("timeoutErrors", 1),
          ("unexpectedErrors", 2))
    )


class CfprApComputePCIeFatalProtocolStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("dllpErrors", 0),
          ("flowControlErrors", 1))
    )


class CfprApComputePCIeFatalReceiveStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("bufferOverflowErrors", 0),
          ("errFatalErrors", 1),
          ("errNonFatalErrors", 2),
          ("unsupportedRequestErrors", 3))
    )


class CfprApComputePCIeFatalStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("acsViolationErrors", 0),
          ("malformedTLPErrors", 1),
          ("poisonedTLPErrors", 2),
          ("surpriseLinkDownErrors", 3))
    )


class CfprApComputePciCapOrder(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ascending", 0),
          ("descending", 1),
          ("ascendingDual", 2),
          ("ascendingSeq", 3),
          ("ascendingExtended", 4))
    )



class CfprApComputePhysicalLowVoltageMemory(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 0),
          ("lowVoltage", 1),
          ("regularVoltage", 2))
    )



class CfprApComputePhysicalFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              208,
              213,
              216)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("swConnUpd", 208),
          ("serviceInfraDeploy", 213),
          ("serviceInfraWithdraw", 216))
    )



class CfprApComputePhysicalFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              208,
              209,
              210,
              213,
              214,
              215,
              216,
              217,
              218,
              564,
              565,
              566,
              567,
              568,
              569)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("swConnUpdBegin", 208),
          ("swConnUpdA", 209),
          ("swConnUpdB", 210),
          ("serviceInfraDeployBegin", 213),
          ("serviceInfraDeploySwConfigLocal", 214),
          ("serviceInfraDeploySwConfigPeer", 215),
          ("serviceInfraWithdrawBegin", 216),
          ("serviceInfraWithdrawSwUnConfigLocal", 217),
          ("serviceInfraWithdrawSwUnConfigPeer", 218),
          ("serviceInfraDeployFail", 564),
          ("serviceInfraDeploySuccess", 565),
          ("serviceInfraWithdrawFail", 566),
          ("serviceInfraWithdrawSuccess", 567),
          ("swConnUpdFail", 568),
          ("swConnUpdSuccess", 569))
    )



class CfprApComputePhysicalFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              208,
              213,
              216)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("swConnUpd", 208),
          ("serviceInfraDeploy", 213),
          ("serviceInfraWithdraw", 216))
    )



class CfprApComputePooledRackUnitId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )



class CfprApComputePooledSlotSlotId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )



class CfprApComputePsuClusterState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("slot1Master", 1),
          ("slot2Master", 2),
          ("notClustered", 3))
    )



class CfprApComputePsuControlRedundancy(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("nonRedundant", 1),
          ("nPlus1", 2),
          ("grid", 3))
    )



class CfprApComputePsuRedundancy(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("nonRedundant", 1),
          ("nPlus1", 2),
          ("grid", 3))
    )



class CfprApComputePsuRedundancyOperQualifier(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("redundancyLost", 0),
          ("redundancyDegraded", 1),
          ("nonRedundantSufficientResources", 2),
          ("nonRedundantInsufficientResources", 3))
    )


class CfprApComputePsuRedundancyOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ok", 1),
          ("failed", 2),
          ("degraded", 3))
    )



class CfprApComputeRackQualMaxId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )



class CfprApComputeRackQualMinId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )



class CfprApComputeRackUnitId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )



class CfprApComputeRackUnitFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              208,
              213,
              216)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("swConnUpd", 208),
          ("serviceInfraDeploy", 213),
          ("serviceInfraWithdraw", 216))
    )



class CfprApComputeRackUnitFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              208,
              209,
              210,
              213,
              214,
              215,
              216,
              217,
              218,
              564,
              565,
              566,
              567,
              568,
              569)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("swConnUpdBegin", 208),
          ("swConnUpdA", 209),
          ("swConnUpdB", 210),
          ("serviceInfraDeployBegin", 213),
          ("serviceInfraDeploySwConfigLocal", 214),
          ("serviceInfraDeploySwConfigPeer", 215),
          ("serviceInfraWithdrawBegin", 216),
          ("serviceInfraWithdrawSwUnConfigLocal", 217),
          ("serviceInfraWithdrawSwUnConfigPeer", 218),
          ("serviceInfraDeployFail", 564),
          ("serviceInfraDeploySuccess", 565),
          ("serviceInfraWithdrawFail", 566),
          ("serviceInfraWithdrawSuccess", 567),
          ("swConnUpdFail", 568),
          ("swConnUpdSuccess", 569))
    )



class CfprApComputeRackUnitMbTempStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ambientTemp", 0),
          ("ambientTempAvg", 1),
          ("ambientTempMax", 2),
          ("ambientTempMin", 3),
          ("frontTemp", 4),
          ("frontTempAvg", 5),
          ("frontTempMax", 6),
          ("frontTempMin", 7),
          ("ioh1Temp", 8),
          ("ioh1TempAvg", 9),
          ("ioh1TempMax", 10),
          ("ioh1TempMin", 11),
          ("ioh2Temp", 12),
          ("ioh2TempAvg", 13),
          ("ioh2TempMax", 14),
          ("ioh2TempMin", 15),
          ("rearTemp", 16),
          ("rearTempAvg", 17),
          ("rearTempMax", 18),
          ("rearTempMin", 19))
    )


class CfprApComputeRackUnitMbTempStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ambientTemp", 0),
          ("ambientTempAvg", 1),
          ("ambientTempMax", 2),
          ("ambientTempMin", 3),
          ("frontTemp", 4),
          ("frontTempAvg", 5),
          ("frontTempMax", 6),
          ("frontTempMin", 7),
          ("ioh1Temp", 8),
          ("ioh1TempAvg", 9),
          ("ioh1TempMax", 10),
          ("ioh1TempMin", 11),
          ("ioh2Temp", 12),
          ("ioh2TempAvg", 13),
          ("ioh2TempMax", 14),
          ("ioh2TempMin", 15),
          ("rearTemp", 16),
          ("rearTempAvg", 17),
          ("rearTempMax", 18),
          ("rearTempMin", 19))
    )


class CfprApComputeScrubAction(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )



class CfprApComputeServerDiscPolicyFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("resolveScrubPolicy", 1))
    )



class CfprApComputeServerDiscPolicyFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              570,
              571)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("resolveScrubPolicyBegin", 1),
          ("resolveScrubPolicyResolve", 2),
          ("resolveScrubPolicyFail", 570),
          ("resolveScrubPolicySuccess", 571))
    )



class CfprApComputeServerDiscPolicyFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("resolveScrubPolicy", 1))
    )



class CfprApComputeServerMgmtDiscAction(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("autoAcknowledged", 0),
          ("userAcknowledged", 1))
    )



class CfprApComputeSlotQualMaxId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )



class CfprApComputeSlotQualMinId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )



class CfprApComputeUpgradeStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notUpgraded", 0),
          ("upgraded", 1),
          ("notApplicable", 2))
    )



class CfprApConditionAckAction(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("deleteOnClear", 1),
          ("initialSeverity", 2))
    )



class CfprApConditionActionIndicator(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("creation", 0),
          ("modification", 1),
          ("deletion", 2),
          ("stateTransition", 3),
          ("special", 4),
          ("failure", 5))
    )



class CfprApConditionCallHomeCause(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35)
        )
    )
    namedValues = NamedValues(
        *(("unspecified", 0),
          ("identityUnestablishable", 1),
          ("powerProblem", 2),
          ("equipmentInoperable", 3),
          ("equipmentInaccessible", 4),
          ("vifIdsMismatch", 5),
          ("adaptorMismatch", 6),
          ("voltageProblem", 7),
          ("psuInsufficient", 8),
          ("psuMixedMode", 9),
          ("connectivityProblem", 10),
          ("equipmentDisabled", 11),
          ("thermalProblem", 12),
          ("configurationFailure", 13),
          ("associationFailed", 14),
          ("equipmentOffline", 15),
          ("equipmentProblem", 16),
          ("fruProblem", 17),
          ("healthLedAmberBlinking", 18),
          ("healthLedAmber", 19),
          ("licenseGraceperiodExpired", 20),
          ("equipmentDegraded", 21),
          ("mgmtifDown", 22),
          ("arpTargetsConfigError", 23),
          ("ndiscTargetsConfigError", 24),
          ("equipmentRemoved", 25),
          ("limitReached", 26),
          ("nearMaxLimit", 27),
          ("inventoryFailed", 28),
          ("memoryError", 29),
          ("linkDown", 30),
          ("electionFailure", 31),
          ("managementServicesFailure", 32),
          ("managementServicesUnresponsive", 33),
          ("versionIncompatible", 34),
          ("portFailed", 35))
    )



class CfprApConditionCause(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(-1,
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              63,
              64,
              65,
              66,
              67,
              68,
              69,
              70,
              71,
              72,
              73,
              74,
              75,
              76,
              77,
              78,
              79,
              80,
              81,
              82,
              83,
              84,
              85,
              86,
              87,
              88,
              89,
              90,
              91,
              92,
              93,
              94,
              95,
              96,
              97,
              98,
              99,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              119,
              120,
              121,
              122,
              123,
              124,
              125,
              126,
              127,
              128,
              129,
              130,
              131,
              132,
              133,
              134,
              135,
              136,
              137,
              138,
              139,
              140,
              141,
              142,
              143,
              144,
              145,
              146,
              147,
              148,
              149,
              150,
              151,
              152,
              153,
              154,
              155,
              156,
              157,
              158,
              159,
              160,
              161,
              162,
              163,
              164,
              165,
              166,
              167,
              168,
              169,
              170,
              171,
              172,
              173,
              174,
              175,
              176,
              177,
              178,
              179,
              180,
              181,
              182,
              183,
              184,
              185,
              186,
              187,
              188,
              189,
              190,
              191,
              192,
              193,
              194,
              195,
              196,
              197,
              198,
              199,
              200,
              201,
              202,
              203,
              204,
              205,
              206,
              207,
              208,
              209,
              210,
              211,
              212,
              213,
              214,
              215,
              216,
              217,
              218,
              219,
              220,
              221,
              222,
              223,
              224,
              225,
              226,
              227,
              228,
              229,
              230,
              231,
              232,
              233,
              234,
              235,
              236,
              237,
              238,
              239,
              240,
              241,
              242,
              243,
              244,
              245,
              246,
              247,
              248,
              249,
              250,
              251,
              252,
              253,
              254,
              255,
              256,
              257,
              258,
              259,
              260,
              261,
              262,
              263,
              264,
              265,
              266,
              267,
              268,
              269,
              270,
              271,
              272,
              273,
              274,
              275,
              276,
              277,
              278,
              279,
              280,
              281,
              282,
              283,
              284,
              285,
              286,
              287,
              288,
              289,
              290,
              291,
              292,
              293,
              294,
              295,
              296,
              297,
              298,
              299,
              300,
              301,
              302,
              303,
              304,
              305,
              306,
              307,
              308,
              309,
              310,
              311,
              312,
              313,
              314,
              315,
              316,
              317,
              318,
              319,
              320,
              321,
              322,
              323,
              324,
              325,
              326,
              327,
              328,
              329,
              330,
              331,
              332,
              333,
              334,
              335,
              336,
              337,
              338,
              339,
              340,
              341,
              342,
              343,
              344,
              345,
              346,
              347,
              348,
              349,
              350,
              351,
              352,
              353,
              354,
              355,
              356,
              357,
              358,
              359,
              360,
              361,
              362,
              363,
              364,
              365,
              366,
              367,
              368,
              369,
              370,
              371,
              372,
              373,
              374,
              375,
              376,
              377,
              378,
              379,
              380,
              381,
              382,
              383,
              384,
              385,
              386,
              387,
              388,
              389,
              390,
              391,
              392,
              393,
              394,
              395,
              396,
              397,
              398,
              399,
              400,
              401,
              402,
              403,
              404,
              405,
              406,
              407,
              408,
              409,
              410,
              411,
              412,
              413,
              414,
              415,
              416,
              417,
              418,
              419,
              420,
              421,
              422,
              423,
              424,
              425,
              426,
              427,
              428,
              429,
              430,
              431,
              432,
              433,
              434,
              435,
              436,
              437,
              438,
              439,
              440,
              441,
              442,
              443,
              444,
              445,
              446,
              447,
              448,
              449,
              450,
              451,
              452,
              453,
              454,
              455,
              456,
              457,
              458,
              459,
              460,
              461,
              464)
        )
    )
    namedValues = NamedValues(
        *(("any", -1),
          ("unknown", 0),
          ("namedPolicyUnresolved", 1),
          ("transition", 2),
          ("vlanPermitUnresolved", 3),
          ("groupPermitUnresolved", 4),
          ("insufficientResources", 5),
          ("insufficientlyEquipped", 6),
          ("identityUnestablishable", 7),
          ("powerProblem", 8),
          ("thermalProblem", 9),
          ("equipmentInoperable", 10),
          ("discoveryFailed", 11),
          ("associationFailed", 12),
          ("disassociationFailed", 13),
          ("equipmentMissing", 14),
          ("equipmentInaccessible", 15),
          ("vifIdsMismatch", 16),
          ("adaptorMismatch", 17),
          ("voltageProblem", 18),
          ("emptyPool", 19),
          ("equipmentProblem", 20),
          ("boardCtrlUpgraded", 21),
          ("vmediaMountInaccessible", 22),
          ("decommissioned", 23),
          ("beginFailed", 24),
          ("fsmFailed", 25),
          ("resolveFailed", 26),
          ("checkInventoryStatusFailed", 27),
          ("reportFullInventoryFailed", 28),
          ("imageDeleted", 29),
          ("imageUnusable", 30),
          ("imageCannotBoot", 31),
          ("activationFailed", 32),
          ("cimcFirmwareMismatch", 33),
          ("pldFirmwareMismatch", 34),
          ("defaultHostpackMissing", 35),
          ("localFailed", 37),
          ("unpackLocalFailed", 38),
          ("deleteLocalFailed", 39),
          ("copyRemoteFailed", 40),
          ("remoteFailed", 41),
          ("copyExtToLocalFailed", 42),
          ("copyExtToPeerFailed", 43),
          ("startFailed", 44),
          ("executeFailed", 45),
          ("copyToLocalFailed", 46),
          ("copyToPeerFailed", 47),
          ("updateLocalFailed", 48),
          ("verifyLocalFailed", 49),
          ("resetLocalFailed", 50),
          ("updateRemoteFailed", 51),
          ("verifyRemoteFailed", 52),
          ("resetRemoteFailed", 53),
          ("copyImgFromRepFailed", 54),
          ("copyiomimgToSubFailed", 55),
          ("waitForReadyFailed", 56),
          ("restoreFailed", 57),
          ("waitForDeployFailed", 58),
          ("validateApplicationPackFailed", 59),
          ("deleteCurrentApplicationFailed", 60),
          ("pollDeleteCurrentApplicationStatusFailed", 61),
          ("setStartupServiceManagerVersionFailed", 62),
          ("pollStartupServiceManagerStatusFailed", 63),
          ("activateNpuImageFailed", 64),
          ("pollNpuActivationStatusFailed", 65),
          ("activateSystemImageFailed", 66),
          ("activateFirmwareImageFailed", 67),
          ("rebootSystemForImageUpgradeFailed", 68),
          ("waitForSystemReadyFailed", 69),
          ("pollSystemActivationStatusFailed", 70),
          ("activateManagerImageFailed", 71),
          ("pollManagerActivationStatusFailed", 72),
          ("activateApplicationImageFailed", 73),
          ("pollApplicationActivationStatusFailed", 74),
          ("completeFirmwareUpgradeFailed", 75),
          ("validateFirmwarePackFailed", 76),
          ("debundlePortFailed", 77),
          ("pollDebundlePortFailed", 78),
          ("activateFirmwarePackFailed", 79),
          ("pollActivateOfFirmwarePackFailed", 80),
          ("updateImageVersionFailed", 81),
          ("waitForFirmwareVersionUpdateFailed", 82),
          ("updatePackageVersionFailed", 83),
          ("resolveDistributableNamesFailed", 84),
          ("resolveDistributableFailed", 85),
          ("resolveImagesFailed", 86),
          ("activateCatalogFailed", 87),
          ("pingFailed", 88),
          ("groupCapInsufficient", 89),
          ("oldChassisComponentFirmware", 90),
          ("oldFirmware", 91),
          ("psuInsufficient", 92),
          ("psuRedundancyFail", 93),
          ("powerCapFail", 94),
          ("powerConsumptionHitLimit", 95),
          ("noAckFromBios", 96),
          ("noCapFail", 97),
          ("psuMixedMode", 98),
          ("slotNotResponding", 99),
          ("bladeNotWorking", 100),
          ("diskFormatFailed", 101),
          ("bladeSwap", 102),
          ("switchConfigFailed", 103),
          ("appinstanceNotResponding", 104),
          ("appinstanceInstallFailed", 105),
          ("appinstanceStartFailed", 106),
          ("appinstanceUpdateFailed", 107),
          ("appinstanceStopFailed", 108),
          ("appinstanceError", 109),
          ("logicalDeviceIncompleteConfiguration", 110),
          ("logicalDeviceError", 111),
          ("licenseAgreementNotAccepted", 112),
          ("appinstanceUnsupported", 113),
          ("appMetaCorrupted", 114),
          ("updateFailed", 115),
          ("stopDecoratorAppsFailed", 116),
          ("wairForStopDecoratorsFailed", 117),
          ("stopMainAppFailed", 118),
          ("waitForBladeRebootFailed", 119),
          ("waitForStopMainAppFailed", 120),
          ("startAppsFailed", 121),
          ("waitForPortReadyFailed", 122),
          ("createLogicalDeviceFailed", 123),
          ("updateConnectivityFailed", 124),
          ("updateVlanGroupsFailed", 125),
          ("updateEthFlowMonFailed", 126),
          ("portInventorySwAfailed", 127),
          ("portInventorySwBfailed", 128),
          ("configSwAfailed", 129),
          ("configSwBfailed", 130),
          ("verifyPhysConfigFailed", 131),
          ("successFailed", 132),
          ("failFailed", 133),
          ("verifyBreakoutConfigFailed", 134),
          ("updateZonesFailed", 135),
          ("noVlanOptimization", 136),
          ("vifDown", 137),
          ("configurationFailed", 138),
          ("pinningMismatch", 139),
          ("pinningMisconfig", 140),
          ("inaccessibleVlanReferenced", 141),
          ("referencedVlanUnresolvable", 142),
          ("referencedRemoteVlanUnresolvable", 143),
          ("invalidVlanInTheAllowedVlanList", 144),
          ("vlanConflictPermit", 145),
          ("profileConfigIncorrect", 146),
          ("multipleConnectionPolicies", 147),
          ("setLocalFailed", 148),
          ("setPeerFailed", 149),
          ("callhomeConfigError", 150),
          ("disableFailed", 151),
          ("enableFailed", 152),
          ("disableAfailed", 153),
          ("enableAfailed", 154),
          ("disableBfailed", 155),
          ("enableBfailed", 156),
          ("unidentifiableFru", 157),
          ("connectivityProblem", 158),
          ("linkDown", 159),
          ("linkMisconnected", 160),
          ("linkMissing", 161),
          ("validateLocalFailed", 162),
          ("validateRemoteFailed", 163),
          ("deleteRemoteFailed", 164),
          ("equipmentDegraded", 165),
          ("equipmentDisabled", 166),
          ("applyTemplateFailed", 167),
          ("applyIdentifiersFailed", 168),
          ("checkAssignedIdentifiersForDupFailed", 169),
          ("resolvePoliciesFailed", 170),
          ("resolveNetworkPoliciesFailed", 171),
          ("resolveNetworkTemplatesFailed", 172),
          ("resolveIdentifiersFailed", 173),
          ("applyDefaultIdentifiersFailed", 174),
          ("checkAssignedDefaultIdentifiersForDupFailed", 175),
          ("resolveDefaultIdentifiersFailed", 176),
          ("resolveScheduleFailed", 177),
          ("validatePolicyOwnershipFailed", 178),
          ("applyPoliciesFailed", 179),
          ("provisionStorageFailed", 180),
          ("waitForStorageProvisionFailed", 181),
          ("resolveBootConfigFailed", 182),
          ("evaluateAssociationFailed", 183),
          ("analyzeImpactFailed", 184),
          ("waitForMaintPermissionFailed", 185),
          ("waitForMaintWindowFailed", 186),
          ("commitStorageFailed", 187),
          ("waitForCommitStorageFailed", 188),
          ("applyConfigFailed", 189),
          ("waitForAssocCompletionFailed", 190),
          ("configFeLocalFailed", 191),
          ("configFePeerFailed", 192),
          ("swConfigLocalFailed", 193),
          ("swConfigPeerFailed", 194),
          ("disableServerConnSwBfailed", 195),
          ("enableServerConnSwAfailed", 196),
          ("disableServerConnSwAfailed", 197),
          ("enableServerConnSwBfailed", 198),
          ("cleanupServerConnSwAfailed", 199),
          ("cleanupServerConnSwBfailed", 200),
          ("swUnconfigLocalFailed", 201),
          ("swUnconfigPeerFailed", 202),
          ("removeConfigFailed", 203),
          ("restoreConfigFeLocalFailed", 204),
          ("restoreConfigFePeerFailed", 205),
          ("evaluateStatusFailed", 206),
          ("cimcvlanCfgLocalFailed", 207),
          ("cimcvlanCfgPeerFailed", 208),
          ("aFailed", 209),
          ("bFailed", 210),
          ("swUnConfigLocalFailed", 211),
          ("swUnConfigPeerFailed", 212),
          ("checkLicenseFailed", 213),
          ("identifyFailed", 214),
          ("configureSwMgmtEndPointFailed", 215),
          ("configureVifNsFailed", 216),
          ("decomissionFailed", 217),
          ("disableEndPointFailed", 218),
          ("unIdentifyLocalFailed", 219),
          ("unIdentifyPeerFailed", 220),
          ("waitFailed", 221),
          ("shutdownFailed", 222),
          ("enablePortFailed", 223),
          ("serverFailed", 224),
          ("configurationFailure", 225),
          ("maintenanceFailed", 226),
          ("equipmentRemoved", 227),
          ("serverInaccessible", 228),
          ("assignmentFailed", 229),
          ("unassociated", 230),
          ("svnicNotPresent", 231),
          ("nonExistentScheduler", 232),
          ("unsupportedCimcFirmware", 233),
          ("discoveryInProgress", 234),
          ("configurationInProgress", 235),
          ("unconfigurationInProgress", 236),
          ("poweredOff", 237),
          ("inMaintenance", 238),
          ("underTest", 239),
          ("serverUnassociated", 240),
          ("serverAssociating", 241),
          ("serverAssociated", 242),
          ("serverDeassociating", 243),
          ("serverUnassigned", 244),
          ("serverAssigned", 245),
          ("configurationNotApplied", 246),
          ("configurationApplying", 247),
          ("configurationApplied", 248),
          ("newVnicVconSchemeApplied", 249),
          ("satelliteConnectionAbsent", 250),
          ("satelliteConnectionInit", 251),
          ("satelliteMisConnected", 252),
          ("unexpectedNumberOfLinks", 253),
          ("equipmentOffline", 254),
          ("fexUnsupported", 255),
          ("performanceProblem", 256),
          ("firmwareUpgradeProblem", 257),
          ("unsupportedConnectivityConfiguration", 258),
          ("equipmentUnacknowledged", 259),
          ("autoFirmwareUpgrade", 260),
          ("equipmentDisconnected", 261),
          ("fruProblem", 262),
          ("powerDown", 263),
          ("act2Fail", 264),
          ("healthLedAmberBlinking", 265),
          ("tpmOnSlaveBoard", 266),
          ("healthLedAmber", 267),
          ("executeAfailed", 268),
          ("executeBfailed", 269),
          ("sendCommandFailed", 270),
          ("waitStageFailed", 271),
          ("updateAppInstanceFailed", 272),
          ("checkBladeReadinessFailed", 273),
          ("waitForAppsInstallationFailed", 274),
          ("waitForLinkConfigurationFailed", 275),
          ("releaseAppLicenseFailed", 276),
          ("configureLinksFailed", 277),
          ("waitForConfigCompletionFailed", 278),
          ("updateBundleStatusFailed", 279),
          ("sendBundleStatusFailed", 280),
          ("sendInterfacesFailed", 281),
          ("unconfigureLinksFailed", 282),
          ("configureSwitchFailed", 283),
          ("waitForSwitchConfigFailed", 284),
          ("unconfigureLogicalDeviceFailed", 285),
          ("sendStatusFailed", 286),
          ("sendConfigFailed", 287),
          ("startDiskFormatFailed", 288),
          ("resetBladePowerFailed", 289),
          ("waitForDiskFormatCompleteFailed", 290),
          ("updateTimeZoneFailed", 291),
          ("getAttributesFailed", 292),
          ("sendUpdateFailed", 293),
          ("stopAppFailed", 294),
          ("waitForStopAppFailed", 295),
          ("upgradeAppFailed", 296),
          ("waitForUpgradeAppFailed", 297),
          ("startAppFailed", 298),
          ("configureFailed", 299),
          ("clientLostConnectivity", 300),
          ("licenseGraceperiodEntered", 301),
          ("licenseGraceperiod10days", 302),
          ("licenseGraceperiod30days", 303),
          ("licenseGraceperiod60days", 304),
          ("licenseGraceperiod90days", 305),
          ("licenseGraceperiod119days", 306),
          ("licenseGraceperiodExpired", 307),
          ("licenseInsufficient", 308),
          ("capacityExceeded", 309),
          ("configurationError", 310),
          ("operationFailed", 311),
          ("equipmentUnhealthy", 312),
          ("peerFailed", 313),
          ("setEpLocalFailed", 314),
          ("setEpPeerFailed", 315),
          ("propogateEpSettingsFailed", 316),
          ("propogateEpTimeZoneSettingsToFexIomLocalFailed", 317),
          ("propogateEpTimeZoneSettingsToFexIomPeerFailed", 318),
          ("providerGroupAlreadyExists", 319),
          ("providerGroupSizeEmpty", 320),
          ("invalidServerGroup", 321),
          ("invalidKeyringCertificate", 322),
          ("invalidKeyringModulus", 323),
          ("invalidTrustpointCertChain", 324),
          ("roleConfigError", 325),
          ("localeConfigError", 326),
          ("localeOrgConfigError", 327),
          ("userRoleConfigError", 328),
          ("userLocaleConfigError", 329),
          ("keyringConfigError", 330),
          ("snmpConfigError", 331),
          ("timezoneFileNotExists", 332),
          ("userConfigError", 333),
          ("snmpUserConfigError", 334),
          ("commSvcConfigError", 335),
          ("setKeyRingLocalFailed", 336),
          ("setKeyRingPeerFailed", 337),
          ("postSetKeyRingLocalFailed", 338),
          ("postSetKeyRingPeerFailed", 339),
          ("setRealmLocalFailed", 340),
          ("setRealmPeerFailed", 341),
          ("setUserLocalFailed", 342),
          ("setUserPeerFailed", 343),
          ("serverError", 344),
          ("tftpServerError", 345),
          ("copySubFailed", 346),
          ("copyPrimaryFailed", 347),
          ("deleteSubFailed", 348),
          ("deletePrimaryFailed", 349),
          ("removeFailed", 350),
          ("mgmtifDown", 351),
          ("arpTargetsConfigError", 352),
          ("ndiscTargetsConfigError", 353),
          ("duplicatedAssigned", 354),
          ("switchFailed", 355),
          ("limitReached", 356),
          ("nearMaxLimit", 357),
          ("inventoryFailed", 358),
          ("memoryError", 359),
          ("extraPrimaryVlans", 360),
          ("extraSecondaryVlans", 361),
          ("extraSecondaryVlansPerPrimary", 362),
          ("configInterfaceFailed", 363),
          ("verifyLinkConfigFailed", 364),
          ("setEpAfailed", 365),
          ("setEpBfailed", 366),
          ("bootupFailure", 367),
          ("createLocalFailed", 368),
          ("createRemoteFailed", 369),
          ("suppressStatusChange", 370),
          ("loadCatalogFailed", 371),
          ("applyFailed", 372),
          ("rescanImagesFailed", 373),
          ("copyCatFromRepFailed", 374),
          ("copyExternalRepToRemoteFailed", 375),
          ("applyCatalogFailed", 376),
          ("syncPortaglocalFailed", 377),
          ("syncPortagremoteFailed", 378),
          ("finalizeFailed", 379),
          ("updateEthMonFailed", 380),
          ("updateFcMonFailed", 381),
          ("serverMoved", 382),
          ("serverIdentificationProblem", 383),
          ("primaryVlanMissingForIsolated", 384),
          ("primaryVlanMissingForCommunity", 385),
          ("emptyPinGroup", 386),
          ("membershipDown", 387),
          ("invalidTarget", 388),
          ("configError", 389),
          ("vlanMismatch", 390),
          ("vlanErrorAssocPrimary", 391),
          ("interfaceMisconfigured", 392),
          ("missingPrimaryVlan", 393),
          ("udldLinkDown", 394),
          ("vlanMcastPolicyMisconfigured", 395),
          ("namedVlanUnresolved", 396),
          ("updateSspEthMonFailed", 397),
          ("deletePcapFileFailed", 398),
          ("syncFailed", 399),
          ("validateConfigurationFailed", 400),
          ("applyPhysicalFailed", 401),
          ("waitOnPhysFailed", 402),
          ("reportFailed", 403),
          ("backupLocalFailed", 404),
          ("uploadFailed", 405),
          ("downloadLocalFailed", 406),
          ("cleanUpFailed", 407),
          ("configBreakoutFailed", 408),
          ("waitForSwitchFailed", 409),
          ("configFailed", 410),
          ("reportResultsFailed", 411),
          ("primaryFailed", 412),
          ("secondaryFailed", 413),
          ("electionFailure", 414),
          ("managementServicesFailure", 415),
          ("managementServicesUnresponsive", 416),
          ("haNotReady", 417),
          ("versionIncompatible", 418),
          ("deviceSharedStorageError", 419),
          ("haSshKeysMismatched", 420),
          ("fprmProcessFailure", 421),
          ("logCapacity", 422),
          ("fileTransferFailed", 423),
          ("newLink", 424),
          ("anotherConnectionAlreadyEnabled", 425),
          ("connectionUnused", 426),
          ("unsupportedConnectivity", 427),
          ("incompatibleServerFirmware", 428),
          ("namedInbandVlanUnresolved", 429),
          ("inbandUnsupportedServer", 430),
          ("configBackupOutdated", 431),
          ("leadershipChange", 432),
          ("deviceSharedStorageIOError", 433),
          ("registerClientFailed", 434),
          ("verifyRegistrationFailed", 435),
          ("mountLocalFailed", 436),
          ("mountPeerFailed", 437),
          ("unmountLocalFailed", 438),
          ("unmountPeerFailed", 439),
          ("portFailed", 440),
          ("unsupportedTransceiver", 441),
          ("interfaceFailed", 442),
          ("operationalStateDown", 443),
          ("cmcVifDown", 444),
          ("verifyGuidFailed", 445),
          ("unregisterFailed", 446),
          ("cleanOldDataFailed", 447),
          ("requestFailed", 448),
          ("verifyFailed", 449),
          ("resolveAllFailed", 450),
          ("suspendModeEntered", 451),
          ("releaseFailed", 452),
          ("resolveManyFailed", 453),
          ("releaseManyFailed", 454),
          ("releaseAllFailed", 455),
          ("thresholdCrossed", 456),
          ("waitForChassisMoReadyFailed", 457),
          ("unsupported", 458),
          ("checkFirmwareUpgradeStatusFailed", 459),
          ("defaultInfraVersionMissing", 460),
          ("defaultInfraBundleValidationFailed", 461),
          ("defaultInfraBundleInstallAppFailure", 464))
    )



class CfprApConditionCode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              19,
              21,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              63,
              64,
              65,
              66,
              67,
              68,
              69,
              70,
              71,
              72,
              73,
              74,
              75,
              76,
              77,
              78,
              79,
              80,
              81,
              82,
              83,
              84,
              85,
              86,
              87,
              88,
              89,
              90,
              95,
              96,
              97,
              98,
              99,
              100,
              101,
              149,
              150,
              151,
              152,
              153,
              154,
              155,
              156,
              157,
              158,
              159,
              160,
              161,
              162,
              163,
              185,
              186,
              187,
              188,
              189,
              190,
              191,
              192,
              193,
              194,
              195,
              196,
              197,
              198,
              199,
              200,
              299,
              300,
              314,
              315,
              316,
              317,
              318,
              319,
              320,
              321,
              322,
              323,
              324,
              325,
              326,
              332,
              335,
              349,
              350,
              351,
              352,
              353,
              354,
              355,
              356,
              357,
              358,
              359,
              369,
              370,
              371,
              372,
              373,
              374,
              375,
              376,
              377,
              378,
              379,
              380,
              381,
              657,
              658,
              659,
              660,
              661,
              662,
              663,
              664,
              665,
              666,
              667,
              668,
              669,
              675,
              687,
              688,
              689,
              690,
              691,
              692,
              693,
              694,
              695,
              696,
              697,
              698,
              699,
              700,
              701,
              702,
              703,
              704,
              705,
              706,
              707,
              708,
              709,
              710,
              711,
              712,
              713,
              714,
              715,
              716,
              717,
              718,
              719,
              720,
              721,
              722,
              723,
              724,
              725,
              726,
              727,
              728,
              729,
              730,
              731,
              732,
              733,
              734,
              735,
              736,
              737,
              738,
              739,
              740,
              741,
              742,
              743,
              744,
              745,
              746,
              747,
              748,
              749,
              750,
              751,
              752,
              753,
              754,
              755,
              756,
              757,
              758,
              759,
              760,
              792,
              793,
              794,
              795,
              796,
              797,
              798,
              799,
              800,
              809,
              810,
              811,
              812,
              813,
              814,
              815,
              816,
              817,
              818,
              819,
              820,
              821,
              822,
              823,
              824,
              825,
              826,
              827,
              828,
              829,
              830,
              831,
              832,
              833,
              834,
              835,
              836,
              837,
              838,
              839,
              844,
              850,
              851,
              852,
              853,
              854,
              855,
              856,
              857,
              858,
              859,
              860,
              861,
              862,
              863,
              864,
              865,
              866,
              871,
              872,
              899,
              900,
              901,
              902,
              903,
              904,
              905,
              906,
              907,
              964,
              965,
              966,
              967,
              977,
              978,
              979,
              980,
              981,
              982,
              983,
              984,
              985,
              986,
              987,
              996,
              997,
              1014,
              1020,
              1038,
              1039,
              1040,
              1041,
              1042,
              1043,
              1044,
              1045,
              1046,
              1047,
              1048,
              1049,
              1050,
              1051,
              1052,
              1053,
              1054,
              1055,
              1056,
              1057,
              1058,
              1059,
              1060,
              1061,
              1062,
              1115,
              1116,
              1117,
              1118,
              1119,
              1120,
              1121,
              1122,
              1123,
              1124,
              1125,
              1126,
              1127,
              1128,
              1129,
              1130,
              1131,
              1132,
              1133,
              1134,
              1135,
              1136,
              1137,
              1138,
              1139,
              1140,
              1141,
              1150,
              1151,
              1152,
              1153,
              1154,
              1155,
              1156,
              1157,
              1158,
              1159,
              1174,
              1308,
              1309,
              1310,
              1311,
              1312,
              1313,
              16476,
              16477,
              16517,
              16518,
              16519,
              16520,
              16521,
              16522,
              16523,
              16524,
              16525,
              16526,
              16528,
              16529,
              16530,
              16585,
              16586,
              16587,
              16588,
              16589,
              16667,
              16668,
              16669,
              16670,
              16671,
              16676,
              16681,
              16682,
              16718,
              16727,
              16730,
              16731,
              16748,
              16749,
              16750,
              16751,
              16752,
              16770,
              16780,
              16803,
              16804,
              16805,
              16806,
              16807,
              16815,
              16816,
              16817,
              16818,
              16819,
              16822,
              16823,
              17063,
              17064,
              17065,
              17066,
              17149,
              17151,
              17152,
              17153,
              17154,
              17155,
              17156,
              17157,
              17158,
              17159,
              17160,
              17161,
              17162,
              17163,
              17164,
              17165,
              17166,
              17167,
              17169,
              17170,
              17185,
              17186,
              17187,
              17224,
              17226,
              17227,
              17231,
              17232,
              17233,
              17251,
              17252,
              17253,
              17254,
              17265,
              17266,
              17267,
              17268,
              17269,
              17270,
              17271,
              17272,
              17336,
              17337,
              17340,
              17347,
              17358,
              17359,
              17360,
              17373,
              17374,
              17378,
              17403,
              17408,
              17409,
              17410,
              17411,
              17420,
              17421,
              17469,
              17470,
              17476,
              17477,
              17478,
              17484,
              17490,
              17491,
              17492,
              17493,
              17494,
              17495,
              17496,
              17497,
              17498,
              17531,
              17532,
              17533,
              17554,
              17555,
              17556,
              17559,
              17560,
              17561,
              17562,
              17563,
              17564,
              17565,
              17566,
              17567,
              17568,
              17569,
              17570,
              17571,
              17572,
              17573,
              17690,
              34261,
              34263,
              34264,
              34265,
              34269,
              34271,
              34272,
              34273,
              34277,
              34279,
              34280,
              34281,
              34287,
              34289,
              34290,
              34291,
              34295,
              34297,
              34298,
              34299,
              34303,
              34305,
              34306,
              34307,
              34311,
              34313,
              34314,
              34315,
              34321,
              34323,
              34324,
              34325,
              34329,
              34331,
              34332,
              34333,
              34337,
              34339,
              34340,
              34341,
              34345,
              34347,
              34348,
              34349,
              34353,
              34355,
              34356,
              34357,
              34363,
              34365,
              34366,
              34367,
              34372,
              34383,
              34395,
              34406,
              34417,
              34428,
              34440,
              34451,
              34462,
              34474,
              34485,
              34496,
              34507,
              34841,
              34843,
              34844,
              34845,
              35108,
              35110,
              35111,
              35112,
              35116,
              35118,
              35119,
              35120,
              35124,
              35126,
              35127,
              35128,
              35132,
              35134,
              35135,
              35136,
              35140,
              35142,
              35143,
              35144,
              35148,
              35150,
              35151,
              35152,
              35156,
              35158,
              35159,
              35160,
              35164,
              35166,
              35167,
              35168,
              35174,
              35176,
              35177,
              35178,
              35182,
              35184,
              35185,
              35186,
              35190,
              35192,
              35193,
              35194,
              35200,
              35202,
              35203,
              35204,
              35208,
              35210,
              35211,
              35212,
              35216,
              35218,
              35219,
              35220,
              35844,
              35845,
              35846,
              35847,
              35854,
              35855,
              35856,
              35857,
              35864,
              35865,
              35866,
              35867,
              35874,
              35875,
              35876,
              35877,
              35884,
              35885,
              35886,
              35887,
              35894,
              35895,
              35896,
              35897,
              35907,
              35908,
              35909,
              35910,
              35917,
              35918,
              35919,
              35920,
              35927,
              35928,
              35929,
              35930,
              35937,
              35938,
              35939,
              35940,
              35947,
              35948,
              35949,
              35950,
              35957,
              35958,
              35959,
              35960,
              35970,
              35971,
              35972,
              35973,
              35980,
              35981,
              35982,
              35983,
              35990,
              35991,
              35992,
              35993,
              36000,
              36001,
              36002,
              36003,
              36010,
              36011,
              36012,
              36013,
              36020,
              36021,
              36022,
              36023,
              36030,
              36031,
              36032,
              36033,
              36043,
              36044,
              36045,
              36046,
              36053,
              36054,
              36055,
              36056,
              36063,
              36064,
              36065,
              36066,
              36073,
              36074,
              36075,
              36076,
              36083,
              36084,
              36085,
              36086,
              36096,
              36097,
              36098,
              36099,
              36106,
              36107,
              36108,
              36109,
              36116,
              36117,
              36118,
              36119,
              36129,
              36130,
              36131,
              36132,
              36139,
              36140,
              36141,
              36142,
              36149,
              36150,
              36151,
              36152,
              36161,
              36162,
              36163,
              36164,
              36171,
              36172,
              36173,
              36174,
              36181,
              36182,
              36183,
              36184,
              36191,
              36192,
              36193,
              36194,
              36203,
              36204,
              36205,
              36206,
              36213,
              36214,
              36215,
              36216,
              36223,
              36224,
              36225,
              36226,
              36233,
              36234,
              36235,
              36236,
              36243,
              36244,
              36245,
              36246,
              36253,
              36254,
              36255,
              36256,
              36263,
              36264,
              36265,
              36266,
              36273,
              36274,
              36275,
              36276,
              36285,
              36286,
              36287,
              36288,
              36295,
              36296,
              36297,
              36298,
              36305,
              36306,
              36307,
              36308,
              36315,
              36316,
              36317,
              36318,
              36325,
              36326,
              36327,
              36328,
              36337,
              36338,
              36339,
              36340,
              36347,
              36348,
              36349,
              36350,
              36360,
              36361,
              36362,
              36363,
              36370,
              36371,
              36372,
              36373,
              36380,
              36381,
              36382,
              36383,
              36390,
              36391,
              36392,
              36393,
              36403,
              36404,
              36405,
              36406,
              36413,
              36414,
              36415,
              36416,
              36423,
              36424,
              36425,
              36426,
              36433,
              36434,
              36435,
              36436,
              36446,
              36447,
              36448,
              36449,
              36456,
              36457,
              36458,
              36459,
              36466,
              36467,
              36468,
              36469,
              36479,
              36480,
              36481,
              36482,
              36489,
              36490,
              36491,
              36492,
              36499,
              36500,
              36501,
              36502,
              36509,
              36510,
              36511,
              36512,
              36519,
              36520,
              36521,
              36522,
              36532,
              36533,
              36534,
              36535,
              36542,
              36543,
              36544,
              36545,
              36552,
              36553,
              36554,
              36555,
              36562,
              36563,
              36564,
              36565,
              36575,
              36576,
              36577,
              36578,
              36585,
              36586,
              36587,
              36588,
              36595,
              36596,
              36597,
              36598,
              36605,
              36606,
              36607,
              36608,
              36619,
              36620,
              36621,
              36622,
              36629,
              36630,
              36631,
              36632,
              36639,
              36640,
              36641,
              36642,
              36649,
              36650,
              36651,
              36652,
              36663,
              36664,
              36665,
              36666,
              36673,
              36674,
              36675,
              36676,
              36683,
              36684,
              36685,
              36686,
              36693,
              36694,
              36695,
              36696,
              36706,
              36707,
              36708,
              36709,
              36716,
              36717,
              36718,
              36719,
              36726,
              36727,
              36728,
              36729,
              36736,
              36737,
              36738,
              36739,
              36746,
              36747,
              36748,
              36749,
              36759,
              36760,
              36761,
              36762,
              36769,
              36770,
              36771,
              36772,
              36779,
              36780,
              36781,
              36782,
              36789,
              36790,
              36791,
              36792,
              36802,
              36803,
              36804,
              36805,
              36812,
              36813,
              36814,
              36815,
              36822,
              36823,
              36824,
              36825,
              36832,
              36833,
              36834,
              36835,
              36845,
              36846,
              36847,
              36848,
              36855,
              36856,
              36857,
              36858,
              36865,
              36866,
              36867,
              36868,
              36875,
              36876,
              36877,
              36878,
              36887,
              36888,
              36889,
              36890,
              36897,
              36898,
              36899,
              36900,
              36907,
              36908,
              36909,
              36910,
              36917,
              36918,
              36919,
              36920,
              36927,
              36928,
              36929,
              36930,
              36937,
              36938,
              36939,
              36940,
              36947,
              36948,
              36949,
              36950,
              36957,
              36958,
              36959,
              36960,
              36969,
              36970,
              36971,
              36972,
              36979,
              36980,
              36981,
              36982,
              36989,
              36990,
              36991,
              36992,
              36999,
              37000,
              37001,
              37002,
              37011,
              37012,
              37013,
              37014,
              37021,
              37022,
              37023,
              37024,
              37031,
              37032,
              37033,
              37034,
              37041,
              37042,
              37043,
              37044,
              37051,
              37052,
              37053,
              37054,
              37061,
              37062,
              37063,
              37064,
              37071,
              37072,
              37073,
              37074,
              37081,
              37082,
              37083,
              37084,
              37200,
              37202,
              37203,
              37204,
              37208,
              37210,
              37211,
              37212,
              37216,
              37218,
              37219,
              37220,
              37226,
              37228,
              37229,
              37230,
              37236,
              37238,
              37239,
              37240,
              37246,
              37248,
              37249,
              37250,
              37255,
              37266,
              37277,
              37288,
              37879,
              37881,
              37882,
              37883,
              37887,
              37889,
              37890,
              37891,
              37895,
              37897,
              37898,
              37899,
              37903,
              37905,
              37906,
              37907,
              37911,
              37913,
              37914,
              37915,
              37919,
              37921,
              37922,
              37923,
              37929,
              37931,
              37932,
              37933,
              37937,
              37939,
              37940,
              37941,
              37945,
              37947,
              37948,
              37949,
              37953,
              37955,
              37956,
              37957,
              37963,
              37965,
              37966,
              37967,
              37971,
              37973,
              37974,
              37975,
              37979,
              37981,
              37982,
              37983,
              37987,
              37989,
              37990,
              37991,
              37995,
              37997,
              37998,
              37999,
              38003,
              38005,
              38006,
              38007,
              38014,
              38016,
              38017,
              38018,
              38022,
              38024,
              38025,
              38026,
              38030,
              38032,
              38033,
              38034,
              38040,
              38042,
              38043,
              38044,
              38048,
              38050,
              38051,
              38052,
              38056,
              38058,
              38059,
              38060,
              38067,
              38069,
              38070,
              38071,
              38075,
              38077,
              38078,
              38079,
              38083,
              38085,
              38086,
              38087,
              38094,
              38096,
              38097,
              38098,
              38104,
              38106,
              38107,
              38108,
              38114,
              38116,
              38117,
              38118,
              38122,
              38124,
              38125,
              38126,
              38130,
              38132,
              38133,
              38134,
              38138,
              38140,
              38141,
              38142,
              38146,
              38148,
              38149,
              38150,
              38157,
              38159,
              38160,
              38161,
              38165,
              38167,
              38168,
              38169,
              38173,
              38175,
              38176,
              38177,
              38181,
              38183,
              38184,
              38185,
              38191,
              38193,
              38194,
              38195,
              38199,
              38201,
              38202,
              38203,
              38207,
              38209,
              38210,
              38211,
              38218,
              38220,
              38221,
              38222,
              38226,
              38228,
              38229,
              38230,
              38234,
              38236,
              38237,
              38238,
              38242,
              38244,
              38245,
              38246,
              38250,
              38252,
              38253,
              38254,
              38258,
              38260,
              38261,
              38262,
              38268,
              38270,
              38271,
              38272,
              38276,
              38278,
              38279,
              38280,
              38287,
              38289,
              38290,
              38291,
              38506,
              38507,
              38508,
              38509,
              38516,
              38517,
              38518,
              38519,
              38526,
              38527,
              38528,
              38529,
              38536,
              38537,
              38538,
              38539,
              38546,
              38547,
              38548,
              38549,
              38556,
              38557,
              38558,
              38559,
              38568,
              38569,
              38570,
              38571,
              38578,
              38579,
              38580,
              38581,
              38588,
              38589,
              38590,
              38591,
              38598,
              38599,
              38600,
              38601,
              38608,
              38609,
              38610,
              38611,
              38618,
              38619,
              38620,
              38621,
              38630,
              38631,
              38632,
              38633,
              38640,
              38641,
              38642,
              38643,
              38650,
              38651,
              38652,
              38653,
              38660,
              38661,
              38662,
              38663,
              38670,
              38671,
              38672,
              38673,
              38680,
              38681,
              38682,
              38683,
              38690,
              38691,
              38692,
              38693,
              38700,
              38701,
              38702,
              38703,
              38710,
              38711,
              38712,
              38713,
              38722,
              38723,
              38724,
              38725,
              38732,
              38733,
              38734,
              38735,
              38742,
              38743,
              38744,
              38745,
              38752,
              38753,
              38754,
              38755,
              38762,
              38763,
              38764,
              38765,
              38774,
              38775,
              38776,
              38777,
              38784,
              38785,
              38786,
              38787,
              38794,
              38795,
              38796,
              38797,
              38804,
              38805,
              38806,
              38807,
              38814,
              38815,
              38816,
              38817,
              38824,
              38825,
              38826,
              38827,
              38834,
              38835,
              38836,
              38837,
              38844,
              38845,
              38846,
              38847,
              38856,
              38857,
              38858,
              38859,
              38866,
              38867,
              38868,
              38869,
              38876,
              38877,
              38878,
              38879,
              38888,
              38889,
              38890,
              38891,
              38898,
              38899,
              38900,
              38901,
              38908,
              38909,
              38910,
              38911,
              38918,
              38919,
              38920,
              38921,
              38928,
              38929,
              38930,
              38931,
              38938,
              38939,
              38940,
              38941,
              38948,
              38949,
              38950,
              38951,
              38958,
              38959,
              38960,
              38961,
              39841,
              39843,
              39844,
              39845,
              39852,
              39854,
              39855,
              39856,
              39860,
              39862,
              39863,
              39864,
              39869,
              39880,
              39891,
              39902,
              39913,
              40569,
              40570,
              40571,
              40572,
              40579,
              40580,
              40581,
              40582,
              40589,
              40590,
              40591,
              40592,
              40599,
              40600,
              40601,
              40602,
              40611,
              40612,
              40613,
              40614,
              40621,
              40622,
              40623,
              40624,
              40631,
              40632,
              40633,
              40634,
              40641,
              40642,
              40643,
              40644,
              40651,
              40652,
              40653,
              40654,
              40661,
              40662,
              40663,
              40664,
              40671,
              40672,
              40673,
              40674,
              40681,
              40682,
              40683,
              40684,
              40691,
              40692,
              40693,
              40694,
              40701,
              40702,
              40703,
              40704,
              42989,
              42991,
              42992,
              42993,
              77916,
              77917,
              77957,
              77958,
              77959,
              77960,
              77961,
              77962,
              77963,
              77964,
              77965,
              77966,
              77968,
              77969,
              77970,
              78025,
              78026,
              78027,
              78028,
              78029,
              78107,
              78108,
              78109,
              78110,
              78111,
              78116,
              78121,
              78122,
              78158,
              78167,
              78170,
              78171,
              78188,
              78189,
              78190,
              78191,
              78192,
              78210,
              78220,
              78243,
              78244,
              78245,
              78246,
              78247,
              78255,
              78256,
              78257,
              78258,
              78259,
              78262,
              78263,
              78503,
              78504,
              78505,
              78506,
              78589,
              78591,
              78592,
              78593,
              78594,
              78595,
              78596,
              78597,
              78598,
              78599,
              78600,
              78601,
              78602,
              78603,
              78604,
              78605,
              78606,
              78607,
              78609,
              78610,
              78625,
              78626,
              78627,
              78664,
              78666,
              78667,
              78671,
              78672,
              78673,
              78691,
              78692,
              78693,
              78694,
              78705,
              78706,
              78707,
              78708,
              78709,
              78710,
              78711,
              78712,
              78776,
              78777,
              78780,
              78787,
              78798,
              78799,
              78800,
              78813,
              78814,
              78818,
              78843,
              78848,
              78849,
              78850,
              78851,
              78860,
              78861,
              78909,
              78910,
              78916,
              78917,
              78918,
              78924,
              78930,
              78931,
              78932,
              78933,
              78934,
              78935,
              78936,
              78937,
              78938,
              78971,
              78972,
              78973,
              78994,
              78995,
              78996,
              78999,
              79000,
              79001,
              79002,
              79003,
              79004,
              79005,
              79006,
              79007,
              79008,
              79009,
              79010,
              79011,
              79012,
              79013,
              79130,
              999516,
              999517,
              999557,
              999558,
              999559,
              999560,
              999561,
              999562,
              999563,
              999564,
              999565,
              999566,
              999568,
              999569,
              999570,
              999625,
              999626,
              999627,
              999628,
              999629,
              999707,
              999708,
              999709,
              999710,
              999711,
              999716,
              999721,
              999722,
              999758,
              999767,
              999770,
              999771,
              999788,
              999789,
              999790,
              999791,
              999792,
              999810,
              999820,
              999843,
              999844,
              999845,
              999846,
              999847,
              999855,
              999856,
              999857,
              999858,
              999859,
              999862,
              999863,
              1000103,
              1000104,
              1000105,
              1000106,
              1000189,
              1000191,
              1000192,
              1000193,
              1000194,
              1000195,
              1000196,
              1000197,
              1000198,
              1000199,
              1000200,
              1000201,
              1000202,
              1000203,
              1000204,
              1000205,
              1000206,
              1000207,
              1000209,
              1000210,
              1000225,
              1000226,
              1000227,
              1000264,
              1000266,
              1000267,
              1000271,
              1000272,
              1000273,
              1000291,
              1000292,
              1000293,
              1000294,
              1000305,
              1000306,
              1000307,
              1000308,
              1000309,
              1000310,
              1000311,
              1000312,
              1000376,
              1000377,
              1000380,
              1000387,
              1000398,
              1000399,
              1000400,
              1000413,
              1000414,
              1000418,
              1000443,
              1000448,
              1000449,
              1000450,
              1000451,
              1000460,
              1000461,
              1000509,
              1000510,
              1000516,
              1000517,
              1000518,
              1000524,
              1000530,
              1000531,
              1000532,
              1000533,
              1000534,
              1000535,
              1000536,
              1000537,
              1000538,
              1000571,
              1000572,
              1000573,
              1000594,
              1000595,
              1000596,
              1000599,
              1000600,
              1000601,
              1000602,
              1000603,
              1000604,
              1000605,
              1000606,
              1000607,
              1000608,
              1000609,
              1000610,
              1000611,
              1000612,
              1000613,
              1000730,
              4194305,
              4194306,
              4194307,
              4194308,
              4194309,
              4194310,
              4194311,
              4194312,
              4194313,
              4194314,
              4194315,
              4194316,
              4194317,
              4194318,
              4194319,
              4194320,
              4194321,
              4194322,
              4194323,
              4194324,
              4194325,
              4194326,
              4194327,
              4194328,
              4194329,
              4194330,
              4194331,
              4194332,
              4194333,
              4194334,
              4194335,
              4194336,
              4194337,
              4194338,
              4194339,
              4194340,
              4194341,
              4194342,
              4194343,
              4194344,
              4194345,
              4194346,
              4194347,
              4194348,
              4194349,
              4194350,
              4194351,
              4194352,
              4194353,
              4194354,
              4194355,
              4194356,
              4194357,
              4194358,
              4194359,
              4194360,
              4194361,
              4194362,
              4194363,
              4194364,
              4194365,
              4194366,
              4194367,
              4194368,
              4194369,
              4194370,
              4194371,
              4194372,
              4194373,
              4194374,
              4194375,
              4194376,
              4194377,
              4194378,
              4194379,
              4194380,
              4194381,
              4194382,
              4194383,
              4194384,
              4194385,
              4194386,
              4194387,
              4194388,
              4194389,
              4194390,
              4194391,
              4194392,
              4194393,
              4194394,
              4194395,
              4194396,
              4194397,
              4194398,
              4194399,
              4194400,
              4194401,
              4194402,
              4194403,
              4194404,
              4194405,
              4194406,
              4194407,
              4194408,
              4194409,
              4194410,
              4194411,
              4194412,
              4194413,
              4194414,
              4194415,
              4194416,
              4194417,
              4194418,
              4194419,
              4194420,
              4194421,
              4194422,
              4194423,
              4194424,
              4194425,
              4194426,
              4194427,
              4194428,
              4194429,
              4194430,
              4194431,
              4194432,
              4194433,
              4194434,
              4194435,
              4194436,
              4194437,
              4194438,
              4194439,
              4194440,
              4194441,
              4194442,
              4194443,
              4194444,
              4194445,
              4194446,
              4194447,
              4194448,
              4194449,
              4194450,
              4194451,
              4194452,
              4194453,
              4194454,
              4194455,
              4194456,
              4194457,
              4194458,
              4194459,
              4194460,
              4194461,
              4194462,
              4194463,
              4194464,
              4194465,
              4194466,
              4194467,
              4194468,
              4194469,
              4194470,
              4194471,
              4194472,
              4194473,
              4194474,
              4194475,
              4194476,
              4194477,
              4194478,
              4194479,
              4194480,
              4194481,
              4194482,
              4194483,
              4194484,
              4194485,
              4194486,
              4194487,
              4194488,
              4194489,
              4194490,
              4194491,
              4194492,
              4194493,
              4194494,
              4194495,
              4194496,
              4194497,
              4194498,
              4194499,
              4194500,
              4194501,
              4194502,
              4194503,
              4194504,
              4194505,
              4194506,
              4194507,
              4194508,
              4194509,
              4194510,
              4194511,
              4194512,
              4194513,
              4194514,
              4194515,
              4194516,
              4194517,
              4194518,
              4194519,
              4194520,
              4194521,
              4194522,
              4194523,
              4194524,
              4194525,
              4194526,
              4194527,
              4194528,
              4194529,
              4194530,
              4194531,
              4194532,
              4194533,
              4194534,
              4194535,
              4194536,
              4194537,
              4194538,
              4194539,
              4194540,
              4194541,
              4194542,
              4194543,
              4194544,
              4194545,
              4194546,
              4194547,
              4194548,
              4194549,
              4194550,
              4194551,
              4194552,
              4194553,
              4194554,
              4194555,
              4194556,
              4194557,
              4194558,
              4194559,
              4194560,
              4194561,
              4194562,
              4194563,
              4194564,
              4194565,
              4194566,
              4194567,
              4194568,
              4194569,
              4194570,
              4194571,
              4194572,
              4194573,
              4194574,
              4194575,
              4194576,
              4194577,
              4194578,
              4194579,
              4194580,
              4194581,
              4194582,
              4194583,
              4194584,
              4194585,
              4194586,
              4194587,
              4194588,
              4194589,
              4194590,
              4194591,
              4194592,
              4194593,
              4194594,
              4194595,
              4194596,
              4194597,
              4194598,
              4194599,
              4194600,
              4194601,
              4194602,
              4194603,
              4194604,
              4194605,
              4194606,
              4194607,
              4194608,
              4194609,
              4194610,
              4194611,
              4194612,
              4194613,
              4194614,
              4194615,
              4194616,
              4194617,
              4194618,
              4194619,
              4194620,
              4194621,
              4194622,
              4194623,
              4194624,
              4194625,
              4194626,
              4194627,
              4194628,
              4194629,
              4194630,
              4194631,
              4194632,
              4194633,
              4194634,
              4194635,
              4194636,
              4194637,
              4194638,
              4194639,
              4194640,
              4194641,
              4194642,
              4194643,
              4194644,
              4194645,
              4194646,
              4194647,
              4194648,
              4194649,
              4194650,
              4194651,
              4194652,
              4194653,
              4194654,
              4194655,
              4194656,
              4194657,
              4194658,
              4194659,
              4194660,
              4194661,
              4194662,
              4194663,
              4194664,
              4194665,
              4194666,
              4194667,
              4194668,
              4194669,
              4194670,
              4194671,
              4194672,
              4194673,
              4194674,
              4194675,
              4194676,
              4194677,
              4194678,
              4194679,
              4194680,
              4194681,
              4194682,
              4194683,
              4194684,
              4194685,
              4194686,
              4194687,
              4194688,
              4194689,
              4194690,
              4194691,
              4194692,
              4194693,
              4194694,
              4194695,
              4194696,
              4194697,
              4194698,
              4194699,
              4194700,
              4194701,
              4194702,
              4194703,
              4194704,
              4194705,
              4194706,
              4194707,
              4194708,
              4194709,
              4194710,
              4194711,
              4194712,
              4194713,
              4194714,
              4194715,
              4194716,
              4194717,
              4194718,
              4194719,
              4194720,
              4194721,
              4194722,
              4194723,
              4194724,
              4194725,
              4194726,
              4194727,
              4194728,
              4194729,
              4194730,
              4194731,
              4194732,
              4194733,
              4194734,
              4194735,
              4194736,
              4194737,
              4194738,
              4194739,
              4194740,
              4194741,
              4194742,
              4194743,
              4194744,
              4194745,
              4194746,
              4194747,
              4194748,
              4194749,
              4194750,
              4194751,
              4194752,
              4194753,
              4194754,
              4194755,
              4194756,
              4194757,
              4194758,
              4194759,
              4194760,
              4194761,
              4194762,
              4194763,
              4194764,
              4194765,
              4194766,
              4194767,
              4194768,
              4194769,
              4194770,
              4194771,
              4194772,
              4194773,
              4194774,
              4194775,
              4194776,
              4194777,
              4194778,
              4194779,
              4194780,
              4194781,
              4194782,
              4194783,
              4194784,
              4194785,
              4194786,
              4194787,
              4194788,
              4194789,
              4194790,
              4194791,
              4194792,
              4194793,
              4194794,
              4194795,
              4194796,
              4194797,
              4194798,
              4194799,
              4194800,
              4194801,
              4194802,
              4194803,
              4194804,
              4194805,
              4194806,
              4194807,
              4194808,
              4194809,
              4194810,
              4194811,
              4194812,
              4194813,
              4194814,
              4194815,
              4194816,
              4194817,
              4194818,
              4194819,
              4194820,
              4194821,
              4194822,
              4194823,
              4194824,
              4194825,
              4194826,
              4194827,
              4194828,
              4194829,
              4194830,
              4194831,
              4194832,
              4194833,
              4194834,
              4194835,
              4194836,
              4194837,
              4194838,
              4194839,
              4194840,
              4194841,
              4194842,
              4194843,
              4194844,
              4194845,
              4194846,
              4194847,
              4194848,
              4194849,
              4194850,
              4194851,
              4194852,
              4194853,
              4194854,
              4194855,
              4194856,
              4194857,
              4194858,
              4194859,
              4194860,
              4194861,
              4194862,
              4194863,
              4194864,
              4194865,
              4194866,
              4194867,
              4194868,
              4194869,
              4194870,
              4194871,
              4194872,
              4194873,
              4194874,
              4194875,
              4194876,
              4194877,
              4194878,
              4194879,
              4194880,
              4194881,
              4194882,
              4194883,
              4194884,
              4194885,
              4194886,
              4194887,
              4194888,
              4194889,
              4194890,
              4194891,
              4194892,
              4194893,
              4194894,
              4194895,
              4194896,
              4194897,
              4194898,
              4194899,
              4194900,
              4194901,
              4194902,
              4194903,
              4194904,
              4194905,
              4194906,
              4194907,
              4194908,
              4194909,
              4194910,
              4194911,
              4194912,
              4194913,
              4194914,
              4194915,
              4194916,
              4194917,
              4194918,
              4194919,
              4194920,
              4194921,
              4194922,
              4194923,
              4194924,
              4194925,
              4194926,
              4194927,
              4194928,
              4194929,
              4194930,
              4194931,
              4194932,
              4194933,
              4194934,
              4194935,
              4194936,
              4194937,
              4194938,
              4194939,
              4194940,
              4194941,
              4194942,
              4194943,
              4194944,
              4194945,
              4194946,
              4194947,
              4194948,
              4194949,
              4194950,
              4194951,
              4194952,
              4194953,
              4194954,
              4194955,
              4194956,
              4194957,
              4194958,
              4194959,
              4194960,
              4194961,
              4194962,
              4194963,
              4194964,
              4194965,
              4194966,
              4194967,
              4194968,
              4194969,
              4194970,
              4194971,
              4194972,
              4194973,
              4194974,
              4194975,
              4194976,
              4194977,
              4194978,
              4194979,
              4194980,
              4194981,
              4194982,
              4194983,
              4194984,
              4194985,
              4194986,
              4194987,
              4194988,
              4194989,
              4194990,
              4194991,
              4194992,
              4194993,
              4194994,
              4194995,
              4194996,
              4194997,
              4194998,
              4194999,
              4195000,
              4195001,
              4195002,
              4195003,
              4195004,
              4195005,
              4195006,
              4195007,
              4195008,
              4195009,
              4195010,
              4195011,
              4195012,
              4195013,
              4195014,
              4195015,
              4195016,
              4195017,
              4195018,
              4195019,
              4195020,
              4195021,
              4195022,
              4195023,
              4195024,
              4195025,
              4195026,
              4195027,
              4195028,
              4195029,
              4195030,
              4195031,
              4195032,
              4195033,
              4195034,
              4195035,
              4195036,
              4195037,
              4195038,
              4195039,
              4195040,
              4195041,
              4195042,
              4195043,
              4195044,
              4195045,
              4195046,
              4195047,
              4195048,
              4195049,
              4195050,
              4195051,
              4195052,
              4195053,
              4195054,
              4195055,
              4195056,
              4195057,
              4195058,
              4195059,
              4195060,
              4195061,
              4195062,
              4195063,
              4195064,
              4195065,
              4195066,
              4195067,
              4195068,
              4195069,
              4195070,
              4195071,
              4195072,
              4195073,
              4195074,
              4195075,
              4195076,
              4195077,
              4195078,
              4195079,
              4195080,
              4195081,
              4195082,
              4195083,
              4195084,
              4195085,
              4195086,
              4195087,
              4195088,
              4195089,
              4195090,
              4195091,
              4195092,
              4195093,
              4195094,
              4195095,
              4195096,
              4195097,
              4195098,
              4195099,
              4195100,
              4195101,
              4195102,
              4195103,
              4195104,
              4195105,
              4195106,
              4195107,
              4195108,
              4195109,
              4195110,
              4195111,
              4195112,
              4195113,
              4195114,
              4195115,
              4195116,
              4195117,
              4195118,
              4195119,
              4195120,
              4195121,
              4195122,
              4195123,
              4195124,
              4195125,
              4195126,
              4195127,
              4195128,
              4195129,
              4195130,
              4195131,
              4195132,
              4195133,
              4195134,
              4195135,
              4195136,
              4195137,
              4195138,
              4195139,
              4195140,
              4195141,
              4195142,
              4195143,
              4195144,
              4195145,
              4195146,
              4195147,
              4195148,
              4195149,
              4195150,
              4195151,
              4195152,
              4195153,
              4195154,
              4195155,
              4195156,
              4195157,
              4195158,
              4195159,
              4195160,
              4195161,
              4195162,
              4195163,
              4195164,
              4195165,
              4195166,
              4195167,
              4195168,
              4195169,
              4195170,
              4195171,
              4195172,
              4195173,
              4195174,
              4195175,
              4195176,
              4195177,
              4195178,
              4195179,
              4195180,
              4195181,
              4195182,
              4195183,
              4195184,
              4195185,
              4195186,
              4195187,
              4195188,
              4195189,
              4195190,
              4195191,
              4195192,
              4195193,
              4195194,
              4195195,
              4195196,
              4195197,
              4195198,
              4195199,
              4195200,
              4195201,
              4195202,
              4195203,
              4195204,
              4195205,
              4195206,
              4195207,
              4195208,
              4195209,
              4195210,
              4195211,
              4195212,
              4195213,
              4195214,
              4195215,
              4195216,
              4195217,
              4195218,
              4195219,
              4195220,
              4195221,
              4195222,
              4195223,
              4195224,
              4195225,
              4195226,
              4195227,
              4195228,
              4195229,
              4195230,
              4195231,
              4195232,
              4195233,
              4195234,
              4195235,
              4195236,
              4195237,
              4195238,
              4195239,
              4195240,
              4195241,
              4195242,
              4195243,
              4195244,
              4195245,
              4195246,
              4195247,
              4195248,
              4195249,
              4195250,
              4195251,
              4195252,
              4195253,
              4195254,
              4195255,
              4195256,
              4195257,
              4195258,
              4195259,
              4195260,
              4195261,
              4195262,
              4195263,
              4195264,
              4195265,
              4195266,
              4195267,
              4195268,
              4195269,
              4195270,
              4195271,
              4195272,
              4195273,
              4195274,
              4195275,
              4195276,
              4195277,
              4195278,
              4195279,
              4195280,
              4195281,
              4195282,
              4195283,
              4195284,
              4195285,
              4195286,
              4195287,
              4195288,
              4195289,
              4195290,
              4195291,
              4195292,
              4195293,
              4195294,
              4195295,
              4195296,
              4195297,
              4195298,
              4195299,
              4195300,
              4195301,
              4195302,
              4195303,
              4195304,
              4195305,
              4195306,
              4195307,
              4195308,
              4195309,
              4195310,
              4195311,
              4195312,
              4195313,
              4195314,
              4195315,
              4195316,
              4195317,
              4195318,
              4195319,
              4195320,
              4195321,
              4195322,
              4195323,
              4195324,
              4195325,
              4195326,
              4195327,
              4195328,
              4195329,
              4195330,
              4195331,
              4195332,
              4195333,
              4195334,
              4195335,
              4195336,
              4195337,
              4195338,
              4195339,
              4195340,
              4195341,
              4195342,
              4195343,
              4195344,
              4195345,
              4195346,
              4195347,
              4195348,
              4195349,
              4195350,
              4195351,
              4195352,
              4195353,
              4195354,
              4195355,
              4195356,
              4195357,
              4195358,
              4195359,
              4195360,
              4195361,
              4195362,
              4195363,
              4195364,
              4195365,
              4195366,
              4195367,
              4195368,
              4195369,
              4195370,
              4195371,
              4195372,
              4195373,
              4195374,
              4195375,
              4195376,
              4195377,
              4195378,
              4195379,
              4195380,
              4195381,
              4195382,
              4195383,
              4195384,
              4195385,
              4195386,
              4195387,
              4195388,
              4195389,
              4195390,
              4195391,
              4195392,
              4195393,
              4195394,
              4195395,
              4195396,
              4195397,
              4195398,
              4195399,
              4195400,
              4195401,
              4195402,
              4195403,
              4195404,
              4195405,
              4195406,
              4195407,
              4195408,
              4195409,
              4195410,
              4195411,
              4195412,
              4195413,
              4195414,
              4195415,
              4195416,
              4195417,
              4195418,
              4195419,
              4195420,
              4195421,
              4195422,
              4195423,
              4195424,
              4195425,
              4195426,
              4195427,
              4195428,
              4195429,
              4195430,
              4195431,
              4195432,
              4195433,
              4195434,
              4195435,
              4195436,
              4195437,
              4195438,
              4195439,
              4195440,
              4195441,
              4195442,
              4195443,
              4195444,
              4195445,
              4195446,
              4195447,
              4195448,
              4195449,
              4195450,
              4195451,
              4195452,
              4195453,
              4195454,
              4195455,
              4195456,
              4195457,
              4195458,
              4195459,
              4195460,
              4195461,
              4195462,
              4195463,
              4195464,
              4195465,
              4195466,
              4195467,
              4195468,
              4195469,
              4195470,
              4195471,
              4195472,
              4195473,
              4195474,
              4195475,
              4195476,
              4195477,
              4195478,
              4195479,
              4195480,
              4195481,
              4195482,
              4195483,
              4195484,
              4195485,
              4195486,
              4195487,
              4195488,
              4195489,
              4195490,
              4195491,
              4195492,
              4195493,
              4195494,
              4195495,
              4195496,
              4195497,
              4195498,
              4195499,
              4195500,
              4195501,
              4195502,
              4195503,
              4195504,
              4195505,
              4195506,
              4195507,
              4195508,
              4195509,
              4195510,
              4195511,
              4195512,
              4195513,
              4195514,
              4195515,
              4195516,
              4195517,
              4195518,
              4195519,
              4195520,
              4195521,
              4195522,
              4195523,
              4195524,
              4195525,
              4195526,
              4195527,
              4195528,
              4195529,
              4195530,
              4195531,
              4195532,
              4195533,
              4195534,
              4195535,
              4195536,
              4195537,
              4195538,
              4195539,
              4195540,
              4195541,
              4195542,
              4195543,
              4195544,
              4195545,
              4195546,
              4195547,
              4195548,
              4195549,
              4195550,
              4195551,
              4195552,
              4195553,
              4195554,
              4195555,
              4195556,
              4195557,
              4195558,
              4195559,
              4195560,
              4195561,
              4195562,
              4195563,
              4195564,
              4195565,
              4195566,
              4195567,
              4195568,
              4195569,
              4195570,
              4195571,
              4195572,
              4195573,
              4195574,
              4195575,
              4195576,
              4195577,
              4195578,
              4195579,
              4195580,
              4195581,
              4195582,
              4195583,
              4195584,
              4195585,
              4195586,
              4195587,
              4195588,
              4195589,
              4195590,
              4195591,
              4195592,
              4195593,
              4195594,
              4195595,
              4195596,
              4195597,
              4195598,
              4195599,
              4195600,
              4195601,
              4195602,
              4195603,
              4195604,
              4195605,
              4195606,
              4195607,
              4195608,
              4195609,
              4195610,
              4195611,
              4195612,
              4195613,
              4195614,
              4195615,
              4195616,
              4195617,
              4195618,
              4195619,
              4195620,
              4195621,
              4195622,
              4195623,
              4195624,
              4195625,
              4195626,
              4195627,
              4195628,
              4195629,
              4195630,
              4195631,
              4195632,
              4195633,
              4195634,
              4195635,
              4195636,
              4195637,
              4195638,
              4195639,
              4195640,
              4195641,
              4195642,
              4195643,
              4195644,
              4195645,
              4195646,
              4195647,
              4195648,
              4195649,
              4195650,
              4195651,
              4195652,
              4195653,
              4195654,
              4195655,
              4195656,
              4195657,
              4195658,
              4195659,
              4195660,
              4195661,
              4195662,
              4195663,
              4195664,
              4195665,
              4195666,
              4195667,
              4195668,
              4195669,
              4195670,
              4195671,
              4195672,
              4195673,
              4195674,
              4195675,
              4195676,
              4195677,
              4195678,
              4195679,
              4195680,
              4195681,
              4195682,
              4195683,
              4195684,
              4195685,
              4195686,
              4195687,
              4195688,
              4195689,
              4195690,
              4195691,
              4195692,
              4195693,
              4195694,
              4195695,
              4195696,
              4195697,
              4195698,
              4195699,
              4195700,
              4195701,
              4195702,
              4195703,
              4195704,
              4195705,
              4195706,
              4195707,
              4195708,
              4195709,
              4195710,
              4195711,
              4195712,
              4195713,
              4195714,
              4195715,
              4195716,
              4195717,
              4195718,
              4195719,
              4195720,
              4195721,
              4195722,
              4195723,
              4195724,
              4195725,
              4195726,
              4195727,
              4195728,
              4195729,
              4195730,
              4195731,
              4195732,
              4195733,
              4195734,
              4195735,
              4195736,
              4195737,
              4195738,
              4195739,
              4195740,
              4195741,
              4195742,
              4195743,
              4195744,
              4195745,
              4195746,
              4195747,
              4195748,
              4195749,
              4195750,
              4195751,
              4195752,
              4195753,
              4195754,
              4195755,
              4195756,
              4195757,
              4195758,
              4195759,
              4195760,
              4195761,
              4195762,
              4195763,
              4195764,
              4195765,
              4195766,
              4195767,
              4195768,
              4195769,
              4195770,
              4195771,
              4195772,
              4195773,
              4195774,
              4195775,
              4195776,
              4195777,
              4195778,
              4195779,
              4195780,
              4195781,
              4195782,
              4195783,
              4195784,
              4195785,
              4195786,
              4195787,
              4195788,
              4195789,
              4195790,
              4195791,
              4195792,
              4195793,
              4195794,
              4195795,
              4195796,
              4195797,
              4195798,
              4195799,
              4195800,
              4195801,
              4195802,
              4195803,
              4195804,
              4195805,
              4195806,
              4195807,
              4195808,
              4195809,
              4195810,
              4195811,
              4195812,
              4195813,
              4195814,
              4195815,
              4195816,
              4195817,
              4195818,
              4195819,
              4195820,
              4195821,
              4195822,
              4195823,
              4195824,
              4195825,
              4195826,
              4195827,
              4195828,
              4195829,
              4195830,
              4195831,
              4195832,
              4195833,
              4195834,
              4195835,
              4195836,
              4195837,
              4195838,
              4195839,
              4195840,
              4195841,
              4195842,
              4195843,
              4195844,
              4195845,
              4195846,
              4195847,
              4195848,
              4195849,
              4195850,
              4195851,
              4195852,
              4195853,
              4195854,
              4195855,
              4195856,
              4195857,
              4195858,
              4195859,
              4195860,
              4195861,
              4195862,
              4195863,
              4195864,
              4195865,
              4195866,
              4195867,
              4195868,
              4195869,
              4195870,
              4195871,
              4195872,
              4195873,
              4195874,
              4195875,
              4195876,
              4195877,
              4195878,
              4195879,
              4195880,
              4195881,
              4195882,
              4195883,
              4195884,
              4195885,
              4195886,
              4195887,
              4195888,
              4195889,
              4195890,
              4195891,
              4195892,
              4195893,
              4195894,
              4195895,
              4195896,
              4195897,
              4195898,
              4195899,
              4195900,
              4195901,
              4195902,
              4195903,
              4195904,
              4195905,
              4195906,
              4195907,
              4195908,
              4195909,
              4195910,
              4195911,
              4195912,
              4195913,
              4195914,
              4195915,
              4195916,
              4195917,
              4195918,
              4195919,
              4195920,
              4195921,
              4195922,
              4195923,
              4195924,
              4195925,
              4195926,
              4195927,
              4195928,
              4195929,
              4195930,
              4195931,
              4195932,
              4195933,
              4195934,
              4195935,
              4195936,
              4195937,
              4195938,
              4195939,
              4195940,
              4195941,
              4195942,
              4195943,
              4195944,
              4195945,
              4195946,
              4195947,
              4195948,
              4195949,
              4195950,
              4195951,
              4195952,
              4195953,
              4195954,
              4195955,
              4195956,
              4195957,
              4195958,
              4195959,
              4195960,
              4195961,
              4195962,
              4195963,
              4195964,
              4195965,
              4195966,
              4195967,
              4195968,
              4195969,
              4195970,
              4195971,
              4195972,
              4195973,
              4195974,
              4195975,
              4195976,
              4195977,
              4195978,
              4195979,
              4195980,
              4195981,
              4195982,
              4195983,
              4195984,
              4195985,
              4195986,
              4195987,
              4195988,
              4195989,
              4195990,
              4195991,
              4195992,
              4195993,
              4195994,
              4195995,
              4195996,
              4195997,
              4195998,
              4195999,
              4196000,
              4196001,
              4196002,
              4196003,
              4196004,
              4196005,
              4196006,
              4196007,
              4196008,
              4196009,
              4196010,
              4196011,
              4196012,
              4196013,
              4196014,
              4196015,
              4196016,
              4196017,
              4196018,
              4196019,
              4196020,
              4196021,
              4196022,
              4196023,
              4196024,
              4196025,
              4196026,
              4196027,
              4196028,
              4196029,
              4196030,
              4196031,
              4196032,
              4196033,
              4196034,
              4196035,
              4196036,
              4196037,
              4196038,
              4196039,
              4196040,
              4196041,
              4196042,
              4196043,
              4196044,
              4196045,
              4196046,
              4196047,
              4196048,
              4196049,
              4196050,
              4196051,
              4196052,
              4196053,
              4196054,
              4196055,
              4196056,
              4196057,
              4196058,
              4196059,
              4196060,
              4196061,
              4196062,
              4196063,
              4196064,
              4196065,
              4196066,
              4196067,
              4196068,
              4196069,
              4196070,
              4196071,
              4196072,
              4196073,
              4196074,
              4196075,
              4522066,
              4522408,
              4522414,
              4522421,
              4522435,
              4522448,
              4522454,
              4522465,
              4522472,
              4522474,
              4522480,
              4522482,
              4522500,
              4522502,
              4522519,
              4523218,
              4523256,
              4523262,
              4523300,
              4523311,
              4523313,
              4523349,
              4523352,
              4524766,
              4524769,
              4524774,
              4524776,
              4524780,
              4524782,
              4524789,
              4524796,
              4524799,
              4524836,
              4524852,
              4524855,
              4524857,
              4524859,
              4524861,
              4524863,
              4524884,
              4524886,
              4524888,
              4524890,
              4524892,
              4524896,
              4524898,
              4524902,
              4524905,
              4524916,
              4524925,
              4526538,
              4526545,
              4526547,
              4526549,
              4526551,
              4526553,
              4526561,
              4526563,
              4526566,
              4526568,
              4526570,
              4526572,
              4526574,
              4526576,
              4526578,
              4526580,
              4526584,
              4526587,
              4526605,
              4526646,
              4526653,
              4526657,
              4526662,
              4528969,
              4529292,
              4529373,
              4529375,
              4529380,
              4529401,
              4529415,
              4529458,
              4529464,
              4529597)
        )
    )
    namedValues = NamedValues(
        *(("generic", 0),
          ("f0019", 19),
          ("f0021", 21),
          ("f0056", 56),
          ("f0057", 57),
          ("f0058", 58),
          ("f0059", 59),
          ("f0060", 60),
          ("f0061", 61),
          ("f0062", 62),
          ("f0063", 63),
          ("f0064", 64),
          ("f0065", 65),
          ("f0066", 66),
          ("f0067", 67),
          ("f0068", 68),
          ("f0069", 69),
          ("f0070", 70),
          ("f0071", 71),
          ("f0072", 72),
          ("f0073", 73),
          ("f0074", 74),
          ("f0075", 75),
          ("f0076", 76),
          ("f0077", 77),
          ("f0078", 78),
          ("f0079", 79),
          ("f0080", 80),
          ("f0081", 81),
          ("f0082", 82),
          ("f0083", 83),
          ("f0084", 84),
          ("f0085", 85),
          ("f0086", 86),
          ("f0087", 87),
          ("f0088", 88),
          ("f0089", 89),
          ("f0090", 90),
          ("f0095", 95),
          ("f0096", 96),
          ("f0097", 97),
          ("f0098", 98),
          ("f0099", 99),
          ("f0100", 100),
          ("f0101", 101),
          ("f0149", 149),
          ("f0150", 150),
          ("f0151", 151),
          ("f0152", 152),
          ("f0153", 153),
          ("f0154", 154),
          ("f0155", 155),
          ("f0156", 156),
          ("f0157", 157),
          ("f0158", 158),
          ("f0159", 159),
          ("f0160", 160),
          ("f0161", 161),
          ("f0162", 162),
          ("f0163", 163),
          ("f0185", 185),
          ("f0186", 186),
          ("f0187", 187),
          ("f0188", 188),
          ("f0189", 189),
          ("f0190", 190),
          ("f0191", 191),
          ("f0192", 192),
          ("f0193", 193),
          ("f0194", 194),
          ("f0195", 195),
          ("f0196", 196),
          ("f0197", 197),
          ("f0198", 198),
          ("f0199", 199),
          ("f0200", 200),
          ("f0299", 299),
          ("f0300", 300),
          ("f0314", 314),
          ("f0315", 315),
          ("f0316", 316),
          ("f0317", 317),
          ("f0318", 318),
          ("f0319", 319),
          ("f0320", 320),
          ("f0321", 321),
          ("f0322", 322),
          ("f0323", 323),
          ("f0324", 324),
          ("f0325", 325),
          ("f0326", 326),
          ("f0332", 332),
          ("f0335", 335),
          ("f0349", 349),
          ("f0350", 350),
          ("f0351", 351),
          ("f0352", 352),
          ("f0353", 353),
          ("f0354", 354),
          ("f0355", 355),
          ("f0356", 356),
          ("f0357", 357),
          ("f0358", 358),
          ("f0359", 359),
          ("f0369", 369),
          ("f0370", 370),
          ("f0371", 371),
          ("f0372", 372),
          ("f0373", 373),
          ("f0374", 374),
          ("f0375", 375),
          ("f0376", 376),
          ("f0377", 377),
          ("f0378", 378),
          ("f0379", 379),
          ("f0380", 380),
          ("f0381", 381),
          ("f0657", 657),
          ("f0658", 658),
          ("f0659", 659),
          ("f0660", 660),
          ("f0661", 661),
          ("f0662", 662),
          ("f0663", 663),
          ("f0664", 664),
          ("f0665", 665),
          ("f0666", 666),
          ("f0667", 667),
          ("f0668", 668),
          ("f0669", 669),
          ("f0675", 675),
          ("f0687", 687),
          ("f0688", 688),
          ("f0689", 689),
          ("f0690", 690),
          ("f0691", 691),
          ("f0692", 692),
          ("f0693", 693),
          ("f0694", 694),
          ("f0695", 695),
          ("f0696", 696),
          ("f0697", 697),
          ("f0698", 698),
          ("f0699", 699),
          ("f0700", 700),
          ("f0701", 701),
          ("f0702", 702),
          ("f0703", 703),
          ("f0704", 704),
          ("f0705", 705),
          ("f0706", 706),
          ("f0707", 707),
          ("f0708", 708),
          ("f0709", 709),
          ("f0710", 710),
          ("f0711", 711),
          ("f0712", 712),
          ("f0713", 713),
          ("f0714", 714),
          ("f0715", 715),
          ("f0716", 716),
          ("f0717", 717),
          ("f0718", 718),
          ("f0719", 719),
          ("f0720", 720),
          ("f0721", 721),
          ("f0722", 722),
          ("f0723", 723),
          ("f0724", 724),
          ("f0725", 725),
          ("f0726", 726),
          ("f0727", 727),
          ("f0728", 728),
          ("f0729", 729),
          ("f0730", 730),
          ("f0731", 731),
          ("f0732", 732),
          ("f0733", 733),
          ("f0734", 734),
          ("f0735", 735),
          ("f0736", 736),
          ("f0737", 737),
          ("f0738", 738),
          ("f0739", 739),
          ("f0740", 740),
          ("f0741", 741),
          ("f0742", 742),
          ("f0743", 743),
          ("f0744", 744),
          ("f0745", 745),
          ("f0746", 746),
          ("f0747", 747),
          ("f0748", 748),
          ("f0749", 749),
          ("f0750", 750),
          ("f0751", 751),
          ("f0752", 752),
          ("f0753", 753),
          ("f0754", 754),
          ("f0755", 755),
          ("f0756", 756),
          ("f0757", 757),
          ("f0758", 758),
          ("f0759", 759),
          ("f0760", 760),
          ("f0792", 792),
          ("f0793", 793),
          ("f0794", 794),
          ("f0795", 795),
          ("f0796", 796),
          ("f0797", 797),
          ("f0798", 798),
          ("f0799", 799),
          ("f0800", 800),
          ("f0809", 809),
          ("f0810", 810),
          ("f0811", 811),
          ("f0812", 812),
          ("f0813", 813),
          ("f0814", 814),
          ("f0815", 815),
          ("f0816", 816),
          ("f0817", 817),
          ("f0818", 818),
          ("f0819", 819),
          ("f0820", 820),
          ("f0821", 821),
          ("f0822", 822),
          ("f0823", 823),
          ("f0824", 824),
          ("f0825", 825),
          ("f0826", 826),
          ("f0827", 827),
          ("f0828", 828),
          ("f0829", 829),
          ("f0830", 830),
          ("f0831", 831),
          ("f0832", 832),
          ("f0833", 833),
          ("f0834", 834),
          ("f0835", 835),
          ("f0836", 836),
          ("f0837", 837),
          ("f0838", 838),
          ("f0839", 839),
          ("f0844", 844),
          ("f0850", 850),
          ("f0851", 851),
          ("f0852", 852),
          ("f0853", 853),
          ("f0854", 854),
          ("f0855", 855),
          ("f0856", 856),
          ("f0857", 857),
          ("f0858", 858),
          ("f0859", 859),
          ("f0860", 860),
          ("f0861", 861),
          ("f0862", 862),
          ("f0863", 863),
          ("f0864", 864),
          ("f0865", 865),
          ("f0866", 866),
          ("f0871", 871),
          ("f0872", 872),
          ("f0899", 899),
          ("f0900", 900),
          ("f0901", 901),
          ("f0902", 902),
          ("f0903", 903),
          ("f0904", 904),
          ("f0905", 905),
          ("f0906", 906),
          ("f0907", 907),
          ("f0964", 964),
          ("f0965", 965),
          ("f0966", 966),
          ("f0967", 967),
          ("f0977", 977),
          ("f0978", 978),
          ("f0979", 979),
          ("f0980", 980),
          ("f0981", 981),
          ("f0982", 982),
          ("f0983", 983),
          ("f0984", 984),
          ("f0985", 985),
          ("f0986", 986),
          ("f0987", 987),
          ("f0996", 996),
          ("f0997", 997),
          ("f1014", 1014),
          ("f1020", 1020),
          ("f1038", 1038),
          ("f1039", 1039),
          ("f1040", 1040),
          ("f1041", 1041),
          ("f1042", 1042),
          ("f1043", 1043),
          ("f1044", 1044),
          ("f1045", 1045),
          ("f1046", 1046),
          ("f1047", 1047),
          ("f1048", 1048),
          ("f1049", 1049),
          ("f1050", 1050),
          ("f1051", 1051),
          ("f1052", 1052),
          ("f1053", 1053),
          ("f1054", 1054),
          ("f1055", 1055),
          ("f1056", 1056),
          ("f1057", 1057),
          ("f1058", 1058),
          ("f1059", 1059),
          ("f1060", 1060),
          ("f1061", 1061),
          ("f1062", 1062),
          ("f1115", 1115),
          ("f1116", 1116),
          ("f1117", 1117),
          ("f1118", 1118),
          ("f1119", 1119),
          ("f1120", 1120),
          ("f1121", 1121),
          ("f1122", 1122),
          ("f1123", 1123),
          ("f1124", 1124),
          ("f1125", 1125),
          ("f1126", 1126),
          ("f1127", 1127),
          ("f1128", 1128),
          ("f1129", 1129),
          ("f1130", 1130),
          ("f1131", 1131),
          ("f1132", 1132),
          ("f1133", 1133),
          ("f1134", 1134),
          ("f1135", 1135),
          ("f1136", 1136),
          ("f1137", 1137),
          ("f1138", 1138),
          ("f1139", 1139),
          ("f1140", 1140),
          ("f1141", 1141),
          ("f1150", 1150),
          ("f1151", 1151),
          ("f1152", 1152),
          ("f1153", 1153),
          ("f1154", 1154),
          ("f1155", 1155),
          ("f1156", 1156),
          ("f1157", 1157),
          ("f1158", 1158),
          ("f1159", 1159),
          ("f1174", 1174),
          ("f1308", 1308),
          ("f1309", 1309),
          ("f1310", 1310),
          ("f1311", 1311),
          ("f1312", 1312),
          ("f1313", 1313),
          ("f16476", 16476),
          ("f16477", 16477),
          ("f16517", 16517),
          ("f16518", 16518),
          ("f16519", 16519),
          ("f16520", 16520),
          ("f16521", 16521),
          ("f16522", 16522),
          ("f16523", 16523),
          ("f16524", 16524),
          ("f16525", 16525),
          ("f16526", 16526),
          ("f16528", 16528),
          ("f16529", 16529),
          ("f16530", 16530),
          ("f16585", 16585),
          ("f16586", 16586),
          ("f16587", 16587),
          ("f16588", 16588),
          ("f16589", 16589),
          ("f16667", 16667),
          ("f16668", 16668),
          ("f16669", 16669),
          ("f16670", 16670),
          ("f16671", 16671),
          ("f16676", 16676),
          ("f16681", 16681),
          ("f16682", 16682),
          ("f16718", 16718),
          ("f16727", 16727),
          ("f16730", 16730),
          ("f16731", 16731),
          ("f16748", 16748),
          ("f16749", 16749),
          ("f16750", 16750),
          ("f16751", 16751),
          ("f16752", 16752),
          ("f16770", 16770),
          ("f16780", 16780),
          ("f16803", 16803),
          ("f16804", 16804),
          ("f16805", 16805),
          ("f16806", 16806),
          ("f16807", 16807),
          ("f16815", 16815),
          ("f16816", 16816),
          ("f16817", 16817),
          ("f16818", 16818),
          ("f16819", 16819),
          ("f16822", 16822),
          ("f16823", 16823),
          ("f17063", 17063),
          ("f17064", 17064),
          ("f17065", 17065),
          ("f17066", 17066),
          ("f17149", 17149),
          ("f17151", 17151),
          ("f17152", 17152),
          ("f17153", 17153),
          ("f17154", 17154),
          ("f17155", 17155),
          ("f17156", 17156),
          ("f17157", 17157),
          ("f17158", 17158),
          ("f17159", 17159),
          ("f17160", 17160),
          ("f17161", 17161),
          ("f17162", 17162),
          ("f17163", 17163),
          ("f17164", 17164),
          ("f17165", 17165),
          ("f17166", 17166),
          ("f17167", 17167),
          ("f17169", 17169),
          ("f17170", 17170),
          ("f17185", 17185),
          ("f17186", 17186),
          ("f17187", 17187),
          ("f17224", 17224),
          ("f17226", 17226),
          ("f17227", 17227),
          ("f17231", 17231),
          ("f17232", 17232),
          ("f17233", 17233),
          ("f17251", 17251),
          ("f17252", 17252),
          ("f17253", 17253),
          ("f17254", 17254),
          ("f17265", 17265),
          ("f17266", 17266),
          ("f17267", 17267),
          ("f17268", 17268),
          ("f17269", 17269),
          ("f17270", 17270),
          ("f17271", 17271),
          ("f17272", 17272),
          ("f17336", 17336),
          ("f17337", 17337),
          ("f17340", 17340),
          ("f17347", 17347),
          ("f17358", 17358),
          ("f17359", 17359),
          ("f17360", 17360),
          ("f17373", 17373),
          ("f17374", 17374),
          ("f17378", 17378),
          ("f17403", 17403),
          ("f17408", 17408),
          ("f17409", 17409),
          ("f17410", 17410),
          ("f17411", 17411),
          ("f17420", 17420),
          ("f17421", 17421),
          ("f17469", 17469),
          ("f17470", 17470),
          ("f17476", 17476),
          ("f17477", 17477),
          ("f17478", 17478),
          ("f17484", 17484),
          ("f17490", 17490),
          ("f17491", 17491),
          ("f17492", 17492),
          ("f17493", 17493),
          ("f17494", 17494),
          ("f17495", 17495),
          ("f17496", 17496),
          ("f17497", 17497),
          ("f17498", 17498),
          ("f17531", 17531),
          ("f17532", 17532),
          ("f17533", 17533),
          ("f17554", 17554),
          ("f17555", 17555),
          ("f17556", 17556),
          ("f17559", 17559),
          ("f17560", 17560),
          ("f17561", 17561),
          ("f17562", 17562),
          ("f17563", 17563),
          ("f17564", 17564),
          ("f17565", 17565),
          ("f17566", 17566),
          ("f17567", 17567),
          ("f17568", 17568),
          ("f17569", 17569),
          ("f17570", 17570),
          ("f17571", 17571),
          ("f17572", 17572),
          ("f17573", 17573),
          ("f17690", 17690),
          ("f34261", 34261),
          ("f34263", 34263),
          ("f34264", 34264),
          ("f34265", 34265),
          ("f34269", 34269),
          ("f34271", 34271),
          ("f34272", 34272),
          ("f34273", 34273),
          ("f34277", 34277),
          ("f34279", 34279),
          ("f34280", 34280),
          ("f34281", 34281),
          ("f34287", 34287),
          ("f34289", 34289),
          ("f34290", 34290),
          ("f34291", 34291),
          ("f34295", 34295),
          ("f34297", 34297),
          ("f34298", 34298),
          ("f34299", 34299),
          ("f34303", 34303),
          ("f34305", 34305),
          ("f34306", 34306),
          ("f34307", 34307),
          ("f34311", 34311),
          ("f34313", 34313),
          ("f34314", 34314),
          ("f34315", 34315),
          ("f34321", 34321),
          ("f34323", 34323),
          ("f34324", 34324),
          ("f34325", 34325),
          ("f34329", 34329),
          ("f34331", 34331),
          ("f34332", 34332),
          ("f34333", 34333),
          ("f34337", 34337),
          ("f34339", 34339),
          ("f34340", 34340),
          ("f34341", 34341),
          ("f34345", 34345),
          ("f34347", 34347),
          ("f34348", 34348),
          ("f34349", 34349),
          ("f34353", 34353),
          ("f34355", 34355),
          ("f34356", 34356),
          ("f34357", 34357),
          ("f34363", 34363),
          ("f34365", 34365),
          ("f34366", 34366),
          ("f34367", 34367),
          ("f34372", 34372),
          ("f34383", 34383),
          ("f34395", 34395),
          ("f34406", 34406),
          ("f34417", 34417),
          ("f34428", 34428),
          ("f34440", 34440),
          ("f34451", 34451),
          ("f34462", 34462),
          ("f34474", 34474),
          ("f34485", 34485),
          ("f34496", 34496),
          ("f34507", 34507),
          ("f34841", 34841),
          ("f34843", 34843),
          ("f34844", 34844),
          ("f34845", 34845),
          ("f35108", 35108),
          ("f35110", 35110),
          ("f35111", 35111),
          ("f35112", 35112),
          ("f35116", 35116),
          ("f35118", 35118),
          ("f35119", 35119),
          ("f35120", 35120),
          ("f35124", 35124),
          ("f35126", 35126),
          ("f35127", 35127),
          ("f35128", 35128),
          ("f35132", 35132),
          ("f35134", 35134),
          ("f35135", 35135),
          ("f35136", 35136),
          ("f35140", 35140),
          ("f35142", 35142),
          ("f35143", 35143),
          ("f35144", 35144),
          ("f35148", 35148),
          ("f35150", 35150),
          ("f35151", 35151),
          ("f35152", 35152),
          ("f35156", 35156),
          ("f35158", 35158),
          ("f35159", 35159),
          ("f35160", 35160),
          ("f35164", 35164),
          ("f35166", 35166),
          ("f35167", 35167),
          ("f35168", 35168),
          ("f35174", 35174),
          ("f35176", 35176),
          ("f35177", 35177),
          ("f35178", 35178),
          ("f35182", 35182),
          ("f35184", 35184),
          ("f35185", 35185),
          ("f35186", 35186),
          ("f35190", 35190),
          ("f35192", 35192),
          ("f35193", 35193),
          ("f35194", 35194),
          ("f35200", 35200),
          ("f35202", 35202),
          ("f35203", 35203),
          ("f35204", 35204),
          ("f35208", 35208),
          ("f35210", 35210),
          ("f35211", 35211),
          ("f35212", 35212),
          ("f35216", 35216),
          ("f35218", 35218),
          ("f35219", 35219),
          ("f35220", 35220),
          ("f35844", 35844),
          ("f35845", 35845),
          ("f35846", 35846),
          ("f35847", 35847),
          ("f35854", 35854),
          ("f35855", 35855),
          ("f35856", 35856),
          ("f35857", 35857),
          ("f35864", 35864),
          ("f35865", 35865),
          ("f35866", 35866),
          ("f35867", 35867),
          ("f35874", 35874),
          ("f35875", 35875),
          ("f35876", 35876),
          ("f35877", 35877),
          ("f35884", 35884),
          ("f35885", 35885),
          ("f35886", 35886),
          ("f35887", 35887),
          ("f35894", 35894),
          ("f35895", 35895),
          ("f35896", 35896),
          ("f35897", 35897),
          ("f35907", 35907),
          ("f35908", 35908),
          ("f35909", 35909),
          ("f35910", 35910),
          ("f35917", 35917),
          ("f35918", 35918),
          ("f35919", 35919),
          ("f35920", 35920),
          ("f35927", 35927),
          ("f35928", 35928),
          ("f35929", 35929),
          ("f35930", 35930),
          ("f35937", 35937),
          ("f35938", 35938),
          ("f35939", 35939),
          ("f35940", 35940),
          ("f35947", 35947),
          ("f35948", 35948),
          ("f35949", 35949),
          ("f35950", 35950),
          ("f35957", 35957),
          ("f35958", 35958),
          ("f35959", 35959),
          ("f35960", 35960),
          ("f35970", 35970),
          ("f35971", 35971),
          ("f35972", 35972),
          ("f35973", 35973),
          ("f35980", 35980),
          ("f35981", 35981),
          ("f35982", 35982),
          ("f35983", 35983),
          ("f35990", 35990),
          ("f35991", 35991),
          ("f35992", 35992),
          ("f35993", 35993),
          ("f36000", 36000),
          ("f36001", 36001),
          ("f36002", 36002),
          ("f36003", 36003),
          ("f36010", 36010),
          ("f36011", 36011),
          ("f36012", 36012),
          ("f36013", 36013),
          ("f36020", 36020),
          ("f36021", 36021),
          ("f36022", 36022),
          ("f36023", 36023),
          ("f36030", 36030),
          ("f36031", 36031),
          ("f36032", 36032),
          ("f36033", 36033),
          ("f36043", 36043),
          ("f36044", 36044),
          ("f36045", 36045),
          ("f36046", 36046),
          ("f36053", 36053),
          ("f36054", 36054),
          ("f36055", 36055),
          ("f36056", 36056),
          ("f36063", 36063),
          ("f36064", 36064),
          ("f36065", 36065),
          ("f36066", 36066),
          ("f36073", 36073),
          ("f36074", 36074),
          ("f36075", 36075),
          ("f36076", 36076),
          ("f36083", 36083),
          ("f36084", 36084),
          ("f36085", 36085),
          ("f36086", 36086),
          ("f36096", 36096),
          ("f36097", 36097),
          ("f36098", 36098),
          ("f36099", 36099),
          ("f36106", 36106),
          ("f36107", 36107),
          ("f36108", 36108),
          ("f36109", 36109),
          ("f36116", 36116),
          ("f36117", 36117),
          ("f36118", 36118),
          ("f36119", 36119),
          ("f36129", 36129),
          ("f36130", 36130),
          ("f36131", 36131),
          ("f36132", 36132),
          ("f36139", 36139),
          ("f36140", 36140),
          ("f36141", 36141),
          ("f36142", 36142),
          ("f36149", 36149),
          ("f36150", 36150),
          ("f36151", 36151),
          ("f36152", 36152),
          ("f36161", 36161),
          ("f36162", 36162),
          ("f36163", 36163),
          ("f36164", 36164),
          ("f36171", 36171),
          ("f36172", 36172),
          ("f36173", 36173),
          ("f36174", 36174),
          ("f36181", 36181),
          ("f36182", 36182),
          ("f36183", 36183),
          ("f36184", 36184),
          ("f36191", 36191),
          ("f36192", 36192),
          ("f36193", 36193),
          ("f36194", 36194),
          ("f36203", 36203),
          ("f36204", 36204),
          ("f36205", 36205),
          ("f36206", 36206),
          ("f36213", 36213),
          ("f36214", 36214),
          ("f36215", 36215),
          ("f36216", 36216),
          ("f36223", 36223),
          ("f36224", 36224),
          ("f36225", 36225),
          ("f36226", 36226),
          ("f36233", 36233),
          ("f36234", 36234),
          ("f36235", 36235),
          ("f36236", 36236),
          ("f36243", 36243),
          ("f36244", 36244),
          ("f36245", 36245),
          ("f36246", 36246),
          ("f36253", 36253),
          ("f36254", 36254),
          ("f36255", 36255),
          ("f36256", 36256),
          ("f36263", 36263),
          ("f36264", 36264),
          ("f36265", 36265),
          ("f36266", 36266),
          ("f36273", 36273),
          ("f36274", 36274),
          ("f36275", 36275),
          ("f36276", 36276),
          ("f36285", 36285),
          ("f36286", 36286),
          ("f36287", 36287),
          ("f36288", 36288),
          ("f36295", 36295),
          ("f36296", 36296),
          ("f36297", 36297),
          ("f36298", 36298),
          ("f36305", 36305),
          ("f36306", 36306),
          ("f36307", 36307),
          ("f36308", 36308),
          ("f36315", 36315),
          ("f36316", 36316),
          ("f36317", 36317),
          ("f36318", 36318),
          ("f36325", 36325),
          ("f36326", 36326),
          ("f36327", 36327),
          ("f36328", 36328),
          ("f36337", 36337),
          ("f36338", 36338),
          ("f36339", 36339),
          ("f36340", 36340),
          ("f36347", 36347),
          ("f36348", 36348),
          ("f36349", 36349),
          ("f36350", 36350),
          ("f36360", 36360),
          ("f36361", 36361),
          ("f36362", 36362),
          ("f36363", 36363),
          ("f36370", 36370),
          ("f36371", 36371),
          ("f36372", 36372),
          ("f36373", 36373),
          ("f36380", 36380),
          ("f36381", 36381),
          ("f36382", 36382),
          ("f36383", 36383),
          ("f36390", 36390),
          ("f36391", 36391),
          ("f36392", 36392),
          ("f36393", 36393),
          ("f36403", 36403),
          ("f36404", 36404),
          ("f36405", 36405),
          ("f36406", 36406),
          ("f36413", 36413),
          ("f36414", 36414),
          ("f36415", 36415),
          ("f36416", 36416),
          ("f36423", 36423),
          ("f36424", 36424),
          ("f36425", 36425),
          ("f36426", 36426),
          ("f36433", 36433),
          ("f36434", 36434),
          ("f36435", 36435),
          ("f36436", 36436),
          ("f36446", 36446),
          ("f36447", 36447),
          ("f36448", 36448),
          ("f36449", 36449),
          ("f36456", 36456),
          ("f36457", 36457),
          ("f36458", 36458),
          ("f36459", 36459),
          ("f36466", 36466),
          ("f36467", 36467),
          ("f36468", 36468),
          ("f36469", 36469),
          ("f36479", 36479),
          ("f36480", 36480),
          ("f36481", 36481),
          ("f36482", 36482),
          ("f36489", 36489),
          ("f36490", 36490),
          ("f36491", 36491),
          ("f36492", 36492),
          ("f36499", 36499),
          ("f36500", 36500),
          ("f36501", 36501),
          ("f36502", 36502),
          ("f36509", 36509),
          ("f36510", 36510),
          ("f36511", 36511),
          ("f36512", 36512),
          ("f36519", 36519),
          ("f36520", 36520),
          ("f36521", 36521),
          ("f36522", 36522),
          ("f36532", 36532),
          ("f36533", 36533),
          ("f36534", 36534),
          ("f36535", 36535),
          ("f36542", 36542),
          ("f36543", 36543),
          ("f36544", 36544),
          ("f36545", 36545),
          ("f36552", 36552),
          ("f36553", 36553),
          ("f36554", 36554),
          ("f36555", 36555),
          ("f36562", 36562),
          ("f36563", 36563),
          ("f36564", 36564),
          ("f36565", 36565),
          ("f36575", 36575),
          ("f36576", 36576),
          ("f36577", 36577),
          ("f36578", 36578),
          ("f36585", 36585),
          ("f36586", 36586),
          ("f36587", 36587),
          ("f36588", 36588),
          ("f36595", 36595),
          ("f36596", 36596),
          ("f36597", 36597),
          ("f36598", 36598),
          ("f36605", 36605),
          ("f36606", 36606),
          ("f36607", 36607),
          ("f36608", 36608),
          ("f36619", 36619),
          ("f36620", 36620),
          ("f36621", 36621),
          ("f36622", 36622),
          ("f36629", 36629),
          ("f36630", 36630),
          ("f36631", 36631),
          ("f36632", 36632),
          ("f36639", 36639),
          ("f36640", 36640),
          ("f36641", 36641),
          ("f36642", 36642),
          ("f36649", 36649),
          ("f36650", 36650),
          ("f36651", 36651),
          ("f36652", 36652),
          ("f36663", 36663),
          ("f36664", 36664),
          ("f36665", 36665),
          ("f36666", 36666),
          ("f36673", 36673),
          ("f36674", 36674),
          ("f36675", 36675),
          ("f36676", 36676),
          ("f36683", 36683),
          ("f36684", 36684),
          ("f36685", 36685),
          ("f36686", 36686),
          ("f36693", 36693),
          ("f36694", 36694),
          ("f36695", 36695),
          ("f36696", 36696),
          ("f36706", 36706),
          ("f36707", 36707),
          ("f36708", 36708),
          ("f36709", 36709),
          ("f36716", 36716),
          ("f36717", 36717),
          ("f36718", 36718),
          ("f36719", 36719),
          ("f36726", 36726),
          ("f36727", 36727),
          ("f36728", 36728),
          ("f36729", 36729),
          ("f36736", 36736),
          ("f36737", 36737),
          ("f36738", 36738),
          ("f36739", 36739),
          ("f36746", 36746),
          ("f36747", 36747),
          ("f36748", 36748),
          ("f36749", 36749),
          ("f36759", 36759),
          ("f36760", 36760),
          ("f36761", 36761),
          ("f36762", 36762),
          ("f36769", 36769),
          ("f36770", 36770),
          ("f36771", 36771),
          ("f36772", 36772),
          ("f36779", 36779),
          ("f36780", 36780),
          ("f36781", 36781),
          ("f36782", 36782),
          ("f36789", 36789),
          ("f36790", 36790),
          ("f36791", 36791),
          ("f36792", 36792),
          ("f36802", 36802),
          ("f36803", 36803),
          ("f36804", 36804),
          ("f36805", 36805),
          ("f36812", 36812),
          ("f36813", 36813),
          ("f36814", 36814),
          ("f36815", 36815),
          ("f36822", 36822),
          ("f36823", 36823),
          ("f36824", 36824),
          ("f36825", 36825),
          ("f36832", 36832),
          ("f36833", 36833),
          ("f36834", 36834),
          ("f36835", 36835),
          ("f36845", 36845),
          ("f36846", 36846),
          ("f36847", 36847),
          ("f36848", 36848),
          ("f36855", 36855),
          ("f36856", 36856),
          ("f36857", 36857),
          ("f36858", 36858),
          ("f36865", 36865),
          ("f36866", 36866),
          ("f36867", 36867),
          ("f36868", 36868),
          ("f36875", 36875),
          ("f36876", 36876),
          ("f36877", 36877),
          ("f36878", 36878),
          ("f36887", 36887),
          ("f36888", 36888),
          ("f36889", 36889),
          ("f36890", 36890),
          ("f36897", 36897),
          ("f36898", 36898),
          ("f36899", 36899),
          ("f36900", 36900),
          ("f36907", 36907),
          ("f36908", 36908),
          ("f36909", 36909),
          ("f36910", 36910),
          ("f36917", 36917),
          ("f36918", 36918),
          ("f36919", 36919),
          ("f36920", 36920),
          ("f36927", 36927),
          ("f36928", 36928),
          ("f36929", 36929),
          ("f36930", 36930),
          ("f36937", 36937),
          ("f36938", 36938),
          ("f36939", 36939),
          ("f36940", 36940),
          ("f36947", 36947),
          ("f36948", 36948),
          ("f36949", 36949),
          ("f36950", 36950),
          ("f36957", 36957),
          ("f36958", 36958),
          ("f36959", 36959),
          ("f36960", 36960),
          ("f36969", 36969),
          ("f36970", 36970),
          ("f36971", 36971),
          ("f36972", 36972),
          ("f36979", 36979),
          ("f36980", 36980),
          ("f36981", 36981),
          ("f36982", 36982),
          ("f36989", 36989),
          ("f36990", 36990),
          ("f36991", 36991),
          ("f36992", 36992),
          ("f36999", 36999),
          ("f37000", 37000),
          ("f37001", 37001),
          ("f37002", 37002),
          ("f37011", 37011),
          ("f37012", 37012),
          ("f37013", 37013),
          ("f37014", 37014),
          ("f37021", 37021),
          ("f37022", 37022),
          ("f37023", 37023),
          ("f37024", 37024),
          ("f37031", 37031),
          ("f37032", 37032),
          ("f37033", 37033),
          ("f37034", 37034),
          ("f37041", 37041),
          ("f37042", 37042),
          ("f37043", 37043),
          ("f37044", 37044),
          ("f37051", 37051),
          ("f37052", 37052),
          ("f37053", 37053),
          ("f37054", 37054),
          ("f37061", 37061),
          ("f37062", 37062),
          ("f37063", 37063),
          ("f37064", 37064),
          ("f37071", 37071),
          ("f37072", 37072),
          ("f37073", 37073),
          ("f37074", 37074),
          ("f37081", 37081),
          ("f37082", 37082),
          ("f37083", 37083),
          ("f37084", 37084),
          ("f37200", 37200),
          ("f37202", 37202),
          ("f37203", 37203),
          ("f37204", 37204),
          ("f37208", 37208),
          ("f37210", 37210),
          ("f37211", 37211),
          ("f37212", 37212),
          ("f37216", 37216),
          ("f37218", 37218),
          ("f37219", 37219),
          ("f37220", 37220),
          ("f37226", 37226),
          ("f37228", 37228),
          ("f37229", 37229),
          ("f37230", 37230),
          ("f37236", 37236),
          ("f37238", 37238),
          ("f37239", 37239),
          ("f37240", 37240),
          ("f37246", 37246),
          ("f37248", 37248),
          ("f37249", 37249),
          ("f37250", 37250),
          ("f37255", 37255),
          ("f37266", 37266),
          ("f37277", 37277),
          ("f37288", 37288),
          ("f37879", 37879),
          ("f37881", 37881),
          ("f37882", 37882),
          ("f37883", 37883),
          ("f37887", 37887),
          ("f37889", 37889),
          ("f37890", 37890),
          ("f37891", 37891),
          ("f37895", 37895),
          ("f37897", 37897),
          ("f37898", 37898),
          ("f37899", 37899),
          ("f37903", 37903),
          ("f37905", 37905),
          ("f37906", 37906),
          ("f37907", 37907),
          ("f37911", 37911),
          ("f37913", 37913),
          ("f37914", 37914),
          ("f37915", 37915),
          ("f37919", 37919),
          ("f37921", 37921),
          ("f37922", 37922),
          ("f37923", 37923),
          ("f37929", 37929),
          ("f37931", 37931),
          ("f37932", 37932),
          ("f37933", 37933),
          ("f37937", 37937),
          ("f37939", 37939),
          ("f37940", 37940),
          ("f37941", 37941),
          ("f37945", 37945),
          ("f37947", 37947),
          ("f37948", 37948),
          ("f37949", 37949),
          ("f37953", 37953),
          ("f37955", 37955),
          ("f37956", 37956),
          ("f37957", 37957),
          ("f37963", 37963),
          ("f37965", 37965),
          ("f37966", 37966),
          ("f37967", 37967),
          ("f37971", 37971),
          ("f37973", 37973),
          ("f37974", 37974),
          ("f37975", 37975),
          ("f37979", 37979),
          ("f37981", 37981),
          ("f37982", 37982),
          ("f37983", 37983),
          ("f37987", 37987),
          ("f37989", 37989),
          ("f37990", 37990),
          ("f37991", 37991),
          ("f37995", 37995),
          ("f37997", 37997),
          ("f37998", 37998),
          ("f37999", 37999),
          ("f38003", 38003),
          ("f38005", 38005),
          ("f38006", 38006),
          ("f38007", 38007),
          ("f38014", 38014),
          ("f38016", 38016),
          ("f38017", 38017),
          ("f38018", 38018),
          ("f38022", 38022),
          ("f38024", 38024),
          ("f38025", 38025),
          ("f38026", 38026),
          ("f38030", 38030),
          ("f38032", 38032),
          ("f38033", 38033),
          ("f38034", 38034),
          ("f38040", 38040),
          ("f38042", 38042),
          ("f38043", 38043),
          ("f38044", 38044),
          ("f38048", 38048),
          ("f38050", 38050),
          ("f38051", 38051),
          ("f38052", 38052),
          ("f38056", 38056),
          ("f38058", 38058),
          ("f38059", 38059),
          ("f38060", 38060),
          ("f38067", 38067),
          ("f38069", 38069),
          ("f38070", 38070),
          ("f38071", 38071),
          ("f38075", 38075),
          ("f38077", 38077),
          ("f38078", 38078),
          ("f38079", 38079),
          ("f38083", 38083),
          ("f38085", 38085),
          ("f38086", 38086),
          ("f38087", 38087),
          ("f38094", 38094),
          ("f38096", 38096),
          ("f38097", 38097),
          ("f38098", 38098),
          ("f38104", 38104),
          ("f38106", 38106),
          ("f38107", 38107),
          ("f38108", 38108),
          ("f38114", 38114),
          ("f38116", 38116),
          ("f38117", 38117),
          ("f38118", 38118),
          ("f38122", 38122),
          ("f38124", 38124),
          ("f38125", 38125),
          ("f38126", 38126),
          ("f38130", 38130),
          ("f38132", 38132),
          ("f38133", 38133),
          ("f38134", 38134),
          ("f38138", 38138),
          ("f38140", 38140),
          ("f38141", 38141),
          ("f38142", 38142),
          ("f38146", 38146),
          ("f38148", 38148),
          ("f38149", 38149),
          ("f38150", 38150),
          ("f38157", 38157),
          ("f38159", 38159),
          ("f38160", 38160),
          ("f38161", 38161),
          ("f38165", 38165),
          ("f38167", 38167),
          ("f38168", 38168),
          ("f38169", 38169),
          ("f38173", 38173),
          ("f38175", 38175),
          ("f38176", 38176),
          ("f38177", 38177),
          ("f38181", 38181),
          ("f38183", 38183),
          ("f38184", 38184),
          ("f38185", 38185),
          ("f38191", 38191),
          ("f38193", 38193),
          ("f38194", 38194),
          ("f38195", 38195),
          ("f38199", 38199),
          ("f38201", 38201),
          ("f38202", 38202),
          ("f38203", 38203),
          ("f38207", 38207),
          ("f38209", 38209),
          ("f38210", 38210),
          ("f38211", 38211),
          ("f38218", 38218),
          ("f38220", 38220),
          ("f38221", 38221),
          ("f38222", 38222),
          ("f38226", 38226),
          ("f38228", 38228),
          ("f38229", 38229),
          ("f38230", 38230),
          ("f38234", 38234),
          ("f38236", 38236),
          ("f38237", 38237),
          ("f38238", 38238),
          ("f38242", 38242),
          ("f38244", 38244),
          ("f38245", 38245),
          ("f38246", 38246),
          ("f38250", 38250),
          ("f38252", 38252),
          ("f38253", 38253),
          ("f38254", 38254),
          ("f38258", 38258),
          ("f38260", 38260),
          ("f38261", 38261),
          ("f38262", 38262),
          ("f38268", 38268),
          ("f38270", 38270),
          ("f38271", 38271),
          ("f38272", 38272),
          ("f38276", 38276),
          ("f38278", 38278),
          ("f38279", 38279),
          ("f38280", 38280),
          ("f38287", 38287),
          ("f38289", 38289),
          ("f38290", 38290),
          ("f38291", 38291),
          ("f38506", 38506),
          ("f38507", 38507),
          ("f38508", 38508),
          ("f38509", 38509),
          ("f38516", 38516),
          ("f38517", 38517),
          ("f38518", 38518),
          ("f38519", 38519),
          ("f38526", 38526),
          ("f38527", 38527),
          ("f38528", 38528),
          ("f38529", 38529),
          ("f38536", 38536),
          ("f38537", 38537),
          ("f38538", 38538),
          ("f38539", 38539),
          ("f38546", 38546),
          ("f38547", 38547),
          ("f38548", 38548),
          ("f38549", 38549),
          ("f38556", 38556),
          ("f38557", 38557),
          ("f38558", 38558),
          ("f38559", 38559),
          ("f38568", 38568),
          ("f38569", 38569),
          ("f38570", 38570),
          ("f38571", 38571),
          ("f38578", 38578),
          ("f38579", 38579),
          ("f38580", 38580),
          ("f38581", 38581),
          ("f38588", 38588),
          ("f38589", 38589),
          ("f38590", 38590),
          ("f38591", 38591),
          ("f38598", 38598),
          ("f38599", 38599),
          ("f38600", 38600),
          ("f38601", 38601),
          ("f38608", 38608),
          ("f38609", 38609),
          ("f38610", 38610),
          ("f38611", 38611),
          ("f38618", 38618),
          ("f38619", 38619),
          ("f38620", 38620),
          ("f38621", 38621),
          ("f38630", 38630),
          ("f38631", 38631),
          ("f38632", 38632),
          ("f38633", 38633),
          ("f38640", 38640),
          ("f38641", 38641),
          ("f38642", 38642),
          ("f38643", 38643),
          ("f38650", 38650),
          ("f38651", 38651),
          ("f38652", 38652),
          ("f38653", 38653),
          ("f38660", 38660),
          ("f38661", 38661),
          ("f38662", 38662),
          ("f38663", 38663),
          ("f38670", 38670),
          ("f38671", 38671),
          ("f38672", 38672),
          ("f38673", 38673),
          ("f38680", 38680),
          ("f38681", 38681),
          ("f38682", 38682),
          ("f38683", 38683),
          ("f38690", 38690),
          ("f38691", 38691),
          ("f38692", 38692),
          ("f38693", 38693),
          ("f38700", 38700),
          ("f38701", 38701),
          ("f38702", 38702),
          ("f38703", 38703),
          ("f38710", 38710),
          ("f38711", 38711),
          ("f38712", 38712),
          ("f38713", 38713),
          ("f38722", 38722),
          ("f38723", 38723),
          ("f38724", 38724),
          ("f38725", 38725),
          ("f38732", 38732),
          ("f38733", 38733),
          ("f38734", 38734),
          ("f38735", 38735),
          ("f38742", 38742),
          ("f38743", 38743),
          ("f38744", 38744),
          ("f38745", 38745),
          ("f38752", 38752),
          ("f38753", 38753),
          ("f38754", 38754),
          ("f38755", 38755),
          ("f38762", 38762),
          ("f38763", 38763),
          ("f38764", 38764),
          ("f38765", 38765),
          ("f38774", 38774),
          ("f38775", 38775),
          ("f38776", 38776),
          ("f38777", 38777),
          ("f38784", 38784),
          ("f38785", 38785),
          ("f38786", 38786),
          ("f38787", 38787),
          ("f38794", 38794),
          ("f38795", 38795),
          ("f38796", 38796),
          ("f38797", 38797),
          ("f38804", 38804),
          ("f38805", 38805),
          ("f38806", 38806),
          ("f38807", 38807),
          ("f38814", 38814),
          ("f38815", 38815),
          ("f38816", 38816),
          ("f38817", 38817),
          ("f38824", 38824),
          ("f38825", 38825),
          ("f38826", 38826),
          ("f38827", 38827),
          ("f38834", 38834),
          ("f38835", 38835),
          ("f38836", 38836),
          ("f38837", 38837),
          ("f38844", 38844),
          ("f38845", 38845),
          ("f38846", 38846),
          ("f38847", 38847),
          ("f38856", 38856),
          ("f38857", 38857),
          ("f38858", 38858),
          ("f38859", 38859),
          ("f38866", 38866),
          ("f38867", 38867),
          ("f38868", 38868),
          ("f38869", 38869),
          ("f38876", 38876),
          ("f38877", 38877),
          ("f38878", 38878),
          ("f38879", 38879),
          ("f38888", 38888),
          ("f38889", 38889),
          ("f38890", 38890),
          ("f38891", 38891),
          ("f38898", 38898),
          ("f38899", 38899),
          ("f38900", 38900),
          ("f38901", 38901),
          ("f38908", 38908),
          ("f38909", 38909),
          ("f38910", 38910),
          ("f38911", 38911),
          ("f38918", 38918),
          ("f38919", 38919),
          ("f38920", 38920),
          ("f38921", 38921),
          ("f38928", 38928),
          ("f38929", 38929),
          ("f38930", 38930),
          ("f38931", 38931),
          ("f38938", 38938),
          ("f38939", 38939),
          ("f38940", 38940),
          ("f38941", 38941),
          ("f38948", 38948),
          ("f38949", 38949),
          ("f38950", 38950),
          ("f38951", 38951),
          ("f38958", 38958),
          ("f38959", 38959),
          ("f38960", 38960),
          ("f38961", 38961),
          ("f39841", 39841),
          ("f39843", 39843),
          ("f39844", 39844),
          ("f39845", 39845),
          ("f39852", 39852),
          ("f39854", 39854),
          ("f39855", 39855),
          ("f39856", 39856),
          ("f39860", 39860),
          ("f39862", 39862),
          ("f39863", 39863),
          ("f39864", 39864),
          ("f39869", 39869),
          ("f39880", 39880),
          ("f39891", 39891),
          ("f39902", 39902),
          ("f39913", 39913),
          ("f40569", 40569),
          ("f40570", 40570),
          ("f40571", 40571),
          ("f40572", 40572),
          ("f40579", 40579),
          ("f40580", 40580),
          ("f40581", 40581),
          ("f40582", 40582),
          ("f40589", 40589),
          ("f40590", 40590),
          ("f40591", 40591),
          ("f40592", 40592),
          ("f40599", 40599),
          ("f40600", 40600),
          ("f40601", 40601),
          ("f40602", 40602),
          ("f40611", 40611),
          ("f40612", 40612),
          ("f40613", 40613),
          ("f40614", 40614),
          ("f40621", 40621),
          ("f40622", 40622),
          ("f40623", 40623),
          ("f40624", 40624),
          ("f40631", 40631),
          ("f40632", 40632),
          ("f40633", 40633),
          ("f40634", 40634),
          ("f40641", 40641),
          ("f40642", 40642),
          ("f40643", 40643),
          ("f40644", 40644),
          ("f40651", 40651),
          ("f40652", 40652),
          ("f40653", 40653),
          ("f40654", 40654),
          ("f40661", 40661),
          ("f40662", 40662),
          ("f40663", 40663),
          ("f40664", 40664),
          ("f40671", 40671),
          ("f40672", 40672),
          ("f40673", 40673),
          ("f40674", 40674),
          ("f40681", 40681),
          ("f40682", 40682),
          ("f40683", 40683),
          ("f40684", 40684),
          ("f40691", 40691),
          ("f40692", 40692),
          ("f40693", 40693),
          ("f40694", 40694),
          ("f40701", 40701),
          ("f40702", 40702),
          ("f40703", 40703),
          ("f40704", 40704),
          ("f42989", 42989),
          ("f42991", 42991),
          ("f42992", 42992),
          ("f42993", 42993),
          ("f77916", 77916),
          ("f77917", 77917),
          ("f77957", 77957),
          ("f77958", 77958),
          ("f77959", 77959),
          ("f77960", 77960),
          ("f77961", 77961),
          ("f77962", 77962),
          ("f77963", 77963),
          ("f77964", 77964),
          ("f77965", 77965),
          ("f77966", 77966),
          ("f77968", 77968),
          ("f77969", 77969),
          ("f77970", 77970),
          ("f78025", 78025),
          ("f78026", 78026),
          ("f78027", 78027),
          ("f78028", 78028),
          ("f78029", 78029),
          ("f78107", 78107),
          ("f78108", 78108),
          ("f78109", 78109),
          ("f78110", 78110),
          ("f78111", 78111),
          ("f78116", 78116),
          ("f78121", 78121),
          ("f78122", 78122),
          ("f78158", 78158),
          ("f78167", 78167),
          ("f78170", 78170),
          ("f78171", 78171),
          ("f78188", 78188),
          ("f78189", 78189),
          ("f78190", 78190),
          ("f78191", 78191),
          ("f78192", 78192),
          ("f78210", 78210),
          ("f78220", 78220),
          ("f78243", 78243),
          ("f78244", 78244),
          ("f78245", 78245),
          ("f78246", 78246),
          ("f78247", 78247),
          ("f78255", 78255),
          ("f78256", 78256),
          ("f78257", 78257),
          ("f78258", 78258),
          ("f78259", 78259),
          ("f78262", 78262),
          ("f78263", 78263),
          ("f78503", 78503),
          ("f78504", 78504),
          ("f78505", 78505),
          ("f78506", 78506),
          ("f78589", 78589),
          ("f78591", 78591),
          ("f78592", 78592),
          ("f78593", 78593),
          ("f78594", 78594),
          ("f78595", 78595),
          ("f78596", 78596),
          ("f78597", 78597),
          ("f78598", 78598),
          ("f78599", 78599),
          ("f78600", 78600),
          ("f78601", 78601),
          ("f78602", 78602),
          ("f78603", 78603),
          ("f78604", 78604),
          ("f78605", 78605),
          ("f78606", 78606),
          ("f78607", 78607),
          ("f78609", 78609),
          ("f78610", 78610),
          ("f78625", 78625),
          ("f78626", 78626),
          ("f78627", 78627),
          ("f78664", 78664),
          ("f78666", 78666),
          ("f78667", 78667),
          ("f78671", 78671),
          ("f78672", 78672),
          ("f78673", 78673),
          ("f78691", 78691),
          ("f78692", 78692),
          ("f78693", 78693),
          ("f78694", 78694),
          ("f78705", 78705),
          ("f78706", 78706),
          ("f78707", 78707),
          ("f78708", 78708),
          ("f78709", 78709),
          ("f78710", 78710),
          ("f78711", 78711),
          ("f78712", 78712),
          ("f78776", 78776),
          ("f78777", 78777),
          ("f78780", 78780),
          ("f78787", 78787),
          ("f78798", 78798),
          ("f78799", 78799),
          ("f78800", 78800),
          ("f78813", 78813),
          ("f78814", 78814),
          ("f78818", 78818),
          ("f78843", 78843),
          ("f78848", 78848),
          ("f78849", 78849),
          ("f78850", 78850),
          ("f78851", 78851),
          ("f78860", 78860),
          ("f78861", 78861),
          ("f78909", 78909),
          ("f78910", 78910),
          ("f78916", 78916),
          ("f78917", 78917),
          ("f78918", 78918),
          ("f78924", 78924),
          ("f78930", 78930),
          ("f78931", 78931),
          ("f78932", 78932),
          ("f78933", 78933),
          ("f78934", 78934),
          ("f78935", 78935),
          ("f78936", 78936),
          ("f78937", 78937),
          ("f78938", 78938),
          ("f78971", 78971),
          ("f78972", 78972),
          ("f78973", 78973),
          ("f78994", 78994),
          ("f78995", 78995),
          ("f78996", 78996),
          ("f78999", 78999),
          ("f79000", 79000),
          ("f79001", 79001),
          ("f79002", 79002),
          ("f79003", 79003),
          ("f79004", 79004),
          ("f79005", 79005),
          ("f79006", 79006),
          ("f79007", 79007),
          ("f79008", 79008),
          ("f79009", 79009),
          ("f79010", 79010),
          ("f79011", 79011),
          ("f79012", 79012),
          ("f79013", 79013),
          ("f79130", 79130),
          ("f999516", 999516),
          ("f999517", 999517),
          ("f999557", 999557),
          ("f999558", 999558),
          ("f999559", 999559),
          ("f999560", 999560),
          ("f999561", 999561),
          ("f999562", 999562),
          ("f999563", 999563),
          ("f999564", 999564),
          ("f999565", 999565),
          ("f999566", 999566),
          ("f999568", 999568),
          ("f999569", 999569),
          ("f999570", 999570),
          ("f999625", 999625),
          ("f999626", 999626),
          ("f999627", 999627),
          ("f999628", 999628),
          ("f999629", 999629),
          ("f999707", 999707),
          ("f999708", 999708),
          ("f999709", 999709),
          ("f999710", 999710),
          ("f999711", 999711),
          ("f999716", 999716),
          ("f999721", 999721),
          ("f999722", 999722),
          ("f999758", 999758),
          ("f999767", 999767),
          ("f999770", 999770),
          ("f999771", 999771),
          ("f999788", 999788),
          ("f999789", 999789),
          ("f999790", 999790),
          ("f999791", 999791),
          ("f999792", 999792),
          ("f999810", 999810),
          ("f999820", 999820),
          ("f999843", 999843),
          ("f999844", 999844),
          ("f999845", 999845),
          ("f999846", 999846),
          ("f999847", 999847),
          ("f999855", 999855),
          ("f999856", 999856),
          ("f999857", 999857),
          ("f999858", 999858),
          ("f999859", 999859),
          ("f999862", 999862),
          ("f999863", 999863),
          ("f1000103", 1000103),
          ("f1000104", 1000104),
          ("f1000105", 1000105),
          ("f1000106", 1000106),
          ("f1000189", 1000189),
          ("f1000191", 1000191),
          ("f1000192", 1000192),
          ("f1000193", 1000193),
          ("f1000194", 1000194),
          ("f1000195", 1000195),
          ("f1000196", 1000196),
          ("f1000197", 1000197),
          ("f1000198", 1000198),
          ("f1000199", 1000199),
          ("f1000200", 1000200),
          ("f1000201", 1000201),
          ("f1000202", 1000202),
          ("f1000203", 1000203),
          ("f1000204", 1000204),
          ("f1000205", 1000205),
          ("f1000206", 1000206),
          ("f1000207", 1000207),
          ("f1000209", 1000209),
          ("f1000210", 1000210),
          ("f1000225", 1000225),
          ("f1000226", 1000226),
          ("f1000227", 1000227),
          ("f1000264", 1000264),
          ("f1000266", 1000266),
          ("f1000267", 1000267),
          ("f1000271", 1000271),
          ("f1000272", 1000272),
          ("f1000273", 1000273),
          ("f1000291", 1000291),
          ("f1000292", 1000292),
          ("f1000293", 1000293),
          ("f1000294", 1000294),
          ("f1000305", 1000305),
          ("f1000306", 1000306),
          ("f1000307", 1000307),
          ("f1000308", 1000308),
          ("f1000309", 1000309),
          ("f1000310", 1000310),
          ("f1000311", 1000311),
          ("f1000312", 1000312),
          ("f1000376", 1000376),
          ("f1000377", 1000377),
          ("f1000380", 1000380),
          ("f1000387", 1000387),
          ("f1000398", 1000398),
          ("f1000399", 1000399),
          ("f1000400", 1000400),
          ("f1000413", 1000413),
          ("f1000414", 1000414),
          ("f1000418", 1000418),
          ("f1000443", 1000443),
          ("f1000448", 1000448),
          ("f1000449", 1000449),
          ("f1000450", 1000450),
          ("f1000451", 1000451),
          ("f1000460", 1000460),
          ("f1000461", 1000461),
          ("f1000509", 1000509),
          ("f1000510", 1000510),
          ("f1000516", 1000516),
          ("f1000517", 1000517),
          ("f1000518", 1000518),
          ("f1000524", 1000524),
          ("f1000530", 1000530),
          ("f1000531", 1000531),
          ("f1000532", 1000532),
          ("f1000533", 1000533),
          ("f1000534", 1000534),
          ("f1000535", 1000535),
          ("f1000536", 1000536),
          ("f1000537", 1000537),
          ("f1000538", 1000538),
          ("f1000571", 1000571),
          ("f1000572", 1000572),
          ("f1000573", 1000573),
          ("f1000594", 1000594),
          ("f1000595", 1000595),
          ("f1000596", 1000596),
          ("f1000599", 1000599),
          ("f1000600", 1000600),
          ("f1000601", 1000601),
          ("f1000602", 1000602),
          ("f1000603", 1000603),
          ("f1000604", 1000604),
          ("f1000605", 1000605),
          ("f1000606", 1000606),
          ("f1000607", 1000607),
          ("f1000608", 1000608),
          ("f1000609", 1000609),
          ("f1000610", 1000610),
          ("f1000611", 1000611),
          ("f1000612", 1000612),
          ("f1000613", 1000613),
          ("f1000730", 1000730),
          ("e4194305", 4194305),
          ("e4194306", 4194306),
          ("e4194307", 4194307),
          ("e4194308", 4194308),
          ("e4194309", 4194309),
          ("e4194310", 4194310),
          ("e4194311", 4194311),
          ("e4194312", 4194312),
          ("e4194313", 4194313),
          ("e4194314", 4194314),
          ("e4194315", 4194315),
          ("e4194316", 4194316),
          ("e4194317", 4194317),
          ("e4194318", 4194318),
          ("e4194319", 4194319),
          ("e4194320", 4194320),
          ("e4194321", 4194321),
          ("e4194322", 4194322),
          ("e4194323", 4194323),
          ("e4194324", 4194324),
          ("e4194325", 4194325),
          ("e4194326", 4194326),
          ("e4194327", 4194327),
          ("e4194328", 4194328),
          ("e4194329", 4194329),
          ("e4194330", 4194330),
          ("e4194331", 4194331),
          ("e4194332", 4194332),
          ("e4194333", 4194333),
          ("e4194334", 4194334),
          ("e4194335", 4194335),
          ("e4194336", 4194336),
          ("e4194337", 4194337),
          ("e4194338", 4194338),
          ("e4194339", 4194339),
          ("e4194340", 4194340),
          ("e4194341", 4194341),
          ("e4194342", 4194342),
          ("e4194343", 4194343),
          ("e4194344", 4194344),
          ("e4194345", 4194345),
          ("e4194346", 4194346),
          ("e4194347", 4194347),
          ("e4194348", 4194348),
          ("e4194349", 4194349),
          ("e4194350", 4194350),
          ("e4194351", 4194351),
          ("e4194352", 4194352),
          ("e4194353", 4194353),
          ("e4194354", 4194354),
          ("e4194355", 4194355),
          ("e4194356", 4194356),
          ("e4194357", 4194357),
          ("e4194358", 4194358),
          ("e4194359", 4194359),
          ("e4194360", 4194360),
          ("e4194361", 4194361),
          ("e4194362", 4194362),
          ("e4194363", 4194363),
          ("e4194364", 4194364),
          ("e4194365", 4194365),
          ("e4194366", 4194366),
          ("e4194367", 4194367),
          ("e4194368", 4194368),
          ("e4194369", 4194369),
          ("e4194370", 4194370),
          ("e4194371", 4194371),
          ("e4194372", 4194372),
          ("e4194373", 4194373),
          ("e4194374", 4194374),
          ("e4194375", 4194375),
          ("e4194376", 4194376),
          ("e4194377", 4194377),
          ("e4194378", 4194378),
          ("e4194379", 4194379),
          ("e4194380", 4194380),
          ("e4194381", 4194381),
          ("e4194382", 4194382),
          ("e4194383", 4194383),
          ("e4194384", 4194384),
          ("e4194385", 4194385),
          ("e4194386", 4194386),
          ("e4194387", 4194387),
          ("e4194388", 4194388),
          ("e4194389", 4194389),
          ("e4194390", 4194390),
          ("e4194391", 4194391),
          ("e4194392", 4194392),
          ("e4194393", 4194393),
          ("e4194394", 4194394),
          ("e4194395", 4194395),
          ("e4194396", 4194396),
          ("e4194397", 4194397),
          ("e4194398", 4194398),
          ("e4194399", 4194399),
          ("e4194400", 4194400),
          ("e4194401", 4194401),
          ("e4194402", 4194402),
          ("e4194403", 4194403),
          ("e4194404", 4194404),
          ("e4194405", 4194405),
          ("e4194406", 4194406),
          ("e4194407", 4194407),
          ("e4194408", 4194408),
          ("e4194409", 4194409),
          ("e4194410", 4194410),
          ("e4194411", 4194411),
          ("e4194412", 4194412),
          ("e4194413", 4194413),
          ("e4194414", 4194414),
          ("e4194415", 4194415),
          ("e4194416", 4194416),
          ("e4194417", 4194417),
          ("e4194418", 4194418),
          ("e4194419", 4194419),
          ("e4194420", 4194420),
          ("e4194421", 4194421),
          ("e4194422", 4194422),
          ("e4194423", 4194423),
          ("e4194424", 4194424),
          ("e4194425", 4194425),
          ("e4194426", 4194426),
          ("e4194427", 4194427),
          ("e4194428", 4194428),
          ("e4194429", 4194429),
          ("e4194430", 4194430),
          ("e4194431", 4194431),
          ("e4194432", 4194432),
          ("e4194433", 4194433),
          ("e4194434", 4194434),
          ("e4194435", 4194435),
          ("e4194436", 4194436),
          ("e4194437", 4194437),
          ("e4194438", 4194438),
          ("e4194439", 4194439),
          ("e4194440", 4194440),
          ("e4194441", 4194441),
          ("e4194442", 4194442),
          ("e4194443", 4194443),
          ("e4194444", 4194444),
          ("e4194445", 4194445),
          ("e4194446", 4194446),
          ("e4194447", 4194447),
          ("e4194448", 4194448),
          ("e4194449", 4194449),
          ("e4194450", 4194450),
          ("e4194451", 4194451),
          ("e4194452", 4194452),
          ("e4194453", 4194453),
          ("e4194454", 4194454),
          ("e4194455", 4194455),
          ("e4194456", 4194456),
          ("e4194457", 4194457),
          ("e4194458", 4194458),
          ("e4194459", 4194459),
          ("e4194460", 4194460),
          ("e4194461", 4194461),
          ("e4194462", 4194462),
          ("e4194463", 4194463),
          ("e4194464", 4194464),
          ("e4194465", 4194465),
          ("e4194466", 4194466),
          ("e4194467", 4194467),
          ("e4194468", 4194468),
          ("e4194469", 4194469),
          ("e4194470", 4194470),
          ("e4194471", 4194471),
          ("e4194472", 4194472),
          ("e4194473", 4194473),
          ("e4194474", 4194474),
          ("e4194475", 4194475),
          ("e4194476", 4194476),
          ("e4194477", 4194477),
          ("e4194478", 4194478),
          ("e4194479", 4194479),
          ("e4194480", 4194480),
          ("e4194481", 4194481),
          ("e4194482", 4194482),
          ("e4194483", 4194483),
          ("e4194484", 4194484),
          ("e4194485", 4194485),
          ("e4194486", 4194486),
          ("e4194487", 4194487),
          ("e4194488", 4194488),
          ("e4194489", 4194489),
          ("e4194490", 4194490),
          ("e4194491", 4194491),
          ("e4194492", 4194492),
          ("e4194493", 4194493),
          ("e4194494", 4194494),
          ("e4194495", 4194495),
          ("e4194496", 4194496),
          ("e4194497", 4194497),
          ("e4194498", 4194498),
          ("e4194499", 4194499),
          ("e4194500", 4194500),
          ("e4194501", 4194501),
          ("e4194502", 4194502),
          ("e4194503", 4194503),
          ("e4194504", 4194504),
          ("e4194505", 4194505),
          ("e4194506", 4194506),
          ("e4194507", 4194507),
          ("e4194508", 4194508),
          ("e4194509", 4194509),
          ("e4194510", 4194510),
          ("e4194511", 4194511),
          ("e4194512", 4194512),
          ("e4194513", 4194513),
          ("e4194514", 4194514),
          ("e4194515", 4194515),
          ("e4194516", 4194516),
          ("e4194517", 4194517),
          ("e4194518", 4194518),
          ("e4194519", 4194519),
          ("e4194520", 4194520),
          ("e4194521", 4194521),
          ("e4194522", 4194522),
          ("e4194523", 4194523),
          ("e4194524", 4194524),
          ("e4194525", 4194525),
          ("e4194526", 4194526),
          ("e4194527", 4194527),
          ("e4194528", 4194528),
          ("e4194529", 4194529),
          ("e4194530", 4194530),
          ("e4194531", 4194531),
          ("e4194532", 4194532),
          ("e4194533", 4194533),
          ("e4194534", 4194534),
          ("e4194535", 4194535),
          ("e4194536", 4194536),
          ("e4194537", 4194537),
          ("e4194538", 4194538),
          ("e4194539", 4194539),
          ("e4194540", 4194540),
          ("e4194541", 4194541),
          ("e4194542", 4194542),
          ("e4194543", 4194543),
          ("e4194544", 4194544),
          ("e4194545", 4194545),
          ("e4194546", 4194546),
          ("e4194547", 4194547),
          ("e4194548", 4194548),
          ("e4194549", 4194549),
          ("e4194550", 4194550),
          ("e4194551", 4194551),
          ("e4194552", 4194552),
          ("e4194553", 4194553),
          ("e4194554", 4194554),
          ("e4194555", 4194555),
          ("e4194556", 4194556),
          ("e4194557", 4194557),
          ("e4194558", 4194558),
          ("e4194559", 4194559),
          ("e4194560", 4194560),
          ("e4194561", 4194561),
          ("e4194562", 4194562),
          ("e4194563", 4194563),
          ("e4194564", 4194564),
          ("e4194565", 4194565),
          ("e4194566", 4194566),
          ("e4194567", 4194567),
          ("e4194568", 4194568),
          ("e4194569", 4194569),
          ("e4194570", 4194570),
          ("e4194571", 4194571),
          ("e4194572", 4194572),
          ("e4194573", 4194573),
          ("e4194574", 4194574),
          ("e4194575", 4194575),
          ("e4194576", 4194576),
          ("e4194577", 4194577),
          ("e4194578", 4194578),
          ("e4194579", 4194579),
          ("e4194580", 4194580),
          ("e4194581", 4194581),
          ("e4194582", 4194582),
          ("e4194583", 4194583),
          ("e4194584", 4194584),
          ("e4194585", 4194585),
          ("e4194586", 4194586),
          ("e4194587", 4194587),
          ("e4194588", 4194588),
          ("e4194589", 4194589),
          ("e4194590", 4194590),
          ("e4194591", 4194591),
          ("e4194592", 4194592),
          ("e4194593", 4194593),
          ("e4194594", 4194594),
          ("e4194595", 4194595),
          ("e4194596", 4194596),
          ("e4194597", 4194597),
          ("e4194598", 4194598),
          ("e4194599", 4194599),
          ("e4194600", 4194600),
          ("e4194601", 4194601),
          ("e4194602", 4194602),
          ("e4194603", 4194603),
          ("e4194604", 4194604),
          ("e4194605", 4194605),
          ("e4194606", 4194606),
          ("e4194607", 4194607),
          ("e4194608", 4194608),
          ("e4194609", 4194609),
          ("e4194610", 4194610),
          ("e4194611", 4194611),
          ("e4194612", 4194612),
          ("e4194613", 4194613),
          ("e4194614", 4194614),
          ("e4194615", 4194615),
          ("e4194616", 4194616),
          ("e4194617", 4194617),
          ("e4194618", 4194618),
          ("e4194619", 4194619),
          ("e4194620", 4194620),
          ("e4194621", 4194621),
          ("e4194622", 4194622),
          ("e4194623", 4194623),
          ("e4194624", 4194624),
          ("e4194625", 4194625),
          ("e4194626", 4194626),
          ("e4194627", 4194627),
          ("e4194628", 4194628),
          ("e4194629", 4194629),
          ("e4194630", 4194630),
          ("e4194631", 4194631),
          ("e4194632", 4194632),
          ("e4194633", 4194633),
          ("e4194634", 4194634),
          ("e4194635", 4194635),
          ("e4194636", 4194636),
          ("e4194637", 4194637),
          ("e4194638", 4194638),
          ("e4194639", 4194639),
          ("e4194640", 4194640),
          ("e4194641", 4194641),
          ("e4194642", 4194642),
          ("e4194643", 4194643),
          ("e4194644", 4194644),
          ("e4194645", 4194645),
          ("e4194646", 4194646),
          ("e4194647", 4194647),
          ("e4194648", 4194648),
          ("e4194649", 4194649),
          ("e4194650", 4194650),
          ("e4194651", 4194651),
          ("e4194652", 4194652),
          ("e4194653", 4194653),
          ("e4194654", 4194654),
          ("e4194655", 4194655),
          ("e4194656", 4194656),
          ("e4194657", 4194657),
          ("e4194658", 4194658),
          ("e4194659", 4194659),
          ("e4194660", 4194660),
          ("e4194661", 4194661),
          ("e4194662", 4194662),
          ("e4194663", 4194663),
          ("e4194664", 4194664),
          ("e4194665", 4194665),
          ("e4194666", 4194666),
          ("e4194667", 4194667),
          ("e4194668", 4194668),
          ("e4194669", 4194669),
          ("e4194670", 4194670),
          ("e4194671", 4194671),
          ("e4194672", 4194672),
          ("e4194673", 4194673),
          ("e4194674", 4194674),
          ("e4194675", 4194675),
          ("e4194676", 4194676),
          ("e4194677", 4194677),
          ("e4194678", 4194678),
          ("e4194679", 4194679),
          ("e4194680", 4194680),
          ("e4194681", 4194681),
          ("e4194682", 4194682),
          ("e4194683", 4194683),
          ("e4194684", 4194684),
          ("e4194685", 4194685),
          ("e4194686", 4194686),
          ("e4194687", 4194687),
          ("e4194688", 4194688),
          ("e4194689", 4194689),
          ("e4194690", 4194690),
          ("e4194691", 4194691),
          ("e4194692", 4194692),
          ("e4194693", 4194693),
          ("e4194694", 4194694),
          ("e4194695", 4194695),
          ("e4194696", 4194696),
          ("e4194697", 4194697),
          ("e4194698", 4194698),
          ("e4194699", 4194699),
          ("e4194700", 4194700),
          ("e4194701", 4194701),
          ("e4194702", 4194702),
          ("e4194703", 4194703),
          ("e4194704", 4194704),
          ("e4194705", 4194705),
          ("e4194706", 4194706),
          ("e4194707", 4194707),
          ("e4194708", 4194708),
          ("e4194709", 4194709),
          ("e4194710", 4194710),
          ("e4194711", 4194711),
          ("e4194712", 4194712),
          ("e4194713", 4194713),
          ("e4194714", 4194714),
          ("e4194715", 4194715),
          ("e4194716", 4194716),
          ("e4194717", 4194717),
          ("e4194718", 4194718),
          ("e4194719", 4194719),
          ("e4194720", 4194720),
          ("e4194721", 4194721),
          ("e4194722", 4194722),
          ("e4194723", 4194723),
          ("e4194724", 4194724),
          ("e4194725", 4194725),
          ("e4194726", 4194726),
          ("e4194727", 4194727),
          ("e4194728", 4194728),
          ("e4194729", 4194729),
          ("e4194730", 4194730),
          ("e4194731", 4194731),
          ("e4194732", 4194732),
          ("e4194733", 4194733),
          ("e4194734", 4194734),
          ("e4194735", 4194735),
          ("e4194736", 4194736),
          ("e4194737", 4194737),
          ("e4194738", 4194738),
          ("e4194739", 4194739),
          ("e4194740", 4194740),
          ("e4194741", 4194741),
          ("e4194742", 4194742),
          ("e4194743", 4194743),
          ("e4194744", 4194744),
          ("e4194745", 4194745),
          ("e4194746", 4194746),
          ("e4194747", 4194747),
          ("e4194748", 4194748),
          ("e4194749", 4194749),
          ("e4194750", 4194750),
          ("e4194751", 4194751),
          ("e4194752", 4194752),
          ("e4194753", 4194753),
          ("e4194754", 4194754),
          ("e4194755", 4194755),
          ("e4194756", 4194756),
          ("e4194757", 4194757),
          ("e4194758", 4194758),
          ("e4194759", 4194759),
          ("e4194760", 4194760),
          ("e4194761", 4194761),
          ("e4194762", 4194762),
          ("e4194763", 4194763),
          ("e4194764", 4194764),
          ("e4194765", 4194765),
          ("e4194766", 4194766),
          ("e4194767", 4194767),
          ("e4194768", 4194768),
          ("e4194769", 4194769),
          ("e4194770", 4194770),
          ("e4194771", 4194771),
          ("e4194772", 4194772),
          ("e4194773", 4194773),
          ("e4194774", 4194774),
          ("e4194775", 4194775),
          ("e4194776", 4194776),
          ("e4194777", 4194777),
          ("e4194778", 4194778),
          ("e4194779", 4194779),
          ("e4194780", 4194780),
          ("e4194781", 4194781),
          ("e4194782", 4194782),
          ("e4194783", 4194783),
          ("e4194784", 4194784),
          ("e4194785", 4194785),
          ("e4194786", 4194786),
          ("e4194787", 4194787),
          ("e4194788", 4194788),
          ("e4194789", 4194789),
          ("e4194790", 4194790),
          ("e4194791", 4194791),
          ("e4194792", 4194792),
          ("e4194793", 4194793),
          ("e4194794", 4194794),
          ("e4194795", 4194795),
          ("e4194796", 4194796),
          ("e4194797", 4194797),
          ("e4194798", 4194798),
          ("e4194799", 4194799),
          ("e4194800", 4194800),
          ("e4194801", 4194801),
          ("e4194802", 4194802),
          ("e4194803", 4194803),
          ("e4194804", 4194804),
          ("e4194805", 4194805),
          ("e4194806", 4194806),
          ("e4194807", 4194807),
          ("e4194808", 4194808),
          ("e4194809", 4194809),
          ("e4194810", 4194810),
          ("e4194811", 4194811),
          ("e4194812", 4194812),
          ("e4194813", 4194813),
          ("e4194814", 4194814),
          ("e4194815", 4194815),
          ("e4194816", 4194816),
          ("e4194817", 4194817),
          ("e4194818", 4194818),
          ("e4194819", 4194819),
          ("e4194820", 4194820),
          ("e4194821", 4194821),
          ("e4194822", 4194822),
          ("e4194823", 4194823),
          ("e4194824", 4194824),
          ("e4194825", 4194825),
          ("e4194826", 4194826),
          ("e4194827", 4194827),
          ("e4194828", 4194828),
          ("e4194829", 4194829),
          ("e4194830", 4194830),
          ("e4194831", 4194831),
          ("e4194832", 4194832),
          ("e4194833", 4194833),
          ("e4194834", 4194834),
          ("e4194835", 4194835),
          ("e4194836", 4194836),
          ("e4194837", 4194837),
          ("e4194838", 4194838),
          ("e4194839", 4194839),
          ("e4194840", 4194840),
          ("e4194841", 4194841),
          ("e4194842", 4194842),
          ("e4194843", 4194843),
          ("e4194844", 4194844),
          ("e4194845", 4194845),
          ("e4194846", 4194846),
          ("e4194847", 4194847),
          ("e4194848", 4194848),
          ("e4194849", 4194849),
          ("e4194850", 4194850),
          ("e4194851", 4194851),
          ("e4194852", 4194852),
          ("e4194853", 4194853),
          ("e4194854", 4194854),
          ("e4194855", 4194855),
          ("e4194856", 4194856),
          ("e4194857", 4194857),
          ("e4194858", 4194858),
          ("e4194859", 4194859),
          ("e4194860", 4194860),
          ("e4194861", 4194861),
          ("e4194862", 4194862),
          ("e4194863", 4194863),
          ("e4194864", 4194864),
          ("e4194865", 4194865),
          ("e4194866", 4194866),
          ("e4194867", 4194867),
          ("e4194868", 4194868),
          ("e4194869", 4194869),
          ("e4194870", 4194870),
          ("e4194871", 4194871),
          ("e4194872", 4194872),
          ("e4194873", 4194873),
          ("e4194874", 4194874),
          ("e4194875", 4194875),
          ("e4194876", 4194876),
          ("e4194877", 4194877),
          ("e4194878", 4194878),
          ("e4194879", 4194879),
          ("e4194880", 4194880),
          ("e4194881", 4194881),
          ("e4194882", 4194882),
          ("e4194883", 4194883),
          ("e4194884", 4194884),
          ("e4194885", 4194885),
          ("e4194886", 4194886),
          ("e4194887", 4194887),
          ("e4194888", 4194888),
          ("e4194889", 4194889),
          ("e4194890", 4194890),
          ("e4194891", 4194891),
          ("e4194892", 4194892),
          ("e4194893", 4194893),
          ("e4194894", 4194894),
          ("e4194895", 4194895),
          ("e4194896", 4194896),
          ("e4194897", 4194897),
          ("e4194898", 4194898),
          ("e4194899", 4194899),
          ("e4194900", 4194900),
          ("e4194901", 4194901),
          ("e4194902", 4194902),
          ("e4194903", 4194903),
          ("e4194904", 4194904),
          ("e4194905", 4194905),
          ("e4194906", 4194906),
          ("e4194907", 4194907),
          ("e4194908", 4194908),
          ("e4194909", 4194909),
          ("e4194910", 4194910),
          ("e4194911", 4194911),
          ("e4194912", 4194912),
          ("e4194913", 4194913),
          ("e4194914", 4194914),
          ("e4194915", 4194915),
          ("e4194916", 4194916),
          ("e4194917", 4194917),
          ("e4194918", 4194918),
          ("e4194919", 4194919),
          ("e4194920", 4194920),
          ("e4194921", 4194921),
          ("e4194922", 4194922),
          ("e4194923", 4194923),
          ("e4194924", 4194924),
          ("e4194925", 4194925),
          ("e4194926", 4194926),
          ("e4194927", 4194927),
          ("e4194928", 4194928),
          ("e4194929", 4194929),
          ("e4194930", 4194930),
          ("e4194931", 4194931),
          ("e4194932", 4194932),
          ("e4194933", 4194933),
          ("e4194934", 4194934),
          ("e4194935", 4194935),
          ("e4194936", 4194936),
          ("e4194937", 4194937),
          ("e4194938", 4194938),
          ("e4194939", 4194939),
          ("e4194940", 4194940),
          ("e4194941", 4194941),
          ("e4194942", 4194942),
          ("e4194943", 4194943),
          ("e4194944", 4194944),
          ("e4194945", 4194945),
          ("e4194946", 4194946),
          ("e4194947", 4194947),
          ("e4194948", 4194948),
          ("e4194949", 4194949),
          ("e4194950", 4194950),
          ("e4194951", 4194951),
          ("e4194952", 4194952),
          ("e4194953", 4194953),
          ("e4194954", 4194954),
          ("e4194955", 4194955),
          ("e4194956", 4194956),
          ("e4194957", 4194957),
          ("e4194958", 4194958),
          ("e4194959", 4194959),
          ("e4194960", 4194960),
          ("e4194961", 4194961),
          ("e4194962", 4194962),
          ("e4194963", 4194963),
          ("e4194964", 4194964),
          ("e4194965", 4194965),
          ("e4194966", 4194966),
          ("e4194967", 4194967),
          ("e4194968", 4194968),
          ("e4194969", 4194969),
          ("e4194970", 4194970),
          ("e4194971", 4194971),
          ("e4194972", 4194972),
          ("e4194973", 4194973),
          ("e4194974", 4194974),
          ("e4194975", 4194975),
          ("e4194976", 4194976),
          ("e4194977", 4194977),
          ("e4194978", 4194978),
          ("e4194979", 4194979),
          ("e4194980", 4194980),
          ("e4194981", 4194981),
          ("e4194982", 4194982),
          ("e4194983", 4194983),
          ("e4194984", 4194984),
          ("e4194985", 4194985),
          ("e4194986", 4194986),
          ("e4194987", 4194987),
          ("e4194988", 4194988),
          ("e4194989", 4194989),
          ("e4194990", 4194990),
          ("e4194991", 4194991),
          ("e4194992", 4194992),
          ("e4194993", 4194993),
          ("e4194994", 4194994),
          ("e4194995", 4194995),
          ("e4194996", 4194996),
          ("e4194997", 4194997),
          ("e4194998", 4194998),
          ("e4194999", 4194999),
          ("e4195000", 4195000),
          ("e4195001", 4195001),
          ("e4195002", 4195002),
          ("e4195003", 4195003),
          ("e4195004", 4195004),
          ("e4195005", 4195005),
          ("e4195006", 4195006),
          ("e4195007", 4195007),
          ("e4195008", 4195008),
          ("e4195009", 4195009),
          ("e4195010", 4195010),
          ("e4195011", 4195011),
          ("e4195012", 4195012),
          ("e4195013", 4195013),
          ("e4195014", 4195014),
          ("e4195015", 4195015),
          ("e4195016", 4195016),
          ("e4195017", 4195017),
          ("e4195018", 4195018),
          ("e4195019", 4195019),
          ("e4195020", 4195020),
          ("e4195021", 4195021),
          ("e4195022", 4195022),
          ("e4195023", 4195023),
          ("e4195024", 4195024),
          ("e4195025", 4195025),
          ("e4195026", 4195026),
          ("e4195027", 4195027),
          ("e4195028", 4195028),
          ("e4195029", 4195029),
          ("e4195030", 4195030),
          ("e4195031", 4195031),
          ("e4195032", 4195032),
          ("e4195033", 4195033),
          ("e4195034", 4195034),
          ("e4195035", 4195035),
          ("e4195036", 4195036),
          ("e4195037", 4195037),
          ("e4195038", 4195038),
          ("e4195039", 4195039),
          ("e4195040", 4195040),
          ("e4195041", 4195041),
          ("e4195042", 4195042),
          ("e4195043", 4195043),
          ("e4195044", 4195044),
          ("e4195045", 4195045),
          ("e4195046", 4195046),
          ("e4195047", 4195047),
          ("e4195048", 4195048),
          ("e4195049", 4195049),
          ("e4195050", 4195050),
          ("e4195051", 4195051),
          ("e4195052", 4195052),
          ("e4195053", 4195053),
          ("e4195054", 4195054),
          ("e4195055", 4195055),
          ("e4195056", 4195056),
          ("e4195057", 4195057),
          ("e4195058", 4195058),
          ("e4195059", 4195059),
          ("e4195060", 4195060),
          ("e4195061", 4195061),
          ("e4195062", 4195062),
          ("e4195063", 4195063),
          ("e4195064", 4195064),
          ("e4195065", 4195065),
          ("e4195066", 4195066),
          ("e4195067", 4195067),
          ("e4195068", 4195068),
          ("e4195069", 4195069),
          ("e4195070", 4195070),
          ("e4195071", 4195071),
          ("e4195072", 4195072),
          ("e4195073", 4195073),
          ("e4195074", 4195074),
          ("e4195075", 4195075),
          ("e4195076", 4195076),
          ("e4195077", 4195077),
          ("e4195078", 4195078),
          ("e4195079", 4195079),
          ("e4195080", 4195080),
          ("e4195081", 4195081),
          ("e4195082", 4195082),
          ("e4195083", 4195083),
          ("e4195084", 4195084),
          ("e4195085", 4195085),
          ("e4195086", 4195086),
          ("e4195087", 4195087),
          ("e4195088", 4195088),
          ("e4195089", 4195089),
          ("e4195090", 4195090),
          ("e4195091", 4195091),
          ("e4195092", 4195092),
          ("e4195093", 4195093),
          ("e4195094", 4195094),
          ("e4195095", 4195095),
          ("e4195096", 4195096),
          ("e4195097", 4195097),
          ("e4195098", 4195098),
          ("e4195099", 4195099),
          ("e4195100", 4195100),
          ("e4195101", 4195101),
          ("e4195102", 4195102),
          ("e4195103", 4195103),
          ("e4195104", 4195104),
          ("e4195105", 4195105),
          ("e4195106", 4195106),
          ("e4195107", 4195107),
          ("e4195108", 4195108),
          ("e4195109", 4195109),
          ("e4195110", 4195110),
          ("e4195111", 4195111),
          ("e4195112", 4195112),
          ("e4195113", 4195113),
          ("e4195114", 4195114),
          ("e4195115", 4195115),
          ("e4195116", 4195116),
          ("e4195117", 4195117),
          ("e4195118", 4195118),
          ("e4195119", 4195119),
          ("e4195120", 4195120),
          ("e4195121", 4195121),
          ("e4195122", 4195122),
          ("e4195123", 4195123),
          ("e4195124", 4195124),
          ("e4195125", 4195125),
          ("e4195126", 4195126),
          ("e4195127", 4195127),
          ("e4195128", 4195128),
          ("e4195129", 4195129),
          ("e4195130", 4195130),
          ("e4195131", 4195131),
          ("e4195132", 4195132),
          ("e4195133", 4195133),
          ("e4195134", 4195134),
          ("e4195135", 4195135),
          ("e4195136", 4195136),
          ("e4195137", 4195137),
          ("e4195138", 4195138),
          ("e4195139", 4195139),
          ("e4195140", 4195140),
          ("e4195141", 4195141),
          ("e4195142", 4195142),
          ("e4195143", 4195143),
          ("e4195144", 4195144),
          ("e4195145", 4195145),
          ("e4195146", 4195146),
          ("e4195147", 4195147),
          ("e4195148", 4195148),
          ("e4195149", 4195149),
          ("e4195150", 4195150),
          ("e4195151", 4195151),
          ("e4195152", 4195152),
          ("e4195153", 4195153),
          ("e4195154", 4195154),
          ("e4195155", 4195155),
          ("e4195156", 4195156),
          ("e4195157", 4195157),
          ("e4195158", 4195158),
          ("e4195159", 4195159),
          ("e4195160", 4195160),
          ("e4195161", 4195161),
          ("e4195162", 4195162),
          ("e4195163", 4195163),
          ("e4195164", 4195164),
          ("e4195165", 4195165),
          ("e4195166", 4195166),
          ("e4195167", 4195167),
          ("e4195168", 4195168),
          ("e4195169", 4195169),
          ("e4195170", 4195170),
          ("e4195171", 4195171),
          ("e4195172", 4195172),
          ("e4195173", 4195173),
          ("e4195174", 4195174),
          ("e4195175", 4195175),
          ("e4195176", 4195176),
          ("e4195177", 4195177),
          ("e4195178", 4195178),
          ("e4195179", 4195179),
          ("e4195180", 4195180),
          ("e4195181", 4195181),
          ("e4195182", 4195182),
          ("e4195183", 4195183),
          ("e4195184", 4195184),
          ("e4195185", 4195185),
          ("e4195186", 4195186),
          ("e4195187", 4195187),
          ("e4195188", 4195188),
          ("e4195189", 4195189),
          ("e4195190", 4195190),
          ("e4195191", 4195191),
          ("e4195192", 4195192),
          ("e4195193", 4195193),
          ("e4195194", 4195194),
          ("e4195195", 4195195),
          ("e4195196", 4195196),
          ("e4195197", 4195197),
          ("e4195198", 4195198),
          ("e4195199", 4195199),
          ("e4195200", 4195200),
          ("e4195201", 4195201),
          ("e4195202", 4195202),
          ("e4195203", 4195203),
          ("e4195204", 4195204),
          ("e4195205", 4195205),
          ("e4195206", 4195206),
          ("e4195207", 4195207),
          ("e4195208", 4195208),
          ("e4195209", 4195209),
          ("e4195210", 4195210),
          ("e4195211", 4195211),
          ("e4195212", 4195212),
          ("e4195213", 4195213),
          ("e4195214", 4195214),
          ("e4195215", 4195215),
          ("e4195216", 4195216),
          ("e4195217", 4195217),
          ("e4195218", 4195218),
          ("e4195219", 4195219),
          ("e4195220", 4195220),
          ("e4195221", 4195221),
          ("e4195222", 4195222),
          ("e4195223", 4195223),
          ("e4195224", 4195224),
          ("e4195225", 4195225),
          ("e4195226", 4195226),
          ("e4195227", 4195227),
          ("e4195228", 4195228),
          ("e4195229", 4195229),
          ("e4195230", 4195230),
          ("e4195231", 4195231),
          ("e4195232", 4195232),
          ("e4195233", 4195233),
          ("e4195234", 4195234),
          ("e4195235", 4195235),
          ("e4195236", 4195236),
          ("e4195237", 4195237),
          ("e4195238", 4195238),
          ("e4195239", 4195239),
          ("e4195240", 4195240),
          ("e4195241", 4195241),
          ("e4195242", 4195242),
          ("e4195243", 4195243),
          ("e4195244", 4195244),
          ("e4195245", 4195245),
          ("e4195246", 4195246),
          ("e4195247", 4195247),
          ("e4195248", 4195248),
          ("e4195249", 4195249),
          ("e4195250", 4195250),
          ("e4195251", 4195251),
          ("e4195252", 4195252),
          ("e4195253", 4195253),
          ("e4195254", 4195254),
          ("e4195255", 4195255),
          ("e4195256", 4195256),
          ("e4195257", 4195257),
          ("e4195258", 4195258),
          ("e4195259", 4195259),
          ("e4195260", 4195260),
          ("e4195261", 4195261),
          ("e4195262", 4195262),
          ("e4195263", 4195263),
          ("e4195264", 4195264),
          ("e4195265", 4195265),
          ("e4195266", 4195266),
          ("e4195267", 4195267),
          ("e4195268", 4195268),
          ("e4195269", 4195269),
          ("e4195270", 4195270),
          ("e4195271", 4195271),
          ("e4195272", 4195272),
          ("e4195273", 4195273),
          ("e4195274", 4195274),
          ("e4195275", 4195275),
          ("e4195276", 4195276),
          ("e4195277", 4195277),
          ("e4195278", 4195278),
          ("e4195279", 4195279),
          ("e4195280", 4195280),
          ("e4195281", 4195281),
          ("e4195282", 4195282),
          ("e4195283", 4195283),
          ("e4195284", 4195284),
          ("e4195285", 4195285),
          ("e4195286", 4195286),
          ("e4195287", 4195287),
          ("e4195288", 4195288),
          ("e4195289", 4195289),
          ("e4195290", 4195290),
          ("e4195291", 4195291),
          ("e4195292", 4195292),
          ("e4195293", 4195293),
          ("e4195294", 4195294),
          ("e4195295", 4195295),
          ("e4195296", 4195296),
          ("e4195297", 4195297),
          ("e4195298", 4195298),
          ("e4195299", 4195299),
          ("e4195300", 4195300),
          ("e4195301", 4195301),
          ("e4195302", 4195302),
          ("e4195303", 4195303),
          ("e4195304", 4195304),
          ("e4195305", 4195305),
          ("e4195306", 4195306),
          ("e4195307", 4195307),
          ("e4195308", 4195308),
          ("e4195309", 4195309),
          ("e4195310", 4195310),
          ("e4195311", 4195311),
          ("e4195312", 4195312),
          ("e4195313", 4195313),
          ("e4195314", 4195314),
          ("e4195315", 4195315),
          ("e4195316", 4195316),
          ("e4195317", 4195317),
          ("e4195318", 4195318),
          ("e4195319", 4195319),
          ("e4195320", 4195320),
          ("e4195321", 4195321),
          ("e4195322", 4195322),
          ("e4195323", 4195323),
          ("e4195324", 4195324),
          ("e4195325", 4195325),
          ("e4195326", 4195326),
          ("e4195327", 4195327),
          ("e4195328", 4195328),
          ("e4195329", 4195329),
          ("e4195330", 4195330),
          ("e4195331", 4195331),
          ("e4195332", 4195332),
          ("e4195333", 4195333),
          ("e4195334", 4195334),
          ("e4195335", 4195335),
          ("e4195336", 4195336),
          ("e4195337", 4195337),
          ("e4195338", 4195338),
          ("e4195339", 4195339),
          ("e4195340", 4195340),
          ("e4195341", 4195341),
          ("e4195342", 4195342),
          ("e4195343", 4195343),
          ("e4195344", 4195344),
          ("e4195345", 4195345),
          ("e4195346", 4195346),
          ("e4195347", 4195347),
          ("e4195348", 4195348),
          ("e4195349", 4195349),
          ("e4195350", 4195350),
          ("e4195351", 4195351),
          ("e4195352", 4195352),
          ("e4195353", 4195353),
          ("e4195354", 4195354),
          ("e4195355", 4195355),
          ("e4195356", 4195356),
          ("e4195357", 4195357),
          ("e4195358", 4195358),
          ("e4195359", 4195359),
          ("e4195360", 4195360),
          ("e4195361", 4195361),
          ("e4195362", 4195362),
          ("e4195363", 4195363),
          ("e4195364", 4195364),
          ("e4195365", 4195365),
          ("e4195366", 4195366),
          ("e4195367", 4195367),
          ("e4195368", 4195368),
          ("e4195369", 4195369),
          ("e4195370", 4195370),
          ("e4195371", 4195371),
          ("e4195372", 4195372),
          ("e4195373", 4195373),
          ("e4195374", 4195374),
          ("e4195375", 4195375),
          ("e4195376", 4195376),
          ("e4195377", 4195377),
          ("e4195378", 4195378),
          ("e4195379", 4195379),
          ("e4195380", 4195380),
          ("e4195381", 4195381),
          ("e4195382", 4195382),
          ("e4195383", 4195383),
          ("e4195384", 4195384),
          ("e4195385", 4195385),
          ("e4195386", 4195386),
          ("e4195387", 4195387),
          ("e4195388", 4195388),
          ("e4195389", 4195389),
          ("e4195390", 4195390),
          ("e4195391", 4195391),
          ("e4195392", 4195392),
          ("e4195393", 4195393),
          ("e4195394", 4195394),
          ("e4195395", 4195395),
          ("e4195396", 4195396),
          ("e4195397", 4195397),
          ("e4195398", 4195398),
          ("e4195399", 4195399),
          ("e4195400", 4195400),
          ("e4195401", 4195401),
          ("e4195402", 4195402),
          ("e4195403", 4195403),
          ("e4195404", 4195404),
          ("e4195405", 4195405),
          ("e4195406", 4195406),
          ("e4195407", 4195407),
          ("e4195408", 4195408),
          ("e4195409", 4195409),
          ("e4195410", 4195410),
          ("e4195411", 4195411),
          ("e4195412", 4195412),
          ("e4195413", 4195413),
          ("e4195414", 4195414),
          ("e4195415", 4195415),
          ("e4195416", 4195416),
          ("e4195417", 4195417),
          ("e4195418", 4195418),
          ("e4195419", 4195419),
          ("e4195420", 4195420),
          ("e4195421", 4195421),
          ("e4195422", 4195422),
          ("e4195423", 4195423),
          ("e4195424", 4195424),
          ("e4195425", 4195425),
          ("e4195426", 4195426),
          ("e4195427", 4195427),
          ("e4195428", 4195428),
          ("e4195429", 4195429),
          ("e4195430", 4195430),
          ("e4195431", 4195431),
          ("e4195432", 4195432),
          ("e4195433", 4195433),
          ("e4195434", 4195434),
          ("e4195435", 4195435),
          ("e4195436", 4195436),
          ("e4195437", 4195437),
          ("e4195438", 4195438),
          ("e4195439", 4195439),
          ("e4195440", 4195440),
          ("e4195441", 4195441),
          ("e4195442", 4195442),
          ("e4195443", 4195443),
          ("e4195444", 4195444),
          ("e4195445", 4195445),
          ("e4195446", 4195446),
          ("e4195447", 4195447),
          ("e4195448", 4195448),
          ("e4195449", 4195449),
          ("e4195450", 4195450),
          ("e4195451", 4195451),
          ("e4195452", 4195452),
          ("e4195453", 4195453),
          ("e4195454", 4195454),
          ("e4195455", 4195455),
          ("e4195456", 4195456),
          ("e4195457", 4195457),
          ("e4195458", 4195458),
          ("e4195459", 4195459),
          ("e4195460", 4195460),
          ("e4195461", 4195461),
          ("e4195462", 4195462),
          ("e4195463", 4195463),
          ("e4195464", 4195464),
          ("e4195465", 4195465),
          ("e4195466", 4195466),
          ("e4195467", 4195467),
          ("e4195468", 4195468),
          ("e4195469", 4195469),
          ("e4195470", 4195470),
          ("e4195471", 4195471),
          ("e4195472", 4195472),
          ("e4195473", 4195473),
          ("e4195474", 4195474),
          ("e4195475", 4195475),
          ("e4195476", 4195476),
          ("e4195477", 4195477),
          ("e4195478", 4195478),
          ("e4195479", 4195479),
          ("e4195480", 4195480),
          ("e4195481", 4195481),
          ("e4195482", 4195482),
          ("e4195483", 4195483),
          ("e4195484", 4195484),
          ("e4195485", 4195485),
          ("e4195486", 4195486),
          ("e4195487", 4195487),
          ("e4195488", 4195488),
          ("e4195489", 4195489),
          ("e4195490", 4195490),
          ("e4195491", 4195491),
          ("e4195492", 4195492),
          ("e4195493", 4195493),
          ("e4195494", 4195494),
          ("e4195495", 4195495),
          ("e4195496", 4195496),
          ("e4195497", 4195497),
          ("e4195498", 4195498),
          ("e4195499", 4195499),
          ("e4195500", 4195500),
          ("e4195501", 4195501),
          ("e4195502", 4195502),
          ("e4195503", 4195503),
          ("e4195504", 4195504),
          ("e4195505", 4195505),
          ("e4195506", 4195506),
          ("e4195507", 4195507),
          ("e4195508", 4195508),
          ("e4195509", 4195509),
          ("e4195510", 4195510),
          ("e4195511", 4195511),
          ("e4195512", 4195512),
          ("e4195513", 4195513),
          ("e4195514", 4195514),
          ("e4195515", 4195515),
          ("e4195516", 4195516),
          ("e4195517", 4195517),
          ("e4195518", 4195518),
          ("e4195519", 4195519),
          ("e4195520", 4195520),
          ("e4195521", 4195521),
          ("e4195522", 4195522),
          ("e4195523", 4195523),
          ("e4195524", 4195524),
          ("e4195525", 4195525),
          ("e4195526", 4195526),
          ("e4195527", 4195527),
          ("e4195528", 4195528),
          ("e4195529", 4195529),
          ("e4195530", 4195530),
          ("e4195531", 4195531),
          ("e4195532", 4195532),
          ("e4195533", 4195533),
          ("e4195534", 4195534),
          ("e4195535", 4195535),
          ("e4195536", 4195536),
          ("e4195537", 4195537),
          ("e4195538", 4195538),
          ("e4195539", 4195539),
          ("e4195540", 4195540),
          ("e4195541", 4195541),
          ("e4195542", 4195542),
          ("e4195543", 4195543),
          ("e4195544", 4195544),
          ("e4195545", 4195545),
          ("e4195546", 4195546),
          ("e4195547", 4195547),
          ("e4195548", 4195548),
          ("e4195549", 4195549),
          ("e4195550", 4195550),
          ("e4195551", 4195551),
          ("e4195552", 4195552),
          ("e4195553", 4195553),
          ("e4195554", 4195554),
          ("e4195555", 4195555),
          ("e4195556", 4195556),
          ("e4195557", 4195557),
          ("e4195558", 4195558),
          ("e4195559", 4195559),
          ("e4195560", 4195560),
          ("e4195561", 4195561),
          ("e4195562", 4195562),
          ("e4195563", 4195563),
          ("e4195564", 4195564),
          ("e4195565", 4195565),
          ("e4195566", 4195566),
          ("e4195567", 4195567),
          ("e4195568", 4195568),
          ("e4195569", 4195569),
          ("e4195570", 4195570),
          ("e4195571", 4195571),
          ("e4195572", 4195572),
          ("e4195573", 4195573),
          ("e4195574", 4195574),
          ("e4195575", 4195575),
          ("e4195576", 4195576),
          ("e4195577", 4195577),
          ("e4195578", 4195578),
          ("e4195579", 4195579),
          ("e4195580", 4195580),
          ("e4195581", 4195581),
          ("e4195582", 4195582),
          ("e4195583", 4195583),
          ("e4195584", 4195584),
          ("e4195585", 4195585),
          ("e4195586", 4195586),
          ("e4195587", 4195587),
          ("e4195588", 4195588),
          ("e4195589", 4195589),
          ("e4195590", 4195590),
          ("e4195591", 4195591),
          ("e4195592", 4195592),
          ("e4195593", 4195593),
          ("e4195594", 4195594),
          ("e4195595", 4195595),
          ("e4195596", 4195596),
          ("e4195597", 4195597),
          ("e4195598", 4195598),
          ("e4195599", 4195599),
          ("e4195600", 4195600),
          ("e4195601", 4195601),
          ("e4195602", 4195602),
          ("e4195603", 4195603),
          ("e4195604", 4195604),
          ("e4195605", 4195605),
          ("e4195606", 4195606),
          ("e4195607", 4195607),
          ("e4195608", 4195608),
          ("e4195609", 4195609),
          ("e4195610", 4195610),
          ("e4195611", 4195611),
          ("e4195612", 4195612),
          ("e4195613", 4195613),
          ("e4195614", 4195614),
          ("e4195615", 4195615),
          ("e4195616", 4195616),
          ("e4195617", 4195617),
          ("e4195618", 4195618),
          ("e4195619", 4195619),
          ("e4195620", 4195620),
          ("e4195621", 4195621),
          ("e4195622", 4195622),
          ("e4195623", 4195623),
          ("e4195624", 4195624),
          ("e4195625", 4195625),
          ("e4195626", 4195626),
          ("e4195627", 4195627),
          ("e4195628", 4195628),
          ("e4195629", 4195629),
          ("e4195630", 4195630),
          ("e4195631", 4195631),
          ("e4195632", 4195632),
          ("e4195633", 4195633),
          ("e4195634", 4195634),
          ("e4195635", 4195635),
          ("e4195636", 4195636),
          ("e4195637", 4195637),
          ("e4195638", 4195638),
          ("e4195639", 4195639),
          ("e4195640", 4195640),
          ("e4195641", 4195641),
          ("e4195642", 4195642),
          ("e4195643", 4195643),
          ("e4195644", 4195644),
          ("e4195645", 4195645),
          ("e4195646", 4195646),
          ("e4195647", 4195647),
          ("e4195648", 4195648),
          ("e4195649", 4195649),
          ("e4195650", 4195650),
          ("e4195651", 4195651),
          ("e4195652", 4195652),
          ("e4195653", 4195653),
          ("e4195654", 4195654),
          ("e4195655", 4195655),
          ("e4195656", 4195656),
          ("e4195657", 4195657),
          ("e4195658", 4195658),
          ("e4195659", 4195659),
          ("e4195660", 4195660),
          ("e4195661", 4195661),
          ("e4195662", 4195662),
          ("e4195663", 4195663),
          ("e4195664", 4195664),
          ("e4195665", 4195665),
          ("e4195666", 4195666),
          ("e4195667", 4195667),
          ("e4195668", 4195668),
          ("e4195669", 4195669),
          ("e4195670", 4195670),
          ("e4195671", 4195671),
          ("e4195672", 4195672),
          ("e4195673", 4195673),
          ("e4195674", 4195674),
          ("e4195675", 4195675),
          ("e4195676", 4195676),
          ("e4195677", 4195677),
          ("e4195678", 4195678),
          ("e4195679", 4195679),
          ("e4195680", 4195680),
          ("e4195681", 4195681),
          ("e4195682", 4195682),
          ("e4195683", 4195683),
          ("e4195684", 4195684),
          ("e4195685", 4195685),
          ("e4195686", 4195686),
          ("e4195687", 4195687),
          ("e4195688", 4195688),
          ("e4195689", 4195689),
          ("e4195690", 4195690),
          ("e4195691", 4195691),
          ("e4195692", 4195692),
          ("e4195693", 4195693),
          ("e4195694", 4195694),
          ("e4195695", 4195695),
          ("e4195696", 4195696),
          ("e4195697", 4195697),
          ("e4195698", 4195698),
          ("e4195699", 4195699),
          ("e4195700", 4195700),
          ("e4195701", 4195701),
          ("e4195702", 4195702),
          ("e4195703", 4195703),
          ("e4195704", 4195704),
          ("e4195705", 4195705),
          ("e4195706", 4195706),
          ("e4195707", 4195707),
          ("e4195708", 4195708),
          ("e4195709", 4195709),
          ("e4195710", 4195710),
          ("e4195711", 4195711),
          ("e4195712", 4195712),
          ("e4195713", 4195713),
          ("e4195714", 4195714),
          ("e4195715", 4195715),
          ("e4195716", 4195716),
          ("e4195717", 4195717),
          ("e4195718", 4195718),
          ("e4195719", 4195719),
          ("e4195720", 4195720),
          ("e4195721", 4195721),
          ("e4195722", 4195722),
          ("e4195723", 4195723),
          ("e4195724", 4195724),
          ("e4195725", 4195725),
          ("e4195726", 4195726),
          ("e4195727", 4195727),
          ("e4195728", 4195728),
          ("e4195729", 4195729),
          ("e4195730", 4195730),
          ("e4195731", 4195731),
          ("e4195732", 4195732),
          ("e4195733", 4195733),
          ("e4195734", 4195734),
          ("e4195735", 4195735),
          ("e4195736", 4195736),
          ("e4195737", 4195737),
          ("e4195738", 4195738),
          ("e4195739", 4195739),
          ("e4195740", 4195740),
          ("e4195741", 4195741),
          ("e4195742", 4195742),
          ("e4195743", 4195743),
          ("e4195744", 4195744),
          ("e4195745", 4195745),
          ("e4195746", 4195746),
          ("e4195747", 4195747),
          ("e4195748", 4195748),
          ("e4195749", 4195749),
          ("e4195750", 4195750),
          ("e4195751", 4195751),
          ("e4195752", 4195752),
          ("e4195753", 4195753),
          ("e4195754", 4195754),
          ("e4195755", 4195755),
          ("e4195756", 4195756),
          ("e4195757", 4195757),
          ("e4195758", 4195758),
          ("e4195759", 4195759),
          ("e4195760", 4195760),
          ("e4195761", 4195761),
          ("e4195762", 4195762),
          ("e4195763", 4195763),
          ("e4195764", 4195764),
          ("e4195765", 4195765),
          ("e4195766", 4195766),
          ("e4195767", 4195767),
          ("e4195768", 4195768),
          ("e4195769", 4195769),
          ("e4195770", 4195770),
          ("e4195771", 4195771),
          ("e4195772", 4195772),
          ("e4195773", 4195773),
          ("e4195774", 4195774),
          ("e4195775", 4195775),
          ("e4195776", 4195776),
          ("e4195777", 4195777),
          ("e4195778", 4195778),
          ("e4195779", 4195779),
          ("e4195780", 4195780),
          ("e4195781", 4195781),
          ("e4195782", 4195782),
          ("e4195783", 4195783),
          ("e4195784", 4195784),
          ("e4195785", 4195785),
          ("e4195786", 4195786),
          ("e4195787", 4195787),
          ("e4195788", 4195788),
          ("e4195789", 4195789),
          ("e4195790", 4195790),
          ("e4195791", 4195791),
          ("e4195792", 4195792),
          ("e4195793", 4195793),
          ("e4195794", 4195794),
          ("e4195795", 4195795),
          ("e4195796", 4195796),
          ("e4195797", 4195797),
          ("e4195798", 4195798),
          ("e4195799", 4195799),
          ("e4195800", 4195800),
          ("e4195801", 4195801),
          ("e4195802", 4195802),
          ("e4195803", 4195803),
          ("e4195804", 4195804),
          ("e4195805", 4195805),
          ("e4195806", 4195806),
          ("e4195807", 4195807),
          ("e4195808", 4195808),
          ("e4195809", 4195809),
          ("e4195810", 4195810),
          ("e4195811", 4195811),
          ("e4195812", 4195812),
          ("e4195813", 4195813),
          ("e4195814", 4195814),
          ("e4195815", 4195815),
          ("e4195816", 4195816),
          ("e4195817", 4195817),
          ("e4195818", 4195818),
          ("e4195819", 4195819),
          ("e4195820", 4195820),
          ("e4195821", 4195821),
          ("e4195822", 4195822),
          ("e4195823", 4195823),
          ("e4195824", 4195824),
          ("e4195825", 4195825),
          ("e4195826", 4195826),
          ("e4195827", 4195827),
          ("e4195828", 4195828),
          ("e4195829", 4195829),
          ("e4195830", 4195830),
          ("e4195831", 4195831),
          ("e4195832", 4195832),
          ("e4195833", 4195833),
          ("e4195834", 4195834),
          ("e4195835", 4195835),
          ("e4195836", 4195836),
          ("e4195837", 4195837),
          ("e4195838", 4195838),
          ("e4195839", 4195839),
          ("e4195840", 4195840),
          ("e4195841", 4195841),
          ("e4195842", 4195842),
          ("e4195843", 4195843),
          ("e4195844", 4195844),
          ("e4195845", 4195845),
          ("e4195846", 4195846),
          ("e4195847", 4195847),
          ("e4195848", 4195848),
          ("e4195849", 4195849),
          ("e4195850", 4195850),
          ("e4195851", 4195851),
          ("e4195852", 4195852),
          ("e4195853", 4195853),
          ("e4195854", 4195854),
          ("e4195855", 4195855),
          ("e4195856", 4195856),
          ("e4195857", 4195857),
          ("e4195858", 4195858),
          ("e4195859", 4195859),
          ("e4195860", 4195860),
          ("e4195861", 4195861),
          ("e4195862", 4195862),
          ("e4195863", 4195863),
          ("e4195864", 4195864),
          ("e4195865", 4195865),
          ("e4195866", 4195866),
          ("e4195867", 4195867),
          ("e4195868", 4195868),
          ("e4195869", 4195869),
          ("e4195870", 4195870),
          ("e4195871", 4195871),
          ("e4195872", 4195872),
          ("e4195873", 4195873),
          ("e4195874", 4195874),
          ("e4195875", 4195875),
          ("e4195876", 4195876),
          ("e4195877", 4195877),
          ("e4195878", 4195878),
          ("e4195879", 4195879),
          ("e4195880", 4195880),
          ("e4195881", 4195881),
          ("e4195882", 4195882),
          ("e4195883", 4195883),
          ("e4195884", 4195884),
          ("e4195885", 4195885),
          ("e4195886", 4195886),
          ("e4195887", 4195887),
          ("e4195888", 4195888),
          ("e4195889", 4195889),
          ("e4195890", 4195890),
          ("e4195891", 4195891),
          ("e4195892", 4195892),
          ("e4195893", 4195893),
          ("e4195894", 4195894),
          ("e4195895", 4195895),
          ("e4195896", 4195896),
          ("e4195897", 4195897),
          ("e4195898", 4195898),
          ("e4195899", 4195899),
          ("e4195900", 4195900),
          ("e4195901", 4195901),
          ("e4195902", 4195902),
          ("e4195903", 4195903),
          ("e4195904", 4195904),
          ("e4195905", 4195905),
          ("e4195906", 4195906),
          ("e4195907", 4195907),
          ("e4195908", 4195908),
          ("e4195909", 4195909),
          ("e4195910", 4195910),
          ("e4195911", 4195911),
          ("e4195912", 4195912),
          ("e4195913", 4195913),
          ("e4195914", 4195914),
          ("e4195915", 4195915),
          ("e4195916", 4195916),
          ("e4195917", 4195917),
          ("e4195918", 4195918),
          ("e4195919", 4195919),
          ("e4195920", 4195920),
          ("e4195921", 4195921),
          ("e4195922", 4195922),
          ("e4195923", 4195923),
          ("e4195924", 4195924),
          ("e4195925", 4195925),
          ("e4195926", 4195926),
          ("e4195927", 4195927),
          ("e4195928", 4195928),
          ("e4195929", 4195929),
          ("e4195930", 4195930),
          ("e4195931", 4195931),
          ("e4195932", 4195932),
          ("e4195933", 4195933),
          ("e4195934", 4195934),
          ("e4195935", 4195935),
          ("e4195936", 4195936),
          ("e4195937", 4195937),
          ("e4195938", 4195938),
          ("e4195939", 4195939),
          ("e4195940", 4195940),
          ("e4195941", 4195941),
          ("e4195942", 4195942),
          ("e4195943", 4195943),
          ("e4195944", 4195944),
          ("e4195945", 4195945),
          ("e4195946", 4195946),
          ("e4195947", 4195947),
          ("e4195948", 4195948),
          ("e4195949", 4195949),
          ("e4195950", 4195950),
          ("e4195951", 4195951),
          ("e4195952", 4195952),
          ("e4195953", 4195953),
          ("e4195954", 4195954),
          ("e4195955", 4195955),
          ("e4195956", 4195956),
          ("e4195957", 4195957),
          ("e4195958", 4195958),
          ("e4195959", 4195959),
          ("e4195960", 4195960),
          ("e4195961", 4195961),
          ("e4195962", 4195962),
          ("e4195963", 4195963),
          ("e4195964", 4195964),
          ("e4195965", 4195965),
          ("e4195966", 4195966),
          ("e4195967", 4195967),
          ("e4195968", 4195968),
          ("e4195969", 4195969),
          ("e4195970", 4195970),
          ("e4195971", 4195971),
          ("e4195972", 4195972),
          ("e4195973", 4195973),
          ("e4195974", 4195974),
          ("e4195975", 4195975),
          ("e4195976", 4195976),
          ("e4195977", 4195977),
          ("e4195978", 4195978),
          ("e4195979", 4195979),
          ("e4195980", 4195980),
          ("e4195981", 4195981),
          ("e4195982", 4195982),
          ("e4195983", 4195983),
          ("e4195984", 4195984),
          ("e4195985", 4195985),
          ("e4195986", 4195986),
          ("e4195987", 4195987),
          ("e4195988", 4195988),
          ("e4195989", 4195989),
          ("e4195990", 4195990),
          ("e4195991", 4195991),
          ("e4195992", 4195992),
          ("e4195993", 4195993),
          ("e4195994", 4195994),
          ("e4195995", 4195995),
          ("e4195996", 4195996),
          ("e4195997", 4195997),
          ("e4195998", 4195998),
          ("e4195999", 4195999),
          ("e4196000", 4196000),
          ("e4196001", 4196001),
          ("e4196002", 4196002),
          ("e4196003", 4196003),
          ("e4196004", 4196004),
          ("e4196005", 4196005),
          ("e4196006", 4196006),
          ("e4196007", 4196007),
          ("e4196008", 4196008),
          ("e4196009", 4196009),
          ("e4196010", 4196010),
          ("e4196011", 4196011),
          ("e4196012", 4196012),
          ("e4196013", 4196013),
          ("e4196014", 4196014),
          ("e4196015", 4196015),
          ("e4196016", 4196016),
          ("e4196017", 4196017),
          ("e4196018", 4196018),
          ("e4196019", 4196019),
          ("e4196020", 4196020),
          ("e4196021", 4196021),
          ("e4196022", 4196022),
          ("e4196023", 4196023),
          ("e4196024", 4196024),
          ("e4196025", 4196025),
          ("e4196026", 4196026),
          ("e4196027", 4196027),
          ("e4196028", 4196028),
          ("e4196029", 4196029),
          ("e4196030", 4196030),
          ("e4196031", 4196031),
          ("e4196032", 4196032),
          ("e4196033", 4196033),
          ("e4196034", 4196034),
          ("e4196035", 4196035),
          ("e4196036", 4196036),
          ("e4196037", 4196037),
          ("e4196038", 4196038),
          ("e4196039", 4196039),
          ("e4196040", 4196040),
          ("e4196041", 4196041),
          ("e4196042", 4196042),
          ("e4196043", 4196043),
          ("e4196044", 4196044),
          ("e4196045", 4196045),
          ("e4196046", 4196046),
          ("e4196047", 4196047),
          ("e4196048", 4196048),
          ("e4196049", 4196049),
          ("e4196050", 4196050),
          ("e4196051", 4196051),
          ("e4196052", 4196052),
          ("e4196053", 4196053),
          ("e4196054", 4196054),
          ("e4196055", 4196055),
          ("e4196056", 4196056),
          ("e4196057", 4196057),
          ("e4196058", 4196058),
          ("e4196059", 4196059),
          ("e4196060", 4196060),
          ("e4196061", 4196061),
          ("e4196062", 4196062),
          ("e4196063", 4196063),
          ("e4196064", 4196064),
          ("e4196065", 4196065),
          ("e4196066", 4196066),
          ("e4196067", 4196067),
          ("e4196068", 4196068),
          ("e4196069", 4196069),
          ("e4196070", 4196070),
          ("e4196071", 4196071),
          ("e4196072", 4196072),
          ("e4196073", 4196073),
          ("e4196074", 4196074),
          ("e4196075", 4196075),
          ("f4522066", 4522066),
          ("f4522408", 4522408),
          ("f4522414", 4522414),
          ("f4522421", 4522421),
          ("f4522435", 4522435),
          ("f4522448", 4522448),
          ("f4522454", 4522454),
          ("f4522465", 4522465),
          ("f4522472", 4522472),
          ("f4522474", 4522474),
          ("f4522480", 4522480),
          ("f4522482", 4522482),
          ("f4522500", 4522500),
          ("f4522502", 4522502),
          ("f4522519", 4522519),
          ("f4523218", 4523218),
          ("f4523256", 4523256),
          ("f4523262", 4523262),
          ("f4523300", 4523300),
          ("f4523311", 4523311),
          ("f4523313", 4523313),
          ("f4523349", 4523349),
          ("f4523352", 4523352),
          ("f4524766", 4524766),
          ("f4524769", 4524769),
          ("f4524774", 4524774),
          ("f4524776", 4524776),
          ("f4524780", 4524780),
          ("f4524782", 4524782),
          ("f4524789", 4524789),
          ("f4524796", 4524796),
          ("f4524799", 4524799),
          ("f4524836", 4524836),
          ("f4524852", 4524852),
          ("f4524855", 4524855),
          ("f4524857", 4524857),
          ("f4524859", 4524859),
          ("f4524861", 4524861),
          ("f4524863", 4524863),
          ("f4524884", 4524884),
          ("f4524886", 4524886),
          ("f4524888", 4524888),
          ("f4524890", 4524890),
          ("f4524892", 4524892),
          ("f4524896", 4524896),
          ("f4524898", 4524898),
          ("f4524902", 4524902),
          ("f4524905", 4524905),
          ("f4524916", 4524916),
          ("f4524925", 4524925),
          ("f4526538", 4526538),
          ("f4526545", 4526545),
          ("f4526547", 4526547),
          ("f4526549", 4526549),
          ("f4526551", 4526551),
          ("f4526553", 4526553),
          ("f4526561", 4526561),
          ("f4526563", 4526563),
          ("f4526566", 4526566),
          ("f4526568", 4526568),
          ("f4526570", 4526570),
          ("f4526572", 4526572),
          ("f4526574", 4526574),
          ("f4526576", 4526576),
          ("f4526578", 4526578),
          ("f4526580", 4526580),
          ("f4526584", 4526584),
          ("f4526587", 4526587),
          ("f4526605", 4526605),
          ("f4526646", 4526646),
          ("f4526653", 4526653),
          ("f4526657", 4526657),
          ("f4526662", 4526662),
          ("f4528969", 4528969),
          ("f4529292", 4529292),
          ("f4529373", 4529373),
          ("f4529375", 4529375),
          ("f4529380", 4529380),
          ("f4529401", 4529401),
          ("f4529415", 4529415),
          ("f4529458", 4529458),
          ("f4529464", 4529464),
          ("f4529597", 4529597))
    )



class CfprApConditionLifecycle(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("flapping", 0),
          ("soakingClear", 1),
          ("soakingRaise", 2),
          ("suppressed", 3))
    )


class CfprApConditionRemoteInvRslt(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("failure", 0),
          ("unidentifiedFail", 1),
          ("internalError", 2),
          ("timeout", 3),
          ("endPointUnavailable", 4),
          ("endPointFailed", 5),
          ("endPointProtocolError", 6),
          ("swDefect", 7),
          ("fwDefect", 8),
          ("hwDefect", 9),
          ("resourceUnavailable", 10),
          ("resourceCapacityExceeded", 11),
          ("resourceDependency", 12),
          ("capabilityNotImplementedIgnore", 13),
          ("capabilityNotImplementedFailure", 14),
          ("capabilityNotSupported", 15),
          ("capabilityUnavailable", 16),
          ("serviceNotImplementedIgnore", 17),
          ("serviceNotImplementedFail", 18),
          ("serviceNotSupported", 19),
          ("serviceUnavailable", 20),
          ("serviceProtocolError", 21),
          ("fruIdentityIndeterminate", 22),
          ("fruInfoMalformed", 23),
          ("illegalFru", 24),
          ("fruStateIndeterminate", 25),
          ("fruNotReady", 26),
          ("extendTimeout", 27),
          ("taskReset", 28),
          ("fruNotSupported", 29),
          ("intermittentError", 30))
    )


class CfprApConditionRule(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              19,
              21,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              63,
              64,
              65,
              66,
              67,
              68,
              69,
              70,
              71,
              72,
              73,
              74,
              75,
              76,
              77,
              78,
              79,
              80,
              81,
              82,
              83,
              84,
              85,
              86,
              87,
              88,
              89,
              90,
              95,
              96,
              97,
              98,
              99,
              100,
              101,
              149,
              150,
              151,
              152,
              153,
              154,
              155,
              156,
              157,
              158,
              159,
              160,
              161,
              162,
              163,
              185,
              186,
              187,
              188,
              189,
              190,
              191,
              192,
              193,
              194,
              195,
              196,
              197,
              198,
              199,
              200,
              299,
              300,
              314,
              315,
              316,
              317,
              318,
              319,
              320,
              321,
              322,
              323,
              324,
              325,
              326,
              332,
              335,
              349,
              350,
              351,
              352,
              353,
              354,
              355,
              356,
              357,
              358,
              359,
              369,
              370,
              371,
              372,
              373,
              374,
              375,
              376,
              377,
              378,
              379,
              380,
              381,
              657,
              658,
              659,
              660,
              661,
              662,
              663,
              664,
              665,
              666,
              667,
              668,
              669,
              675,
              687,
              688,
              689,
              690,
              691,
              692,
              693,
              694,
              695,
              696,
              697,
              698,
              699,
              700,
              701,
              702,
              703,
              704,
              705,
              706,
              707,
              708,
              709,
              710,
              711,
              712,
              713,
              714,
              715,
              716,
              717,
              718,
              719,
              720,
              721,
              722,
              723,
              724,
              725,
              726,
              727,
              728,
              729,
              730,
              731,
              732,
              733,
              734,
              735,
              736,
              737,
              738,
              739,
              740,
              741,
              742,
              743,
              744,
              745,
              746,
              747,
              748,
              749,
              750,
              751,
              752,
              753,
              754,
              755,
              756,
              757,
              758,
              759,
              760,
              792,
              793,
              794,
              795,
              796,
              797,
              798,
              799,
              800,
              809,
              810,
              811,
              812,
              813,
              814,
              815,
              816,
              817,
              818,
              819,
              820,
              821,
              822,
              823,
              824,
              825,
              826,
              827,
              828,
              829,
              830,
              831,
              832,
              833,
              834,
              835,
              836,
              837,
              838,
              839,
              844,
              850,
              851,
              852,
              853,
              854,
              855,
              856,
              857,
              858,
              859,
              860,
              861,
              862,
              863,
              864,
              865,
              866,
              871,
              872,
              899,
              900,
              901,
              902,
              903,
              904,
              905,
              906,
              907,
              964,
              965,
              966,
              967,
              977,
              978,
              979,
              980,
              981,
              982,
              983,
              984,
              985,
              986,
              987,
              996,
              997,
              1014,
              1020,
              1038,
              1039,
              1040,
              1041,
              1042,
              1043,
              1044,
              1045,
              1046,
              1047,
              1048,
              1049,
              1050,
              1051,
              1052,
              1053,
              1054,
              1055,
              1056,
              1057,
              1058,
              1059,
              1060,
              1061,
              1062,
              1115,
              1116,
              1117,
              1118,
              1119,
              1120,
              1121,
              1122,
              1123,
              1124,
              1125,
              1126,
              1127,
              1128,
              1129,
              1130,
              1131,
              1132,
              1133,
              1134,
              1135,
              1136,
              1137,
              1138,
              1139,
              1140,
              1141,
              1150,
              1151,
              1152,
              1153,
              1154,
              1155,
              1156,
              1157,
              1158,
              1159,
              1174,
              1309,
              1310,
              1311,
              1312,
              1313,
              16476,
              16477,
              16517,
              16518,
              16519,
              16520,
              16521,
              16522,
              16523,
              16524,
              16525,
              16526,
              16528,
              16529,
              16530,
              16585,
              16586,
              16587,
              16588,
              16589,
              16667,
              16668,
              16669,
              16670,
              16671,
              16676,
              16681,
              16682,
              16718,
              16727,
              16730,
              16731,
              16748,
              16749,
              16750,
              16751,
              16752,
              16770,
              16780,
              16803,
              16804,
              16805,
              16806,
              16807,
              16815,
              16816,
              16817,
              16818,
              16819,
              16822,
              16823,
              17063,
              17064,
              17065,
              17066,
              17149,
              17151,
              17152,
              17153,
              17154,
              17155,
              17156,
              17157,
              17158,
              17159,
              17160,
              17161,
              17162,
              17163,
              17164,
              17165,
              17166,
              17167,
              17169,
              17170,
              17185,
              17186,
              17187,
              17224,
              17226,
              17227,
              17231,
              17232,
              17233,
              17251,
              17252,
              17253,
              17254,
              17265,
              17266,
              17267,
              17268,
              17269,
              17270,
              17271,
              17272,
              17336,
              17337,
              17340,
              17347,
              17358,
              17359,
              17360,
              17373,
              17374,
              17378,
              17403,
              17408,
              17409,
              17410,
              17411,
              17420,
              17421,
              17469,
              17470,
              17476,
              17477,
              17478,
              17484,
              17490,
              17491,
              17492,
              17493,
              17494,
              17495,
              17496,
              17497,
              17498,
              17531,
              17532,
              17533,
              17554,
              17555,
              17556,
              17559,
              17560,
              17561,
              17562,
              17563,
              17564,
              17565,
              17566,
              17567,
              17568,
              17569,
              17570,
              17571,
              17572,
              17573,
              17690,
              34261,
              34263,
              34264,
              34265,
              34269,
              34271,
              34272,
              34273,
              34277,
              34279,
              34280,
              34281,
              34287,
              34289,
              34290,
              34291,
              34295,
              34297,
              34298,
              34299,
              34303,
              34305,
              34306,
              34307,
              34311,
              34313,
              34314,
              34315,
              34321,
              34323,
              34324,
              34325,
              34329,
              34331,
              34332,
              34333,
              34337,
              34339,
              34340,
              34341,
              34345,
              34347,
              34348,
              34349,
              34353,
              34355,
              34356,
              34357,
              34363,
              34365,
              34366,
              34367,
              34372,
              34383,
              34395,
              34406,
              34417,
              34428,
              34440,
              34451,
              34462,
              34474,
              34485,
              34496,
              34507,
              34841,
              34843,
              34844,
              34845,
              35108,
              35110,
              35111,
              35112,
              35116,
              35118,
              35119,
              35120,
              35124,
              35126,
              35127,
              35128,
              35132,
              35134,
              35135,
              35136,
              35140,
              35142,
              35143,
              35144,
              35148,
              35150,
              35151,
              35152,
              35156,
              35158,
              35159,
              35160,
              35164,
              35166,
              35167,
              35168,
              35174,
              35176,
              35177,
              35178,
              35182,
              35184,
              35185,
              35186,
              35190,
              35192,
              35193,
              35194,
              35200,
              35202,
              35203,
              35204,
              35208,
              35210,
              35211,
              35212,
              35216,
              35218,
              35219,
              35220,
              35844,
              35845,
              35846,
              35847,
              35854,
              35855,
              35856,
              35857,
              35864,
              35865,
              35866,
              35867,
              35874,
              35875,
              35876,
              35877,
              35884,
              35885,
              35886,
              35887,
              35894,
              35895,
              35896,
              35897,
              35907,
              35908,
              35909,
              35910,
              35917,
              35918,
              35919,
              35920,
              35927,
              35928,
              35929,
              35930,
              35937,
              35938,
              35939,
              35940,
              35947,
              35948,
              35949,
              35950,
              35957,
              35958,
              35959,
              35960,
              35970,
              35971,
              35972,
              35973,
              35980,
              35981,
              35982,
              35983,
              35990,
              35991,
              35992,
              35993,
              36000,
              36001,
              36002,
              36003,
              36010,
              36011,
              36012,
              36013,
              36020,
              36021,
              36022,
              36023,
              36030,
              36031,
              36032,
              36033,
              36043,
              36044,
              36045,
              36046,
              36053,
              36054,
              36055,
              36056,
              36063,
              36064,
              36065,
              36066,
              36073,
              36074,
              36075,
              36076,
              36083,
              36084,
              36085,
              36086,
              36096,
              36097,
              36098,
              36099,
              36106,
              36107,
              36108,
              36109,
              36116,
              36117,
              36118,
              36119,
              36129,
              36130,
              36131,
              36132,
              36139,
              36140,
              36141,
              36142,
              36149,
              36150,
              36151,
              36152,
              36161,
              36162,
              36163,
              36164,
              36171,
              36172,
              36173,
              36174,
              36181,
              36182,
              36183,
              36184,
              36191,
              36192,
              36193,
              36194,
              36203,
              36204,
              36205,
              36206,
              36213,
              36214,
              36215,
              36216,
              36223,
              36224,
              36225,
              36226,
              36233,
              36234,
              36235,
              36236,
              36243,
              36244,
              36245,
              36246,
              36253,
              36254,
              36255,
              36256,
              36263,
              36264,
              36265,
              36266,
              36273,
              36274,
              36275,
              36276,
              36285,
              36286,
              36287,
              36288,
              36295,
              36296,
              36297,
              36298,
              36305,
              36306,
              36307,
              36308,
              36315,
              36316,
              36317,
              36318,
              36325,
              36326,
              36327,
              36328,
              36337,
              36338,
              36339,
              36340,
              36347,
              36348,
              36349,
              36350,
              36360,
              36361,
              36362,
              36363,
              36370,
              36371,
              36372,
              36373,
              36380,
              36381,
              36382,
              36383,
              36390,
              36391,
              36392,
              36393,
              36403,
              36404,
              36405,
              36406,
              36413,
              36414,
              36415,
              36416,
              36423,
              36424,
              36425,
              36426,
              36433,
              36434,
              36435,
              36436,
              36446,
              36447,
              36448,
              36449,
              36456,
              36457,
              36458,
              36459,
              36466,
              36467,
              36468,
              36469,
              36479,
              36480,
              36481,
              36482,
              36489,
              36490,
              36491,
              36492,
              36499,
              36500,
              36501,
              36502,
              36509,
              36510,
              36511,
              36512,
              36519,
              36520,
              36521,
              36522,
              36532,
              36533,
              36534,
              36535,
              36542,
              36543,
              36544,
              36545,
              36552,
              36553,
              36554,
              36555,
              36562,
              36563,
              36564,
              36565,
              36575,
              36576,
              36577,
              36578,
              36585,
              36586,
              36587,
              36588,
              36595,
              36596,
              36597,
              36598,
              36605,
              36606,
              36607,
              36608,
              36619,
              36620,
              36621,
              36622,
              36629,
              36630,
              36631,
              36632,
              36639,
              36640,
              36641,
              36642,
              36649,
              36650,
              36651,
              36652,
              36663,
              36664,
              36665,
              36666,
              36673,
              36674,
              36675,
              36676,
              36683,
              36684,
              36685,
              36686,
              36693,
              36694,
              36695,
              36696,
              36706,
              36707,
              36708,
              36709,
              36716,
              36717,
              36718,
              36719,
              36726,
              36727,
              36728,
              36729,
              36736,
              36737,
              36738,
              36739,
              36746,
              36747,
              36748,
              36749,
              36759,
              36760,
              36761,
              36762,
              36769,
              36770,
              36771,
              36772,
              36779,
              36780,
              36781,
              36782,
              36789,
              36790,
              36791,
              36792,
              36802,
              36803,
              36804,
              36805,
              36812,
              36813,
              36814,
              36815,
              36822,
              36823,
              36824,
              36825,
              36832,
              36833,
              36834,
              36835,
              36845,
              36846,
              36847,
              36848,
              36855,
              36856,
              36857,
              36858,
              36865,
              36866,
              36867,
              36868,
              36875,
              36876,
              36877,
              36878,
              36887,
              36888,
              36889,
              36890,
              36897,
              36898,
              36899,
              36900,
              36907,
              36908,
              36909,
              36910,
              36917,
              36918,
              36919,
              36920,
              36927,
              36928,
              36929,
              36930,
              36937,
              36938,
              36939,
              36940,
              36947,
              36948,
              36949,
              36950,
              36957,
              36958,
              36959,
              36960,
              36969,
              36970,
              36971,
              36972,
              36979,
              36980,
              36981,
              36982,
              36989,
              36990,
              36991,
              36992,
              36999,
              37000,
              37001,
              37002,
              37011,
              37012,
              37013,
              37014,
              37021,
              37022,
              37023,
              37024,
              37031,
              37032,
              37033,
              37034,
              37041,
              37042,
              37043,
              37044,
              37051,
              37052,
              37053,
              37054,
              37061,
              37062,
              37063,
              37064,
              37071,
              37072,
              37073,
              37074,
              37081,
              37082,
              37083,
              37084,
              37200,
              37202,
              37203,
              37204,
              37208,
              37210,
              37211,
              37212,
              37216,
              37218,
              37219,
              37220,
              37226,
              37228,
              37229,
              37230,
              37236,
              37238,
              37239,
              37240,
              37246,
              37248,
              37249,
              37250,
              37255,
              37266,
              37277,
              37288,
              37879,
              37881,
              37882,
              37883,
              37887,
              37889,
              37890,
              37891,
              37895,
              37897,
              37898,
              37899,
              37903,
              37905,
              37906,
              37907,
              37911,
              37913,
              37914,
              37915,
              37919,
              37921,
              37922,
              37923,
              37929,
              37931,
              37932,
              37933,
              37937,
              37939,
              37940,
              37941,
              37945,
              37947,
              37948,
              37949,
              37953,
              37955,
              37956,
              37957,
              37963,
              37965,
              37966,
              37967,
              37971,
              37973,
              37974,
              37975,
              37979,
              37981,
              37982,
              37983,
              37987,
              37989,
              37990,
              37991,
              37995,
              37997,
              37998,
              37999,
              38003,
              38005,
              38006,
              38007,
              38014,
              38016,
              38017,
              38018,
              38022,
              38024,
              38025,
              38026,
              38030,
              38032,
              38033,
              38034,
              38040,
              38042,
              38043,
              38044,
              38048,
              38050,
              38051,
              38052,
              38056,
              38058,
              38059,
              38060,
              38067,
              38069,
              38070,
              38071,
              38075,
              38077,
              38078,
              38079,
              38083,
              38085,
              38086,
              38087,
              38094,
              38096,
              38097,
              38098,
              38104,
              38106,
              38107,
              38108,
              38114,
              38116,
              38117,
              38118,
              38122,
              38124,
              38125,
              38126,
              38130,
              38132,
              38133,
              38134,
              38138,
              38140,
              38141,
              38142,
              38146,
              38148,
              38149,
              38150,
              38157,
              38159,
              38160,
              38161,
              38165,
              38167,
              38168,
              38169,
              38173,
              38175,
              38176,
              38177,
              38181,
              38183,
              38184,
              38185,
              38191,
              38193,
              38194,
              38195,
              38199,
              38201,
              38202,
              38203,
              38207,
              38209,
              38210,
              38211,
              38218,
              38220,
              38221,
              38222,
              38226,
              38228,
              38229,
              38230,
              38234,
              38236,
              38237,
              38238,
              38242,
              38244,
              38245,
              38246,
              38250,
              38252,
              38253,
              38254,
              38258,
              38260,
              38261,
              38262,
              38268,
              38270,
              38271,
              38272,
              38276,
              38278,
              38279,
              38280,
              38287,
              38289,
              38290,
              38291,
              38506,
              38507,
              38508,
              38509,
              38516,
              38517,
              38518,
              38519,
              38526,
              38527,
              38528,
              38529,
              38536,
              38537,
              38538,
              38539,
              38546,
              38547,
              38548,
              38549,
              38556,
              38557,
              38558,
              38559,
              38568,
              38569,
              38570,
              38571,
              38578,
              38579,
              38580,
              38581,
              38588,
              38589,
              38590,
              38591,
              38598,
              38599,
              38600,
              38601,
              38608,
              38609,
              38610,
              38611,
              38618,
              38619,
              38620,
              38621,
              38630,
              38631,
              38632,
              38633,
              38640,
              38641,
              38642,
              38643,
              38650,
              38651,
              38652,
              38653,
              38660,
              38661,
              38662,
              38663,
              38670,
              38671,
              38672,
              38673,
              38680,
              38681,
              38682,
              38683,
              38690,
              38691,
              38692,
              38693,
              38700,
              38701,
              38702,
              38703,
              38710,
              38711,
              38712,
              38713,
              38722,
              38723,
              38724,
              38725,
              38732,
              38733,
              38734,
              38735,
              38742,
              38743,
              38744,
              38745,
              38752,
              38753,
              38754,
              38755,
              38762,
              38763,
              38764,
              38765,
              38774,
              38775,
              38776,
              38777,
              38784,
              38785,
              38786,
              38787,
              38794,
              38795,
              38796,
              38797,
              38804,
              38805,
              38806,
              38807,
              38814,
              38815,
              38816,
              38817,
              38824,
              38825,
              38826,
              38827,
              38834,
              38835,
              38836,
              38837,
              38844,
              38845,
              38846,
              38847,
              38856,
              38857,
              38858,
              38859,
              38866,
              38867,
              38868,
              38869,
              38876,
              38877,
              38878,
              38879,
              38888,
              38889,
              38890,
              38891,
              38898,
              38899,
              38900,
              38901,
              38908,
              38909,
              38910,
              38911,
              38918,
              38919,
              38920,
              38921,
              38928,
              38929,
              38930,
              38931,
              38938,
              38939,
              38940,
              38941,
              38948,
              38949,
              38950,
              38951,
              38958,
              38959,
              38960,
              38961,
              39841,
              39843,
              39844,
              39845,
              39852,
              39854,
              39855,
              39856,
              39860,
              39862,
              39863,
              39864,
              39869,
              39880,
              39891,
              39902,
              39913,
              40569,
              40570,
              40571,
              40572,
              40579,
              40580,
              40581,
              40582,
              40589,
              40590,
              40591,
              40592,
              40599,
              40600,
              40601,
              40602,
              40611,
              40612,
              40613,
              40614,
              40621,
              40622,
              40623,
              40624,
              40631,
              40632,
              40633,
              40634,
              40641,
              40642,
              40643,
              40644,
              40651,
              40652,
              40653,
              40654,
              40661,
              40662,
              40663,
              40664,
              40671,
              40672,
              40673,
              40674,
              40681,
              40682,
              40683,
              40684,
              40691,
              40692,
              40693,
              40694,
              40701,
              40702,
              40703,
              40704,
              42989,
              42991,
              42992,
              42993,
              77916,
              77917,
              77957,
              77958,
              77959,
              77960,
              77961,
              77962,
              77963,
              77964,
              77965,
              77966,
              77968,
              77969,
              77970,
              78025,
              78026,
              78027,
              78028,
              78029,
              78107,
              78108,
              78109,
              78110,
              78111,
              78116,
              78121,
              78122,
              78158,
              78167,
              78170,
              78171,
              78188,
              78189,
              78190,
              78191,
              78192,
              78210,
              78220,
              78243,
              78244,
              78245,
              78246,
              78247,
              78255,
              78256,
              78257,
              78258,
              78259,
              78262,
              78263,
              78503,
              78504,
              78505,
              78506,
              78589,
              78591,
              78592,
              78593,
              78594,
              78595,
              78596,
              78597,
              78598,
              78599,
              78600,
              78601,
              78602,
              78603,
              78604,
              78605,
              78606,
              78607,
              78609,
              78610,
              78625,
              78626,
              78627,
              78664,
              78666,
              78667,
              78671,
              78672,
              78673,
              78691,
              78692,
              78693,
              78694,
              78705,
              78706,
              78707,
              78708,
              78709,
              78710,
              78711,
              78712,
              78776,
              78777,
              78780,
              78787,
              78798,
              78799,
              78800,
              78813,
              78814,
              78818,
              78843,
              78848,
              78849,
              78850,
              78851,
              78860,
              78861,
              78909,
              78910,
              78916,
              78917,
              78918,
              78924,
              78930,
              78931,
              78932,
              78933,
              78934,
              78935,
              78936,
              78937,
              78938,
              78971,
              78972,
              78973,
              78994,
              78995,
              78996,
              78999,
              79000,
              79001,
              79002,
              79003,
              79004,
              79005,
              79006,
              79007,
              79008,
              79009,
              79010,
              79011,
              79012,
              79013,
              79130,
              999516,
              999517,
              999557,
              999558,
              999559,
              999560,
              999561,
              999562,
              999563,
              999564,
              999565,
              999566,
              999568,
              999569,
              999570,
              999625,
              999626,
              999627,
              999628,
              999629,
              999707,
              999708,
              999709,
              999710,
              999711,
              999716,
              999721,
              999722,
              999758,
              999767,
              999770,
              999771,
              999788,
              999789,
              999790,
              999791,
              999792,
              999810,
              999820,
              999843,
              999844,
              999845,
              999846,
              999847,
              999855,
              999856,
              999857,
              999858,
              999859,
              999862,
              999863,
              1000103,
              1000104,
              1000105,
              1000106,
              1000189,
              1000191,
              1000192,
              1000193,
              1000194,
              1000195,
              1000196,
              1000197,
              1000198,
              1000199,
              1000200,
              1000201,
              1000202,
              1000203,
              1000204,
              1000205,
              1000206,
              1000207,
              1000209,
              1000210,
              1000225,
              1000226,
              1000227,
              1000264,
              1000266,
              1000267,
              1000271,
              1000272,
              1000273,
              1000291,
              1000292,
              1000293,
              1000294,
              1000305,
              1000306,
              1000307,
              1000308,
              1000309,
              1000310,
              1000311,
              1000312,
              1000376,
              1000377,
              1000380,
              1000387,
              1000398,
              1000399,
              1000400,
              1000413,
              1000414,
              1000418,
              1000443,
              1000448,
              1000449,
              1000450,
              1000451,
              1000460,
              1000461,
              1000509,
              1000510,
              1000516,
              1000517,
              1000518,
              1000524,
              1000530,
              1000531,
              1000532,
              1000533,
              1000534,
              1000535,
              1000536,
              1000537,
              1000538,
              1000571,
              1000572,
              1000573,
              1000594,
              1000595,
              1000596,
              1000599,
              1000600,
              1000601,
              1000602,
              1000603,
              1000604,
              1000605,
              1000606,
              1000607,
              1000608,
              1000609,
              1000610,
              1000611,
              1000612,
              1000613,
              1000730,
              4522066,
              4522408,
              4522414,
              4522421,
              4522435,
              4522448,
              4522454,
              4522465,
              4522472,
              4522474,
              4522480,
              4522482,
              4522500,
              4522502,
              4522519,
              4523218,
              4523256,
              4523262,
              4523300,
              4523311,
              4523313,
              4523349,
              4523352,
              4524766,
              4524769,
              4524774,
              4524776,
              4524780,
              4524782,
              4524789,
              4524796,
              4524799,
              4524836,
              4524852,
              4524855,
              4524857,
              4524859,
              4524861,
              4524863,
              4524884,
              4524886,
              4524888,
              4524890,
              4524892,
              4524896,
              4524898,
              4524902,
              4524905,
              4524916,
              4524925,
              4526538,
              4526545,
              4526547,
              4526549,
              4526551,
              4526553,
              4526561,
              4526563,
              4526566,
              4526568,
              4526570,
              4526572,
              4526574,
              4526576,
              4526578,
              4526580,
              4526584,
              4526587,
              4526605,
              4526646,
              4526653,
              4526657,
              4526662,
              4528969,
              4529292,
              4529373,
              4529375,
              4529380,
              4529401,
              4529415,
              4529458,
              4529464,
              4529597)
        )
    )
    namedValues = NamedValues(
        *(("generic", 0),
          ("fabricVlanReqVlanPermitUnresolved", 19),
          ("fabricVlanGroupReqVlanGroupPermitUnresolved", 21),
          ("dcxNsFailed", 56),
          ("computePhysicalInsufficientlyEquipped", 57),
          ("computePhysicalIdentityUnestablishable", 58),
          ("computeBoardPowerError", 59),
          ("computeBoardPowerFail", 60),
          ("computeAboardThermalProblem", 61),
          ("computeAboardPowerUsageProblem", 62),
          ("computePhysicalPowerProblem", 63),
          ("computePhysicalThermalProblem", 64),
          ("computePhysicalBiosPostTimeout", 65),
          ("computePhysicalDiscoveryFailed", 66),
          ("computePhysicalAssociationFailed", 67),
          ("computePhysicalDisassociationFailed", 68),
          ("computePhysicalInoperable", 69),
          ("computePhysicalUnassignedMissing", 70),
          ("computePhysicalAssignedMissing", 71),
          ("computePhysicalUnidentified", 72),
          ("computePhysicalUnassignedInaccessible", 73),
          ("computePhysicalAssignedInaccessible", 74),
          ("computePhysicalNetworkMisconfigured", 75),
          ("computePhysicalAdapterMismatch", 76),
          ("computeBoardCmosVoltageThresholdCritical", 77),
          ("computeBoardCmosVoltageThresholdNonRecoverable", 78),
          ("computeAboardMotherBoardVoltageThresholdUpperNonRecoverable", 79),
          ("computeAboardMotherBoardVoltageThresholdLowerNonRecoverable", 80),
          ("computeAboardMotherBoardVoltageUpperThresholdCritical", 81),
          ("computeAboardMotherBoardVoltageLowerThresholdCritical", 82),
          ("computePoolEmpty", 83),
          ("computePhysicalPostFailure", 84),
          ("computeRtcBatteryInoperable", 85),
          ("computeIohubThermalNonCritical", 86),
          ("computeIohubThermalThresholdCritical", 87),
          ("computeIohubThermalThresholdNonRecoverable", 88),
          ("firmwareBootUnitPowerCycleRequired", 89),
          ("cimcvmediaActualMountEntryVmediaMountFailed", 90),
          ("firmwarePackItemImageMissing", 95),
          ("firmwareUpdatableImageUnusable", 96),
          ("firmwareBootUnitCantBoot", 97),
          ("firmwareBootUnitActivateStatusFailed", 98),
          ("firmwareStatusCimcFirmwareMismatch", 99),
          ("firmwareStatusPldFirmwareMismatch", 100),
          ("firmwareAutoSyncPolicyDefaultHostPackageMissing", 101),
          ("powerChassisMemberPowerGroupCapInsufficient", 149),
          ("powerChassisMemberChassisFirmwareProblem", 150),
          ("powerBudgetFirmwareMismatch", 151),
          ("powerChassisMemberChassisPsuInsufficient", 152),
          ("powerBudgetChassisPsuInsufficient", 153),
          ("powerChassisMemberChassisPsuRedundanceFailure", 154),
          ("powerBudgetPowerBudgetCmcProblem", 155),
          ("powerBudgetPowerBudgetBmcProblem", 156),
          ("powerBudgetPowerCapReachedCommit", 157),
          ("powerBudgetTstateTransition", 158),
          ("powerBudgetPowerBudgetDiscFail", 159),
          ("powerPolicyPowerPolicyApplicationFail", 160),
          ("powerGroupPowerGroupInsufficientBudget", 161),
          ("powerGroupPowerGroupBudgetIncorrect", 162),
          ("powerBudgetChassisPsuMixedMode", 163),
          ("smSlotSmaHeartbeat", 185),
          ("smSlotBladeNotWorking", 186),
          ("smSlotDiskFormatFailed", 187),
          ("smSlotBladeSwap", 188),
          ("smSecSvcSwitchConfigFail", 189),
          ("smAppInstanceAppNotResponding", 190),
          ("smAppInstanceAppInstallFailed", 191),
          ("smAppInstanceAppStartFailed", 192),
          ("smAppInstanceAppUpdateFailed", 193),
          ("smAppInstanceAppStopFailed", 194),
          ("smAppInstanceAppInstanceError", 195),
          ("smLogicalDeviceIncompleteConfig", 196),
          ("smLogicalDeviceLogicalDeviceError", 197),
          ("smAppLicenseAgreementNotAccepted", 198),
          ("smAppInstanceAppInstanceUnsupported", 199),
          ("smAppAppMetaCorrupted", 200),
          ("swVlanPortNsVlancompNotSupport", 299),
          ("dcxVifLinkState", 300),
          ("vnicEtherConfigFailed", 314),
          ("vnicEtherPinningMismatch", 315),
          ("vnicEtherPinningMisconfig", 316),
          ("vnicEtherIfVlanAccessFault", 317),
          ("vnicEtherIfVlanUnresolvable", 318),
          ("vnicEtherIfRemoteVlanUnresolvable", 319),
          ("vnicEtherIfInvalidVlan", 320),
          ("fabricVlanVlanConflictPermit", 321),
          ("vnicProfileProfileConfigIncorrect", 322),
          ("vnicIscsiConfigFailed", 323),
          ("vnicEtherVirtualizationConflict", 324),
          ("vnicEtherVirtualizationNetflowConflict", 325),
          ("lsIssuesIscsiConfigFailed", 326),
          ("macpoolPoolEmpty", 332),
          ("callhomeEpNoSnmpPolicyForCallhome", 335),
          ("adaptorUnitUnidentifiableFru", 349),
          ("adaptorUnitExtnUnidentifiableFru", 350),
          ("adaptorUnitMissing", 351),
          ("adaptorUnitExtnMissing", 352),
          ("adaptorUnitAdaptorReachability", 353),
          ("adaptorHostIfLinkDown", 354),
          ("adaptorExtIfLinkDown", 355),
          ("adaptorHostEthIfMisConnect", 356),
          ("adaptorHostEthIfMissing", 357),
          ("adaptorExtEthIfMisConnect", 358),
          ("adaptorExtEthIfMissing", 359),
          ("memoryUnitDegraded", 369),
          ("memoryUnitIdentityUnestablishable", 370),
          ("memoryUnitInoperable", 371),
          ("memoryUnitDisabled", 372),
          ("memoryUnitThermalThresholdNonCritical", 373),
          ("memoryBufferUnitThermalThresholdNonCritical", 374),
          ("memoryUnitThermalThresholdCritical", 375),
          ("memoryBufferUnitThermalThresholdCritical", 376),
          ("memoryUnitThermalThresholdNonRecoverable", 377),
          ("memoryBufferUnitThermalThresholdNonRecoverable", 378),
          ("memoryArrayVoltageThresholdNonCritical", 379),
          ("memoryArrayVoltageThresholdCritical", 380),
          ("memoryArrayVoltageThresholdNonRecoverable", 381),
          ("lsServerFailed", 657),
          ("lsServerDiscoveryFailed", 658),
          ("lsServerConfigFailure", 659),
          ("lsServerMaintenanceFailed", 660),
          ("lsServerRemoved", 661),
          ("lsServerInaccessible", 662),
          ("lsServerAssociationFailed", 663),
          ("lsComputeBindingAssignmentRequirementsNotMet", 664),
          ("lsServerUnassociated", 665),
          ("lsServerSvnicNotPresent", 666),
          ("lsServerServerUnfulfilled", 667),
          ("lsmaintMaintPolicyUnresolvableScheduler", 668),
          ("lsIssuesKvmPolicyUnsupported", 669),
          ("iqnpoolPoolEmpty", 675),
          ("etherSwitchIntfioSatelliteConnectionAbsent", 687),
          ("etherSwitchIntfioSatelliteWiringProblem", 688),
          ("etherSwitchIntfioSatelliteWiringNumbersUnexpected", 689),
          ("equipmentPsuPowerSupplyProblem", 690),
          ("equipmentPsuOffline", 691),
          ("equipmentPsuPowerSupplyShutdown", 692),
          ("equipmentChassisIdentityUnestablishable", 693),
          ("equipmentFexIdentityUnestablishable", 694),
          ("equipmentFexFexUnsupported", 695),
          ("equipmentFanModuleDegraded", 696),
          ("equipmentFanDegraded", 697),
          ("equipmentChassisInoperable", 698),
          ("equipmentChassisSeepromInoperable", 699),
          ("equipmentFanModuleInoperable", 700),
          ("equipmentFanInoperable", 701),
          ("equipmentPsuInoperable", 702),
          ("equipmentIocardRemoved", 703),
          ("equipmentIocardInaccessible", 704),
          ("equipmentIocardPostFailure", 705),
          ("equipmentFexPostFailure", 706),
          ("equipmentFanModuleMissing", 707),
          ("equipmentFanMissing", 708),
          ("equipmentPsuMissing", 709),
          ("equipmentIocardThermalProblem", 710),
          ("equipmentIocardThermalThresholdNonCritical", 711),
          ("equipmentIocardThermalThresholdCritical", 712),
          ("equipmentIocardThermalThresholdNonRecoverable", 713),
          ("equipmentFanModuleThermalThresholdNonCritical", 714),
          ("equipmentPsuThermalThresholdNonCritical", 715),
          ("equipmentFanModuleThermalThresholdCritical", 716),
          ("equipmentPsuThermalThresholdCritical", 717),
          ("equipmentFanModuleThermalThresholdNonRecoverable", 718),
          ("equipmentPsuThermalThresholdNonRecoverable", 719),
          ("equipmentPsuVoltageThresholdNonCritical", 720),
          ("equipmentPsuVoltageThresholdCritical", 721),
          ("equipmentPsuVoltageThresholdNonRecoverable", 722),
          ("equipmentPsuPerfThresholdNonCritical", 723),
          ("equipmentPsuPerfThresholdCritical", 724),
          ("equipmentPsuPerfThresholdNonRecoverable", 725),
          ("equipmentFanPerfThresholdNonCritical", 726),
          ("equipmentFanPerfThresholdCritical", 727),
          ("equipmentFanPerfThresholdNonRecoverable", 728),
          ("equipmentFanPerfThresholdLowerNonRecoverable", 729),
          ("equipmentIocardFirmwareUpgrade", 730),
          ("equipmentChassisUnsupportedConnectivity", 731),
          ("equipmentChassisUnacknowledged", 732),
          ("equipmentIocardUnsupportedConnectivity", 733),
          ("equipmentIocardAutoUpgradingFirmware", 734),
          ("equipmentIocardUnacknowledged", 735),
          ("equipmentIocardPeerDisconnected", 736),
          ("equipmentChassisIdentity", 737),
          ("equipmentChassisInvalidFru", 738),
          ("equipmentChassisPowerProblem", 739),
          ("equipmentChassisThermalThresholdCritical", 740),
          ("equipmentChassisThermalThresholdNonCritical", 741),
          ("equipmentChassisThermalThresholdNonRecoverable", 742),
          ("equipmentIocardIdentity", 743),
          ("equipmentFexIdentity", 744),
          ("equipmentFanModuleIdentity", 745),
          ("equipmentPsuIdentity", 746),
          ("equipmentPsuPowerThreshold", 747),
          ("equipmentPsuInputError", 748),
          ("equipmentSwitchCardPowerOff", 749),
          ("equipmentSwitchCardAct2LiteFail", 750),
          ("equipmentHealthLedCriticalError", 751),
          ("equipmentTpmSlaveTpm", 752),
          ("equipmentHealthLedMinorError", 753),
          ("equipmentSwitchiocardRemoved", 754),
          ("equipmentSwitchiocardThermalProblem", 755),
          ("equipmentSwitchiocardThermalThresholdNonCritical", 756),
          ("equipmentSwitchiocardThermalThresholdCritical", 757),
          ("equipmentSwitchiocardThermalThresholdNonRecoverable", 758),
          ("equipmentSwitchiocardIdentity", 759),
          ("equipmentSwitchiocardCpuThermalThresholdCritical", 760),
          ("extpolClientClientLostConnectivity", 792),
          ("extpolClientGracePeriodWarning", 793),
          ("extpolClientGracePeriodWarning2", 794),
          ("extpolClientGracePeriodWarning3", 795),
          ("extpolClientGracePeriodWarning4", 796),
          ("extpolClientGracePeriodWarning5", 797),
          ("extpolClientGracePeriodWarning6", 798),
          ("extpolClientGracePeriodWarning7", 799),
          ("extpolClientGracePeriodWarning1", 800),
          ("storageLocalDiskInoperable", 809),
          ("storageLocalDiskDegraded", 810),
          ("storageLocalDiskSlotEpUnusable", 811),
          ("storageItemCapacityExceeded", 812),
          ("storageItemCapacityWarning", 813),
          ("storageItemFilesystemIssues", 814),
          ("storageRaidBatteryInoperable", 815),
          ("storageMezzFlashLifeConfigurationError", 816),
          ("storageMezzFlashLifeDegraded", 817),
          ("storageRaidBatteryDegraded", 818),
          ("storageRaidBatteryRelearnAborted", 819),
          ("storageRaidBatteryRelearnFailed", 820),
          ("storageInitiatorConfigurationError", 821),
          ("storageControllerPatrolReadFailed", 822),
          ("storageControllerInoperable", 823),
          ("storageLocalDiskRebuildFailed", 824),
          ("storageLocalDiskCopybackFailed", 825),
          ("storageLocalDiskMissing", 826),
          ("storageVirtualDriveInoperable", 827),
          ("storageVirtualDriveDegraded", 828),
          ("storageVirtualDriveReconstructionFailed", 829),
          ("storageVirtualDriveConsistencyCheckFailed", 830),
          ("storageFlexFlashControllerInoperable", 831),
          ("storageFlexFlashCardInoperable", 832),
          ("storageFlexFlashCardMissing", 833),
          ("storageFlexFlashVirtualDriveDegraded", 834),
          ("storageFlexFlashVirtualDriveInoperable", 835),
          ("storageFlexFlashControllerUnhealthy", 836),
          ("storageFlexFlashControllerMismatch", 837),
          ("storageFlexFlashDriveUnhealthy", 838),
          ("storageFlexFlashCardUnhealthy", 839),
          ("ippoolPoolEmpty", 844),
          ("aaaProviderGroupProvidergroup", 850),
          ("aaaProviderGroupProvidergroupsize", 851),
          ("aaaConfigServergroup", 852),
          ("pkiKeyRingStatus", 853),
          ("pkiKeyRingModulus", 854),
          ("pkiTpStatus", 855),
          ("aaaRoleRoleNotDeployed", 856),
          ("aaaLocaleLocaleNotDeployed", 857),
          ("aaaOrgLocaleOrgNotPresent", 858),
          ("aaaUserRoleUserRoleNotDeployed", 859),
          ("aaaUserLocaleUserLocaleNotDeployed", 860),
          ("pkiKeyRingKeyRingNotDeployed", 861),
          ("commSnmpSyscontactEmpty", 862),
          ("commDateTimeCommTimeZoneInvalid", 863),
          ("aaaUserLocalUserNotDeployed", 864),
          ("commSnmpUserSnmpUserNotDeployed", 865),
          ("commSvcEpCommSvcNotDeployed", 866),
          ("sysdebugLogExportStatusLogExportFailure", 871),
          ("sysdebugAutoCoreFileExportTargetAutoCoreTransferFailure", 872),
          ("processorUnitInoperable", 899),
          ("processorUnitThermalNonCritical", 900),
          ("processorUnitThermalThresholdCritical", 901),
          ("processorUnitThermalThresholdNonRecoverable", 902),
          ("processorUnitVoltageThresholdNonCritical", 903),
          ("processorUnitVoltageThresholdCritical", 904),
          ("processorUnitVoltageThresholdNonRecoverable", 905),
          ("processorUnitIdentityUnestablishable", 906),
          ("processorUnitDisabled", 907),
          ("extmgmtIfMgmtifdown", 964),
          ("extmgmtArpTargetsArpTargetsNotValid", 965),
          ("extmgmtNdiscTargetsNdiscTargetsNotValid", 966),
          ("poolElementDuplicatedAssigned", 967),
          ("networkElementInoperable", 977),
          ("networkElementRemoved", 978),
          ("swVlanPortNsResourceStatus", 979),
          ("swVlanPortNsResourceStatusWarning", 980),
          ("networkElementInventoryFailed", 981),
          ("networkElementThermalThresholdCritical", 982),
          ("networkElementMemoryerror", 983),
          ("networkOperLevelExtraprimaryvlans", 984),
          ("networkOperLevelExtrasecondaryvlans", 985),
          ("swVlanExtrasecondaryvlansperprimary", 986),
          ("fcpoolInitiatorsEmpty", 987),
          ("osControllerFailedBladeBootup", 996),
          ("osControllerFailedBootupRecovery", 997),
          ("uuidpoolPoolEmpty", 1014),
          ("capabilityCatalogueLoadErrors", 1020),
          ("fabricComputeSlotEpMisplacedInChassisSlot", 1038),
          ("fabricComputeSlotEpServerIdentificationProblem", 1039),
          ("fabricVlanPrimaryVlanMissingForIsolated", 1040),
          ("fabricVlanPrimaryVlanMissingForCommunity", 1041),
          ("fabricLanPinGroupEmpty", 1042),
          ("fabricEthLanPcEpDown", 1043),
          ("fabricEthEstcPcEpDown", 1044),
          ("fabricPinTargetDown", 1045),
          ("fabricDceSwSrvPcEpDown", 1046),
          ("fabricMonSpanConfigFail", 1047),
          ("fabricEpMgrEpTransModeFail", 1048),
          ("fabricVlanMismatchA", 1049),
          ("fabricVlanMismatchB", 1050),
          ("fabricVlanErrorAssocPrimary", 1051),
          ("fabricPioEpErrorMisconfigured", 1052),
          ("fabricEthLanEpMissingPrimaryVlan", 1053),
          ("fabricEthLanEpUdldLinkDown", 1054),
          ("fabricEthLanPcEpUdldLinkDown", 1055),
          ("fabricEthLanPcMissingPrimaryVlan", 1056),
          ("fabricEthLanEpOverlappingVlan", 1057),
          ("fabricEthLanPcOverlappingVlan", 1058),
          ("fabricVlanMisconfiguredMcastPolicy", 1059),
          ("fabricNetflowMonSessionFlowMonConfigFail", 1060),
          ("fabricNetflowMonSessionNetflowSessionConfigFail", 1061),
          ("fabricPooledVlanNamedVlanUnresolved", 1062),
          ("mgmtEntityDegraded", 1115),
          ("mgmtEntityDown", 1116),
          ("mgmtEntityElectionFailure", 1117),
          ("mgmtEntityManagementServicesFailure", 1118),
          ("mgmtEntityManagementServicesUnresponsive", 1119),
          ("mgmtEntityHaNotReady", 1120),
          ("mgmtEntityVersionIncompatible", 1121),
          ("mgmtEntityDevice1SharedStorageError", 1122),
          ("mgmtEntityDevice2SharedStorageError", 1123),
          ("mgmtEntityDevice3SharedStorageError", 1124),
          ("mgmtEntityHaSshKeysMismatched", 1125),
          ("mgmtPmonEntryFprmProcessFailure", 1126),
          ("sysdebugMepLogMEpLogLog", 1127),
          ("sysdebugMepLogMEpLogVeryLow", 1128),
          ("sysdebugMepLogMEpLogFull", 1129),
          ("sysdebugMepLogTransferError", 1130),
          ("mgmtIfMisConnect", 1131),
          ("mgmtIfMissing", 1132),
          ("mgmtIfNew", 1133),
          ("mgmtConnectionDisabled", 1134),
          ("mgmtConnectionUnused", 1135),
          ("mgmtConnectionUnsupportedConnectivity", 1136),
          ("mgmtControllerUnsupportedDimmBlacklisting", 1137),
          ("mgmtInterfaceNamedInbandVlanUnresolved", 1138),
          ("mgmtInterfaceInbandUnsupportedServer", 1139),
          ("mgmtInterfaceInbandUnsupportedFirmware", 1140),
          ("mgmtBackupPolicyConfigConfigurationBackupOutdated", 1141),
          ("portPioLinkDown", 1150),
          ("portPioFailed", 1151),
          ("portPioHardwareFailure", 1152),
          ("portPioSfpNotPresent", 1153),
          ("portPioInvalidSfp", 1154),
          ("etherServerIntfioHardwareFailure", 1155),
          ("fabricExternalPcDown", 1156),
          ("fabricInternalPcDown", 1157),
          ("dcxVcDown", 1158),
          ("dcxVcMgmtVifDown", 1159),
          ("policyControlEpSuspendModeActive", 1174),
          ("firmwareInfraPackInfraBundleVersionMissing", 1309),
          ("firmwareSystemInfraBundleValidationFailure", 1310),
          ("firmwareSystemInfraBundleUpgradeFailure", 1311),
          ("firmwareSystemFirmwareUpgradeFailure", 1312),
          ("firmwareSystemInfraBundleInstallAppFailure", 1313),
          ("fsmSamDmeComputeServerDiscPolicyResolveScrubPolicy", 16476),
          ("fsmSamDmeGmetaHolderInventory", 16477),
          ("fsmSamDmeFirmwareDownloaderDownload", 16517),
          ("fsmSamDmeFirmwareImageDelete", 16518),
          ("fsmSamDmeFirmwareDistributableDelete", 16519),
          ("fsmSamDmeMgmtControllerUpdateucsmanager", 16520),
          ("fsmSamDmeMgmtControllerUpdateSwitch", 16521),
          ("fsmSamDmeMgmtControllerUpdateiom", 16522),
          ("fsmSamDmeFirmwarePlatformPackPlatformVersion", 16523),
          ("fsmSamDmeFirmwareSystemDeploy", 16524),
          ("fsmSamDmeFirmwareSupFirmwareDeploy", 16525),
          ("fsmSamDmeFirmwareSystemApplyCatalogPack", 16526),
          ("fsmSamDmeIdentIdentRequestUpdateIdent", 16528),
          ("fsmSamDmeIdentMetaSystemSync", 16529),
          ("fsmSamDmeIdentMetaSystemUcscUnivSync", 16530),
          ("fsmSamDmeSmAppDelete", 16585),
          ("fsmSamDmeSmSecSvcRestoreApplication", 16586),
          ("fsmSamDmeSmAppUpdateApplication", 16587),
          ("fsmSamDmeSmAppInstanceResetApplication", 16588),
          ("fsmSamDmeSmSecSvcAutoDeploycsp", 16589),
          ("fsmSamDmeSwAccessDomainDeploy", 16667),
          ("fsmSamDmeSwEthLanBorderDeploy", 16668),
          ("fsmSamDmeSwFcSanBorderDeploy", 16669),
          ("fsmSamDmeSwUtilityDomainDeploy", 16670),
          ("fsmSamDmeSwEthLanFlowMonDeploy", 16671),
          ("fsmSamDmeSwPhysConfPhysical", 16676),
          ("fsmSamDmeSwExtUtilityConfPortBreakout", 16681),
          ("fsmSamDmeSwFcSanBorderActivateZoneSet", 16682),
          ("fsmSamDmeCallhomeEpConfigCallhome", 16718),
          ("fsmSamDmeAdaptorExtEthIfPathReset", 16727),
          ("fsmSamDmeAdaptorHostEthIfCircuitReset", 16730),
          ("fsmSamDmeAdaptorHostFcIfCircuitReset", 16731),
          ("fsmSamDmeLicenseDownloaderDownload", 16748),
          ("fsmSamDmeLicenseFileInstall", 16749),
          ("fsmSamDmeLicenseFileClear", 16750),
          ("fsmSamDmeLicenseInstanceUpdateFlexlm", 16751),
          ("fsmSamDmeLicenseSmartConfigSetConfig", 16752),
          ("fsmSamDmeLsServerConfigure", 16770),
          ("fsmSamDmeComputeBladeDiag", 16780),
          ("fsmSamDmeMgmtControllerExtMgmtInterfaceConfig", 16803),
          ("fsmSamDmeComputePhysicalSwConnUpd", 16804),
          ("fsmSamDmeEquipmentiocardResetIom", 16805),
          ("fsmSamDmeComputePhysicalServiceInfraDeploy", 16806),
          ("fsmSamDmeComputePhysicalServiceInfraWithdraw", 16807),
          ("fsmSamDmeEquipmentiocardBaseFePresence", 16815),
          ("fsmSamDmeEquipmentiocardBaseFeConn", 16816),
          ("fsmSamDmeEquipmentChassisRemoveChassis", 16817),
          ("fsmSamDmeEquipmentLocatorLedSetFeLocatorLed", 16818),
          ("fsmSamDmeEquipmentLocatorLedSetFiLocatorLed", 16819),
          ("fsmSamDmePortpioInCompatSfpPresence", 16822),
          ("fsmSamDmePortpioInCompatSfpReplaced", 16823),
          ("fsmSamDmeObserveObservedResolvePolicyFsm", 17063),
          ("fsmSamDmeObserveObservedResolveResourceFsm", 17064),
          ("fsmSamDmeObserveObservedResolvevmfsm", 17065),
          ("fsmSamDmeObserveObservedResolveControllerFsm", 17066),
          ("fsmSamDmeEquipmentBeaconLedIlluminate", 17149),
          ("fsmSamDmeSdAppInstanceInstallApplication", 17151),
          ("fsmSamDmeSdAppInstanceStartApplication", 17152),
          ("fsmSamDmeSdLduProvisionldu", 17153),
          ("fsmSamDmeSdAppInstanceUpgradeApplication", 17154),
          ("fsmSamDmeSdAppInstanceStopApplication", 17155),
          ("fsmSamDmeSdAppInstanceUninstallApplication", 17156),
          ("fsmSamDmeSdSlotChangePlatformLogLevel", 17157),
          ("fsmSamDmeSdAppInstanceBundleDataPorts", 17158),
          ("fsmSamDmeSdLogicalDeviceConfigureLinks", 17159),
          ("fsmSamDmeSdLinkUpdateInterfaceStatus", 17160),
          ("fsmSamDmeSdClusterBootstrapUpdateClusterConfiguration", 17161),
          ("fsmSamDmeSdSlotFormatDisk", 17162),
          ("fsmSamDmeSdSlotSynchTimeZone", 17163),
          ("fsmSamDmeSdAppAttributeCtrlGetAppAttributes", 17164),
          ("fsmSamDmeSdMgmtInfoUpdateMgmtInfo", 17165),
          ("fsmSamDmeSdNetMgmtBootstrapUpdateNetMgmtBootstrap", 17166),
          ("fsmSamDmeSdUpgradeTaskStopUpgradeStartApp", 17167),
          ("fsmSamDmeEtherServerIntfioConfigSpeed", 17169),
          ("fsmSamDmeEtherFtwPortPairConfigFtw", 17170),
          ("fsmSamDmeExtpolEpRegisterFsm", 17185),
          ("fsmSamDmeExtpolRegistryCrossDomainConfig", 17186),
          ("fsmSamDmeExtpolRegistryCrossDomainDelete", 17187),
          ("fsmSamDmeStorageSystemSync", 17224),
          ("fsmSamDmeSysfileMutationSingle", 17226),
          ("fsmSamDmeSysfileMutationGlobal", 17227),
          ("fsmSamDmeApplicationDownloaderDownload", 17231),
          ("fsmSamDmeCommSvcEpUpdateSvcEp", 17232),
          ("fsmSamDmeCommSvcEpRestartWebSvc", 17233),
          ("fsmSamDmePkiEpUpdateEp", 17251),
          ("fsmSamDmeAaaEpUpdateEp", 17252),
          ("fsmSamDmeAaaRealmUpdateRealm", 17253),
          ("fsmSamDmeAaaUserEpUpdateUserEp", 17254),
          ("fsmSamDmeSysdebugManualCoreFileExportTargetExport", 17265),
          ("fsmSamDmeSysdebugLogExportPolicyConfigure", 17266),
          ("fsmSamDmeSysdebugAutoCoreFileExportTargetConfigure", 17267),
          ("fsmSamDmeSysdebugTechSupportInitiate", 17268),
          ("fsmSamDmeSysdebugTechSupportDeleteTechSupFile", 17269),
          ("fsmSamDmeSysdebugTechSupportDownload", 17270),
          ("fsmSamDmeSysdebugCoreDownload", 17271),
          ("fsmSamDmeSysdebugLogControlEpLogControlPersist", 17272),
          ("fsmSamDmeEpqosDefinitionDeploy", 17336),
          ("fsmSamDmeEpqosDefinitionDelTaskRemove", 17337),
          ("fsmSamDmeQosclassDefinitionConfigGlobalQos", 17340),
          ("fsmSamDmeMgmtControllerRegistryConfig", 17347),
          ("fsmSamDmeMgmtIfSwMgmtOobIfConfig", 17358),
          ("fsmSamDmeMgmtIfSwMgmtInbandIfConfig", 17359),
          ("fsmSamDmeMgmtipv6IfAddrSwMgmtOobIpv6IfConfig", 17360),
          ("fsmSamDmeNhTableHolderConfigureLinks", 17373),
          ("fsmSamDmeNhTableHolderBootstrapLinks", 17374),
          ("fsmSamDmeStatsCollectionPolicyUpdateEp", 17378),
          ("fsmSamDmeSyntheticFsObjCreate", 17403),
          ("fsmSamDmeCapabilityUpdaterUpdater", 17408),
          ("fsmSamDmeCapabilityCatalogueActivateCatalog", 17409),
          ("fsmSamDmeCapabilityMgmtExtensionActivateMgmtExt", 17410),
          ("fsmSamDmeCapabilityCatalogueDeployCatalogue", 17411),
          ("fsmSamDmeSwEthMonDeploy", 17420),
          ("fsmSamDmeSwFcMonDeploy", 17421),
          ("fsmSamDmeSwSspEthMonDeploy", 17469),
          ("fsmSamDmeSwSspEthMonSrcPhyEpDelete", 17470),
          ("fsmSamDmeFabricVnetEpSyncEpPushVnetEpDeletion", 17476),
          ("fsmSamDmeFabricLanCloudSwitchMode", 17477),
          ("fsmSamDmeFabricSanCloudSwitchMode", 17478),
          ("fsmSamDmeFabricEpMgrConfigure", 17484),
          ("fsmSamDmeMgmtExportPolicyReportConfigCopy", 17490),
          ("fsmSamDmeExtpolProviderReportConfigImport", 17491),
          ("fsmSamDmeMgmtIfVirtualIfConfig", 17492),
          ("fsmSamDmeMgmtIfEnableVip", 17493),
          ("fsmSamDmeMgmtIfDisableVip", 17494),
          ("fsmSamDmeMgmtIfEnableha", 17495),
          ("fsmSamDmeMgmtBackupBackup", 17496),
          ("fsmSamDmeMgmtImporterImport", 17497),
          ("fsmSamDmeMgmtControllerSysConfig", 17498),
          ("fsmSamDmeNfsMountInstMount", 17531),
          ("fsmSamDmeNfsMountInstUnmount", 17532),
          ("fsmSamDmeNfsMountDefReportNfsMountSuspend", 17533),
          ("fsmSamDmeExtpolEpRepairCert", 17554),
          ("fsmSamDmePolicyControlEpOperate", 17555),
          ("fsmSamDmePolicyControlledTypeOperate", 17556),
          ("fsmSamDmePolicyPolicyScopeReleasePolicyFsm", 17559),
          ("fsmSamDmePolicyPolicyScopeReleaseOperationFsm", 17560),
          ("fsmSamDmePolicyPolicyScopeReleaseStorageFsm", 17561),
          ("fsmSamDmePolicyPolicyScopeResolveManyPolicyFsm", 17562),
          ("fsmSamDmePolicyPolicyScopeResolveManyOperationFsm", 17563),
          ("fsmSamDmePolicyPolicyScopeResolveManyStorageFsm", 17564),
          ("fsmSamDmePolicyPolicyScopeReleaseManyPolicyFsm", 17565),
          ("fsmSamDmePolicyPolicyScopeReleaseManyOperationFsm", 17566),
          ("fsmSamDmePolicyPolicyScopeReleaseManyStorageFsm", 17567),
          ("fsmSamDmePolicyPolicyScopeResolveAllPolicyFsm", 17568),
          ("fsmSamDmePolicyPolicyScopeResolveAllOperationFsm", 17569),
          ("fsmSamDmePolicyPolicyScopeResolveAllStorageFsm", 17570),
          ("fsmSamDmePolicyPolicyScopeReleaseAllPolicyFsm", 17571),
          ("fsmSamDmePolicyPolicyScopeReleaseAllOperationFsm", 17572),
          ("fsmSamDmePolicyPolicyScopeReleaseAllStorageFsm", 17573),
          ("fsmSamDmeFirmwareInfraPackInfraVersion", 17690),
          ("tcaComputeMbPowerStatsInputVoltage", 34261),
          ("tcaComputeMbPowerStatsInputVoltageMin", 34263),
          ("tcaComputeMbPowerStatsInputVoltageMax", 34264),
          ("tcaComputeMbPowerStatsInputVoltageAvg", 34265),
          ("tcaComputeMbPowerStatsInputCurrent", 34269),
          ("tcaComputeMbPowerStatsInputCurrentMin", 34271),
          ("tcaComputeMbPowerStatsInputCurrentMax", 34272),
          ("tcaComputeMbPowerStatsInputCurrentAvg", 34273),
          ("tcaComputeMbPowerStatsConsumedPower", 34277),
          ("tcaComputeMbPowerStatsConsumedPowerMin", 34279),
          ("tcaComputeMbPowerStatsConsumedPowerMax", 34280),
          ("tcaComputeMbPowerStatsConsumedPowerAvg", 34281),
          ("tcaComputeMbTempStatsFmTempSenIo", 34287),
          ("tcaComputeMbTempStatsFmTempSenIoMin", 34289),
          ("tcaComputeMbTempStatsFmTempSenIoMax", 34290),
          ("tcaComputeMbTempStatsFmTempSenIoAvg", 34291),
          ("tcaComputeMbTempStatsFmTempSenRear", 34295),
          ("tcaComputeMbTempStatsFmTempSenRearMin", 34297),
          ("tcaComputeMbTempStatsFmTempSenRearMax", 34298),
          ("tcaComputeMbTempStatsFmTempSenRearAvg", 34299),
          ("tcaComputeMbTempStatsFmTempSenRearl", 34303),
          ("tcaComputeMbTempStatsFmTempSenRearlmin", 34305),
          ("tcaComputeMbTempStatsFmTempSenRearlmax", 34306),
          ("tcaComputeMbTempStatsFmTempSenRearlavg", 34307),
          ("tcaComputeMbTempStatsFmTempSenRearr", 34311),
          ("tcaComputeMbTempStatsFmTempSenRearrmin", 34313),
          ("tcaComputeMbTempStatsFmTempSenRearrmax", 34314),
          ("tcaComputeMbTempStatsFmTempSenRearravg", 34315),
          ("tcaComputeRackUnitMbTempStatsFrontTemp", 34321),
          ("tcaComputeRackUnitMbTempStatsFrontTempMin", 34323),
          ("tcaComputeRackUnitMbTempStatsFrontTempMax", 34324),
          ("tcaComputeRackUnitMbTempStatsFrontTempAvg", 34325),
          ("tcaComputeRackUnitMbTempStatsRearTemp", 34329),
          ("tcaComputeRackUnitMbTempStatsRearTempMin", 34331),
          ("tcaComputeRackUnitMbTempStatsRearTempMax", 34332),
          ("tcaComputeRackUnitMbTempStatsRearTempAvg", 34333),
          ("tcaComputeRackUnitMbTempStatsAmbientTemp", 34337),
          ("tcaComputeRackUnitMbTempStatsAmbientTempMin", 34339),
          ("tcaComputeRackUnitMbTempStatsAmbientTempMax", 34340),
          ("tcaComputeRackUnitMbTempStatsAmbientTempAvg", 34341),
          ("tcaComputeRackUnitMbTempStatsIoh1Temp", 34345),
          ("tcaComputeRackUnitMbTempStatsIoh1TempMin", 34347),
          ("tcaComputeRackUnitMbTempStatsIoh1TempMax", 34348),
          ("tcaComputeRackUnitMbTempStatsIoh1TempAvg", 34349),
          ("tcaComputeRackUnitMbTempStatsIoh2Temp", 34353),
          ("tcaComputeRackUnitMbTempStatsIoh2TempMin", 34355),
          ("tcaComputeRackUnitMbTempStatsIoh2TempMax", 34356),
          ("tcaComputeRackUnitMbTempStatsIoh2TempAvg", 34357),
          ("tcaComputeIohubEnvStatsTemperature", 34363),
          ("tcaComputeIohubEnvStatsTemperatureMin", 34365),
          ("tcaComputeIohubEnvStatsTemperatureMax", 34366),
          ("tcaComputeIohubEnvStatsTemperatureAvg", 34367),
          ("tcaComputePcieFatalProtocolStatsFlowControlErrors", 34372),
          ("tcaComputePcieFatalProtocolStatsDllpErrors", 34383),
          ("tcaComputePcieFatalReceiveStatsUnsupportedRequestErrors", 34395),
          ("tcaComputePcieFatalReceiveStatsErrFatalErrors", 34406),
          ("tcaComputePcieFatalReceiveStatsErrNonFatalErrors", 34417),
          ("tcaComputePcieFatalReceiveStatsBufferOverflowErrors", 34428),
          ("tcaComputePcieFatalCompletionStatsUnexpectedErrors", 34440),
          ("tcaComputePcieFatalCompletionStatsTimeoutErrors", 34451),
          ("tcaComputePcieFatalCompletionStatsAbortErrors", 34462),
          ("tcaComputePcieFatalStatsSurpriseLinkDownErrors", 34474),
          ("tcaComputePcieFatalStatsPoisonedtlperrors", 34485),
          ("tcaComputePcieFatalStatsAcsViolationErrors", 34496),
          ("tcaComputePcieFatalStatsMalformedtlperrors", 34507),
          ("tcaPowerGroupStatsPower", 34841),
          ("tcaPowerGroupStatsPowerMin", 34843),
          ("tcaPowerGroupStatsPowerMax", 34844),
          ("tcaPowerGroupStatsPowerAvg", 34845),
          ("tcaSwEnvStatsMainBoardOutlet1", 35108),
          ("tcaSwEnvStatsMainBoardOutlet1Min", 35110),
          ("tcaSwEnvStatsMainBoardOutlet1Max", 35111),
          ("tcaSwEnvStatsMainBoardOutlet1Avg", 35112),
          ("tcaSwEnvStatsMainBoardOutlet2", 35116),
          ("tcaSwEnvStatsMainBoardOutlet2Min", 35118),
          ("tcaSwEnvStatsMainBoardOutlet2Max", 35119),
          ("tcaSwEnvStatsMainBoardOutlet2Avg", 35120),
          ("tcaSwEnvStatsFanCtrlrInlet1", 35124),
          ("tcaSwEnvStatsFanCtrlrInlet1Min", 35126),
          ("tcaSwEnvStatsFanCtrlrInlet1Max", 35127),
          ("tcaSwEnvStatsFanCtrlrInlet1Avg", 35128),
          ("tcaSwEnvStatsFanCtrlrInlet2", 35132),
          ("tcaSwEnvStatsFanCtrlrInlet2Min", 35134),
          ("tcaSwEnvStatsFanCtrlrInlet2Max", 35135),
          ("tcaSwEnvStatsFanCtrlrInlet2Avg", 35136),
          ("tcaSwEnvStatsFanCtrlrInlet3", 35140),
          ("tcaSwEnvStatsFanCtrlrInlet3Min", 35142),
          ("tcaSwEnvStatsFanCtrlrInlet3Max", 35143),
          ("tcaSwEnvStatsFanCtrlrInlet3Avg", 35144),
          ("tcaSwEnvStatsFanCtrlrInlet4", 35148),
          ("tcaSwEnvStatsFanCtrlrInlet4Min", 35150),
          ("tcaSwEnvStatsFanCtrlrInlet4Max", 35151),
          ("tcaSwEnvStatsFanCtrlrInlet4Avg", 35152),
          ("tcaSwEnvStatsPsuCtrlrInlet1", 35156),
          ("tcaSwEnvStatsPsuCtrlrInlet1Min", 35158),
          ("tcaSwEnvStatsPsuCtrlrInlet1Max", 35159),
          ("tcaSwEnvStatsPsuCtrlrInlet1Avg", 35160),
          ("tcaSwEnvStatsPsuCtrlrInlet2", 35164),
          ("tcaSwEnvStatsPsuCtrlrInlet2Min", 35166),
          ("tcaSwEnvStatsPsuCtrlrInlet2Max", 35167),
          ("tcaSwEnvStatsPsuCtrlrInlet2Avg", 35168),
          ("tcaSwCardEnvStatsSlotOutlet1", 35174),
          ("tcaSwCardEnvStatsSlotOutlet1Min", 35176),
          ("tcaSwCardEnvStatsSlotOutlet1Max", 35177),
          ("tcaSwCardEnvStatsSlotOutlet1Avg", 35178),
          ("tcaSwCardEnvStatsSlotOutlet2", 35182),
          ("tcaSwCardEnvStatsSlotOutlet2Min", 35184),
          ("tcaSwCardEnvStatsSlotOutlet2Max", 35185),
          ("tcaSwCardEnvStatsSlotOutlet2Avg", 35186),
          ("tcaSwCardEnvStatsSlotOutlet3", 35190),
          ("tcaSwCardEnvStatsSlotOutlet3Min", 35192),
          ("tcaSwCardEnvStatsSlotOutlet3Max", 35193),
          ("tcaSwCardEnvStatsSlotOutlet3Avg", 35194),
          ("tcaSwSystemStatsMemAvailable", 35200),
          ("tcaSwSystemStatsMemAvailableMin", 35202),
          ("tcaSwSystemStatsMemAvailableMax", 35203),
          ("tcaSwSystemStatsMemAvailableAvg", 35204),
          ("tcaSwSystemStatsMemCached", 35208),
          ("tcaSwSystemStatsMemCachedMin", 35210),
          ("tcaSwSystemStatsMemCachedMax", 35211),
          ("tcaSwSystemStatsMemCachedAvg", 35212),
          ("tcaSwSystemStatsLoad", 35216),
          ("tcaSwSystemStatsLoadMin", 35218),
          ("tcaSwSystemStatsLoadMax", 35219),
          ("tcaSwSystemStatsLoadAvg", 35220),
          ("tcaAdaptorEthPortStatsTotalPacketsDelta", 35844),
          ("tcaAdaptorEthPortStatsTotalPacketsDeltaMin", 35845),
          ("tcaAdaptorEthPortStatsTotalPacketsDeltaMax", 35846),
          ("tcaAdaptorEthPortStatsTotalPacketsDeltaAvg", 35847),
          ("tcaAdaptorEthPortStatsGoodPacketsDelta", 35854),
          ("tcaAdaptorEthPortStatsGoodPacketsDeltaMin", 35855),
          ("tcaAdaptorEthPortStatsGoodPacketsDeltaMax", 35856),
          ("tcaAdaptorEthPortStatsGoodPacketsDeltaAvg", 35857),
          ("tcaAdaptorEthPortStatsVlanPacketsDelta", 35864),
          ("tcaAdaptorEthPortStatsVlanPacketsDeltaMin", 35865),
          ("tcaAdaptorEthPortStatsVlanPacketsDeltaMax", 35866),
          ("tcaAdaptorEthPortStatsVlanPacketsDeltaAvg", 35867),
          ("tcaAdaptorEthPortStatsPausePacketsDelta", 35874),
          ("tcaAdaptorEthPortStatsPausePacketsDeltaMin", 35875),
          ("tcaAdaptorEthPortStatsPausePacketsDeltaMax", 35876),
          ("tcaAdaptorEthPortStatsPausePacketsDeltaAvg", 35877),
          ("tcaAdaptorEthPortStatsPerPriorityPausePacketsDelta", 35884),
          ("tcaAdaptorEthPortStatsPerPriorityPausePacketsDeltaMin", 35885),
          ("tcaAdaptorEthPortStatsPerPriorityPausePacketsDeltaMax", 35886),
          ("tcaAdaptorEthPortStatsPerPriorityPausePacketsDeltaAvg", 35887),
          ("tcaAdaptorEthPortStatsPppPacketsDelta", 35894),
          ("tcaAdaptorEthPortStatsPppPacketsDeltaMin", 35895),
          ("tcaAdaptorEthPortStatsPppPacketsDeltaMax", 35896),
          ("tcaAdaptorEthPortStatsPppPacketsDeltaAvg", 35897),
          ("tcaAdaptorEthPortBySizeSmallStatsLessThan64Delta", 35907),
          ("tcaAdaptorEthPortBySizeSmallStatsLessThan64DeltaMin", 35908),
          ("tcaAdaptorEthPortBySizeSmallStatsLessThan64DeltaMax", 35909),
          ("tcaAdaptorEthPortBySizeSmallStatsLessThan64DeltaAvg", 35910),
          ("tcaAdaptorEthPortBySizeSmallStatsEquals64Delta", 35917),
          ("tcaAdaptorEthPortBySizeSmallStatsEquals64DeltaMin", 35918),
          ("tcaAdaptorEthPortBySizeSmallStatsEquals64DeltaMax", 35919),
          ("tcaAdaptorEthPortBySizeSmallStatsEquals64DeltaAvg", 35920),
          ("tcaAdaptorEthPortBySizeSmallStatsLessThan128Delta", 35927),
          ("tcaAdaptorEthPortBySizeSmallStatsLessThan128DeltaMin", 35928),
          ("tcaAdaptorEthPortBySizeSmallStatsLessThan128DeltaMax", 35929),
          ("tcaAdaptorEthPortBySizeSmallStatsLessThan128DeltaAvg", 35930),
          ("tcaAdaptorEthPortBySizeSmallStatsLessThan256Delta", 35937),
          ("tcaAdaptorEthPortBySizeSmallStatsLessThan256DeltaMin", 35938),
          ("tcaAdaptorEthPortBySizeSmallStatsLessThan256DeltaMax", 35939),
          ("tcaAdaptorEthPortBySizeSmallStatsLessThan256DeltaAvg", 35940),
          ("tcaAdaptorEthPortBySizeSmallStatsLessThan512Delta", 35947),
          ("tcaAdaptorEthPortBySizeSmallStatsLessThan512DeltaMin", 35948),
          ("tcaAdaptorEthPortBySizeSmallStatsLessThan512DeltaMax", 35949),
          ("tcaAdaptorEthPortBySizeSmallStatsLessThan512DeltaAvg", 35950),
          ("tcaAdaptorEthPortBySizeSmallStatsLessThan1024Delta", 35957),
          ("tcaAdaptorEthPortBySizeSmallStatsLessThan1024DeltaMin", 35958),
          ("tcaAdaptorEthPortBySizeSmallStatsLessThan1024DeltaMax", 35959),
          ("tcaAdaptorEthPortBySizeSmallStatsLessThan1024DeltaAvg", 35960),
          ("tcaAdaptorEthPortBySizeLargeStatsLessThanOrEqualTo1518Delta", 35970),
          ("tcaAdaptorEthPortBySizeLargeStatsLessThanOrEqualTo1518DeltaMin", 35971),
          ("tcaAdaptorEthPortBySizeLargeStatsLessThanOrEqualTo1518DeltaMax", 35972),
          ("tcaAdaptorEthPortBySizeLargeStatsLessThanOrEqualTo1518DeltaAvg", 35973),
          ("tcaAdaptorEthPortBySizeLargeStatsLessThan2048Delta", 35980),
          ("tcaAdaptorEthPortBySizeLargeStatsLessThan2048DeltaMin", 35981),
          ("tcaAdaptorEthPortBySizeLargeStatsLessThan2048DeltaMax", 35982),
          ("tcaAdaptorEthPortBySizeLargeStatsLessThan2048DeltaAvg", 35983),
          ("tcaAdaptorEthPortBySizeLargeStatsLessThan4096Delta", 35990),
          ("tcaAdaptorEthPortBySizeLargeStatsLessThan4096DeltaMin", 35991),
          ("tcaAdaptorEthPortBySizeLargeStatsLessThan4096DeltaMax", 35992),
          ("tcaAdaptorEthPortBySizeLargeStatsLessThan4096DeltaAvg", 35993),
          ("tcaAdaptorEthPortBySizeLargeStatsLessThan8192Delta", 36000),
          ("tcaAdaptorEthPortBySizeLargeStatsLessThan8192DeltaMin", 36001),
          ("tcaAdaptorEthPortBySizeLargeStatsLessThan8192DeltaMax", 36002),
          ("tcaAdaptorEthPortBySizeLargeStatsLessThan8192DeltaAvg", 36003),
          ("tcaAdaptorEthPortBySizeLargeStatsLessThan9216Delta", 36010),
          ("tcaAdaptorEthPortBySizeLargeStatsLessThan9216DeltaMin", 36011),
          ("tcaAdaptorEthPortBySizeLargeStatsLessThan9216DeltaMax", 36012),
          ("tcaAdaptorEthPortBySizeLargeStatsLessThan9216DeltaAvg", 36013),
          ("tcaAdaptorEthPortBySizeLargeStatsGreaterThanOrEqualTo9216Delta", 36020),
          ("tcaAdaptorEthPrtBySizeLargeStatsGreaterThanOrEqualTo9216DeltaMin", 36021),
          ("tcaAdaptorEthPrtBySizeLargeStatsGreaterThanOrEqualTo9216DeltaMax", 36022),
          ("tcaAdaptorEthPrtBySizeLargeStatsGreaterThanOrEqualTo9216DeltaAvg", 36023),
          ("tcaAdaptorEthPortBySizeLargeStatsNoBreakdownGreaterThan1518Delta", 36030),
          ("tcaAdaptorEthPortBySizeLargeStatsNoBrkdnGreaterThan1518DeltaMin", 36031),
          ("tcaAdaptorEthPortBySizeLargeStatsNoBrkdnGreaterThan1518DeltaMax", 36032),
          ("tcaAdaptorEthPortBySizeLargeStatsNoBrkdnGreaterThan1518DeltaAvg", 36033),
          ("tcaAdaptorEthPortOutsizedStatsOversizedPacketsDelta", 36043),
          ("tcaAdaptorEthPortOutsizedStatsOversizedPacketsDeltaMin", 36044),
          ("tcaAdaptorEthPortOutsizedStatsOversizedPacketsDeltaMax", 36045),
          ("tcaAdaptorEthPortOutsizedStatsOversizedPacketsDeltaAvg", 36046),
          ("tcaAdaptorEthPortOutsizedStatsOversizedGoodCrcPacketsDelta", 36053),
          ("tcaAdaptorEthPortOutsizedStatsOversizedGoodCrcPacketsDeltaMin", 36054),
          ("tcaAdaptorEthPortOutsizedStatsOversizedGoodCrcPacketsDeltaMax", 36055),
          ("tcaAdaptorEthPortOutsizedStatsOversizedGoodCrcPacketsDeltaAvg", 36056),
          ("tcaAdaptorEthPortOutsizedStatsOversizedBadCrcPacketsDelta", 36063),
          ("tcaAdaptorEthPortOutsizedStatsOversizedBadCrcPacketsDeltaMin", 36064),
          ("tcaAdaptorEthPortOutsizedStatsOversizedBadCrcPacketsDeltaMax", 36065),
          ("tcaAdaptorEthPortOutsizedStatsOversizedBadCrcPacketsDeltaAvg", 36066),
          ("tcaAdaptorEthPortOutsizedStatsUndersizedGoodCrcPacketsDelta", 36073),
          ("tcaAdaptorEthPortOutsizedStatsUndersizedGoodCrcPacketsDeltaMin", 36074),
          ("tcaAdaptorEthPortOutsizedStatsUndersizedGoodCrcPacketsDeltaMax", 36075),
          ("tcaAdaptorEthPortOutsizedStatsUndersizedGoodCrcPacketsDeltaAvg", 36076),
          ("tcaAdaptorEthPortOutsizedStatsUndersizedBadCrcPacketsDelta", 36083),
          ("tcaAdaptorEthPortOutsizedStatsUndersizedBadCrcPacketsDeltaMin", 36084),
          ("tcaAdaptorEthPortOutsizedStatsUndersizedBadCrcPacketsDeltaMax", 36085),
          ("tcaAdaptorEthPortOutsizedStatsUndersizedBadCrcPacketsDeltaAvg", 36086),
          ("tcaAdaptorEthPortMcastStatsUnicastPacketsDelta", 36096),
          ("tcaAdaptorEthPortMcastStatsUnicastPacketsDeltaMin", 36097),
          ("tcaAdaptorEthPortMcastStatsUnicastPacketsDeltaMax", 36098),
          ("tcaAdaptorEthPortMcastStatsUnicastPacketsDeltaAvg", 36099),
          ("tcaAdaptorEthPortMcastStatsMulticastPacketsDelta", 36106),
          ("tcaAdaptorEthPortMcastStatsMulticastPacketsDeltaMin", 36107),
          ("tcaAdaptorEthPortMcastStatsMulticastPacketsDeltaMax", 36108),
          ("tcaAdaptorEthPortMcastStatsMulticastPacketsDeltaAvg", 36109),
          ("tcaAdaptorEthPortMcastStatsBroadcastPacketsDelta", 36116),
          ("tcaAdaptorEthPortMcastStatsBroadcastPacketsDeltaMin", 36117),
          ("tcaAdaptorEthPortMcastStatsBroadcastPacketsDeltaMax", 36118),
          ("tcaAdaptorEthPortMcastStatsBroadcastPacketsDeltaAvg", 36119),
          ("tcaAdaptorEthPortErrStatsMacDiscardedPacketsDelta", 36129),
          ("tcaAdaptorEthPortErrStatsMacDiscardedPacketsDeltaMin", 36130),
          ("tcaAdaptorEthPortErrStatsMacDiscardedPacketsDeltaMax", 36131),
          ("tcaAdaptorEthPortErrStatsMacDiscardedPacketsDeltaAvg", 36132),
          ("tcaAdaptorEthPortErrStatsBadCrcPacketsDelta", 36139),
          ("tcaAdaptorEthPortErrStatsBadCrcPacketsDeltaMin", 36140),
          ("tcaAdaptorEthPortErrStatsBadCrcPacketsDeltaMax", 36141),
          ("tcaAdaptorEthPortErrStatsBadCrcPacketsDeltaAvg", 36142),
          ("tcaAdaptorEthPortErrStatsBadLengthPacketsDelta", 36149),
          ("tcaAdaptorEthPortErrStatsBadLengthPacketsDeltaMin", 36150),
          ("tcaAdaptorEthPortErrStatsBadLengthPacketsDeltaMax", 36151),
          ("tcaAdaptorEthPortErrStatsBadLengthPacketsDeltaAvg", 36152),
          ("tcaAdaptorFcPortStatsRxFramesDelta", 36161),
          ("tcaAdaptorFcPortStatsRxFramesDeltaMin", 36162),
          ("tcaAdaptorFcPortStatsRxFramesDeltaMax", 36163),
          ("tcaAdaptorFcPortStatsRxFramesDeltaAvg", 36164),
          ("tcaAdaptorFcPortStatsTxFramesDelta", 36171),
          ("tcaAdaptorFcPortStatsTxFramesDeltaMin", 36172),
          ("tcaAdaptorFcPortStatsTxFramesDeltaMax", 36173),
          ("tcaAdaptorFcPortStatsTxFramesDeltaAvg", 36174),
          ("tcaAdaptorFcPortStatsRxBadFramesDelta", 36181),
          ("tcaAdaptorFcPortStatsRxBadFramesDeltaMin", 36182),
          ("tcaAdaptorFcPortStatsRxBadFramesDeltaMax", 36183),
          ("tcaAdaptorFcPortStatsRxBadFramesDeltaAvg", 36184),
          ("tcaAdaptorFcPortStatsTxBadFramesDelta", 36191),
          ("tcaAdaptorFcPortStatsTxBadFramesDeltaMin", 36192),
          ("tcaAdaptorFcPortStatsTxBadFramesDeltaMax", 36193),
          ("tcaAdaptorFcPortStatsTxBadFramesDeltaAvg", 36194),
          ("tcaAdaptorVnicStatsPacketsTxDelta", 36203),
          ("tcaAdaptorVnicStatsPacketsTxDeltaMin", 36204),
          ("tcaAdaptorVnicStatsPacketsTxDeltaMax", 36205),
          ("tcaAdaptorVnicStatsPacketsTxDeltaAvg", 36206),
          ("tcaAdaptorVnicStatsPacketsRxDelta", 36213),
          ("tcaAdaptorVnicStatsPacketsRxDeltaMin", 36214),
          ("tcaAdaptorVnicStatsPacketsRxDeltaMax", 36215),
          ("tcaAdaptorVnicStatsPacketsRxDeltaAvg", 36216),
          ("tcaAdaptorVnicStatsBytesTxDelta", 36223),
          ("tcaAdaptorVnicStatsBytesTxDeltaMin", 36224),
          ("tcaAdaptorVnicStatsBytesTxDeltaMax", 36225),
          ("tcaAdaptorVnicStatsBytesTxDeltaAvg", 36226),
          ("tcaAdaptorVnicStatsBytesRxDelta", 36233),
          ("tcaAdaptorVnicStatsBytesRxDeltaMin", 36234),
          ("tcaAdaptorVnicStatsBytesRxDeltaMax", 36235),
          ("tcaAdaptorVnicStatsBytesRxDeltaAvg", 36236),
          ("tcaAdaptorVnicStatsErrorsTxDelta", 36243),
          ("tcaAdaptorVnicStatsErrorsTxDeltaMin", 36244),
          ("tcaAdaptorVnicStatsErrorsTxDeltaMax", 36245),
          ("tcaAdaptorVnicStatsErrorsTxDeltaAvg", 36246),
          ("tcaAdaptorVnicStatsErrorsRxDelta", 36253),
          ("tcaAdaptorVnicStatsErrorsRxDeltaMin", 36254),
          ("tcaAdaptorVnicStatsErrorsRxDeltaMax", 36255),
          ("tcaAdaptorVnicStatsErrorsRxDeltaAvg", 36256),
          ("tcaAdaptorVnicStatsDroppedTxDelta", 36263),
          ("tcaAdaptorVnicStatsDroppedTxDeltaMin", 36264),
          ("tcaAdaptorVnicStatsDroppedTxDeltaMax", 36265),
          ("tcaAdaptorVnicStatsDroppedTxDeltaAvg", 36266),
          ("tcaAdaptorVnicStatsDroppedRxDelta", 36273),
          ("tcaAdaptorVnicStatsDroppedRxDeltaMin", 36274),
          ("tcaAdaptorVnicStatsDroppedRxDeltaMax", 36275),
          ("tcaAdaptorVnicStatsDroppedRxDeltaAvg", 36276),
          ("tcaAdaptorFcIffc4StatsInputRequestsDelta", 36285),
          ("tcaAdaptorFcIffc4StatsInputRequestsDeltaMin", 36286),
          ("tcaAdaptorFcIffc4StatsInputRequestsDeltaMax", 36287),
          ("tcaAdaptorFcIffc4StatsInputRequestsDeltaAvg", 36288),
          ("tcaAdaptorFcIffc4StatsOutputRequestsDelta", 36295),
          ("tcaAdaptorFcIffc4StatsOutputRequestsDeltaMin", 36296),
          ("tcaAdaptorFcIffc4StatsOutputRequestsDeltaMax", 36297),
          ("tcaAdaptorFcIffc4StatsOutputRequestsDeltaAvg", 36298),
          ("tcaAdaptorFcIffc4StatsControlRequestsDelta", 36305),
          ("tcaAdaptorFcIffc4StatsControlRequestsDeltaMin", 36306),
          ("tcaAdaptorFcIffc4StatsControlRequestsDeltaMax", 36307),
          ("tcaAdaptorFcIffc4StatsControlRequestsDeltaAvg", 36308),
          ("tcaAdaptorFcIffc4StatsInputMegabytesDelta", 36315),
          ("tcaAdaptorFcIffc4StatsInputMegabytesDeltaMin", 36316),
          ("tcaAdaptorFcIffc4StatsInputMegabytesDeltaMax", 36317),
          ("tcaAdaptorFcIffc4StatsInputMegabytesDeltaAvg", 36318),
          ("tcaAdaptorFcIffc4StatsOutputMegabytesDelta", 36325),
          ("tcaAdaptorFcIffc4StatsOutputMegabytesDeltaMin", 36326),
          ("tcaAdaptorFcIffc4StatsOutputMegabytesDeltaMax", 36327),
          ("tcaAdaptorFcIffc4StatsOutputMegabytesDeltaAvg", 36328),
          ("tcaAdaptorMenloBaseErrorStatsCorrectableErrorsDelta", 36337),
          ("tcaAdaptorMenloBaseErrorStatsCorrectableErrorsDeltaMin", 36338),
          ("tcaAdaptorMenloBaseErrorStatsCorrectableErrorsDeltaMax", 36339),
          ("tcaAdaptorMenloBaseErrorStatsCorrectableErrorsDeltaAvg", 36340),
          ("tcaAdaptorMenloBaseErrorStatsUncorrectableErrorsDelta", 36347),
          ("tcaAdaptorMenloBaseErrorStatsUncorrectableErrorsDeltaMin", 36348),
          ("tcaAdaptorMenloBaseErrorStatsUncorrectableErrorsDeltaMax", 36349),
          ("tcaAdaptorMenloBaseErrorStatsUncorrectableErrorsDeltaAvg", 36350),
          ("tcaAdaptorMenloMcpuStatsDropAclDelta", 36360),
          ("tcaAdaptorMenloMcpuStatsDropAclDeltaMin", 36361),
          ("tcaAdaptorMenloMcpuStatsDropAclDeltaMax", 36362),
          ("tcaAdaptorMenloMcpuStatsDropAclDeltaAvg", 36363),
          ("tcaAdaptorMenloMcpuStatsDropOverrunDelta", 36370),
          ("tcaAdaptorMenloMcpuStatsDropOverrunDeltaMin", 36371),
          ("tcaAdaptorMenloMcpuStatsDropOverrunDeltaMax", 36372),
          ("tcaAdaptorMenloMcpuStatsDropOverrunDeltaAvg", 36373),
          ("tcaAdaptorMenloMcpuStatsDropRuntDelta", 36380),
          ("tcaAdaptorMenloMcpuStatsDropRuntDeltaMin", 36381),
          ("tcaAdaptorMenloMcpuStatsDropRuntDeltaMax", 36382),
          ("tcaAdaptorMenloMcpuStatsDropRuntDeltaAvg", 36383),
          ("tcaAdaptorMenloMcpuStatsTruncateOverrunDelta", 36390),
          ("tcaAdaptorMenloMcpuStatsTruncateOverrunDeltaMin", 36391),
          ("tcaAdaptorMenloMcpuStatsTruncateOverrunDeltaMax", 36392),
          ("tcaAdaptorMenloMcpuStatsTruncateOverrunDeltaAvg", 36393),
          ("tcaAdaptorMenloMcpuErrorStatsCorrectableErrorsDelta", 36403),
          ("tcaAdaptorMenloMcpuErrorStatsCorrectableErrorsDeltaMin", 36404),
          ("tcaAdaptorMenloMcpuErrorStatsCorrectableErrorsDeltaMax", 36405),
          ("tcaAdaptorMenloMcpuErrorStatsCorrectableErrorsDeltaAvg", 36406),
          ("tcaAdaptorMenloMcpuErrorStatsPopErrorsDelta", 36413),
          ("tcaAdaptorMenloMcpuErrorStatsPopErrorsDeltaMin", 36414),
          ("tcaAdaptorMenloMcpuErrorStatsPopErrorsDeltaMax", 36415),
          ("tcaAdaptorMenloMcpuErrorStatsPopErrorsDeltaAvg", 36416),
          ("tcaAdaptorMenloMcpuErrorStatsPushErrorsDelta", 36423),
          ("tcaAdaptorMenloMcpuErrorStatsPushErrorsDeltaMin", 36424),
          ("tcaAdaptorMenloMcpuErrorStatsPushErrorsDeltaMax", 36425),
          ("tcaAdaptorMenloMcpuErrorStatsPushErrorsDeltaAvg", 36426),
          ("tcaAdaptorMenloMcpuErrorStatsUncorrectableErrorsDelta", 36433),
          ("tcaAdaptorMenloMcpuErrorStatsUncorrectableErrorsDeltaMin", 36434),
          ("tcaAdaptorMenloMcpuErrorStatsUncorrectableErrorsDeltaMax", 36435),
          ("tcaAdaptorMenloMcpuErrorStatsUncorrectableErrorsDeltaAvg", 36436),
          ("tcaAdaptorMenloEthStatsDropOverrunDelta", 36446),
          ("tcaAdaptorMenloEthStatsDropOverrunDeltaMin", 36447),
          ("tcaAdaptorMenloEthStatsDropOverrunDeltaMax", 36448),
          ("tcaAdaptorMenloEthStatsDropOverrunDeltaAvg", 36449),
          ("tcaAdaptorMenloEthStatsDropRuntDelta", 36456),
          ("tcaAdaptorMenloEthStatsDropRuntDeltaMin", 36457),
          ("tcaAdaptorMenloEthStatsDropRuntDeltaMax", 36458),
          ("tcaAdaptorMenloEthStatsDropRuntDeltaAvg", 36459),
          ("tcaAdaptorMenloEthStatsTruncateOverrunDelta", 36466),
          ("tcaAdaptorMenloEthStatsTruncateOverrunDeltaMin", 36467),
          ("tcaAdaptorMenloEthStatsTruncateOverrunDeltaMax", 36468),
          ("tcaAdaptorMenloEthStatsTruncateOverrunDeltaAvg", 36469),
          ("tcaAdaptorMenloEthErrorStatsCorrectableErrorsDelta", 36479),
          ("tcaAdaptorMenloEthErrorStatsCorrectableErrorsDeltaMin", 36480),
          ("tcaAdaptorMenloEthErrorStatsCorrectableErrorsDeltaMax", 36481),
          ("tcaAdaptorMenloEthErrorStatsCorrectableErrorsDeltaAvg", 36482),
          ("tcaAdaptorMenloEthErrorStatsDropAclDelta", 36489),
          ("tcaAdaptorMenloEthErrorStatsDropAclDeltaMin", 36490),
          ("tcaAdaptorMenloEthErrorStatsDropAclDeltaMax", 36491),
          ("tcaAdaptorMenloEthErrorStatsDropAclDeltaAvg", 36492),
          ("tcaAdaptorMenloEthErrorStatsPopErrorsDelta", 36499),
          ("tcaAdaptorMenloEthErrorStatsPopErrorsDeltaMin", 36500),
          ("tcaAdaptorMenloEthErrorStatsPopErrorsDeltaMax", 36501),
          ("tcaAdaptorMenloEthErrorStatsPopErrorsDeltaAvg", 36502),
          ("tcaAdaptorMenloEthErrorStatsPushErrorsDelta", 36509),
          ("tcaAdaptorMenloEthErrorStatsPushErrorsDeltaMin", 36510),
          ("tcaAdaptorMenloEthErrorStatsPushErrorsDeltaMax", 36511),
          ("tcaAdaptorMenloEthErrorStatsPushErrorsDeltaAvg", 36512),
          ("tcaAdaptorMenloEthErrorStatsUncorrectableErrorsDelta", 36519),
          ("tcaAdaptorMenloEthErrorStatsUncorrectableErrorsDeltaMin", 36520),
          ("tcaAdaptorMenloEthErrorStatsUncorrectableErrorsDeltaMax", 36521),
          ("tcaAdaptorMenloEthErrorStatsUncorrectableErrorsDeltaAvg", 36522),
          ("tcaAdaptorMenloFcStatsDropAclDelta", 36532),
          ("tcaAdaptorMenloFcStatsDropAclDeltaMin", 36533),
          ("tcaAdaptorMenloFcStatsDropAclDeltaMax", 36534),
          ("tcaAdaptorMenloFcStatsDropAclDeltaAvg", 36535),
          ("tcaAdaptorMenloFcStatsDropOverrunDelta", 36542),
          ("tcaAdaptorMenloFcStatsDropOverrunDeltaMin", 36543),
          ("tcaAdaptorMenloFcStatsDropOverrunDeltaMax", 36544),
          ("tcaAdaptorMenloFcStatsDropOverrunDeltaAvg", 36545),
          ("tcaAdaptorMenloFcStatsDropRuntDelta", 36552),
          ("tcaAdaptorMenloFcStatsDropRuntDeltaMin", 36553),
          ("tcaAdaptorMenloFcStatsDropRuntDeltaMax", 36554),
          ("tcaAdaptorMenloFcStatsDropRuntDeltaAvg", 36555),
          ("tcaAdaptorMenloFcStatsTruncateOverrunDelta", 36562),
          ("tcaAdaptorMenloFcStatsTruncateOverrunDeltaMin", 36563),
          ("tcaAdaptorMenloFcStatsTruncateOverrunDeltaMax", 36564),
          ("tcaAdaptorMenloFcStatsTruncateOverrunDeltaAvg", 36565),
          ("tcaAdaptorMenloFcErrorStatsCorrectableErrorsDelta", 36575),
          ("tcaAdaptorMenloFcErrorStatsCorrectableErrorsDeltaMin", 36576),
          ("tcaAdaptorMenloFcErrorStatsCorrectableErrorsDeltaMax", 36577),
          ("tcaAdaptorMenloFcErrorStatsCorrectableErrorsDeltaAvg", 36578),
          ("tcaAdaptorMenloFcErrorStatsPopErrorsDelta", 36585),
          ("tcaAdaptorMenloFcErrorStatsPopErrorsDeltaMin", 36586),
          ("tcaAdaptorMenloFcErrorStatsPopErrorsDeltaMax", 36587),
          ("tcaAdaptorMenloFcErrorStatsPopErrorsDeltaAvg", 36588),
          ("tcaAdaptorMenloFcErrorStatsPushErrorsDelta", 36595),
          ("tcaAdaptorMenloFcErrorStatsPushErrorsDeltaMin", 36596),
          ("tcaAdaptorMenloFcErrorStatsPushErrorsDeltaMax", 36597),
          ("tcaAdaptorMenloFcErrorStatsPushErrorsDeltaAvg", 36598),
          ("tcaAdaptorMenloFcErrorStatsUncorrectableErrorsDelta", 36605),
          ("tcaAdaptorMenloFcErrorStatsUncorrectableErrorsDeltaMin", 36606),
          ("tcaAdaptorMenloFcErrorStatsUncorrectableErrorsDeltaMax", 36607),
          ("tcaAdaptorMenloFcErrorStatsUncorrectableErrorsDeltaAvg", 36608),
          ("tcaAdaptorMenloqstatsDropOverrunN0Delta", 36619),
          ("tcaAdaptorMenloqstatsDropOverrunN0DeltaMin", 36620),
          ("tcaAdaptorMenloqstatsDropOverrunN0DeltaMax", 36621),
          ("tcaAdaptorMenloqstatsDropOverrunN0DeltaAvg", 36622),
          ("tcaAdaptorMenloqstatsDropOverrunN1Delta", 36629),
          ("tcaAdaptorMenloqstatsDropOverrunN1DeltaMin", 36630),
          ("tcaAdaptorMenloqstatsDropOverrunN1DeltaMax", 36631),
          ("tcaAdaptorMenloqstatsDropOverrunN1DeltaAvg", 36632),
          ("tcaAdaptorMenloqstatsTruncateOverrunN0Delta", 36639),
          ("tcaAdaptorMenloqstatsTruncateOverrunN0DeltaMin", 36640),
          ("tcaAdaptorMenloqstatsTruncateOverrunN0DeltaMax", 36641),
          ("tcaAdaptorMenloqstatsTruncateOverrunN0DeltaAvg", 36642),
          ("tcaAdaptorMenloqstatsTruncateOverrunN1Delta", 36649),
          ("tcaAdaptorMenloqstatsTruncateOverrunN1DeltaMin", 36650),
          ("tcaAdaptorMenloqstatsTruncateOverrunN1DeltaMax", 36651),
          ("tcaAdaptorMenloqstatsTruncateOverrunN1DeltaAvg", 36652),
          ("tcaAdaptorMenloqerrorStatsCorrectableErrorsDelta", 36663),
          ("tcaAdaptorMenloqerrorStatsCorrectableErrorsDeltaMin", 36664),
          ("tcaAdaptorMenloqerrorStatsCorrectableErrorsDeltaMax", 36665),
          ("tcaAdaptorMenloqerrorStatsCorrectableErrorsDeltaAvg", 36666),
          ("tcaAdaptorMenloqerrorStatsPopErrorsDelta", 36673),
          ("tcaAdaptorMenloqerrorStatsPopErrorsDeltaMin", 36674),
          ("tcaAdaptorMenloqerrorStatsPopErrorsDeltaMax", 36675),
          ("tcaAdaptorMenloqerrorStatsPopErrorsDeltaAvg", 36676),
          ("tcaAdaptorMenloqerrorStatsPushErrorsDelta", 36683),
          ("tcaAdaptorMenloqerrorStatsPushErrorsDeltaMin", 36684),
          ("tcaAdaptorMenloqerrorStatsPushErrorsDeltaMax", 36685),
          ("tcaAdaptorMenloqerrorStatsPushErrorsDeltaAvg", 36686),
          ("tcaAdaptorMenloqerrorStatsUncorrectableErrorsDelta", 36693),
          ("tcaAdaptorMenloqerrorStatsUncorrectableErrorsDeltaMin", 36694),
          ("tcaAdaptorMenloqerrorStatsUncorrectableErrorsDeltaMax", 36695),
          ("tcaAdaptorMenloqerrorStatsUncorrectableErrorsDeltaAvg", 36696),
          ("tcaAdaptorMenloNetEgStatsLearnReqDropDelta", 36706),
          ("tcaAdaptorMenloNetEgStatsLearnReqDropDeltaMin", 36707),
          ("tcaAdaptorMenloNetEgStatsLearnReqDropDeltaMax", 36708),
          ("tcaAdaptorMenloNetEgStatsLearnReqDropDeltaAvg", 36709),
          ("tcaAdaptorMenloNetEgStatsDropCmdDelta", 36716),
          ("tcaAdaptorMenloNetEgStatsDropCmdDeltaMin", 36717),
          ("tcaAdaptorMenloNetEgStatsDropCmdDeltaMax", 36718),
          ("tcaAdaptorMenloNetEgStatsDropCmdDeltaAvg", 36719),
          ("tcaAdaptorMenloNetEgStatsDropLifCfgInvalidDelta", 36726),
          ("tcaAdaptorMenloNetEgStatsDropLifCfgInvalidDeltaMin", 36727),
          ("tcaAdaptorMenloNetEgStatsDropLifCfgInvalidDeltaMax", 36728),
          ("tcaAdaptorMenloNetEgStatsDropLifCfgInvalidDeltaAvg", 36729),
          ("tcaAdaptorMenloNetEgStatsDropLifMapNoHitDelta", 36736),
          ("tcaAdaptorMenloNetEgStatsDropLifMapNoHitDeltaMin", 36737),
          ("tcaAdaptorMenloNetEgStatsDropLifMapNoHitDeltaMax", 36738),
          ("tcaAdaptorMenloNetEgStatsDropLifMapNoHitDeltaAvg", 36739),
          ("tcaAdaptorMenloNetEgStatsDropSrcBindDelta", 36746),
          ("tcaAdaptorMenloNetEgStatsDropSrcBindDeltaMin", 36747),
          ("tcaAdaptorMenloNetEgStatsDropSrcBindDeltaMax", 36748),
          ("tcaAdaptorMenloNetEgStatsDropSrcBindDeltaAvg", 36749),
          ("tcaAdaptorMenloNetInStatsFwdLookupNoHitDelta", 36759),
          ("tcaAdaptorMenloNetInStatsFwdLookupNoHitDeltaMin", 36760),
          ("tcaAdaptorMenloNetInStatsFwdLookupNoHitDeltaMax", 36761),
          ("tcaAdaptorMenloNetInStatsFwdLookupNoHitDeltaAvg", 36762),
          ("tcaAdaptorMenloNetInStatsDropFcMulticastDelta", 36769),
          ("tcaAdaptorMenloNetInStatsDropFcMulticastDeltaMin", 36770),
          ("tcaAdaptorMenloNetInStatsDropFcMulticastDeltaMax", 36771),
          ("tcaAdaptorMenloNetInStatsDropFcMulticastDeltaAvg", 36772),
          ("tcaAdaptorMenloNetInStatsDropFcLifInvalidDelta", 36779),
          ("tcaAdaptorMenloNetInStatsDropFcLifInvalidDeltaMin", 36780),
          ("tcaAdaptorMenloNetInStatsDropFcLifInvalidDeltaMax", 36781),
          ("tcaAdaptorMenloNetInStatsDropFcLifInvalidDeltaAvg", 36782),
          ("tcaAdaptorMenloNetInStatsDropNullPifDelta", 36789),
          ("tcaAdaptorMenloNetInStatsDropNullPifDeltaMin", 36790),
          ("tcaAdaptorMenloNetInStatsDropNullPifDeltaMax", 36791),
          ("tcaAdaptorMenloNetInStatsDropNullPifDeltaAvg", 36792),
          ("tcaAdaptorMenloHostPortStatsRxPausecfcdelta", 36802),
          ("tcaAdaptorMenloHostPortStatsRxPausecfcdeltaMin", 36803),
          ("tcaAdaptorMenloHostPortStatsRxPausecfcdeltaMax", 36804),
          ("tcaAdaptorMenloHostPortStatsRxPausecfcdeltaAvg", 36805),
          ("tcaAdaptorMenloHostPortStatsRxPausepfcdelta", 36812),
          ("tcaAdaptorMenloHostPortStatsRxPausepfcdeltaMin", 36813),
          ("tcaAdaptorMenloHostPortStatsRxPausepfcdeltaMax", 36814),
          ("tcaAdaptorMenloHostPortStatsRxPausepfcdeltaAvg", 36815),
          ("tcaAdaptorMenloHostPortStatsTxPausecfcdelta", 36822),
          ("tcaAdaptorMenloHostPortStatsTxPausecfcdeltaMin", 36823),
          ("tcaAdaptorMenloHostPortStatsTxPausecfcdeltaMax", 36824),
          ("tcaAdaptorMenloHostPortStatsTxPausecfcdeltaAvg", 36825),
          ("tcaAdaptorMenloHostPortStatsTxPausepfcdelta", 36832),
          ("tcaAdaptorMenloHostPortStatsTxPausepfcdeltaMin", 36833),
          ("tcaAdaptorMenloHostPortStatsTxPausepfcdeltaMax", 36834),
          ("tcaAdaptorMenloHostPortStatsTxPausepfcdeltaAvg", 36835),
          ("tcaAdaptorMenloDcePortStatsRxPausecfcdelta", 36845),
          ("tcaAdaptorMenloDcePortStatsRxPausecfcdeltaMin", 36846),
          ("tcaAdaptorMenloDcePortStatsRxPausecfcdeltaMax", 36847),
          ("tcaAdaptorMenloDcePortStatsRxPausecfcdeltaAvg", 36848),
          ("tcaAdaptorMenloDcePortStatsRxPausepfcdelta", 36855),
          ("tcaAdaptorMenloDcePortStatsRxPausepfcdeltaMin", 36856),
          ("tcaAdaptorMenloDcePortStatsRxPausepfcdeltaMax", 36857),
          ("tcaAdaptorMenloDcePortStatsRxPausepfcdeltaAvg", 36858),
          ("tcaAdaptorMenloDcePortStatsTxPausecfcdelta", 36865),
          ("tcaAdaptorMenloDcePortStatsTxPausecfcdeltaMin", 36866),
          ("tcaAdaptorMenloDcePortStatsTxPausecfcdeltaMax", 36867),
          ("tcaAdaptorMenloDcePortStatsTxPausecfcdeltaAvg", 36868),
          ("tcaAdaptorMenloDcePortStatsTxPausepfcdelta", 36875),
          ("tcaAdaptorMenloDcePortStatsTxPausepfcdeltaMin", 36876),
          ("tcaAdaptorMenloDcePortStatsTxPausepfcdeltaMax", 36877),
          ("tcaAdaptorMenloDcePortStatsTxPausepfcdeltaAvg", 36878),
          ("tcaAdaptorEtherIfStatsTxBytesDelta", 36887),
          ("tcaAdaptorEtherIfStatsTxBytesDeltaMin", 36888),
          ("tcaAdaptorEtherIfStatsTxBytesDeltaMax", 36889),
          ("tcaAdaptorEtherIfStatsTxBytesDeltaAvg", 36890),
          ("tcaAdaptorEtherIfStatsTxPacketsDelta", 36897),
          ("tcaAdaptorEtherIfStatsTxPacketsDeltaMin", 36898),
          ("tcaAdaptorEtherIfStatsTxPacketsDeltaMax", 36899),
          ("tcaAdaptorEtherIfStatsTxPacketsDeltaAvg", 36900),
          ("tcaAdaptorEtherIfStatsTxErrorsDelta", 36907),
          ("tcaAdaptorEtherIfStatsTxErrorsDeltaMin", 36908),
          ("tcaAdaptorEtherIfStatsTxErrorsDeltaMax", 36909),
          ("tcaAdaptorEtherIfStatsTxErrorsDeltaAvg", 36910),
          ("tcaAdaptorEtherIfStatsTxDroppedDelta", 36917),
          ("tcaAdaptorEtherIfStatsTxDroppedDeltaMin", 36918),
          ("tcaAdaptorEtherIfStatsTxDroppedDeltaMax", 36919),
          ("tcaAdaptorEtherIfStatsTxDroppedDeltaAvg", 36920),
          ("tcaAdaptorEtherIfStatsRxBytesDelta", 36927),
          ("tcaAdaptorEtherIfStatsRxBytesDeltaMin", 36928),
          ("tcaAdaptorEtherIfStatsRxBytesDeltaMax", 36929),
          ("tcaAdaptorEtherIfStatsRxBytesDeltaAvg", 36930),
          ("tcaAdaptorEtherIfStatsRxPacketsDelta", 36937),
          ("tcaAdaptorEtherIfStatsRxPacketsDeltaMin", 36938),
          ("tcaAdaptorEtherIfStatsRxPacketsDeltaMax", 36939),
          ("tcaAdaptorEtherIfStatsRxPacketsDeltaAvg", 36940),
          ("tcaAdaptorEtherIfStatsRxErrorsDelta", 36947),
          ("tcaAdaptorEtherIfStatsRxErrorsDeltaMin", 36948),
          ("tcaAdaptorEtherIfStatsRxErrorsDeltaMax", 36949),
          ("tcaAdaptorEtherIfStatsRxErrorsDeltaAvg", 36950),
          ("tcaAdaptorEtherIfStatsRxDroppedDelta", 36957),
          ("tcaAdaptorEtherIfStatsRxDroppedDeltaMin", 36958),
          ("tcaAdaptorEtherIfStatsRxDroppedDeltaMax", 36959),
          ("tcaAdaptorEtherIfStatsRxDroppedDeltaAvg", 36960),
          ("tcaAdaptorFcIfFrameStatsTxFramesDelta", 36969),
          ("tcaAdaptorFcIfFrameStatsTxFramesDeltaMin", 36970),
          ("tcaAdaptorFcIfFrameStatsTxFramesDeltaMax", 36971),
          ("tcaAdaptorFcIfFrameStatsTxFramesDeltaAvg", 36972),
          ("tcaAdaptorFcIfFrameStatsRxFramesDelta", 36979),
          ("tcaAdaptorFcIfFrameStatsRxFramesDeltaMin", 36980),
          ("tcaAdaptorFcIfFrameStatsRxFramesDeltaMax", 36981),
          ("tcaAdaptorFcIfFrameStatsRxFramesDeltaAvg", 36982),
          ("tcaAdaptorFcIfFrameStatsErrorFramesDelta", 36989),
          ("tcaAdaptorFcIfFrameStatsErrorFramesDeltaMin", 36990),
          ("tcaAdaptorFcIfFrameStatsErrorFramesDeltaMax", 36991),
          ("tcaAdaptorFcIfFrameStatsErrorFramesDeltaAvg", 36992),
          ("tcaAdaptorFcIfFrameStatsDumpedFramesDelta", 36999),
          ("tcaAdaptorFcIfFrameStatsDumpedFramesDeltaMin", 37000),
          ("tcaAdaptorFcIfFrameStatsDumpedFramesDeltaMax", 37001),
          ("tcaAdaptorFcIfFrameStatsDumpedFramesDeltaAvg", 37002),
          ("tcaAdaptorFcIfEventStatsLipCountDelta", 37011),
          ("tcaAdaptorFcIfEventStatsLipCountDeltaMin", 37012),
          ("tcaAdaptorFcIfEventStatsLipCountDeltaMax", 37013),
          ("tcaAdaptorFcIfEventStatsLipCountDeltaAvg", 37014),
          ("tcaAdaptorFcIfEventStatsInvalidcrccountDelta", 37021),
          ("tcaAdaptorFcIfEventStatsInvalidcrccountDeltaMin", 37022),
          ("tcaAdaptorFcIfEventStatsInvalidcrccountDeltaMax", 37023),
          ("tcaAdaptorFcIfEventStatsInvalidcrccountDeltaAvg", 37024),
          ("tcaAdaptorFcIfEventStatsNoscountDelta", 37031),
          ("tcaAdaptorFcIfEventStatsNoscountDeltaMin", 37032),
          ("tcaAdaptorFcIfEventStatsNoscountDeltaMax", 37033),
          ("tcaAdaptorFcIfEventStatsNoscountDeltaAvg", 37034),
          ("tcaAdaptorFcIfEventStatsLinkFailureCountDelta", 37041),
          ("tcaAdaptorFcIfEventStatsLinkFailureCountDeltaMin", 37042),
          ("tcaAdaptorFcIfEventStatsLinkFailureCountDeltaMax", 37043),
          ("tcaAdaptorFcIfEventStatsLinkFailureCountDeltaAvg", 37044),
          ("tcaAdaptorFcIfEventStatsLossOfSyncCountDelta", 37051),
          ("tcaAdaptorFcIfEventStatsLossOfSyncCountDeltaMin", 37052),
          ("tcaAdaptorFcIfEventStatsLossOfSyncCountDeltaMax", 37053),
          ("tcaAdaptorFcIfEventStatsLossOfSyncCountDeltaAvg", 37054),
          ("tcaAdaptorFcIfEventStatsLossOfSignalCountDelta", 37061),
          ("tcaAdaptorFcIfEventStatsLossOfSignalCountDeltaMin", 37062),
          ("tcaAdaptorFcIfEventStatsLossOfSignalCountDeltaMax", 37063),
          ("tcaAdaptorFcIfEventStatsLossOfSignalCountDeltaAvg", 37064),
          ("tcaAdaptorFcIfEventStatsSeqProtocolErrCountDelta", 37071),
          ("tcaAdaptorFcIfEventStatsSeqProtocolErrCountDeltaMin", 37072),
          ("tcaAdaptorFcIfEventStatsSeqProtocolErrCountDeltaMax", 37073),
          ("tcaAdaptorFcIfEventStatsSeqProtocolErrCountDeltaAvg", 37074),
          ("tcaAdaptorFcIfEventStatsSecondsSinceLastResetDelta", 37081),
          ("tcaAdaptorFcIfEventStatsSecondsSinceLastResetDeltaMin", 37082),
          ("tcaAdaptorFcIfEventStatsSecondsSinceLastResetDeltaMax", 37083),
          ("tcaAdaptorFcIfEventStatsSecondsSinceLastResetDeltaAvg", 37084),
          ("tcaMemoryRuntimeTotal", 37200),
          ("tcaMemoryRuntimeTotalMin", 37202),
          ("tcaMemoryRuntimeTotalMax", 37203),
          ("tcaMemoryRuntimeTotalAvg", 37204),
          ("tcaMemoryRuntimeAvailable", 37208),
          ("tcaMemoryRuntimeAvailableMin", 37210),
          ("tcaMemoryRuntimeAvailableMax", 37211),
          ("tcaMemoryRuntimeAvailableAvg", 37212),
          ("tcaMemoryRuntimeCached", 37216),
          ("tcaMemoryRuntimeCachedMin", 37218),
          ("tcaMemoryRuntimeCachedMax", 37219),
          ("tcaMemoryRuntimeCachedAvg", 37220),
          ("tcaMemoryArrayEnvStatsInputCurrent", 37226),
          ("tcaMemoryArrayEnvStatsInputCurrentMin", 37228),
          ("tcaMemoryArrayEnvStatsInputCurrentMax", 37229),
          ("tcaMemoryArrayEnvStatsInputCurrentAvg", 37230),
          ("tcaMemoryBufferUnitEnvStatsTemperature", 37236),
          ("tcaMemoryBufferUnitEnvStatsTemperatureMin", 37238),
          ("tcaMemoryBufferUnitEnvStatsTemperatureMax", 37239),
          ("tcaMemoryBufferUnitEnvStatsTemperatureAvg", 37240),
          ("tcaMemoryUnitEnvStatsTemperature", 37246),
          ("tcaMemoryUnitEnvStatsTemperatureMin", 37248),
          ("tcaMemoryUnitEnvStatsTemperatureMax", 37249),
          ("tcaMemoryUnitEnvStatsTemperatureAvg", 37250),
          ("tcaMemoryErrorStatsEccMultibitErrors", 37255),
          ("tcaMemoryErrorStatsEccSinglebitErrors", 37266),
          ("tcaMemoryErrorStatsAddressParityErrors", 37277),
          ("tcaMemoryErrorStatsMismatchErrors", 37288),
          ("tcaEquipmentChassisStatsInputPower", 37879),
          ("tcaEquipmentChassisStatsInputPowerMin", 37881),
          ("tcaEquipmentChassisStatsInputPowerMax", 37882),
          ("tcaEquipmentChassisStatsInputPowerAvg", 37883),
          ("tcaEquipmentChassisStatsOutputPower", 37887),
          ("tcaEquipmentChassisStatsOutputPowerMin", 37889),
          ("tcaEquipmentChassisStatsOutputPowerMax", 37890),
          ("tcaEquipmentChassisStatsOutputPowerAvg", 37891),
          ("tcaEquipmentChassisStatsInletTemp1", 37895),
          ("tcaEquipmentChassisStatsInletTemp1Min", 37897),
          ("tcaEquipmentChassisStatsInletTemp1Max", 37898),
          ("tcaEquipmentChassisStatsInletTemp1Avg", 37899),
          ("tcaEquipmentChassisStatsInletTemp2", 37903),
          ("tcaEquipmentChassisStatsInletTemp2Min", 37905),
          ("tcaEquipmentChassisStatsInletTemp2Max", 37906),
          ("tcaEquipmentChassisStatsInletTemp2Avg", 37907),
          ("tcaEquipmentChassisStatsOutletTemp1", 37911),
          ("tcaEquipmentChassisStatsOutletTemp1Min", 37913),
          ("tcaEquipmentChassisStatsOutletTemp1Max", 37914),
          ("tcaEquipmentChassisStatsOutletTemp1Avg", 37915),
          ("tcaEquipmentChassisStatsOutletTemp2", 37919),
          ("tcaEquipmentChassisStatsOutletTemp2Min", 37921),
          ("tcaEquipmentChassisStatsOutletTemp2Max", 37922),
          ("tcaEquipmentChassisStatsOutletTemp2Avg", 37923),
          ("tcaEquipmentIocardStatsAmbientTemp", 37929),
          ("tcaEquipmentIocardStatsAmbientTempMin", 37931),
          ("tcaEquipmentIocardStatsAmbientTempMax", 37932),
          ("tcaEquipmentIocardStatsAmbientTempAvg", 37933),
          ("tcaEquipmentIocardStatsTemp", 37937),
          ("tcaEquipmentIocardStatsTempMin", 37939),
          ("tcaEquipmentIocardStatsTempMax", 37940),
          ("tcaEquipmentIocardStatsTempAvg", 37941),
          ("tcaEquipmentIocardStatsProcTemp", 37945),
          ("tcaEquipmentIocardStatsProcTempMin", 37947),
          ("tcaEquipmentIocardStatsProcTempMax", 37948),
          ("tcaEquipmentIocardStatsProcTempAvg", 37949),
          ("tcaEquipmentIocardStatsDimmTemp", 37953),
          ("tcaEquipmentIocardStatsDimmTempMin", 37955),
          ("tcaEquipmentIocardStatsDimmTempMax", 37956),
          ("tcaEquipmentIocardStatsDimmTempAvg", 37957),
          ("tcaEquipmentPsuStatsAmbientTemp", 37963),
          ("tcaEquipmentPsuStatsAmbientTempMin", 37965),
          ("tcaEquipmentPsuStatsAmbientTempMax", 37966),
          ("tcaEquipmentPsuStatsAmbientTempAvg", 37967),
          ("tcaEquipmentPsuStatsOutputCurrent", 37971),
          ("tcaEquipmentPsuStatsOutputCurrentMin", 37973),
          ("tcaEquipmentPsuStatsOutputCurrentMax", 37974),
          ("tcaEquipmentPsuStatsOutputCurrentAvg", 37975),
          ("tcaEquipmentPsuStatsOutputPower", 37979),
          ("tcaEquipmentPsuStatsOutputPowerMin", 37981),
          ("tcaEquipmentPsuStatsOutputPowerMax", 37982),
          ("tcaEquipmentPsuStatsOutputPowerAvg", 37983),
          ("tcaEquipmentPsuStatsOutput12v", 37987),
          ("tcaEquipmentPsuStatsOutput12vMin", 37989),
          ("tcaEquipmentPsuStatsOutput12vMax", 37990),
          ("tcaEquipmentPsuStatsOutput12vAvg", 37991),
          ("tcaEquipmentPsuStatsOutput3v3", 37995),
          ("tcaEquipmentPsuStatsOutput3v3Min", 37997),
          ("tcaEquipmentPsuStatsOutput3v3Max", 37998),
          ("tcaEquipmentPsuStatsOutput3v3Avg", 37999),
          ("tcaEquipmentPsuStatsInput210v", 38003),
          ("tcaEquipmentPsuStatsInput210vMin", 38005),
          ("tcaEquipmentPsuStatsInput210vMax", 38006),
          ("tcaEquipmentPsuStatsInput210vAvg", 38007),
          ("tcaEquipmentPsuStatsInputPower", 38014),
          ("tcaEquipmentPsuStatsInputPowerMin", 38016),
          ("tcaEquipmentPsuStatsInputPowerMax", 38017),
          ("tcaEquipmentPsuStatsInputPowerAvg", 38018),
          ("tcaEquipmentPsuStatsInputCurrent", 38022),
          ("tcaEquipmentPsuStatsInputCurrentMin", 38024),
          ("tcaEquipmentPsuStatsInputCurrentMax", 38025),
          ("tcaEquipmentPsuStatsInputCurrentAvg", 38026),
          ("tcaEquipmentPsuStatsFanSpeed", 38030),
          ("tcaEquipmentPsuStatsFanSpeedMin", 38032),
          ("tcaEquipmentPsuStatsFanSpeedMax", 38033),
          ("tcaEquipmentPsuStatsFanSpeedAvg", 38034),
          ("tcaEquipmentPsuInputStatsCurrent", 38040),
          ("tcaEquipmentPsuInputStatsCurrentMin", 38042),
          ("tcaEquipmentPsuInputStatsCurrentMax", 38043),
          ("tcaEquipmentPsuInputStatsCurrentAvg", 38044),
          ("tcaEquipmentPsuInputStatsVoltage", 38048),
          ("tcaEquipmentPsuInputStatsVoltageMin", 38050),
          ("tcaEquipmentPsuInputStatsVoltageMax", 38051),
          ("tcaEquipmentPsuInputStatsVoltageAvg", 38052),
          ("tcaEquipmentPsuInputStatsPower", 38056),
          ("tcaEquipmentPsuInputStatsPowerMin", 38058),
          ("tcaEquipmentPsuInputStatsPowerMax", 38059),
          ("tcaEquipmentPsuInputStatsPowerAvg", 38060),
          ("tcaEquipmentPsuOutputStatsCurrent", 38067),
          ("tcaEquipmentPsuOutputStatsCurrentMin", 38069),
          ("tcaEquipmentPsuOutputStatsCurrentMax", 38070),
          ("tcaEquipmentPsuOutputStatsCurrentAvg", 38071),
          ("tcaEquipmentPsuOutputStatsVoltage", 38075),
          ("tcaEquipmentPsuOutputStatsVoltageMin", 38077),
          ("tcaEquipmentPsuOutputStatsVoltageMax", 38078),
          ("tcaEquipmentPsuOutputStatsVoltageAvg", 38079),
          ("tcaEquipmentPsuOutputStatsPower", 38083),
          ("tcaEquipmentPsuOutputStatsPowerMin", 38085),
          ("tcaEquipmentPsuOutputStatsPowerMax", 38086),
          ("tcaEquipmentPsuOutputStatsPowerAvg", 38087),
          ("tcaEquipmentFanModuleStatsAmbientTemp", 38094),
          ("tcaEquipmentFanModuleStatsAmbientTempMin", 38096),
          ("tcaEquipmentFanModuleStatsAmbientTempMax", 38097),
          ("tcaEquipmentFanModuleStatsAmbientTempAvg", 38098),
          ("tcaEquipmentFanStatsSpeed", 38104),
          ("tcaEquipmentFanStatsSpeedMin", 38106),
          ("tcaEquipmentFanStatsSpeedMax", 38107),
          ("tcaEquipmentFanStatsSpeedAvg", 38108),
          ("tcaEquipmentFexEnvStatsOutlet1", 38114),
          ("tcaEquipmentFexEnvStatsOutlet1Min", 38116),
          ("tcaEquipmentFexEnvStatsOutlet1Max", 38117),
          ("tcaEquipmentFexEnvStatsOutlet1Avg", 38118),
          ("tcaEquipmentFexEnvStatsOutlet2", 38122),
          ("tcaEquipmentFexEnvStatsOutlet2Min", 38124),
          ("tcaEquipmentFexEnvStatsOutlet2Max", 38125),
          ("tcaEquipmentFexEnvStatsOutlet2Avg", 38126),
          ("tcaEquipmentFexEnvStatsInlet", 38130),
          ("tcaEquipmentFexEnvStatsInletMin", 38132),
          ("tcaEquipmentFexEnvStatsInletMax", 38133),
          ("tcaEquipmentFexEnvStatsInletAvg", 38134),
          ("tcaEquipmentFexEnvStatsInlet1", 38138),
          ("tcaEquipmentFexEnvStatsInlet1Min", 38140),
          ("tcaEquipmentFexEnvStatsInlet1Max", 38141),
          ("tcaEquipmentFexEnvStatsInlet1Avg", 38142),
          ("tcaEquipmentFexEnvStatsDie1", 38146),
          ("tcaEquipmentFexEnvStatsDie1Min", 38148),
          ("tcaEquipmentFexEnvStatsDie1Max", 38149),
          ("tcaEquipmentFexEnvStatsDie1Avg", 38150),
          ("tcaEquipmentFexPowerSummaryTotalPower", 38157),
          ("tcaEquipmentFexPowerSummaryTotalPowerMin", 38159),
          ("tcaEquipmentFexPowerSummaryTotalPowerMax", 38160),
          ("tcaEquipmentFexPowerSummaryTotalPowerAvg", 38161),
          ("tcaEquipmentFexPowerSummaryReservedPower", 38165),
          ("tcaEquipmentFexPowerSummaryReservedPowerMin", 38167),
          ("tcaEquipmentFexPowerSummaryReservedPowerMax", 38168),
          ("tcaEquipmentFexPowerSummaryReservedPowerAvg", 38169),
          ("tcaEquipmentFexPowerSummaryModulePower", 38173),
          ("tcaEquipmentFexPowerSummaryModulePowerMin", 38175),
          ("tcaEquipmentFexPowerSummaryModulePowerMax", 38176),
          ("tcaEquipmentFexPowerSummaryModulePowerAvg", 38177),
          ("tcaEquipmentFexPowerSummaryAvailablePower", 38181),
          ("tcaEquipmentFexPowerSummaryAvailablePowerMin", 38183),
          ("tcaEquipmentFexPowerSummaryAvailablePowerMax", 38184),
          ("tcaEquipmentFexPowerSummaryAvailablePowerAvg", 38185),
          ("tcaEquipmentFexPsuInputStatsCurrent", 38191),
          ("tcaEquipmentFexPsuInputStatsCurrentMin", 38193),
          ("tcaEquipmentFexPsuInputStatsCurrentMax", 38194),
          ("tcaEquipmentFexPsuInputStatsCurrentAvg", 38195),
          ("tcaEquipmentFexPsuInputStatsVoltage", 38199),
          ("tcaEquipmentFexPsuInputStatsVoltageMin", 38201),
          ("tcaEquipmentFexPsuInputStatsVoltageMax", 38202),
          ("tcaEquipmentFexPsuInputStatsVoltageAvg", 38203),
          ("tcaEquipmentFexPsuInputStatsPower", 38207),
          ("tcaEquipmentFexPsuInputStatsPowerMin", 38209),
          ("tcaEquipmentFexPsuInputStatsPowerMax", 38210),
          ("tcaEquipmentFexPsuInputStatsPowerAvg", 38211),
          ("tcaEquipmentRackUnitPsuStatsAmbientTemp", 38218),
          ("tcaEquipmentRackUnitPsuStatsAmbientTempMin", 38220),
          ("tcaEquipmentRackUnitPsuStatsAmbientTempMax", 38221),
          ("tcaEquipmentRackUnitPsuStatsAmbientTempAvg", 38222),
          ("tcaEquipmentRackUnitPsuStatsOutputCurrent", 38226),
          ("tcaEquipmentRackUnitPsuStatsOutputCurrentMin", 38228),
          ("tcaEquipmentRackUnitPsuStatsOutputCurrentMax", 38229),
          ("tcaEquipmentRackUnitPsuStatsOutputCurrentAvg", 38230),
          ("tcaEquipmentRackUnitPsuStatsOutputPower", 38234),
          ("tcaEquipmentRackUnitPsuStatsOutputPowerMin", 38236),
          ("tcaEquipmentRackUnitPsuStatsOutputPowerMax", 38237),
          ("tcaEquipmentRackUnitPsuStatsOutputPowerAvg", 38238),
          ("tcaEquipmentRackUnitPsuStatsInputPower", 38242),
          ("tcaEquipmentRackUnitPsuStatsInputPowerMin", 38244),
          ("tcaEquipmentRackUnitPsuStatsInputPowerMax", 38245),
          ("tcaEquipmentRackUnitPsuStatsInputPowerAvg", 38246),
          ("tcaEquipmentRackUnitPsuStatsOutputVoltage", 38250),
          ("tcaEquipmentRackUnitPsuStatsOutputVoltageMin", 38252),
          ("tcaEquipmentRackUnitPsuStatsOutputVoltageMax", 38253),
          ("tcaEquipmentRackUnitPsuStatsOutputVoltageAvg", 38254),
          ("tcaEquipmentRackUnitPsuStatsInputVoltage", 38258),
          ("tcaEquipmentRackUnitPsuStatsInputVoltageMin", 38260),
          ("tcaEquipmentRackUnitPsuStatsInputVoltageMax", 38261),
          ("tcaEquipmentRackUnitPsuStatsInputVoltageAvg", 38262),
          ("tcaEquipmentNetworkElementFanStatsSpeed", 38268),
          ("tcaEquipmentNetworkElementFanStatsSpeedMin", 38270),
          ("tcaEquipmentNetworkElementFanStatsSpeedMax", 38271),
          ("tcaEquipmentNetworkElementFanStatsSpeedAvg", 38272),
          ("tcaEquipmentNetworkElementFanStatsDrivePercentage", 38276),
          ("tcaEquipmentNetworkElementFanStatsDrivePercentageMin", 38278),
          ("tcaEquipmentNetworkElementFanStatsDrivePercentageMax", 38279),
          ("tcaEquipmentNetworkElementFanStatsDrivePercentageAvg", 38280),
          ("tcaEquipmentRackUnitFanStatsSpeed", 38287),
          ("tcaEquipmentRackUnitFanStatsSpeedMin", 38289),
          ("tcaEquipmentRackUnitFanStatsSpeedMax", 38290),
          ("tcaEquipmentRackUnitFanStatsSpeedAvg", 38291),
          ("tcaEtherTxStatsTotalBytesDelta", 38506),
          ("tcaEtherTxStatsTotalBytesDeltaMin", 38507),
          ("tcaEtherTxStatsTotalBytesDeltaMax", 38508),
          ("tcaEtherTxStatsTotalBytesDeltaAvg", 38509),
          ("tcaEtherTxStatsTotalPacketsDelta", 38516),
          ("tcaEtherTxStatsTotalPacketsDeltaMin", 38517),
          ("tcaEtherTxStatsTotalPacketsDeltaMax", 38518),
          ("tcaEtherTxStatsTotalPacketsDeltaAvg", 38519),
          ("tcaEtherTxStatsUnicastPacketsDelta", 38526),
          ("tcaEtherTxStatsUnicastPacketsDeltaMin", 38527),
          ("tcaEtherTxStatsUnicastPacketsDeltaMax", 38528),
          ("tcaEtherTxStatsUnicastPacketsDeltaAvg", 38529),
          ("tcaEtherTxStatsMulticastPacketsDelta", 38536),
          ("tcaEtherTxStatsMulticastPacketsDeltaMin", 38537),
          ("tcaEtherTxStatsMulticastPacketsDeltaMax", 38538),
          ("tcaEtherTxStatsMulticastPacketsDeltaAvg", 38539),
          ("tcaEtherTxStatsBroadcastPacketsDelta", 38546),
          ("tcaEtherTxStatsBroadcastPacketsDeltaMin", 38547),
          ("tcaEtherTxStatsBroadcastPacketsDeltaMax", 38548),
          ("tcaEtherTxStatsBroadcastPacketsDeltaAvg", 38549),
          ("tcaEtherTxStatsJumboPacketsDelta", 38556),
          ("tcaEtherTxStatsJumboPacketsDeltaMin", 38557),
          ("tcaEtherTxStatsJumboPacketsDeltaMax", 38558),
          ("tcaEtherTxStatsJumboPacketsDeltaAvg", 38559),
          ("tcaEtherRxStatsTotalBytesDelta", 38568),
          ("tcaEtherRxStatsTotalBytesDeltaMin", 38569),
          ("tcaEtherRxStatsTotalBytesDeltaMax", 38570),
          ("tcaEtherRxStatsTotalBytesDeltaAvg", 38571),
          ("tcaEtherRxStatsTotalPacketsDelta", 38578),
          ("tcaEtherRxStatsTotalPacketsDeltaMin", 38579),
          ("tcaEtherRxStatsTotalPacketsDeltaMax", 38580),
          ("tcaEtherRxStatsTotalPacketsDeltaAvg", 38581),
          ("tcaEtherRxStatsUnicastPacketsDelta", 38588),
          ("tcaEtherRxStatsUnicastPacketsDeltaMin", 38589),
          ("tcaEtherRxStatsUnicastPacketsDeltaMax", 38590),
          ("tcaEtherRxStatsUnicastPacketsDeltaAvg", 38591),
          ("tcaEtherRxStatsMulticastPacketsDelta", 38598),
          ("tcaEtherRxStatsMulticastPacketsDeltaMin", 38599),
          ("tcaEtherRxStatsMulticastPacketsDeltaMax", 38600),
          ("tcaEtherRxStatsMulticastPacketsDeltaAvg", 38601),
          ("tcaEtherRxStatsBroadcastPacketsDelta", 38608),
          ("tcaEtherRxStatsBroadcastPacketsDeltaMin", 38609),
          ("tcaEtherRxStatsBroadcastPacketsDeltaMax", 38610),
          ("tcaEtherRxStatsBroadcastPacketsDeltaAvg", 38611),
          ("tcaEtherRxStatsJumboPacketsDelta", 38618),
          ("tcaEtherRxStatsJumboPacketsDeltaMin", 38619),
          ("tcaEtherRxStatsJumboPacketsDeltaMax", 38620),
          ("tcaEtherRxStatsJumboPacketsDeltaAvg", 38621),
          ("tcaEtherErrStatsAlignDelta", 38630),
          ("tcaEtherErrStatsAlignDeltaMin", 38631),
          ("tcaEtherErrStatsAlignDeltaMax", 38632),
          ("tcaEtherErrStatsAlignDeltaAvg", 38633),
          ("tcaEtherErrStatsFcsDelta", 38640),
          ("tcaEtherErrStatsFcsDeltaMin", 38641),
          ("tcaEtherErrStatsFcsDeltaMax", 38642),
          ("tcaEtherErrStatsFcsDeltaAvg", 38643),
          ("tcaEtherErrStatsXmitDelta", 38650),
          ("tcaEtherErrStatsXmitDeltaMin", 38651),
          ("tcaEtherErrStatsXmitDeltaMax", 38652),
          ("tcaEtherErrStatsXmitDeltaAvg", 38653),
          ("tcaEtherErrStatsRcvDelta", 38660),
          ("tcaEtherErrStatsRcvDeltaMin", 38661),
          ("tcaEtherErrStatsRcvDeltaMax", 38662),
          ("tcaEtherErrStatsRcvDeltaAvg", 38663),
          ("tcaEtherErrStatsUnderSizeDelta", 38670),
          ("tcaEtherErrStatsUnderSizeDeltaMin", 38671),
          ("tcaEtherErrStatsUnderSizeDeltaMax", 38672),
          ("tcaEtherErrStatsUnderSizeDeltaAvg", 38673),
          ("tcaEtherErrStatsOutDiscardDelta", 38680),
          ("tcaEtherErrStatsOutDiscardDeltaMin", 38681),
          ("tcaEtherErrStatsOutDiscardDeltaMax", 38682),
          ("tcaEtherErrStatsOutDiscardDeltaAvg", 38683),
          ("tcaEtherErrStatsDeferredTxDelta", 38690),
          ("tcaEtherErrStatsDeferredTxDeltaMin", 38691),
          ("tcaEtherErrStatsDeferredTxDeltaMax", 38692),
          ("tcaEtherErrStatsDeferredTxDeltaAvg", 38693),
          ("tcaEtherErrStatsIntMacTxDelta", 38700),
          ("tcaEtherErrStatsIntMacTxDeltaMin", 38701),
          ("tcaEtherErrStatsIntMacTxDeltaMax", 38702),
          ("tcaEtherErrStatsIntMacTxDeltaAvg", 38703),
          ("tcaEtherErrStatsIntMacRxDelta", 38710),
          ("tcaEtherErrStatsIntMacRxDeltaMin", 38711),
          ("tcaEtherErrStatsIntMacRxDeltaMax", 38712),
          ("tcaEtherErrStatsIntMacRxDeltaAvg", 38713),
          ("tcaEtherNiErrStatsFrameTxDelta", 38722),
          ("tcaEtherNiErrStatsFrameTxDeltaMin", 38723),
          ("tcaEtherNiErrStatsFrameTxDeltaMax", 38724),
          ("tcaEtherNiErrStatsFrameTxDeltaAvg", 38725),
          ("tcaEtherNiErrStatsTooLongDelta", 38732),
          ("tcaEtherNiErrStatsTooLongDeltaMin", 38733),
          ("tcaEtherNiErrStatsTooLongDeltaMax", 38734),
          ("tcaEtherNiErrStatsTooLongDeltaAvg", 38735),
          ("tcaEtherNiErrStatsTooShortDelta", 38742),
          ("tcaEtherNiErrStatsTooShortDeltaMin", 38743),
          ("tcaEtherNiErrStatsTooShortDeltaMax", 38744),
          ("tcaEtherNiErrStatsTooShortDeltaAvg", 38745),
          ("tcaEtherNiErrStatsCrcDelta", 38752),
          ("tcaEtherNiErrStatsCrcDeltaMin", 38753),
          ("tcaEtherNiErrStatsCrcDeltaMax", 38754),
          ("tcaEtherNiErrStatsCrcDeltaAvg", 38755),
          ("tcaEtherNiErrStatsInRangeDelta", 38762),
          ("tcaEtherNiErrStatsInRangeDeltaMin", 38763),
          ("tcaEtherNiErrStatsInRangeDeltaMax", 38764),
          ("tcaEtherNiErrStatsInRangeDeltaAvg", 38765),
          ("tcaEtherLossStatsSingleCollisionDelta", 38774),
          ("tcaEtherLossStatsSingleCollisionDeltaMin", 38775),
          ("tcaEtherLossStatsSingleCollisionDeltaMax", 38776),
          ("tcaEtherLossStatsSingleCollisionDeltaAvg", 38777),
          ("tcaEtherLossStatsMultiCollisionDelta", 38784),
          ("tcaEtherLossStatsMultiCollisionDeltaMin", 38785),
          ("tcaEtherLossStatsMultiCollisionDeltaMax", 38786),
          ("tcaEtherLossStatsMultiCollisionDeltaAvg", 38787),
          ("tcaEtherLossStatsLateCollisionDelta", 38794),
          ("tcaEtherLossStatsLateCollisionDeltaMin", 38795),
          ("tcaEtherLossStatsLateCollisionDeltaMax", 38796),
          ("tcaEtherLossStatsLateCollisionDeltaAvg", 38797),
          ("tcaEtherLossStatsExcessCollisionDelta", 38804),
          ("tcaEtherLossStatsExcessCollisionDeltaMin", 38805),
          ("tcaEtherLossStatsExcessCollisionDeltaMax", 38806),
          ("tcaEtherLossStatsExcessCollisionDeltaAvg", 38807),
          ("tcaEtherLossStatsCarrierSenseDelta", 38814),
          ("tcaEtherLossStatsCarrierSenseDeltaMin", 38815),
          ("tcaEtherLossStatsCarrierSenseDeltaMax", 38816),
          ("tcaEtherLossStatsCarrierSenseDeltaAvg", 38817),
          ("tcaEtherLossStatsGiantsDelta", 38824),
          ("tcaEtherLossStatsGiantsDeltaMin", 38825),
          ("tcaEtherLossStatsGiantsDeltaMax", 38826),
          ("tcaEtherLossStatsGiantsDeltaAvg", 38827),
          ("tcaEtherLossStatsSymbolDelta", 38834),
          ("tcaEtherLossStatsSymbolDeltaMin", 38835),
          ("tcaEtherLossStatsSymbolDeltaMax", 38836),
          ("tcaEtherLossStatsSymbolDeltaAvg", 38837),
          ("tcaEtherLossStatsSqetestDelta", 38844),
          ("tcaEtherLossStatsSqetestDeltaMin", 38845),
          ("tcaEtherLossStatsSqetestDeltaMax", 38846),
          ("tcaEtherLossStatsSqetestDeltaAvg", 38847),
          ("tcaEtherPauseStatsRecvPauseDelta", 38856),
          ("tcaEtherPauseStatsRecvPauseDeltaMin", 38857),
          ("tcaEtherPauseStatsRecvPauseDeltaMax", 38858),
          ("tcaEtherPauseStatsRecvPauseDeltaAvg", 38859),
          ("tcaEtherPauseStatsXmitPauseDelta", 38866),
          ("tcaEtherPauseStatsXmitPauseDeltaMin", 38867),
          ("tcaEtherPauseStatsXmitPauseDeltaMax", 38868),
          ("tcaEtherPauseStatsXmitPauseDeltaAvg", 38869),
          ("tcaEtherPauseStatsResetsDelta", 38876),
          ("tcaEtherPauseStatsResetsDeltaMin", 38877),
          ("tcaEtherPauseStatsResetsDeltaMax", 38878),
          ("tcaEtherPauseStatsResetsDeltaAvg", 38879),
          ("tcaEtherFcoeInterfaceStatsPacketsTxDelta", 38888),
          ("tcaEtherFcoeInterfaceStatsPacketsTxDeltaMin", 38889),
          ("tcaEtherFcoeInterfaceStatsPacketsTxDeltaMax", 38890),
          ("tcaEtherFcoeInterfaceStatsPacketsTxDeltaAvg", 38891),
          ("tcaEtherFcoeInterfaceStatsPacketsRxDelta", 38898),
          ("tcaEtherFcoeInterfaceStatsPacketsRxDeltaMin", 38899),
          ("tcaEtherFcoeInterfaceStatsPacketsRxDeltaMax", 38900),
          ("tcaEtherFcoeInterfaceStatsPacketsRxDeltaAvg", 38901),
          ("tcaEtherFcoeInterfaceStatsBytesTxDelta", 38908),
          ("tcaEtherFcoeInterfaceStatsBytesTxDeltaMin", 38909),
          ("tcaEtherFcoeInterfaceStatsBytesTxDeltaMax", 38910),
          ("tcaEtherFcoeInterfaceStatsBytesTxDeltaAvg", 38911),
          ("tcaEtherFcoeInterfaceStatsBytesRxDelta", 38918),
          ("tcaEtherFcoeInterfaceStatsBytesRxDeltaMin", 38919),
          ("tcaEtherFcoeInterfaceStatsBytesRxDeltaMax", 38920),
          ("tcaEtherFcoeInterfaceStatsBytesRxDeltaAvg", 38921),
          ("tcaEtherFcoeInterfaceStatsErrorsTxDelta", 38928),
          ("tcaEtherFcoeInterfaceStatsErrorsTxDeltaMin", 38929),
          ("tcaEtherFcoeInterfaceStatsErrorsTxDeltaMax", 38930),
          ("tcaEtherFcoeInterfaceStatsErrorsTxDeltaAvg", 38931),
          ("tcaEtherFcoeInterfaceStatsErrorsRxDelta", 38938),
          ("tcaEtherFcoeInterfaceStatsErrorsRxDeltaMin", 38939),
          ("tcaEtherFcoeInterfaceStatsErrorsRxDeltaMax", 38940),
          ("tcaEtherFcoeInterfaceStatsErrorsRxDeltaAvg", 38941),
          ("tcaEtherFcoeInterfaceStatsDroppedTxDelta", 38948),
          ("tcaEtherFcoeInterfaceStatsDroppedTxDeltaMin", 38949),
          ("tcaEtherFcoeInterfaceStatsDroppedTxDeltaMax", 38950),
          ("tcaEtherFcoeInterfaceStatsDroppedTxDeltaAvg", 38951),
          ("tcaEtherFcoeInterfaceStatsDroppedRxDelta", 38958),
          ("tcaEtherFcoeInterfaceStatsDroppedRxDeltaMin", 38959),
          ("tcaEtherFcoeInterfaceStatsDroppedRxDeltaMax", 38960),
          ("tcaEtherFcoeInterfaceStatsDroppedRxDeltaAvg", 38961),
          ("tcaProcessorRuntimeLoad", 39841),
          ("tcaProcessorRuntimeLoadMin", 39843),
          ("tcaProcessorRuntimeLoadMax", 39844),
          ("tcaProcessorRuntimeLoadAvg", 39845),
          ("tcaProcessorEnvStatsTemperature", 39852),
          ("tcaProcessorEnvStatsTemperatureMin", 39854),
          ("tcaProcessorEnvStatsTemperatureMax", 39855),
          ("tcaProcessorEnvStatsTemperatureAvg", 39856),
          ("tcaProcessorEnvStatsInputCurrent", 39860),
          ("tcaProcessorEnvStatsInputCurrentMin", 39862),
          ("tcaProcessorEnvStatsInputCurrentMax", 39863),
          ("tcaProcessorEnvStatsInputCurrentAvg", 39864),
          ("tcaProcessorErrorStatsMirroringIntraSockErrors", 39869),
          ("tcaProcessorErrorStatsMirroringInterSockErrors", 39880),
          ("tcaProcessorErrorStatsSparingErrors", 39891),
          ("tcaProcessorErrorStatsSmiLinkCorrErrors", 39902),
          ("tcaProcessorErrorStatsSmiLinkUncorrErrors", 39913),
          ("tcaFcStatsBytesRxDelta", 40569),
          ("tcaFcStatsBytesRxDeltaMin", 40570),
          ("tcaFcStatsBytesRxDeltaMax", 40571),
          ("tcaFcStatsBytesRxDeltaAvg", 40572),
          ("tcaFcStatsPacketsRxDelta", 40579),
          ("tcaFcStatsPacketsRxDeltaMin", 40580),
          ("tcaFcStatsPacketsRxDeltaMax", 40581),
          ("tcaFcStatsPacketsRxDeltaAvg", 40582),
          ("tcaFcStatsBytesTxDelta", 40589),
          ("tcaFcStatsBytesTxDeltaMin", 40590),
          ("tcaFcStatsBytesTxDeltaMax", 40591),
          ("tcaFcStatsBytesTxDeltaAvg", 40592),
          ("tcaFcStatsPacketsTxDelta", 40599),
          ("tcaFcStatsPacketsTxDeltaMin", 40600),
          ("tcaFcStatsPacketsTxDeltaMax", 40601),
          ("tcaFcStatsPacketsTxDeltaAvg", 40602),
          ("tcaFcErrStatsCrcRxDelta", 40611),
          ("tcaFcErrStatsCrcRxDeltaMin", 40612),
          ("tcaFcErrStatsCrcRxDeltaMax", 40613),
          ("tcaFcErrStatsCrcRxDeltaAvg", 40614),
          ("tcaFcErrStatsDiscardRxDelta", 40621),
          ("tcaFcErrStatsDiscardRxDeltaMin", 40622),
          ("tcaFcErrStatsDiscardRxDeltaMax", 40623),
          ("tcaFcErrStatsDiscardRxDeltaAvg", 40624),
          ("tcaFcErrStatsTooLongRxDelta", 40631),
          ("tcaFcErrStatsTooLongRxDeltaMin", 40632),
          ("tcaFcErrStatsTooLongRxDeltaMax", 40633),
          ("tcaFcErrStatsTooLongRxDeltaAvg", 40634),
          ("tcaFcErrStatsTooShortRxDelta", 40641),
          ("tcaFcErrStatsTooShortRxDeltaMin", 40642),
          ("tcaFcErrStatsTooShortRxDeltaMax", 40643),
          ("tcaFcErrStatsTooShortRxDeltaAvg", 40644),
          ("tcaFcErrStatsRxDelta", 40651),
          ("tcaFcErrStatsRxDeltaMin", 40652),
          ("tcaFcErrStatsRxDeltaMax", 40653),
          ("tcaFcErrStatsRxDeltaAvg", 40654),
          ("tcaFcErrStatsDiscardTxDelta", 40661),
          ("tcaFcErrStatsDiscardTxDeltaMin", 40662),
          ("tcaFcErrStatsDiscardTxDeltaMax", 40663),
          ("tcaFcErrStatsDiscardTxDeltaAvg", 40664),
          ("tcaFcErrStatsTxDelta", 40671),
          ("tcaFcErrStatsTxDeltaMin", 40672),
          ("tcaFcErrStatsTxDeltaMax", 40673),
          ("tcaFcErrStatsTxDeltaAvg", 40674),
          ("tcaFcErrStatsLinkFailuresDelta", 40681),
          ("tcaFcErrStatsLinkFailuresDeltaMin", 40682),
          ("tcaFcErrStatsLinkFailuresDeltaMax", 40683),
          ("tcaFcErrStatsLinkFailuresDeltaAvg", 40684),
          ("tcaFcErrStatsSyncLossesDelta", 40691),
          ("tcaFcErrStatsSyncLossesDeltaMin", 40692),
          ("tcaFcErrStatsSyncLossesDeltaMax", 40693),
          ("tcaFcErrStatsSyncLossesDeltaAvg", 40694),
          ("tcaFcErrStatsSignalLossesDelta", 40701),
          ("tcaFcErrStatsSignalLossesDeltaMin", 40702),
          ("tcaFcErrStatsSignalLossesDeltaMax", 40703),
          ("tcaFcErrStatsSignalLossesDeltaAvg", 40704),
          ("tcaEquipmentCardStatsTemp", 42989),
          ("tcaEquipmentCardStatsTempMin", 42991),
          ("tcaEquipmentCardStatsTempMax", 42992),
          ("tcaEquipmentCardStatsTempAvg", 42993),
          ("fsmSamDmeComputeServerDiscPolicyResolveScrubPolicyRemoteInv", 77916),
          ("fsmSamDmeGmetaHolderInventoryRemoteInv", 77917),
          ("fsmSamDmeFirmwareDownloaderDownloadRemoteInv", 77957),
          ("fsmSamDmeFirmwareImageDeleteRemoteInv", 77958),
          ("fsmSamDmeFirmwareDistributableDeleteRemoteInv", 77959),
          ("fsmSamDmeMgmtControllerUpdateucsmanagerRemoteInv", 77960),
          ("fsmSamDmeMgmtControllerUpdateSwitchRemoteInv", 77961),
          ("fsmSamDmeMgmtControllerUpdateiomRemoteInv", 77962),
          ("fsmSamDmeFirmwarePlatformPackPlatformVersionRemoteInv", 77963),
          ("fsmSamDmeFirmwareSystemDeployRemoteInv", 77964),
          ("fsmSamDmeFirmwareSupFirmwareDeployRemoteInv", 77965),
          ("fsmSamDmeFirmwareSystemApplyCatalogPackRemoteInv", 77966),
          ("fsmSamDmeIdentIdentRequestUpdateIdentRemoteInv", 77968),
          ("fsmSamDmeIdentMetaSystemSyncRemoteInv", 77969),
          ("fsmSamDmeIdentMetaSystemUcscUnivSyncRemoteInv", 77970),
          ("fsmSamDmeSmAppDeleteRemoteInv", 78025),
          ("fsmSamDmeSmSecSvcRestoreApplicationRemoteInv", 78026),
          ("fsmSamDmeSmAppUpdateApplicationRemoteInv", 78027),
          ("fsmSamDmeSmAppInstanceResetApplicationRemoteInv", 78028),
          ("fsmSamDmeSmSecSvcAutoDeploycspRemoteInv", 78029),
          ("fsmSamDmeSwAccessDomainDeployRemoteInv", 78107),
          ("fsmSamDmeSwEthLanBorderDeployRemoteInv", 78108),
          ("fsmSamDmeSwFcSanBorderDeployRemoteInv", 78109),
          ("fsmSamDmeSwUtilityDomainDeployRemoteInv", 78110),
          ("fsmSamDmeSwEthLanFlowMonDeployRemoteInv", 78111),
          ("fsmSamDmeSwPhysConfPhysicalRemoteInv", 78116),
          ("fsmSamDmeSwExtUtilityConfPortBreakoutRemoteInv", 78121),
          ("fsmSamDmeSwFcSanBorderActivateZoneSetRemoteInv", 78122),
          ("fsmSamDmeCallhomeEpConfigCallhomeRemoteInv", 78158),
          ("fsmSamDmeAdaptorExtEthIfPathResetRemoteInv", 78167),
          ("fsmSamDmeAdaptorHostEthIfCircuitResetRemoteInv", 78170),
          ("fsmSamDmeAdaptorHostFcIfCircuitResetRemoteInv", 78171),
          ("fsmSamDmeLicenseDownloaderDownloadRemoteInv", 78188),
          ("fsmSamDmeLicenseFileInstallRemoteInv", 78189),
          ("fsmSamDmeLicenseFileClearRemoteInv", 78190),
          ("fsmSamDmeLicenseInstanceUpdateFlexlmRemoteInv", 78191),
          ("fsmSamDmeLicenseSmartConfigSetConfigRemoteInv", 78192),
          ("fsmSamDmeLsServerConfigureRemoteInv", 78210),
          ("fsmSamDmeComputeBladeDiagRemoteInv", 78220),
          ("fsmSamDmeMgmtControllerExtMgmtInterfaceConfigRemoteInv", 78243),
          ("fsmSamDmeComputePhysicalSwConnUpdRemoteInv", 78244),
          ("fsmSamDmeEquipmentiocardResetIomRemoteInv", 78245),
          ("fsmSamDmeComputePhysicalServiceInfraDeployRemoteInv", 78246),
          ("fsmSamDmeComputePhysicalServiceInfraWithdrawRemoteInv", 78247),
          ("fsmSamDmeEquipmentiocardBaseFePresenceRemoteInv", 78255),
          ("fsmSamDmeEquipmentiocardBaseFeConnRemoteInv", 78256),
          ("fsmSamDmeEquipmentChassisRemoveChassisRemoteInv", 78257),
          ("fsmSamDmeEquipmentLocatorLedSetFeLocatorLedRemoteInv", 78258),
          ("fsmSamDmeEquipmentLocatorLedSetFiLocatorLedRemoteInv", 78259),
          ("fsmSamDmePortpioInCompatSfpPresenceRemoteInv", 78262),
          ("fsmSamDmePortpioInCompatSfpReplacedRemoteInv", 78263),
          ("fsmSamDmeObserveObservedResolvePolicyFsmRemoteInv", 78503),
          ("fsmSamDmeObserveObservedResolveResourceFsmRemoteInv", 78504),
          ("fsmSamDmeObserveObservedResolvevmfsmRemoteInv", 78505),
          ("fsmSamDmeObserveObservedResolveControllerFsmRemoteInv", 78506),
          ("fsmSamDmeEquipmentBeaconLedIlluminateRemoteInv", 78589),
          ("fsmSamDmeSdAppInstanceInstallApplicationRemoteInv", 78591),
          ("fsmSamDmeSdAppInstanceStartApplicationRemoteInv", 78592),
          ("fsmSamDmeSdLduProvisionlduRemoteInv", 78593),
          ("fsmSamDmeSdAppInstanceUpgradeApplicationRemoteInv", 78594),
          ("fsmSamDmeSdAppInstanceStopApplicationRemoteInv", 78595),
          ("fsmSamDmeSdAppInstanceUninstallApplicationRemoteInv", 78596),
          ("fsmSamDmeSdSlotChangePlatformLogLevelRemoteInv", 78597),
          ("fsmSamDmeSdAppInstanceBundleDataPortsRemoteInv", 78598),
          ("fsmSamDmeSdLogicalDeviceConfigureLinksRemoteInv", 78599),
          ("fsmSamDmeSdLinkUpdateInterfaceStatusRemoteInv", 78600),
          ("fsmSamDmeSdClusterBootstrapUpdateClusterConfigurationRemoteInv", 78601),
          ("fsmSamDmeSdSlotFormatDiskRemoteInv", 78602),
          ("fsmSamDmeSdSlotSynchTimeZoneRemoteInv", 78603),
          ("fsmSamDmeSdAppAttributeCtrlGetAppAttributesRemoteInv", 78604),
          ("fsmSamDmeSdMgmtInfoUpdateMgmtInfoRemoteInv", 78605),
          ("fsmSamDmeSdNetMgmtBootstrapUpdateNetMgmtBootstrapRemoteInv", 78606),
          ("fsmSamDmeSdUpgradeTaskStopUpgradeStartAppRemoteInv", 78607),
          ("fsmSamDmeEtherServerIntfioConfigSpeedRemoteInv", 78609),
          ("fsmSamDmeEtherFtwPortPairConfigFtwRemoteInv", 78610),
          ("fsmSamDmeExtpolEpRegisterFsmRemoteInv", 78625),
          ("fsmSamDmeExtpolRegistryCrossDomainConfigRemoteInv", 78626),
          ("fsmSamDmeExtpolRegistryCrossDomainDeleteRemoteInv", 78627),
          ("fsmSamDmeStorageSystemSyncRemoteInv", 78664),
          ("fsmSamDmeSysfileMutationSingleRemoteInv", 78666),
          ("fsmSamDmeSysfileMutationGlobalRemoteInv", 78667),
          ("fsmSamDmeApplicationDownloaderDownloadRemoteInv", 78671),
          ("fsmSamDmeCommSvcEpUpdateSvcEpRemoteInv", 78672),
          ("fsmSamDmeCommSvcEpRestartWebSvcRemoteInv", 78673),
          ("fsmSamDmePkiEpUpdateEpRemoteInv", 78691),
          ("fsmSamDmeAaaEpUpdateEpRemoteInv", 78692),
          ("fsmSamDmeAaaRealmUpdateRealmRemoteInv", 78693),
          ("fsmSamDmeAaaUserEpUpdateUserEpRemoteInv", 78694),
          ("fsmSamDmeSysdebugManualCoreFileExportTargetExportRemoteInv", 78705),
          ("fsmSamDmeSysdebugLogExportPolicyConfigureRemoteInv", 78706),
          ("fsmSamDmeSysdebugAutoCoreFileExportTargetConfigureRemoteInv", 78707),
          ("fsmSamDmeSysdebugTechSupportInitiateRemoteInv", 78708),
          ("fsmSamDmeSysdebugTechSupportDeleteTechSupFileRemoteInv", 78709),
          ("fsmSamDmeSysdebugTechSupportDownloadRemoteInv", 78710),
          ("fsmSamDmeSysdebugCoreDownloadRemoteInv", 78711),
          ("fsmSamDmeSysdebugLogControlEpLogControlPersistRemoteInv", 78712),
          ("fsmSamDmeEpqosDefinitionDeployRemoteInv", 78776),
          ("fsmSamDmeEpqosDefinitionDelTaskRemoveRemoteInv", 78777),
          ("fsmSamDmeQosclassDefinitionConfigGlobalQoSremoteInv", 78780),
          ("fsmSamDmeMgmtControllerRegistryConfigRemoteInv", 78787),
          ("fsmSamDmeMgmtIfSwMgmtOobIfConfigRemoteInv", 78798),
          ("fsmSamDmeMgmtIfSwMgmtInbandIfConfigRemoteInv", 78799),
          ("fsmSamDmeMgmtipv6IfAddrSwMgmtOobIpv6IfConfigRemoteInv", 78800),
          ("fsmSamDmeNhTableHolderConfigureLinksRemoteInv", 78813),
          ("fsmSamDmeNhTableHolderBootstrapLinksRemoteInv", 78814),
          ("fsmSamDmeStatsCollectionPolicyUpdateEpRemoteInv", 78818),
          ("fsmSamDmeSyntheticFsObjCreateRemoteInv", 78843),
          ("fsmSamDmeCapabilityUpdaterUpdaterRemoteInv", 78848),
          ("fsmSamDmeCapabilityCatalogueActivateCatalogRemoteInv", 78849),
          ("fsmSamDmeCapabilityMgmtExtensionActivateMgmtExtRemoteInv", 78850),
          ("fsmSamDmeCapabilityCatalogueDeployCatalogueRemoteInv", 78851),
          ("fsmSamDmeSwEthMonDeployRemoteInv", 78860),
          ("fsmSamDmeSwFcMonDeployRemoteInv", 78861),
          ("fsmSamDmeSwSspEthMonDeployRemoteInv", 78909),
          ("fsmSamDmeSwSspEthMonSrcPhyEpDeleteRemoteInv", 78910),
          ("fsmSamDmeFabricVnetEpSyncEpPushVnetEpDeletionRemoteInv", 78916),
          ("fsmSamDmeFabricLanCloudSwitchModeRemoteInv", 78917),
          ("fsmSamDmeFabricSanCloudSwitchModeRemoteInv", 78918),
          ("fsmSamDmeFabricEpMgrConfigureRemoteInv", 78924),
          ("fsmSamDmeMgmtExportPolicyReportConfigCopyRemoteInv", 78930),
          ("fsmSamDmeExtpolProviderReportConfigImportRemoteInv", 78931),
          ("fsmSamDmeMgmtIfVirtualIfConfigRemoteInv", 78932),
          ("fsmSamDmeMgmtIfEnableVipRemoteInv", 78933),
          ("fsmSamDmeMgmtIfDisableVipRemoteInv", 78934),
          ("fsmSamDmeMgmtIfEnablehaRemoteInv", 78935),
          ("fsmSamDmeMgmtBackupBackupRemoteInv", 78936),
          ("fsmSamDmeMgmtImporterImportRemoteInv", 78937),
          ("fsmSamDmeMgmtControllerSysConfigRemoteInv", 78938),
          ("fsmSamDmeNfsMountInstMountRemoteInv", 78971),
          ("fsmSamDmeNfsMountInstUnmountRemoteInv", 78972),
          ("fsmSamDmeNfsMountDefReportNfsMountSuspendRemoteInv", 78973),
          ("fsmSamDmeExtpolEpRepairCertRemoteInv", 78994),
          ("fsmSamDmePolicyControlEpOperateRemoteInv", 78995),
          ("fsmSamDmePolicyControlledTypeOperateRemoteInv", 78996),
          ("fsmSamDmePolicyPolicyScopeReleasePolicyFsmRemoteInv", 78999),
          ("fsmSamDmePolicyPolicyScopeReleaseOperationFsmRemoteInv", 79000),
          ("fsmSamDmePolicyPolicyScopeReleaseStorageFsmRemoteInv", 79001),
          ("fsmSamDmePolicyPolicyScopeResolveManyPolicyFsmRemoteInv", 79002),
          ("fsmSamDmePolicyPolicyScopeResolveManyOperationFsmRemoteInv", 79003),
          ("fsmSamDmePolicyPolicyScopeResolveManyStorageFsmRemoteInv", 79004),
          ("fsmSamDmePolicyPolicyScopeReleaseManyPolicyFsmRemoteInv", 79005),
          ("fsmSamDmePolicyPolicyScopeReleaseManyOperationFsmRemoteInv", 79006),
          ("fsmSamDmePolicyPolicyScopeReleaseManyStorageFsmRemoteInv", 79007),
          ("fsmSamDmePolicyPolicyScopeResolveAllPolicyFsmRemoteInv", 79008),
          ("fsmSamDmePolicyPolicyScopeResolveAllOperationFsmRemoteInv", 79009),
          ("fsmSamDmePolicyPolicyScopeResolveAllStorageFsmRemoteInv", 79010),
          ("fsmSamDmePolicyPolicyScopeReleaseAllPolicyFsmRemoteInv", 79011),
          ("fsmSamDmePolicyPolicyScopeReleaseAllOperationFsmRemoteInv", 79012),
          ("fsmSamDmePolicyPolicyScopeReleaseAllStorageFsmRemoteInv", 79013),
          ("fsmSamDmeFirmwareInfraPackInfraVersionRemoteInv", 79130),
          ("fsmSamDmeComputeServerDiscPolicyResolveScrubPolicyFsmFail", 999516),
          ("fsmSamDmeGmetaHolderInventoryFsmFail", 999517),
          ("fsmSamDmeFirmwareDownloaderDownloadFsmFail", 999557),
          ("fsmSamDmeFirmwareImageDeleteFsmFail", 999558),
          ("fsmSamDmeFirmwareDistributableDeleteFsmFail", 999559),
          ("fsmSamDmeMgmtControllerUpdateucsmanagerFsmFail", 999560),
          ("fsmSamDmeMgmtControllerUpdateSwitchFsmFail", 999561),
          ("fsmSamDmeMgmtControllerUpdateiomFsmFail", 999562),
          ("fsmSamDmeFirmwarePlatformPackPlatformVersionFsmFail", 999563),
          ("fsmSamDmeFirmwareSystemDeployFsmFail", 999564),
          ("fsmSamDmeFirmwareSupFirmwareDeployFsmFail", 999565),
          ("fsmSamDmeFirmwareSystemApplyCatalogPackFsmFail", 999566),
          ("fsmSamDmeIdentIdentRequestUpdateIdentFsmFail", 999568),
          ("fsmSamDmeIdentMetaSystemSyncFsmFail", 999569),
          ("fsmSamDmeIdentMetaSystemUcscUnivSyncFsmFail", 999570),
          ("fsmSamDmeSmAppDeleteFsmFail", 999625),
          ("fsmSamDmeSmSecSvcRestoreApplicationFsmFail", 999626),
          ("fsmSamDmeSmAppUpdateApplicationFsmFail", 999627),
          ("fsmSamDmeSmAppInstanceResetApplicationFsmFail", 999628),
          ("fsmSamDmeSmSecSvcAutoDeploycspFsmFail", 999629),
          ("fsmSamDmeSwAccessDomainDeployFsmFail", 999707),
          ("fsmSamDmeSwEthLanBorderDeployFsmFail", 999708),
          ("fsmSamDmeSwFcSanBorderDeployFsmFail", 999709),
          ("fsmSamDmeSwUtilityDomainDeployFsmFail", 999710),
          ("fsmSamDmeSwEthLanFlowMonDeployFsmFail", 999711),
          ("fsmSamDmeSwPhysConfPhysicalFsmFail", 999716),
          ("fsmSamDmeSwExtUtilityConfPortBreakoutFsmFail", 999721),
          ("fsmSamDmeSwFcSanBorderActivateZoneSetFsmFail", 999722),
          ("fsmSamDmeCallhomeEpConfigCallhomeFsmFail", 999758),
          ("fsmSamDmeAdaptorExtEthIfPathResetFsmFail", 999767),
          ("fsmSamDmeAdaptorHostEthIfCircuitResetFsmFail", 999770),
          ("fsmSamDmeAdaptorHostFcIfCircuitResetFsmFail", 999771),
          ("fsmSamDmeLicenseDownloaderDownloadFsmFail", 999788),
          ("fsmSamDmeLicenseFileInstallFsmFail", 999789),
          ("fsmSamDmeLicenseFileClearFsmFail", 999790),
          ("fsmSamDmeLicenseInstanceUpdateFlexlmFsmFail", 999791),
          ("fsmSamDmeLicenseSmartConfigSetConfigFsmFail", 999792),
          ("fsmSamDmeLsServerConfigureFsmFail", 999810),
          ("fsmSamDmeComputeBladeDiagFsmFail", 999820),
          ("fsmSamDmeMgmtControllerExtMgmtInterfaceConfigFsmFail", 999843),
          ("fsmSamDmeComputePhysicalSwConnUpdFsmFail", 999844),
          ("fsmSamDmeEquipmentiocardResetIomFsmFail", 999845),
          ("fsmSamDmeComputePhysicalServiceInfraDeployFsmFail", 999846),
          ("fsmSamDmeComputePhysicalServiceInfraWithdrawFsmFail", 999847),
          ("fsmSamDmeEquipmentiocardBaseFePresenceFsmFail", 999855),
          ("fsmSamDmeEquipmentiocardBaseFeConnFsmFail", 999856),
          ("fsmSamDmeEquipmentChassisRemoveChassisFsmFail", 999857),
          ("fsmSamDmeEquipmentLocatorLedSetFeLocatorLedFsmFail", 999858),
          ("fsmSamDmeEquipmentLocatorLedSetFiLocatorLedFsmFail", 999859),
          ("fsmSamDmePortpioInCompatSfpPresenceFsmFail", 999862),
          ("fsmSamDmePortpioInCompatSfpReplacedFsmFail", 999863),
          ("fsmSamDmeObserveObservedResolvePolicyFsmFsmFail", 1000103),
          ("fsmSamDmeObserveObservedResolveResourceFsmFsmFail", 1000104),
          ("fsmSamDmeObserveObservedResolvevmfsmFsmFail", 1000105),
          ("fsmSamDmeObserveObservedResolveControllerFsmFsmFail", 1000106),
          ("fsmSamDmeEquipmentBeaconLedIlluminateFsmFail", 1000189),
          ("fsmSamDmeSdAppInstanceInstallApplicationFsmFail", 1000191),
          ("fsmSamDmeSdAppInstanceStartApplicationFsmFail", 1000192),
          ("fsmSamDmeSdLduProvisionlduFsmFail", 1000193),
          ("fsmSamDmeSdAppInstanceUpgradeApplicationFsmFail", 1000194),
          ("fsmSamDmeSdAppInstanceStopApplicationFsmFail", 1000195),
          ("fsmSamDmeSdAppInstanceUninstallApplicationFsmFail", 1000196),
          ("fsmSamDmeSdSlotChangePlatformLogLevelFsmFail", 1000197),
          ("fsmSamDmeSdAppInstanceBundleDataPortsFsmFail", 1000198),
          ("fsmSamDmeSdLogicalDeviceConfigureLinksFsmFail", 1000199),
          ("fsmSamDmeSdLinkUpdateInterfaceStatusFsmFail", 1000200),
          ("fsmSamDmeSdClusterBootstrapUpdateClusterConfigurationFsmFail", 1000201),
          ("fsmSamDmeSdSlotFormatDiskFsmFail", 1000202),
          ("fsmSamDmeSdSlotSynchTimeZoneFsmFail", 1000203),
          ("fsmSamDmeSdAppAttributeCtrlGetAppAttributesFsmFail", 1000204),
          ("fsmSamDmeSdMgmtInfoUpdateMgmtInfoFsmFail", 1000205),
          ("fsmSamDmeSdNetMgmtBootstrapUpdateNetMgmtBootstrapFsmFail", 1000206),
          ("fsmSamDmeSdUpgradeTaskStopUpgradeStartAppFsmFail", 1000207),
          ("fsmSamDmeEtherServerIntfioConfigSpeedFsmFail", 1000209),
          ("fsmSamDmeEtherFtwPortPairConfigFtwFsmFail", 1000210),
          ("fsmSamDmeExtpolEpRegisterFsmFsmFail", 1000225),
          ("fsmSamDmeExtpolRegistryCrossDomainConfigFsmFail", 1000226),
          ("fsmSamDmeExtpolRegistryCrossDomainDeleteFsmFail", 1000227),
          ("fsmSamDmeStorageSystemSyncFsmFail", 1000264),
          ("fsmSamDmeSysfileMutationSingleFsmFail", 1000266),
          ("fsmSamDmeSysfileMutationGlobalFsmFail", 1000267),
          ("fsmSamDmeApplicationDownloaderDownloadFsmFail", 1000271),
          ("fsmSamDmeCommSvcEpUpdateSvcEpFsmFail", 1000272),
          ("fsmSamDmeCommSvcEpRestartWebSvcFsmFail", 1000273),
          ("fsmSamDmePkiEpUpdateEpFsmFail", 1000291),
          ("fsmSamDmeAaaEpUpdateEpFsmFail", 1000292),
          ("fsmSamDmeAaaRealmUpdateRealmFsmFail", 1000293),
          ("fsmSamDmeAaaUserEpUpdateUserEpFsmFail", 1000294),
          ("fsmSamDmeSysdebugManualCoreFileExportTargetExportFsmFail", 1000305),
          ("fsmSamDmeSysdebugLogExportPolicyConfigureFsmFail", 1000306),
          ("fsmSamDmeSysdebugAutoCoreFileExportTargetConfigureFsmFail", 1000307),
          ("fsmSamDmeSysdebugTechSupportInitiateFsmFail", 1000308),
          ("fsmSamDmeSysdebugTechSupportDeleteTechSupFileFsmFail", 1000309),
          ("fsmSamDmeSysdebugTechSupportDownloadFsmFail", 1000310),
          ("fsmSamDmeSysdebugCoreDownloadFsmFail", 1000311),
          ("fsmSamDmeSysdebugLogControlEpLogControlPersistFsmFail", 1000312),
          ("fsmSamDmeEpqosDefinitionDeployFsmFail", 1000376),
          ("fsmSamDmeEpqosDefinitionDelTaskRemoveFsmFail", 1000377),
          ("fsmSamDmeQosclassDefinitionConfigGlobalQoSfsmFail", 1000380),
          ("fsmSamDmeMgmtControllerRegistryConfigFsmFail", 1000387),
          ("fsmSamDmeMgmtIfSwMgmtOobIfConfigFsmFail", 1000398),
          ("fsmSamDmeMgmtIfSwMgmtInbandIfConfigFsmFail", 1000399),
          ("fsmSamDmeMgmtipv6IfAddrSwMgmtOobIpv6IfConfigFsmFail", 1000400),
          ("fsmSamDmeNhTableHolderConfigureLinksFsmFail", 1000413),
          ("fsmSamDmeNhTableHolderBootstrapLinksFsmFail", 1000414),
          ("fsmSamDmeStatsCollectionPolicyUpdateEpFsmFail", 1000418),
          ("fsmSamDmeSyntheticFsObjCreateFsmFail", 1000443),
          ("fsmSamDmeCapabilityUpdaterUpdaterFsmFail", 1000448),
          ("fsmSamDmeCapabilityCatalogueActivateCatalogFsmFail", 1000449),
          ("fsmSamDmeCapabilityMgmtExtensionActivateMgmtExtFsmFail", 1000450),
          ("fsmSamDmeCapabilityCatalogueDeployCatalogueFsmFail", 1000451),
          ("fsmSamDmeSwEthMonDeployFsmFail", 1000460),
          ("fsmSamDmeSwFcMonDeployFsmFail", 1000461),
          ("fsmSamDmeSwSspEthMonDeployFsmFail", 1000509),
          ("fsmSamDmeSwSspEthMonSrcPhyEpDeleteFsmFail", 1000510),
          ("fsmSamDmeFabricVnetEpSyncEpPushVnetEpDeletionFsmFail", 1000516),
          ("fsmSamDmeFabricLanCloudSwitchModeFsmFail", 1000517),
          ("fsmSamDmeFabricSanCloudSwitchModeFsmFail", 1000518),
          ("fsmSamDmeFabricEpMgrConfigureFsmFail", 1000524),
          ("fsmSamDmeMgmtExportPolicyReportConfigCopyFsmFail", 1000530),
          ("fsmSamDmeExtpolProviderReportConfigImportFsmFail", 1000531),
          ("fsmSamDmeMgmtIfVirtualIfConfigFsmFail", 1000532),
          ("fsmSamDmeMgmtIfEnableVipFsmFail", 1000533),
          ("fsmSamDmeMgmtIfDisableVipFsmFail", 1000534),
          ("fsmSamDmeMgmtIfEnablehaFsmFail", 1000535),
          ("fsmSamDmeMgmtBackupBackupFsmFail", 1000536),
          ("fsmSamDmeMgmtImporterImportFsmFail", 1000537),
          ("fsmSamDmeMgmtControllerSysConfigFsmFail", 1000538),
          ("fsmSamDmeNfsMountInstMountFsmFail", 1000571),
          ("fsmSamDmeNfsMountInstUnmountFsmFail", 1000572),
          ("fsmSamDmeNfsMountDefReportNfsMountSuspendFsmFail", 1000573),
          ("fsmSamDmeExtpolEpRepairCertFsmFail", 1000594),
          ("fsmSamDmePolicyControlEpOperateFsmFail", 1000595),
          ("fsmSamDmePolicyControlledTypeOperateFsmFail", 1000596),
          ("fsmSamDmePolicyPolicyScopeReleasePolicyFsmFsmFail", 1000599),
          ("fsmSamDmePolicyPolicyScopeReleaseOperationFsmFsmFail", 1000600),
          ("fsmSamDmePolicyPolicyScopeReleaseStorageFsmFsmFail", 1000601),
          ("fsmSamDmePolicyPolicyScopeResolveManyPolicyFsmFsmFail", 1000602),
          ("fsmSamDmePolicyPolicyScopeResolveManyOperationFsmFsmFail", 1000603),
          ("fsmSamDmePolicyPolicyScopeResolveManyStorageFsmFsmFail", 1000604),
          ("fsmSamDmePolicyPolicyScopeReleaseManyPolicyFsmFsmFail", 1000605),
          ("fsmSamDmePolicyPolicyScopeReleaseManyOperationFsmFsmFail", 1000606),
          ("fsmSamDmePolicyPolicyScopeReleaseManyStorageFsmFsmFail", 1000607),
          ("fsmSamDmePolicyPolicyScopeResolveAllPolicyFsmFsmFail", 1000608),
          ("fsmSamDmePolicyPolicyScopeResolveAllOperationFsmFsmFail", 1000609),
          ("fsmSamDmePolicyPolicyScopeResolveAllStorageFsmFsmFail", 1000610),
          ("fsmSamDmePolicyPolicyScopeReleaseAllPolicyFsmFsmFail", 1000611),
          ("fsmSamDmePolicyPolicyScopeReleaseAllOperationFsmFsmFail", 1000612),
          ("fsmSamDmePolicyPolicyScopeReleaseAllStorageFsmFsmFail", 1000613),
          ("fsmSamDmeFirmwareInfraPackInfraVersionFsmFail", 1000730),
          ("unrFaultSuppressTaskSuppressPolicyName", 4522066),
          ("unrVnicIpV4PooledAddrName", 4522408),
          ("unrVnicIpV4MgmtPooledAddrName", 4522414),
          ("unrVnicIpV6MgmtPooledAddrName", 4522421),
          ("unrVnicIpv4PooledIscsiAddrIdentPoolName", 4522435),
          ("unrVnicFcNodeIdentPoolName", 4522448),
          ("unrVnicIscsiNodeIqnIdentPoolName", 4522454),
          ("unrVnicIscsiStaticTargetIfAuthProfileName", 4522465),
          ("unrVnicIscsiBootVnicIqnIdentPoolName", 4522472),
          ("unrVnicIscsiBootVnicAuthProfileName", 4522474),
          ("unrVnicConnDefLanConnPolicyName", 4522480),
          ("unrVnicConnDefSanConnPolicyName", 4522482),
          ("unrVnicUsnicConPolicyRefConPolicyName", 4522500),
          ("unrVnicDynamicConPolicyRefConPolicyName", 4522502),
          ("unrVnicVmqConPolicyRefConPolicyName", 4522519),
          ("unrFabricVlanMcastPolicyName", 4523218),
          ("unrFabricFcoeSanPcLacpPolicyName", 4523256),
          ("unrFabricFcoeSanEpEthLinkProfileName", 4523262),
          ("unrFabricEthLanPcLacpPolicyName", 4523300),
          ("unrFabricEthLinkProfileUdldLinkPolicyName", 4523311),
          ("unrFabricEthLinkProfileCdpLinkPolicyName", 4523313),
          ("unrFabricEthEstcPcNwCtrlPolicyName", 4523349),
          ("unrFabricEthEstcPcLacpPolicyName", 4523352),
          ("unrVnicTemplStatsPolicyName", 4524766),
          ("unrVnicSanConnTemplQosPolicyName", 4524769),
          ("unrVnicSanConnTemplIdentPoolName", 4524774),
          ("unrVnicLanConnTemplQosPolicyName", 4524776),
          ("unrVnicLanConnTemplNwCtrlPolicyName", 4524780),
          ("unrVnicLanConnTemplIdentPoolName", 4524782),
          ("unrVnicFcGroupTemplStorageConnPolicyName", 4524789),
          ("unrVnicProfileQosPolicyName", 4524796),
          ("unrVnicProfileNwCtrlPolicyName", 4524799),
          ("unrVnicVnicStatsPolicyName", 4524836),
          ("unrVnicEtherBaseNwCtrlPolicyName", 4524852),
          ("unrVnicEtherBasePinToGroupName", 4524855),
          ("unrVnicEtherBaseAdaptorProfileName", 4524857),
          ("unrVnicEtherBaseIdentPoolName", 4524859),
          ("unrVnicEtherBaseNwTemplName", 4524861),
          ("unrVnicEtherBaseQosPolicyName", 4524863),
          ("unrVnicFcBasePinToGroupName", 4524884),
          ("unrVnicFcBaseAdaptorProfileName", 4524886),
          ("unrVnicFcBaseIdentPoolName", 4524888),
          ("unrVnicFcBaseNwTemplName", 4524890),
          ("unrVnicFcBaseQosPolicyName", 4524892),
          ("unrVnicIscsiBaseIdentPoolName", 4524896),
          ("unrVnicIscsiBaseAdaptorProfileName", 4524898),
          ("unrVnicIscsiIqnIdentPoolName", 4524902),
          ("unrVnicIscsiAuthProfileName", 4524905),
          ("unrVnicAgroupStatsPolicyName", 4524916),
          ("unrVnicFcGroupDefStorageConnPolicyName", 4524925),
          ("unrLsServerSrcTemplName", 4526538),
          ("unrLsServerIdentPoolName", 4526545),
          ("unrLsServerBootPolicyName", 4526547),
          ("unrLsServerVmediaPolicyName", 4526549),
          ("unrLsServerLocalDiskPolicyName", 4526551),
          ("unrLsServerKvmMgmtPolicyName", 4526553),
          ("unrLsServerScrubPolicyName", 4526561),
          ("unrLsServerDynamicConPolicyName", 4526563),
          ("unrLsServerHostFwPolicyName", 4526566),
          ("unrLsServerMgmtFwPolicyName", 4526568),
          ("unrLsServerMgmtAccessPolicyName", 4526570),
          ("unrLsServerSolPolicyName", 4526572),
          ("unrLsServerStatsPolicyName", 4526574),
          ("unrLsServerVconProfileName", 4526576),
          ("unrLsServerBiosProfileName", 4526578),
          ("unrLsServerPowerPolicyName", 4526580),
          ("unrLsServerMaintPolicyName", 4526584),
          ("unrLsServerExtippoolName", 4526587),
          ("unrLsRequirementName", 4526605),
          ("unrExtvmmVmnetworkDefinitionExtIpPoolName", 4526646),
          ("unrExtvmmVmnetworkFabricNetworkName", 4526653),
          ("unrExtvmmVmndrefVmNetworkDefName", 4526657),
          ("unrExtvmmFndreferenceFnDefName", 4526662),
          ("unrTrigTriggerableScheduler", 4528969),
          ("unrFabricFcoeSanPcEpEthLinkProfileName", 4529292),
          ("unrFabricFlowMonitorFlowMonRecordDef", 4529373),
          ("unrFabricFlowMonitorFlowTimeoutPolicy", 4529375),
          ("unrFabricNetflowMonitorRefNfMonitorName", 4529380),
          ("unrFabricFlowMonExporterFlowExpProfile", 4529401),
          ("unrFabricNetflowMonExporterRefNfMonExporterName", 4529415),
          ("unrFabricEthLanEpEthLinkProfileName", 4529458),
          ("unrFabricEthLanPcEpEthLinkProfileName", 4529464),
          ("unrFabricEthEstcEpNwCtrlPolicyName", 4529597))
    )



class CfprApConditionSeverity(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("cleared", 0),
          ("info", 1),
          ("condition", 2),
          ("warning", 3),
          ("minor", 4),
          ("major", 5),
          ("critical", 6))
    )



class CfprApConditionTag(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("server", 0),
          ("network", 1),
          ("storage", 2),
          ("pod", 3),
          ("security", 4),
          ("operations", 5),
          ("fsmstagefail", 6),
          ("fsmstageretry", 7),
          ("fsmstageremoteinv", 8))
    )


class CfprApConditionType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              65535)
        )
    )
    namedValues = NamedValues(
        *(("generic", 0),
          ("fsm", 1),
          ("network", 2),
          ("server", 3),
          ("configuration", 4),
          ("sysdebug", 5),
          ("equipment", 6),
          ("environmental", 7),
          ("management", 8),
          ("connectivity", 9),
          ("operational", 10),
          ("security", 11),
          ("any", 65535))
    )



class CfprApConfigImpactResponseState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notStarted", 0),
          ("waiting", 1),
          ("complete", 2))
    )



class CfprApConfigSorterDirection(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("ascending", 0),
          ("descending", 1))
    )



class CfprApDcxAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 0),
          ("disabled", 1))
    )



class CfprApDcxNsAllocStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("available", 0),
          ("full", 1),
          ("exceeded", 2))
    )



class CfprApDcxOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("adminDown", 1),
          ("linkDown", 2),
          ("error", 3),
          ("active", 4),
          ("passive", 5))
    )



class CfprApDcxProtState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noProtection", 0),
          ("active", 1),
          ("passive", 2))
    )



class CfprApDcxState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("present", 1),
          ("creating", 2),
          ("modifying", 3),
          ("destroying", 4),
          ("createPend", 5),
          ("modifyPend", 6),
          ("destroyPend", 7))
    )



class CfprApDcxVIfProtRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unprotected", 0),
          ("primary", 1),
          ("backup", 2))
    )



class CfprApDiagAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ready", 0),
          ("trigger", 1),
          ("cancel", 2))
    )



class CfprApDiagBladeTestType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("disk", 0),
          ("processor", 1),
          ("memory", 2),
          ("memtest", 3),
          ("stress", 4),
          ("pci", 5))
    )



class CfprApDiagFailureAction(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("techSupport", 0),
          ("waitDebug", 1),
          ("skipRemaining", 2))
    )


class CfprApDiagNetworkTestType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("eth", 0),
          ("fc", 1))
    )



class CfprApDiagSrvCtrlType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              33)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("efi", 33))
    )



class CfprApDiagStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("complete", 0),
          ("inProgress", 1),
          ("failed", 2),
          ("notRun", 3),
          ("cancelled", 4),
          ("scheduled", 5))
    )



class CfprApDiagStatusIssues(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("testFailure", 0),
          ("runCancelled", 1),
          ("componentError", 2),
          ("stagesCompleted", 3),
          ("stageFailed", 4))
    )


class CfprApDiagSuccessAction(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("techSupport", 0),
          ("waitDebug", 1))
    )


class CfprApDiagTestOrder(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 64),
    )



class CfprApDomainFeatureType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("major", 0),
          ("minor", 1))
    )



class CfprApDomainFunctionalState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 0),
          ("disabled", 1))
    )



class CfprApDpsecForgedTransmit(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("allow", 0),
          ("deny", 1))
    )



class CfprApEpqosDefinitionDelTaskFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              387)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("remove", 387))
    )



class CfprApEpqosDefinitionDelTaskFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              387,
              388,
              389,
              572,
              573)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("removeBegin", 387),
          ("removeLocal", 388),
          ("removePeer", 389),
          ("removeFail", 572),
          ("removeSuccess", 573))
    )



class CfprApEpqosDefinitionDelTaskFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              387)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("remove", 387))
    )



class CfprApEpqosDefinitionFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              384)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deploy", 384))
    )



class CfprApEpqosDefinitionFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              384,
              385,
              386,
              574,
              575)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deployBegin", 384),
          ("deployLocal", 385),
          ("deployPeer", 386),
          ("deployFail", 574),
          ("deploySuccess", 575))
    )



class CfprApEpqosDefinitionFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              384)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deploy", 384))
    )



class CfprApEquipmentActiveStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("activated", 1),
          ("deactivated", 2))
    )



class CfprApEquipmentAdminPowerState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("policy", 1),
          ("cycleImmediate", 2),
          ("cycleWait", 3))
    )



class CfprApEquipmentAirflowDirection(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("frontToBack", 1),
          ("backToFront", 2))
    )



class CfprApEquipmentAsicType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("gatos", 1),
          ("carmel", 2))
    )



class CfprApEquipmentBeaconLedFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              247)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("illuminate", 247))
    )



class CfprApEquipmentBeaconLedFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              247,
              248,
              249,
              576,
              577)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("illuminateBegin", 247),
          ("illuminateExecuteA", 248),
          ("illuminateExecuteB", 249),
          ("illuminateFail", 576),
          ("illuminateSuccess", 577))
    )



class CfprApEquipmentBeaconLedFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              247)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("illuminate", 247))
    )



class CfprApEquipmentBeaconLedState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2),
          ("blinking", 3),
          ("eth", 4),
          ("fc", 5))
    )



class CfprApEquipmentBiosUpdateMethod(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("managementController", 1),
          ("pnuos", 2))
    )



class CfprApEquipmentBoardAggregationRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("single", 1),
          ("multiMaster", 2),
          ("multiSlave", 3))
    )



class CfprApEquipmentBoardConnectorType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("connUnlinked", 1),
          ("connLinked", 2))
    )



class CfprApEquipmentCardStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("temp", 0),
          ("tempAvg", 1),
          ("tempMax", 2),
          ("tempMin", 3))
    )


class CfprApEquipmentCardStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("temp", 0),
          ("tempAvg", 1),
          ("tempMax", 2),
          ("tempMin", 3))
    )


class CfprApEquipmentChassisId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )



class CfprApEquipmentChassisAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("acknowledged", 1),
          ("reAcknowledge", 2),
          ("decommission", 3),
          ("remove", 4),
          ("enablePortChannel", 5),
          ("disablePortChannel", 6),
          ("autoAcknowledge", 7))
    )



class CfprApEquipmentChassisConfigProgressIndicator(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("ackNotInProgress", 0),
          ("ackInProgress", 1))
    )



class CfprApEquipmentChassisConfigState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("unInitialized", 0),
          ("unAcknowledged", 1),
          ("unsupportedConnectivity", 2),
          ("ok", 3),
          ("removing", 4),
          ("ackInProgress", 6),
          ("evaluation", 7),
          ("acknowledged", 8),
          ("autoAck", 9))
    )



class CfprApEquipmentChassisFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              225)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("removeChassis", 225))
    )



class CfprApEquipmentChassisFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              225,
              226,
              227,
              228,
              229,
              230,
              578,
              579)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("removeChassisBegin", 225),
          ("removeChassisDecomission", 226),
          ("removeChassisDisableEndPoint", 227),
          ("removeChassisUnIdentifyLocal", 228),
          ("removeChassisUnIdentifyPeer", 229),
          ("removeChassisWait", 230),
          ("removeChassisFail", 578),
          ("removeChassisSuccess", 579))
    )



class CfprApEquipmentChassisFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              225)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("removeChassis", 225))
    )



class CfprApEquipmentChassisIssues(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("chassisThermal", 0),
          ("chassisInoperable", 1),
          ("chassisVoltage", 2),
          ("chassisPerf", 3),
          ("chassisPower", 4),
          ("removed", 5),
          ("config", 6),
          ("chassisPostFailure", 7),
          ("psuThermal", 8),
          ("psuInoperable", 9),
          ("psuVoltage", 10),
          ("psuPerf", 11),
          ("psuPower", 12),
          ("fanThermal", 13),
          ("fanInoperable", 14),
          ("fanVoltage", 15),
          ("fanPerf", 16),
          ("fanPower", 17),
          ("iocardThermal", 18),
          ("iocardInoperable", 19),
          ("iocardVoltage", 20),
          ("iocardPerf", 21),
          ("iocardPower", 22),
          ("computeThermal", 23),
          ("computeInoperable", 24),
          ("computeVoltage", 25),
          ("computePerf", 26),
          ("computePower", 27),
          ("iocardInaccessible", 28),
          ("fabricConnProblem", 29),
          ("fabricUnsupportedConn", 30),
          ("chassisLimitExceeded", 31),
          ("chassisVifCapacityReduced", 32),
          ("chassisPortChannelEnabled", 33),
          ("chassisUnsupported", 34))
    )


class CfprApEquipmentChassisPowerOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ok", 1),
          ("failed", 2),
          ("inputFailed", 3),
          ("inputDegraded", 4),
          ("outputFailed", 5),
          ("outputDegraded", 6),
          ("redundancyFailed", 7),
          ("redundancyDegraded", 8))
    )



class CfprApEquipmentChassisStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("inletTemp1", 0),
          ("inputPower", 8),
          ("inputPowerAvg", 9),
          ("inputPowerMax", 10),
          ("inputPowerMin", 11),
          ("outletTemp1", 12),
          ("outletTemp1Avg", 13),
          ("outletTemp1Max", 14),
          ("outletTemp1Min", 15),
          ("outletTemp2", 16),
          ("outletTemp2Avg", 17),
          ("outletTemp2Max", 18),
          ("outletTemp2Min", 19),
          ("outputPower", 20),
          ("outputPowerAvg", 21),
          ("outputPowerMax", 22),
          ("outputPowerMin", 23))
    )


class CfprApEquipmentChassisStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("inletTemp1", 0),
          ("inputPower", 8),
          ("inputPowerAvg", 9),
          ("inputPowerMax", 10),
          ("inputPowerMin", 11),
          ("outletTemp1", 12),
          ("outletTemp1Avg", 13),
          ("outletTemp1Max", 14),
          ("outletTemp1Min", 15),
          ("outletTemp2", 16),
          ("outletTemp2Avg", 17),
          ("outletTemp2Max", 18),
          ("outletTemp2Min", 19),
          ("outputPower", 20),
          ("outputPowerAvg", 21),
          ("outputPowerMax", 22),
          ("outputPowerMin", 23))
    )


class CfprApEquipmentCommStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("connected", 1),
          ("disconnected", 2))
    )



class CfprApEquipmentConnectionStatus(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("a", 0),
          ("b", 1))
    )


class CfprApEquipmentCpuType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 0),
          ("ivyBridge", 1),
          ("sandyBridge", 2))
    )



class CfprApEquipmentDiscoveryCapOperPowerRequirement(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("standby", 1),
          ("full", 2))
    )



class CfprApEquipmentDiscoveryState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("online", 1),
          ("offline", 2),
          ("discovered", 3),
          ("unsupportedConnectivity", 4),
          ("autoUpgrading", 5))
    )



class CfprApEquipmentEnabledStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("enabled", 1),
          ("disabled", 2))
    )



class CfprApEquipmentEthPortSpeedCap(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("auto", 0),
          ("n1g", 1),
          ("n10g", 2),
          ("n20g", 3),
          ("n40g", 4),
          ("n100m", 7))
    )


class CfprApEquipmentFanId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )



class CfprApEquipmentFanModule(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )



class CfprApEquipmentFanTray(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )



class CfprApEquipmentFanModuleId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )



class CfprApEquipmentFanModuleTray(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
    )



class CfprApEquipmentFanModuleStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ambientTemp", 0),
          ("ambientTempAvg", 1),
          ("ambientTempMax", 2),
          ("ambientTempMin", 3))
    )


class CfprApEquipmentFanModuleStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ambientTemp", 0),
          ("ambientTempAvg", 1),
          ("ambientTempMax", 2),
          ("ambientTempMin", 3))
    )


class CfprApEquipmentFanStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("speed", 0),
          ("speedAvg", 1),
          ("speedMax", 2),
          ("speedMin", 3))
    )


class CfprApEquipmentFanStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("speed", 0),
          ("speedAvg", 1),
          ("speedMax", 2),
          ("speedMin", 3))
    )


class CfprApEquipmentFexId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )



class CfprApEquipmentFexCapProviderRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("mgmt", 1),
          ("data", 2),
          ("full", 3))
    )



class CfprApEquipmentFexEnvStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("die1", 0),
          ("die1Avg", 1),
          ("die1Max", 2),
          ("die1Min", 3),
          ("inlet", 4),
          ("inlet1", 5),
          ("inlet1Avg", 6),
          ("inlet1Max", 7),
          ("inlet1Min", 8),
          ("inletAvg", 9),
          ("inletMax", 10),
          ("inletMin", 11),
          ("outlet1", 12),
          ("outlet1Avg", 13),
          ("outlet1Max", 14),
          ("outlet1Min", 15),
          ("outlet2", 16),
          ("outlet2Avg", 17),
          ("outlet2Max", 18),
          ("outlet2Min", 19))
    )


class CfprApEquipmentFexEnvStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("die1", 0),
          ("die1Avg", 1),
          ("die1Max", 2),
          ("die1Min", 3),
          ("inlet", 4),
          ("inlet1", 5),
          ("inlet1Avg", 6),
          ("inlet1Max", 7),
          ("inlet1Min", 8),
          ("inletAvg", 9),
          ("inletMax", 10),
          ("inletMin", 11),
          ("outlet1", 12),
          ("outlet1Avg", 13),
          ("outlet1Max", 14),
          ("outlet1Min", 15),
          ("outlet2", 16),
          ("outlet2Avg", 17),
          ("outlet2Max", 18),
          ("outlet2Min", 19))
    )


class CfprApEquipmentFexPowerSummaryThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("modulePower", 0),
          ("modulePowerAvg", 1),
          ("modulePowerMax", 2),
          ("modulePowerMin", 3),
          ("availablePower", 4),
          ("availablePowerAvg", 5),
          ("availablePowerMax", 6),
          ("availablePowerMin", 7),
          ("reservedPower", 8),
          ("reservedPowerAvg", 9),
          ("reservedPowerMax", 10),
          ("reservedPowerMin", 11),
          ("totalPower", 12),
          ("totalPowerAvg", 13),
          ("totalPowerMax", 14),
          ("totalPowerMin", 15))
    )


class CfprApEquipmentFexPowerSummaryHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("modulePower", 0),
          ("modulePowerAvg", 1),
          ("modulePowerMax", 2),
          ("modulePowerMin", 3),
          ("availablePower", 4),
          ("availablePowerAvg", 5),
          ("availablePowerMax", 6),
          ("availablePowerMin", 7),
          ("reservedPower", 8),
          ("reservedPowerAvg", 9),
          ("reservedPowerMax", 10),
          ("reservedPowerMin", 11),
          ("totalPower", 12),
          ("totalPowerAvg", 13),
          ("totalPowerMax", 14),
          ("totalPowerMin", 15))
    )


class CfprApEquipmentFexPsuInputStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("current", 0),
          ("currentAvg", 1),
          ("currentMax", 2),
          ("currentMin", 3),
          ("power", 4),
          ("powerAvg", 5),
          ("powerMax", 6),
          ("powerMin", 7),
          ("voltage", 8),
          ("voltageAvg", 9),
          ("voltageMax", 10),
          ("voltageMin", 11))
    )


class CfprApEquipmentFexPsuInputStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("current", 0),
          ("currentAvg", 1),
          ("currentMax", 2),
          ("currentMin", 3),
          ("power", 4),
          ("powerAvg", 5),
          ("powerMax", 6),
          ("powerMin", 7),
          ("voltage", 8),
          ("voltageAvg", 9),
          ("voltageMax", 10),
          ("voltageMin", 11))
    )


class CfprApEquipmentHealthLedState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("normal", 0),
          ("minor", 1),
          ("critical", 2))
    )



class CfprApEquipmentIOCardId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )



class CfprApEquipmentIOCardBaseFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              219,
              222)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("fePresence", 219),
          ("feConn", 222))
    )



class CfprApEquipmentIOCardBaseFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              219,
              220,
              221,
              222,
              223,
              224,
              580,
              581,
              582,
              583)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("fePresenceBegin", 219),
          ("fePresenceCheckLicense", 220),
          ("fePresenceIdentify", 221),
          ("feConnBegin", 222),
          ("feConnConfigureSwMgmtEndPoint", 223),
          ("feConnConfigureVifNs", 224),
          ("feConnFail", 580),
          ("feConnSuccess", 581),
          ("fePresenceFail", 582),
          ("fePresenceSuccess", 583))
    )



class CfprApEquipmentIOCardBaseFsmTaskFlags(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("samDmeEquipmentIOCardBaseFePresenceUcsConfig", 20),
          ("samDmeEquipmentIOCardBaseFePresenceMiniUcsConfig", 21))
    )


class CfprApEquipmentIOCardBaseFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              219,
              222)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("fePresence", 219),
          ("feConn", 222))
    )



class CfprApEquipmentIOCardFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              211,
              219,
              222)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("resetIom", 211),
          ("fePresence", 219),
          ("feConn", 222))
    )



class CfprApEquipmentIOCardFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              211,
              212,
              219,
              220,
              221,
              222,
              223,
              224,
              580,
              581,
              582,
              583,
              584,
              585)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("resetIomBegin", 211),
          ("resetIomExecute", 212),
          ("fePresenceBegin", 219),
          ("fePresenceCheckLicense", 220),
          ("fePresenceIdentify", 221),
          ("feConnBegin", 222),
          ("feConnConfigureSwMgmtEndPoint", 223),
          ("feConnConfigureVifNs", 224),
          ("feConnFail", 580),
          ("feConnSuccess", 581),
          ("fePresenceFail", 582),
          ("fePresenceSuccess", 583),
          ("resetIomFail", 584),
          ("resetIomSuccess", 585))
    )



class CfprApEquipmentIOCardFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              211)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("resetIom", 211))
    )



class CfprApEquipmentIOCardIssues(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("thermal", 0),
          ("inoperable", 1),
          ("voltage", 2),
          ("perf", 3),
          ("power", 4),
          ("removed", 5),
          ("fabricPortProblem", 6),
          ("postFailure", 7),
          ("serverPortProblem", 8),
          ("fabricpcLinkAutoAckBlocked", 9))
    )


class CfprApEquipmentIOCardStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ambientTemp", 0),
          ("ambientTempAvg", 1),
          ("ambientTempMax", 2),
          ("ambientTempMin", 3),
          ("dimmTemp", 4),
          ("dimmTempAvg", 5),
          ("dimmTempMax", 6),
          ("dimmTempMin", 7),
          ("procTemp", 8),
          ("procTempAvg", 9),
          ("procTempMax", 10),
          ("procTempMin", 11),
          ("temp", 12),
          ("tempAvg", 13),
          ("tempMax", 14),
          ("tempMin", 15))
    )


class CfprApEquipmentIOCardStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ambientTemp", 0),
          ("ambientTempAvg", 1),
          ("ambientTempMax", 2),
          ("ambientTempMin", 3),
          ("dimmTemp", 4),
          ("dimmTempAvg", 5),
          ("dimmTempMax", 6),
          ("dimmTempMin", 7),
          ("procTemp", 8),
          ("procTempAvg", 9),
          ("procTempMax", 10),
          ("procTempMin", 11),
          ("temp", 12),
          ("tempAvg", 13),
          ("tempMax", 14),
          ("tempMin", 15))
    )


class CfprApEquipmentInternalFanType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("chassis", 0),
          ("switch", 1),
          ("fex", 2))
    )



class CfprApEquipmentIsSupported(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )



class CfprApEquipmentLedColor(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("green", 1),
          ("amber", 2),
          ("red", 3),
          ("blue", 4))
    )



class CfprApEquipmentLedLocatorState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("inactive", 0),
          ("off", 1),
          ("on", 2))
    )



class CfprApEquipmentLedOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("on", 1),
          ("off", 2),
          ("blinking", 3),
          ("eth", 4),
          ("fc", 5))
    )



class CfprApEquipmentLocatorLedFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              231,
              233)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("setFeLocatorLed", 231),
          ("setFiLocatorLed", 233))
    )



class CfprApEquipmentLocatorLedFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              231,
              232,
              233,
              234,
              586,
              587,
              588,
              589)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("setFeLocatorLedBegin", 231),
          ("setFeLocatorLedExecute", 232),
          ("setFiLocatorLedBegin", 233),
          ("setFiLocatorLedExecute", 234),
          ("setFeLocatorLedFail", 586),
          ("setFeLocatorLedSuccess", 587),
          ("setFiLocatorLedFail", 588),
          ("setFiLocatorLedSuccess", 589))
    )



class CfprApEquipmentLocatorLedFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              231,
              233)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("setFeLocatorLed", 231),
          ("setFiLocatorLed", 233))
    )



class CfprApEquipmentMemoryUnitDiscoveryModifierAction(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("setRevToOne", 1),
          ("setRev", 2),
          ("setRevStrict", 3))
    )



class CfprApEquipmentMethod(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("post", 0),
          ("configCheck", 1),
          ("diagCheck", 2),
          ("selCheck", 3))
    )


class CfprApEquipmentNetworkElementFanStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("drivePercentage", 0),
          ("drivePercentageAvg", 1),
          ("drivePercentageMax", 2),
          ("drivePercentageMin", 3),
          ("speed", 4),
          ("speedAvg", 5),
          ("speedMax", 6),
          ("speedMin", 7))
    )


class CfprApEquipmentNetworkElementFanStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("drivePercentage", 0),
          ("drivePercentageAvg", 1),
          ("drivePercentageMax", 2),
          ("drivePercentageMin", 3),
          ("speed", 4),
          ("speedAvg", 5),
          ("speedMax", 6),
          ("speedMin", 7))
    )


class CfprApEquipmentOperability(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              51,
              52,
              81,
              82,
              83,
              84,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("operable", 1),
          ("inoperable", 2),
          ("degraded", 3),
          ("poweredOff", 4),
          ("powerProblem", 5),
          ("removed", 6),
          ("voltageProblem", 7),
          ("thermalProblem", 8),
          ("performanceProblem", 9),
          ("accessibilityProblem", 10),
          ("identityUnestablishable", 11),
          ("biosPostTimeout", 12),
          ("disabled", 13),
          ("malformedFru", 14),
          ("fabricConnProblem", 51),
          ("fabricUnsupportedConn", 52),
          ("config", 81),
          ("equipmentProblem", 82),
          ("decomissioning", 83),
          ("chassisLimitExceeded", 84),
          ("notSupported", 100),
          ("discovery", 101),
          ("discoveryFailed", 102),
          ("identify", 103),
          ("postFailure", 104),
          ("upgradeProblem", 105),
          ("peerCommProblem", 106),
          ("autoUpgrade", 107),
          ("linkActivateBlocked", 108))
    )



class CfprApEquipmentOwnership(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("owned", 1),
          ("unowned", 2))
    )



class CfprApEquipmentPOSTRecoverability(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("recoverable", 1),
          ("nonRecoverable", 2))
    )



class CfprApEquipmentPasswordState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("set", 1),
          ("notSet", 2))
    )



class CfprApEquipmentPictureType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("front", 1),
          ("back", 2),
          ("top", 3),
          ("bottom", 4),
          ("left", 5),
          ("right", 6))
    )



class CfprApEquipmentPortAttribute(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("scalability", 1))
    )



class CfprApEquipmentPowerCapDefProfileMethod(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("default", 1),
          ("static", 2),
          ("pnuos", 3),
          ("nodemgr", 4))
    )



class CfprApEquipmentPowerState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              100)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("on", 1),
          ("test", 2),
          ("off", 3),
          ("online", 4),
          ("offline", 5),
          ("offduty", 6),
          ("degraded", 7),
          ("powerSave", 8),
          ("error", 9),
          ("ok", 10),
          ("failed", 11),
          ("notSupported", 100))
    )



class CfprApEquipmentPresence(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              20,
              21,
              22,
              30,
              40,
              100)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("empty", 1),
          ("equipped", 10),
          ("missing", 11),
          ("mismatch", 12),
          ("equippedNotPrimary", 13),
          ("equippedSlave", 14),
          ("mismatchSlave", 15),
          ("missingSlave", 16),
          ("equippedIdentityUnestablishable", 20),
          ("mismatchIdentityUnestablishable", 21),
          ("equippedWithMalformedFru", 22),
          ("inaccessible", 30),
          ("unauthorized", 40),
          ("notSupported", 100))
    )



class CfprApEquipmentPsuType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ac", 1),
          ("dc", 2))
    )



class CfprApEquipmentPsuId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )



class CfprApEquipmentPsuFanStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ok", 1),
          ("failed", 2))
    )



class CfprApEquipmentPsuInputSrc(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("n210AC50380DC", 1),
          ("n110AC", 2),
          ("undetermined", 3),
          ("n115AC230AC", 4))
    )



class CfprApEquipmentPsuInputStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("current", 0),
          ("currentAvg", 1),
          ("currentMax", 2),
          ("currentMin", 3),
          ("power", 4),
          ("powerAvg", 5),
          ("powerMax", 6),
          ("powerMin", 7),
          ("voltage", 8),
          ("voltageAvg", 9),
          ("voltageMax", 10),
          ("voltageMin", 11))
    )


class CfprApEquipmentPsuInputStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("current", 0),
          ("currentAvg", 1),
          ("currentMax", 2),
          ("currentMin", 3),
          ("power", 4),
          ("powerAvg", 5),
          ("powerMax", 6),
          ("powerMin", 7),
          ("voltage", 8),
          ("voltageAvg", 9),
          ("voltageMax", 10),
          ("voltageMin", 11))
    )


class CfprApEquipmentPsuOutputStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("current", 0),
          ("currentAvg", 1),
          ("currentMax", 2),
          ("currentMin", 3),
          ("power", 4),
          ("powerAvg", 5),
          ("powerMax", 6),
          ("powerMin", 7),
          ("voltage", 8),
          ("voltageAvg", 9),
          ("voltageMax", 10),
          ("voltageMin", 11))
    )


class CfprApEquipmentPsuOutputStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("current", 0),
          ("currentAvg", 1),
          ("currentMax", 2),
          ("currentMin", 3),
          ("power", 4),
          ("powerAvg", 5),
          ("powerMax", 6),
          ("powerMin", 7),
          ("voltage", 8),
          ("voltageAvg", 9),
          ("voltageMax", 10),
          ("voltageMin", 11))
    )


class CfprApEquipmentPsuStateQualifier(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("failure", 1),
          ("overCurrent", 2),
          ("overTemperature", 3),
          ("inputLoss", 4),
          ("fanFailure", 5),
          ("inputCurrentWarning", 6),
          ("inputVoltageWarning", 7),
          ("ambientTemperatureWarning", 8),
          ("outputCurrentWarning", 9))
    )



class CfprApEquipmentPsuStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ambientTemp", 0),
          ("ambientTempAvg", 1),
          ("ambientTempMax", 2),
          ("ambientTempMin", 3),
          ("fanSpeed", 4),
          ("fanSpeedAvg", 5),
          ("fanSpeedMax", 6),
          ("fanSpeedMin", 7),
          ("input210v", 8),
          ("input210vAvg", 9),
          ("input210vMax", 10),
          ("input210vMin", 11),
          ("inputCurrent", 12),
          ("inputCurrentAvg", 13),
          ("inputCurrentMax", 14),
          ("inputCurrentMin", 15),
          ("inputPower", 16),
          ("inputPowerAvg", 17),
          ("inputPowerMax", 18),
          ("inputPowerMin", 19),
          ("output12v", 20),
          ("output12vAvg", 21),
          ("output12vMax", 22),
          ("output12vMin", 23),
          ("output3v3", 24),
          ("output3v3Avg", 25),
          ("output3v3Max", 26),
          ("output3v3Min", 27),
          ("outputCurrent", 28),
          ("outputCurrentAvg", 29),
          ("outputCurrentMax", 30),
          ("outputCurrentMin", 31),
          ("outputPower", 32),
          ("outputPowerAvg", 33),
          ("outputPowerMax", 34),
          ("outputPowerMin", 35))
    )


class CfprApEquipmentPsuStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ambientTemp", 0),
          ("ambientTempAvg", 1),
          ("ambientTempMax", 2),
          ("ambientTempMin", 3),
          ("fanSpeed", 4),
          ("fanSpeedAvg", 5),
          ("fanSpeedMax", 6),
          ("fanSpeedMin", 7),
          ("input210v", 8),
          ("input210vAvg", 9),
          ("input210vMax", 10),
          ("input210vMin", 11),
          ("inputCurrent", 12),
          ("inputCurrentAvg", 13),
          ("inputCurrentMax", 14),
          ("inputCurrentMin", 15),
          ("inputPower", 16),
          ("inputPowerAvg", 17),
          ("inputPowerMax", 18),
          ("inputPowerMin", 19),
          ("output12v", 20),
          ("output12vAvg", 21),
          ("output12vMax", 22),
          ("output12vMin", 23),
          ("output3v3", 24),
          ("output3v3Avg", 25),
          ("output3v3Max", 26),
          ("output3v3Min", 27),
          ("outputCurrent", 28),
          ("outputCurrentAvg", 29),
          ("outputCurrentMax", 30),
          ("outputCurrentMin", 31),
          ("outputPower", 32),
          ("outputPowerAvg", 33),
          ("outputPowerMax", 34),
          ("outputPowerMin", 35))
    )


class CfprApEquipmentPsuVoltageType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ac", 1),
          ("dc", 2),
          ("dv", 3),
          ("hvdc", 4))
    )



class CfprApEquipmentRackUnitFanStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("speed", 0),
          ("speedAvg", 1),
          ("speedMax", 2),
          ("speedMin", 3))
    )


class CfprApEquipmentRackUnitFanStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("speed", 0),
          ("speedAvg", 1),
          ("speedMax", 2),
          ("speedMin", 3))
    )


class CfprApEquipmentRackUnitPsuStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ambientTemp", 0),
          ("ambientTempAvg", 1),
          ("ambientTempMax", 2),
          ("ambientTempMin", 3),
          ("inputPower", 4),
          ("inputPowerAvg", 5),
          ("inputPowerMax", 6),
          ("inputPowerMin", 7),
          ("inputVoltage", 8),
          ("inputVoltageAvg", 9),
          ("inputVoltageMax", 10),
          ("inputVoltageMin", 11),
          ("outputCurrent", 12),
          ("outputCurrentAvg", 13),
          ("outputCurrentMax", 14),
          ("outputCurrentMin", 15),
          ("outputPower", 16),
          ("outputPowerAvg", 17),
          ("outputPowerMax", 18),
          ("outputPowerMin", 19),
          ("outputVoltage", 20),
          ("outputVoltageAvg", 21),
          ("outputVoltageMax", 22),
          ("outputVoltageMin", 23))
    )


class CfprApEquipmentRackUnitPsuStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ambientTemp", 0),
          ("ambientTempAvg", 1),
          ("ambientTempMax", 2),
          ("ambientTempMin", 3),
          ("inputPower", 4),
          ("inputPowerAvg", 5),
          ("inputPowerMax", 6),
          ("inputPowerMin", 7),
          ("inputVoltage", 8),
          ("inputVoltageAvg", 9),
          ("inputVoltageMax", 10),
          ("inputVoltageMin", 11),
          ("outputCurrent", 12),
          ("outputCurrentAvg", 13),
          ("outputCurrentMax", 14),
          ("outputCurrentMin", 15),
          ("outputPower", 16),
          ("outputPowerAvg", 17),
          ("outputPowerMax", 18),
          ("outputPowerMin", 19),
          ("outputVoltage", 20),
          ("outputVoltageAvg", 21),
          ("outputVoltageMax", 22),
          ("outputVoltageMin", 23))
    )


class CfprApEquipmentRemovalConditions(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("notApplicable", 2),
          ("removableWhenOff", 3),
          ("removableWhenOnOrOff", 4))
    )



class CfprApEquipmentResetOn(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("update", 1),
          ("activate", 2))
    )



class CfprApEquipmentSecureBios(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("notSupported", 1),
          ("supported", 2))
    )



class CfprApEquipmentSensorThresholdStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              100)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ok", 1),
          ("upperNonRecoverable", 2),
          ("upperCritical", 3),
          ("upperNonCritical", 4),
          ("lowerNonCritical", 5),
          ("lowerCritical", 6),
          ("lowerNonRecoverable", 7),
          ("notSupported", 100))
    )



class CfprApEquipmentSlotArrayLocation(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("front", 1),
          ("back", 2),
          ("top", 3),
          ("bottom", 4),
          ("left", 5),
          ("right", 6))
    )



class CfprApEquipmentSlotArrayOrientation(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("vertical", 1),
          ("horizontal", 2))
    )



class CfprApEquipmentSlotArraySelector(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("psu", 1),
          ("fan", 2),
          ("iocard", 3),
          ("diskSlot", 5),
          ("driveSlot", 6),
          ("usbPort", 7),
          ("ethernetPort", 8),
          ("comPort", 9),
          ("parPort", 10),
          ("vgaPort", 11),
          ("dviPort", 12),
          ("keyboardPort", 13),
          ("mousePort", 14),
          ("gem", 15),
          ("blade", 16))
    )



class CfprApEquipmentSlotSpanOrientation(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("inline", 1),
          ("transverse", 2))
    )



class CfprApEquipmentSlotStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              20,
              21,
              22,
              30,
              40)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("empty", 1),
          ("equipped", 10),
          ("missing", 11),
          ("mismatch", 12),
          ("equippedNotPrimary", 13),
          ("equippedSlave", 14),
          ("mismatchSlave", 15),
          ("missingSlave", 16),
          ("equippedIdentityUnestablishable", 20),
          ("mismatchIdentityUnestablishable", 21),
          ("equippedWithMalformedFru", 22),
          ("inaccessible", 30),
          ("unauthorized", 40))
    )



class CfprApEquipmentStorageMethod(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("singleFlash", 1),
          ("dualFlash", 2))
    )



class CfprApEquipmentSwitchIOCardId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )



class CfprApEquipmentSwitchIOCardFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              219,
              222)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("fePresence", 219),
          ("feConn", 222))
    )



class CfprApEquipmentSwitchIOCardFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              219,
              220,
              221,
              222,
              223,
              224,
              580,
              581,
              582,
              583)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("fePresenceBegin", 219),
          ("fePresenceCheckLicense", 220),
          ("fePresenceIdentify", 221),
          ("feConnBegin", 222),
          ("feConnConfigureSwMgmtEndPoint", 223),
          ("feConnConfigureVifNs", 224),
          ("feConnFail", 580),
          ("feConnSuccess", 581),
          ("fePresenceFail", 582),
          ("fePresenceSuccess", 583))
    )



class CfprApEquipmentTpmType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("physical", 1),
          ("virtual", 2))
    )



class CfprApEquipmentUnifiedPortAlgorithm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("slideRuleEthFirstDoubleRow", 1),
          ("unrestricted", 2),
          ("slideRuleEthFirstSingleRow", 3),
          ("slideRuleFcFirstDoubleRow", 4),
          ("slideRuleFcFirstSingleRow", 5))
    )



class CfprApEquipmentUuidFeatureCapUuidSupportMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("loose", 1),
          ("strict", 2))
    )



class CfprApEquipmentXcvrId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )



class CfprApEquipmentXcvrType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              40,
              41,
              42,
              43,
              50,
              51,
              52,
              55,
              56,
              57,
              253,
              254,
              255)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("n1gcx", 1),
          ("n1gsx", 2),
          ("n1glx", 3),
          ("n1gex", 4),
          ("n1gzx", 5),
          ("n1gns", 6),
          ("n1gt", 7),
          ("n100mbase", 10),
          ("n10gsr", 11),
          ("n10ger", 12),
          ("n10glr", 13),
          ("n10glrm", 14),
          ("n10glrmSm", 15),
          ("n10gzr", 16),
          ("n10gpasCx11", 20),
          ("n10gpasCx12", 21),
          ("n10gpasCx13", 22),
          ("n10gpasCx14", 23),
          ("n10gpasCx15", 24),
          ("n10gpasCx16", 25),
          ("n10gpasCx17", 26),
          ("n10gpasCx11s", 27),
          ("n10gpasCx1", 28),
          ("n10gactCx11", 30),
          ("n10gactCx13", 31),
          ("n10gactCx15", 32),
          ("n10gactCx17", 33),
          ("n10gactCx11s", 34),
          ("n10gactCx1", 35),
          ("n10gactLimitCx1", 36),
          ("h10gcu1m", 40),
          ("h10gcu3m", 41),
          ("h10gcu5m", 42),
          ("h10gcu7m", 43),
          ("n10gcx11s", 50),
          ("n10glbx1", 51),
          ("n10gusr", 52),
          ("n10gelpbk", 55),
          ("n10gelpbkCr", 56),
          ("n10gelpbkBer", 57),
          ("fet", 253),
          ("sfp", 254),
          ("unknown", 255))
    )



class CfprApEquipmentCType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("sas", 0),
          ("flash", 1))
    )



class CfprApEquipmentFabricEpType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("chassis", 1),
          ("fex", 2),
          ("blade", 3),
          ("rackUnit", 4))
    )



class CfprApEtherCIoEpIfType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("physical", 1),
          ("aggregation", 2),
          ("virtual", 3),
          ("fabric", 4))
    )



class CfprApEtherCloudType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unclassified", 1),
          ("lan", 2),
          ("san", 3))
    )



class CfprApEtherErrStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("alignDelta", 0),
          ("alignDeltaAvg", 1),
          ("alignDeltaMax", 2),
          ("alignDeltaMin", 3),
          ("deferredTxDelta", 4),
          ("deferredTxDeltaAvg", 5),
          ("deferredTxDeltaMax", 6),
          ("deferredTxDeltaMin", 7),
          ("fcsDelta", 8),
          ("fcsDeltaAvg", 9),
          ("fcsDeltaMax", 10),
          ("fcsDeltaMin", 11),
          ("intMacRxDelta", 12),
          ("intMacRxDeltaAvg", 13),
          ("intMacRxDeltaMax", 14),
          ("intMacRxDeltaMin", 15),
          ("intMacTxDelta", 16),
          ("intMacTxDeltaAvg", 17),
          ("intMacTxDeltaMax", 18),
          ("intMacTxDeltaMin", 19),
          ("outDiscardDelta", 20),
          ("outDiscardDeltaAvg", 21),
          ("outDiscardDeltaMax", 22),
          ("outDiscardDeltaMin", 23),
          ("rcvDelta", 24),
          ("rcvDeltaAvg", 25),
          ("rcvDeltaMax", 26),
          ("rcvDeltaMin", 27),
          ("underSizeDelta", 28),
          ("underSizeDeltaAvg", 29),
          ("underSizeDeltaMax", 30),
          ("underSizeDeltaMin", 31),
          ("xmitDelta", 32),
          ("xmitDeltaAvg", 33),
          ("xmitDeltaMax", 34),
          ("xmitDeltaMin", 35))
    )


class CfprApEtherErrStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("alignDelta", 0),
          ("alignDeltaAvg", 1),
          ("alignDeltaMax", 2),
          ("alignDeltaMin", 3),
          ("deferredTxDelta", 4),
          ("deferredTxDeltaAvg", 5),
          ("deferredTxDeltaMax", 6),
          ("deferredTxDeltaMin", 7),
          ("fcsDelta", 8),
          ("fcsDeltaAvg", 9),
          ("fcsDeltaMax", 10),
          ("fcsDeltaMin", 11),
          ("intMacRxDelta", 12),
          ("intMacRxDeltaAvg", 13),
          ("intMacRxDeltaMax", 14),
          ("intMacRxDeltaMin", 15),
          ("intMacTxDelta", 16),
          ("intMacTxDeltaAvg", 17),
          ("intMacTxDeltaMax", 18),
          ("intMacTxDeltaMin", 19),
          ("outDiscardDelta", 20),
          ("outDiscardDeltaAvg", 21),
          ("outDiscardDeltaMax", 22),
          ("outDiscardDeltaMin", 23),
          ("rcvDelta", 24),
          ("rcvDeltaAvg", 25),
          ("rcvDeltaMax", 26),
          ("rcvDeltaMin", 27),
          ("underSizeDelta", 28),
          ("underSizeDeltaAvg", 29),
          ("underSizeDeltaMax", 30),
          ("underSizeDeltaMin", 31),
          ("xmitDelta", 32),
          ("xmitDeltaAvg", 33),
          ("xmitDeltaMax", 34),
          ("xmitDeltaMin", 35))
    )


class CfprApEtherExternalEpAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApEtherExternalEpLocale(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("server", 0),
          ("chassis", 1),
          ("internal", 2),
          ("external", 3))
    )


class CfprApEtherExternalPcAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApEtherExternalPcLocale(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("server", 0),
          ("chassis", 1),
          ("internal", 2),
          ("external", 3))
    )


class CfprApEtherFcoeInterfaceStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("bytesRxDelta", 0),
          ("bytesRxDeltaAvg", 1),
          ("bytesRxDeltaMax", 2),
          ("bytesRxDeltaMin", 3),
          ("bytesTxDelta", 4),
          ("bytesTxDeltaAvg", 5),
          ("bytesTxDeltaMax", 6),
          ("bytesTxDeltaMin", 7),
          ("droppedRxDelta", 8),
          ("droppedRxDeltaAvg", 9),
          ("droppedRxDeltaMax", 10),
          ("droppedRxDeltaMin", 11),
          ("droppedTxDelta", 12),
          ("droppedTxDeltaAvg", 13),
          ("droppedTxDeltaMax", 14),
          ("droppedTxDeltaMin", 15),
          ("errorsRxDelta", 16),
          ("errorsRxDeltaAvg", 17),
          ("errorsRxDeltaMax", 18),
          ("errorsRxDeltaMin", 19),
          ("errorsTxDelta", 20),
          ("errorsTxDeltaAvg", 21),
          ("errorsTxDeltaMax", 22),
          ("errorsTxDeltaMin", 23),
          ("packetsRxDelta", 24),
          ("packetsRxDeltaAvg", 25),
          ("packetsRxDeltaMax", 26),
          ("packetsRxDeltaMin", 27),
          ("packetsTxDelta", 28),
          ("packetsTxDeltaAvg", 29),
          ("packetsTxDeltaMax", 30),
          ("packetsTxDeltaMin", 31))
    )


class CfprApEtherFcoeInterfaceStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("bytesRxDelta", 0),
          ("bytesRxDeltaAvg", 1),
          ("bytesRxDeltaMax", 2),
          ("bytesRxDeltaMin", 3),
          ("bytesTxDelta", 4),
          ("bytesTxDeltaAvg", 5),
          ("bytesTxDeltaMax", 6),
          ("bytesTxDeltaMin", 7),
          ("droppedRxDelta", 8),
          ("droppedRxDeltaAvg", 9),
          ("droppedRxDeltaMax", 10),
          ("droppedRxDeltaMin", 11),
          ("droppedTxDelta", 12),
          ("droppedTxDeltaAvg", 13),
          ("droppedTxDeltaMax", 14),
          ("droppedTxDeltaMin", 15),
          ("errorsRxDelta", 16),
          ("errorsRxDeltaAvg", 17),
          ("errorsRxDeltaMax", 18),
          ("errorsRxDeltaMin", 19),
          ("errorsTxDelta", 20),
          ("errorsTxDeltaAvg", 21),
          ("errorsTxDeltaMax", 22),
          ("errorsTxDeltaMin", 23),
          ("packetsRxDelta", 24),
          ("packetsRxDeltaAvg", 25),
          ("packetsRxDeltaMax", 26),
          ("packetsRxDeltaMin", 27),
          ("packetsTxDelta", 28),
          ("packetsTxDeltaAvg", 29),
          ("packetsTxDeltaMax", 30),
          ("packetsTxDeltaMin", 31))
    )


class CfprApEtherFtwOperMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("noBypass", 0),
          ("bypassReq", 2),
          ("bypassWdt", 3),
          ("bypassPwr", 4))
    )



class CfprApEtherFtwPortPairMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("standby", 1),
          ("bypass", 2))
    )



class CfprApEtherFtwPortPairWdtState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApEtherFtwPortPairFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              315)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configFtw", 315))
    )



class CfprApEtherFtwPortPairFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              315,
              316,
              590,
              591)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configFtwBegin", 315),
          ("configFtwConfigure", 316),
          ("configFtwFail", 590),
          ("configFtwSuccess", 591))
    )



class CfprApEtherFtwPortPairFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              315)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configFtw", 315))
    )



class CfprApEtherIntFIoEpType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApEtherInternalPcLocale(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("server", 0),
          ("chassis", 1),
          ("internal", 2),
          ("external", 3))
    )


class CfprApEtherLossStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("sqetestDelta", 0),
          ("sqetestDeltaAvg", 1),
          ("sqetestDeltaMax", 2),
          ("sqetestDeltaMin", 3),
          ("carrierSenseDelta", 4),
          ("carrierSenseDeltaAvg", 5),
          ("carrierSenseDeltaMax", 6),
          ("carrierSenseDeltaMin", 7),
          ("excessCollisionDelta", 8),
          ("excessCollisionDeltaAvg", 9),
          ("excessCollisionDeltaMax", 10),
          ("excessCollisionDeltaMin", 11),
          ("giantsDelta", 12),
          ("giantsDeltaAvg", 13),
          ("giantsDeltaMax", 14),
          ("giantsDeltaMin", 15),
          ("lateCollisionDelta", 16),
          ("lateCollisionDeltaAvg", 17),
          ("lateCollisionDeltaMax", 18),
          ("lateCollisionDeltaMin", 19),
          ("multiCollisionDelta", 20),
          ("multiCollisionDeltaAvg", 21),
          ("multiCollisionDeltaMax", 22),
          ("multiCollisionDeltaMin", 23),
          ("singleCollisionDelta", 24),
          ("singleCollisionDeltaAvg", 25),
          ("singleCollisionDeltaMax", 26),
          ("singleCollisionDeltaMin", 27),
          ("symbolDelta", 28),
          ("symbolDeltaAvg", 29),
          ("symbolDeltaMax", 30),
          ("symbolDeltaMin", 31))
    )


class CfprApEtherLossStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("sqetestDelta", 0),
          ("sqetestDeltaAvg", 1),
          ("sqetestDeltaMax", 2),
          ("sqetestDeltaMin", 3),
          ("carrierSenseDelta", 4),
          ("carrierSenseDeltaAvg", 5),
          ("carrierSenseDeltaMax", 6),
          ("carrierSenseDeltaMin", 7),
          ("excessCollisionDelta", 8),
          ("excessCollisionDeltaAvg", 9),
          ("excessCollisionDeltaMax", 10),
          ("excessCollisionDeltaMin", 11),
          ("giantsDelta", 12),
          ("giantsDeltaAvg", 13),
          ("giantsDeltaMax", 14),
          ("giantsDeltaMin", 15),
          ("lateCollisionDelta", 16),
          ("lateCollisionDeltaAvg", 17),
          ("lateCollisionDeltaMax", 18),
          ("lateCollisionDeltaMin", 19),
          ("multiCollisionDelta", 20),
          ("multiCollisionDeltaAvg", 21),
          ("multiCollisionDeltaMax", 22),
          ("multiCollisionDeltaMin", 23),
          ("singleCollisionDelta", 24),
          ("singleCollisionDeltaAvg", 25),
          ("singleCollisionDeltaMax", 26),
          ("singleCollisionDeltaMin", 27),
          ("symbolDelta", 28),
          ("symbolDeltaAvg", 29),
          ("symbolDeltaMax", 30),
          ("symbolDeltaMin", 31))
    )


class CfprApEtherNiErrStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("crcDelta", 0),
          ("crcDeltaAvg", 1),
          ("crcDeltaMax", 2),
          ("crcDeltaMin", 3),
          ("frameTxDelta", 4),
          ("frameTxDeltaAvg", 5),
          ("frameTxDeltaMax", 6),
          ("frameTxDeltaMin", 7),
          ("inRangeDelta", 8),
          ("inRangeDeltaAvg", 9),
          ("inRangeDeltaMax", 10),
          ("inRangeDeltaMin", 11),
          ("tooLongDelta", 12),
          ("tooLongDeltaAvg", 13),
          ("tooLongDeltaMax", 14),
          ("tooLongDeltaMin", 15),
          ("tooShortDelta", 16),
          ("tooShortDeltaAvg", 17),
          ("tooShortDeltaMax", 18),
          ("tooShortDeltaMin", 19))
    )


class CfprApEtherNiErrStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("crcDelta", 0),
          ("crcDeltaAvg", 1),
          ("crcDeltaMax", 2),
          ("crcDeltaMin", 3),
          ("frameTxDelta", 4),
          ("frameTxDeltaAvg", 5),
          ("frameTxDeltaMax", 6),
          ("frameTxDeltaMin", 7),
          ("inRangeDelta", 8),
          ("inRangeDeltaAvg", 9),
          ("inRangeDeltaMax", 10),
          ("inRangeDeltaMin", 11),
          ("tooLongDelta", 12),
          ("tooLongDeltaAvg", 13),
          ("tooLongDeltaMax", 14),
          ("tooLongDeltaMin", 15),
          ("tooShortDelta", 16),
          ("tooShortDeltaAvg", 17),
          ("tooShortDeltaMax", 18),
          ("tooShortDeltaMin", 19))
    )


class CfprApEtherPIoEpIfType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("physical", 1),
          ("aggregation", 2),
          ("virtual", 3),
          ("fabric", 4))
    )



class CfprApEtherPIoFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              235,
              237)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("inCompatSfpPresence", 235),
          ("inCompatSfpReplaced", 237))
    )



class CfprApEtherPIoFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              235,
              236,
              237,
              238,
              732,
              733,
              734,
              735)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("inCompatSfpPresenceBegin", 235),
          ("inCompatSfpPresenceShutdown", 236),
          ("inCompatSfpReplacedBegin", 237),
          ("inCompatSfpReplacedEnablePort", 238),
          ("inCompatSfpPresenceFail", 732),
          ("inCompatSfpPresenceSuccess", 733),
          ("inCompatSfpReplacedFail", 734),
          ("inCompatSfpReplacedSuccess", 735))
    )



class CfprApEtherPauseStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("recvPauseDelta", 0),
          ("recvPauseDeltaAvg", 1),
          ("recvPauseDeltaMax", 2),
          ("recvPauseDeltaMin", 3),
          ("resetsDelta", 4),
          ("resetsDeltaAvg", 5),
          ("resetsDeltaMax", 6),
          ("resetsDeltaMin", 7),
          ("xmitPauseDelta", 8),
          ("xmitPauseDeltaAvg", 9),
          ("xmitPauseDeltaMax", 10),
          ("xmitPauseDeltaMin", 11))
    )


class CfprApEtherPauseStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("recvPauseDelta", 0),
          ("recvPauseDeltaAvg", 1),
          ("recvPauseDeltaMax", 2),
          ("recvPauseDeltaMin", 3),
          ("resetsDelta", 4),
          ("resetsDeltaAvg", 5),
          ("resetsDeltaMax", 6),
          ("resetsDeltaMin", 7),
          ("xmitPauseDelta", 8),
          ("xmitPauseDeltaAvg", 9),
          ("xmitPauseDeltaMax", 10),
          ("xmitPauseDeltaMin", 11))
    )


class CfprApEtherRxStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("broadcastPacketsDelta", 0),
          ("broadcastPacketsDeltaAvg", 1),
          ("broadcastPacketsDeltaMax", 2),
          ("broadcastPacketsDeltaMin", 3),
          ("jumboPacketsDelta", 4),
          ("jumboPacketsDeltaAvg", 5),
          ("jumboPacketsDeltaMax", 6),
          ("jumboPacketsDeltaMin", 7),
          ("multicastPacketsDelta", 8),
          ("multicastPacketsDeltaAvg", 9),
          ("multicastPacketsDeltaMax", 10),
          ("multicastPacketsDeltaMin", 11),
          ("totalBytesDelta", 12),
          ("totalBytesDeltaAvg", 13),
          ("totalBytesDeltaMax", 14),
          ("totalBytesDeltaMin", 15),
          ("totalPacketsDelta", 16),
          ("totalPacketsDeltaAvg", 17),
          ("totalPacketsDeltaMax", 18),
          ("totalPacketsDeltaMin", 19),
          ("unicastPacketsDelta", 20),
          ("unicastPacketsDeltaAvg", 21),
          ("unicastPacketsDeltaMax", 22),
          ("unicastPacketsDeltaMin", 23))
    )


class CfprApEtherRxStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("broadcastPacketsDelta", 0),
          ("broadcastPacketsDeltaAvg", 1),
          ("broadcastPacketsDeltaMax", 2),
          ("broadcastPacketsDeltaMin", 3),
          ("jumboPacketsDelta", 4),
          ("jumboPacketsDeltaAvg", 5),
          ("jumboPacketsDeltaMax", 6),
          ("jumboPacketsDeltaMin", 7),
          ("multicastPacketsDelta", 8),
          ("multicastPacketsDeltaAvg", 9),
          ("multicastPacketsDeltaMax", 10),
          ("multicastPacketsDeltaMin", 11),
          ("totalBytesDelta", 12),
          ("totalBytesDeltaAvg", 13),
          ("totalBytesDeltaMax", 14),
          ("totalBytesDeltaMin", 15),
          ("totalPacketsDelta", 16),
          ("totalPacketsDeltaAvg", 17),
          ("totalPacketsDeltaMax", 18),
          ("totalPacketsDeltaMin", 19),
          ("unicastPacketsDelta", 20),
          ("unicastPacketsDeltaAvg", 21),
          ("unicastPacketsDeltaMax", 22),
          ("unicastPacketsDeltaMin", 23))
    )


class CfprApEtherSatelliteConnectionDisc(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("absent", 0),
          ("present", 1),
          ("misConnect", 2),
          ("missing", 3),
          ("new", 4))
    )



class CfprApEtherServerIntFIoAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApEtherServerIntFIoIfRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApEtherServerIntFIoLocale(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("server", 0),
          ("chassis", 1),
          ("internal", 2),
          ("external", 3))
    )


class CfprApEtherServerIntFIoTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApEtherServerIntFIoType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApEtherServerIntFIoFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              313)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configSpeed", 313))
    )



class CfprApEtherServerIntFIoFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              313,
              314,
              592,
              593)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configSpeedBegin", 313),
          ("configSpeedConfigure", 314),
          ("configSpeedFail", 592),
          ("configSpeedSuccess", 593))
    )



class CfprApEtherServerIntFIoFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              313)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configSpeed", 313))
    )



class CfprApEtherServerIntFIoPcIfRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApEtherServerIntFIoPcPortId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1024, 4096),
    )



class CfprApEtherServerIntFIoPcTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApEtherServerIntFIoPcType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApEtherServerIntFIoPcEpIfRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApEtherServerIntFIoPcEpPortId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 33),
    )



class CfprApEtherSwitchIntFIoAck(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("unInitialized", 0),
          ("unAcknowledged", 1),
          ("unsupportedConnectivity", 2),
          ("ok", 3),
          ("removing", 4),
          ("ackInProgress", 6),
          ("evaluation", 7),
          ("acknowledged", 8),
          ("autoAck", 9))
    )



class CfprApEtherSwitchIntFIoIfRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApEtherSwitchIntFIoLocale(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("server", 0),
          ("chassis", 1),
          ("internal", 2),
          ("external", 3))
    )


class CfprApEtherSwitchIntFIoTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApEtherSwitchIntFIoType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApEtherSwitchIntFIoPcIfRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApEtherSwitchIntFIoPcPortId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1024, 4096),
    )



class CfprApEtherSwitchIntFIoPcTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApEtherSwitchIntFIoPcType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApEtherSwitchIntFIoPcEpIfRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApEtherSwitchIntFIoPcEpPortId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )



class CfprApEtherTxStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("broadcastPacketsDelta", 0),
          ("broadcastPacketsDeltaAvg", 1),
          ("broadcastPacketsDeltaMax", 2),
          ("broadcastPacketsDeltaMin", 3),
          ("jumboPacketsDelta", 4),
          ("jumboPacketsDeltaAvg", 5),
          ("jumboPacketsDeltaMax", 6),
          ("jumboPacketsDeltaMin", 7),
          ("multicastPacketsDelta", 8),
          ("multicastPacketsDeltaAvg", 9),
          ("multicastPacketsDeltaMax", 10),
          ("multicastPacketsDeltaMin", 11),
          ("totalBytesDelta", 12),
          ("totalBytesDeltaAvg", 13),
          ("totalBytesDeltaMax", 14),
          ("totalBytesDeltaMin", 15),
          ("totalPacketsDelta", 16),
          ("totalPacketsDeltaAvg", 17),
          ("totalPacketsDeltaMax", 18),
          ("totalPacketsDeltaMin", 19),
          ("unicastPacketsDelta", 20),
          ("unicastPacketsDeltaAvg", 21),
          ("unicastPacketsDeltaMax", 22),
          ("unicastPacketsDeltaMin", 23))
    )


class CfprApEtherTxStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("broadcastPacketsDelta", 0),
          ("broadcastPacketsDeltaAvg", 1),
          ("broadcastPacketsDeltaMax", 2),
          ("broadcastPacketsDeltaMin", 3),
          ("jumboPacketsDelta", 4),
          ("jumboPacketsDeltaAvg", 5),
          ("jumboPacketsDeltaMax", 6),
          ("jumboPacketsDeltaMin", 7),
          ("multicastPacketsDelta", 8),
          ("multicastPacketsDeltaAvg", 9),
          ("multicastPacketsDeltaMax", 10),
          ("multicastPacketsDeltaMin", 11),
          ("totalBytesDelta", 12),
          ("totalBytesDeltaAvg", 13),
          ("totalBytesDeltaMax", 14),
          ("totalBytesDeltaMin", 15),
          ("totalPacketsDelta", 16),
          ("totalPacketsDeltaAvg", 17),
          ("totalPacketsDeltaMax", 18),
          ("totalPacketsDeltaMin", 19),
          ("unicastPacketsDelta", 20),
          ("unicastPacketsDeltaAvg", 21),
          ("unicastPacketsDeltaMax", 22),
          ("unicastPacketsDeltaMin", 23))
    )


class CfprApEventEpCtrlLevel(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("cleared", 0),
          ("info", 1),
          ("condition", 2),
          ("warning", 3),
          ("minor", 4),
          ("major", 5),
          ("critical", 6))
    )



class CfprApExtmgmtArpTargetsMaxDeadlineTimeout(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 15),
    )



class CfprApExtmgmtArpTargetsNumberOfArpRequests(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )



class CfprApExtmgmtGatewayPingMaxDeadlineTimeout(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 15),
    )



class CfprApExtmgmtGatewayPingNumberOfPingRequests(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )



class CfprApExtmgmtIfType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApExtmgmtIfMonPolicyAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApExtmgmtIfMonPolicyMonitorMechanism(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("miiStatus", 0),
          ("arpTargetPing", 1),
          ("gatewayPing", 2))
    )



class CfprApExtmgmtMiiStatusMaxRetryCount(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )



class CfprApExtmgmtMiiStatusRetryInterval(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 10),
    )



class CfprApExtmgmtNdiscTargetsMaxDeadlineTimeout(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 15),
    )



class CfprApExtmgmtNdiscTargetsNumberOfNdiscRequests(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )



class CfprApExtpolAppCapability(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("serviceReg", 0),
          ("identifierMgr", 1),
          ("operationMgr", 2),
          ("resourceMgr", 3),
          ("virtualSwitchingMgr", 4),
          ("policyMgr", 5),
          ("bootMgr", 6),
          ("vmMgr", 7),
          ("vmAdmin", 8),
          ("infraCryptoOffloa", 9),
          ("vmm", 10),
          ("vmVasw", 11),
          ("vmFw", 12),
          ("vmSlb", 13),
          ("infraFw", 14),
          ("infraSlb", 15),
          ("ipam", 16),
          ("pcm", 17),
          ("infraAggr", 18),
          ("infraWas", 19),
          ("infraWaf", 20),
          ("infraPasw", 21),
          ("infraPdsw", 22),
          ("storageBroker", 23),
          ("orgMgr", 24),
          ("statsMgr", 25),
          ("centralMgr", 26))
    )


class CfprApExtpolConnProtocol(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ipv4", 0),
          ("ipv6", 1),
          ("unknown", 2))
    )



class CfprApExtpolConnType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              18)
        )
    )
    namedValues = NamedValues(
        *(("serviceReg", 2),
          ("identifierMgr", 3),
          ("operationMgr", 4),
          ("resourceMgr", 5),
          ("statsMgr", 6),
          ("centralMgr", 7),
          ("virtualSwitchingMgr", 8),
          ("policyMgr", 9),
          ("bootMgr", 10),
          ("vmMgr", 11),
          ("managedEndpoint", 12),
          ("mgmtController", 13),
          ("storageBroker", 14),
          ("resourceAggr", 15),
          ("ape", 18))
    )



class CfprApExtpolConnectorOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("unregistered", 0),
          ("lostVisibility", 1),
          ("registering", 2),
          ("synchronizing", 3),
          ("registered", 4),
          ("versionMismatch", 5),
          ("registryNotReachable", 6))
    )



class CfprApExtpolEpFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              317,
              496)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("registerFsm", 317),
          ("repairCert", 496))
    )



class CfprApExtpolEpFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              317,
              318,
              496,
              497,
              498,
              499,
              500,
              501,
              594,
              595,
              596,
              597)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("registerFsmBegin", 317),
          ("registerFsmExecute", 318),
          ("repairCertBegin", 496),
          ("repairCertVerifyGuid", 497),
          ("repairCertUnregister", 498),
          ("repairCertCleanOldData", 499),
          ("repairCertRequest", 500),
          ("repairCertVerify", 501),
          ("registerFsmFail", 594),
          ("registerFsmSuccess", 595),
          ("repairCertFail", 596),
          ("repairCertSuccess", 597))
    )



class CfprApExtpolEpFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              317,
              496)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("registerFsm", 317),
          ("repairCert", 496))
    )



class CfprApExtpolProviderFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              462)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("reportConfigImport", 462))
    )



class CfprApExtpolProviderFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              462,
              463,
              598,
              599)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("reportConfigImportBegin", 462),
          ("reportConfigImportReport", 463),
          ("reportConfigImportFail", 598),
          ("reportConfigImportSuccess", 599))
    )



class CfprApExtpolProviderFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              462)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("reportConfigImport", 462))
    )



class CfprApExtpolRegistryFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              319,
              322)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("crossDomainConfig", 319),
          ("crossDomainDelete", 322))
    )



class CfprApExtpolRegistryFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              319,
              320,
              321,
              322,
              323,
              324,
              600,
              601,
              602,
              603)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("crossDomainConfigBegin", 319),
          ("crossDomainConfigSetLocal", 320),
          ("crossDomainConfigSetPeer", 321),
          ("crossDomainDeleteBegin", 322),
          ("crossDomainDeleteSetLocal", 323),
          ("crossDomainDeleteSetPeer", 324),
          ("crossDomainConfigFail", 600),
          ("crossDomainConfigSuccess", 601),
          ("crossDomainDeleteFail", 602),
          ("crossDomainDeleteSuccess", 603))
    )



class CfprApExtpolRegistryFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              319,
              322)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("crossDomainConfig", 319),
          ("crossDomainDelete", 322))
    )



class CfprApExtpolState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("licenseOk", 1),
          ("licenseInsufficient", 2),
          ("licenseGraceperiod", 3),
          ("licenseExpired", 4),
          ("notApplicable", 5))
    )



class CfprApExtpolSuspendState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )



class CfprApExtvmmFabricNetworkType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notConnected", 0),
          ("notConnectedPvlans", 1),
          ("connected", 2))
    )



class CfprApExtvmmNetworkSetConfigQualifier(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("normal", 0),
          ("duplicateVmndReference", 1))
    )



class CfprApExtvmmOwnership(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("discovered", 1),
          ("managed", 2))
    )



class CfprApExtvmmRefOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("up", 0),
          ("invalidReference", 1))
    )



class CfprApExtvmmVcVersion(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("kl", 1),
          ("klU1", 2))
    )



class CfprApExtvmmVnicType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              4,
              8,
              16)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ether", 1),
          ("fc", 4),
          ("scsi", 8),
          ("ipc", 16))
    )



class CfprApExtvmmProviderVendorType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("vmware", 1),
          ("microsoft", 2))
    )



class CfprApFabricADceSwSrvEpTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricAEthEstcEpIfRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApFabricAEthEstcEpTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricAEthEstcEpType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricAEthLanEpTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricAFcEstcEpTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricAFcEstcEpType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricAFcSanEpTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricAFcoeEstcEpIfRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApFabricAFcoeEstcEpTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricAFcoeEstcEpType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricAFcoeSanEpTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricAVlanAssocPrimaryVlanSwitchId(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("a", 1),
          ("b", 2))
    )



class CfprApFabricAVlanSharing(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("primary", 1),
          ("isolated", 2),
          ("community", 3))
    )



class CfprApFabricAVlanTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricAVlanType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricAVsanTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricAVsanType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricAccessType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1))
    )



class CfprApFabricAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApFabricBHVlanSwitchId(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("a", 1),
          ("b", 2),
          ("dual", 3))
    )



class CfprApFabricBladeLifeCycle(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("inService", 1),
          ("outOfService", 2),
          ("outOfServiceSlave", 3))
    )



class CfprApFabricBreakoutPortId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )



class CfprApFabricBreakoutSlotId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 3),
    )



class CfprApFabricBreakoutType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("n10g4x", 1))
    )



class CfprApFabricCIoEpAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApFabricCIoEpIfType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("physical", 1),
          ("aggregation", 2),
          ("virtual", 3),
          ("fabric", 4))
    )



class CfprApFabricCdpLinkPolicyAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApFabricCloudType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ethlan", 0),
          ("ethestclan", 1),
          ("ethlanmon", 2),
          ("fcsan", 3),
          ("fcsanmon", 4),
          ("fcestc", 5))
    )


class CfprApFabricComputeEpIfRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApFabricComputeEpType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricComputePhEpAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2),
          ("remove", 3))
    )



class CfprApFabricComputeSlotEpSlotId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )



class CfprApFabricConfMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("logicalConfigInvalid", 1),
          ("validatingConf", 2),
          ("applyPhysTrans", 3),
          ("confSwitch", 4))
    )



class CfprApFabricConfState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("ok", 0),
          ("logicalConfigInvalid", 1))
    )



class CfprApFabricConfigState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("applied", 1),
          ("inconsistent", 2))
    )



class CfprApFabricDceSwSrvEpPortId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 48),
    )



class CfprApFabricDceSwSrvEpSlotId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )



class CfprApFabricDceSwSrvPcAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApFabricDceSwSrvPcPortId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1024, 4096),
    )



class CfprApFabricDceSwSrvPcTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricDceSwSrvPcEpPortId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 48),
    )



class CfprApFabricDceSwSrvPcEpSlotId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )



class CfprApFabricDefaultZoningState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApFabricDirection(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("receive", 1),
          ("transmit", 2))
    )



class CfprApFabricEpMgrFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              455)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configure", 455))
    )



class CfprApFabricEpMgrFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              455,
              456,
              457,
              458,
              459,
              604,
              605)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configureBegin", 455),
          ("configureValidateConfiguration", 456),
          ("configureApplyPhysical", 457),
          ("configureWaitOnPhys", 458),
          ("configureApplyConfig", 459),
          ("configureFail", 604),
          ("configureSuccess", 605))
    )



class CfprApFabricEpMgrFsmTaskFlags(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("samDmeFabricEpMgrConfigurePhysChange", 26),
          ("samDmeFabricEpMgrConfigureModification", 27),
          ("samDmeFabricEpMgrConfigureEthServerConfig", 28),
          ("samDmeFabricEpMgrConfigureEthUplinkConfig", 29),
          ("samDmeFabricEpMgrConfigureFcUplinkConfig", 30),
          ("samDmeFabricEpMgrConfigureEthStorageConfig", 31),
          ("samDmeFabricEpMgrConfigureFcStorageConfig", 32))
    )


class CfprApFabricEpMgrFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              455)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configure", 455))
    )



class CfprApFabricEpVlanVlanType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("regular", 0),
          ("default", 1),
          ("native", 2),
          ("fcoeuplinknative", 3))
    )



class CfprApFabricEstcEpIfRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApFabricEstcPcIfRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApFabricEstcPcType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricEthCdpPolicyProtocol(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("udld", 1),
          ("cdp", 2))
    )



class CfprApFabricEthEstcTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricEthEstcType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricEthEstcEpPortId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 48),
    )



class CfprApFabricEthEstcEpPrio(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("fc", 1),
          ("platinum", 2),
          ("gold", 3),
          ("silver", 4),
          ("bronze", 5),
          ("bestEffort", 6))
    )



class CfprApFabricEthEstcEpSlotId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )



class CfprApFabricEthEstcEpTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricEthEstcEpType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricEthEstcOperPortMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("regularTrunk", 1),
          ("regularAccess", 2),
          ("promiscuousTrunk", 3),
          ("promiscuousAccess", 4))
    )



class CfprApFabricEthEstcPcTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricEthEstcPcEpPortId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 48),
    )



class CfprApFabricEthEstcPcEpSlotId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )



class CfprApFabricEthEstcPortMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("trunk", 1),
          ("access", 2))
    )



class CfprApFabricEthFlowMonLanTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricEthFlowMonLanType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricEthFlowMonSourceType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("vnic", 1),
          ("portProfile", 2))
    )



class CfprApFabricEthFlowMonSrcRefType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricEthLanTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricEthLanEpAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApFabricEthLanEpSpeedCap(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("auto", 0),
          ("n1g", 1),
          ("n10g", 2),
          ("n20g", 3),
          ("n40g", 4),
          ("n100m", 7))
    )


class CfprApFabricEthLanEpVlanStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("ok", 0),
          ("missingPrimary", 1))
    )



class CfprApFabricEthLanFlowMonTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricEthLanFlowMonCollectorTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricEthLanFlowMonExporterTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricEthLanFlowMonSrcEpTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricEthLanFlowMonitorTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricEthLanFlowMonitoringType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ethFlowMonitoring", 1),
          ("span", 2))
    )



class CfprApFabricEthLanPcAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApFabricEthLanPcLacpDetach(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApFabricEthLanPcSpeedCap(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("auto", 0),
          ("n1g", 1),
          ("n10g", 2),
          ("n20g", 3),
          ("n40g", 4),
          ("n100m", 7))
    )


class CfprApFabricEthLanPcTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricEthLanPcVlanStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("ok", 0),
          ("missingPrimary", 1))
    )



class CfprApFabricEthLinkPolicyType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricEthMonTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricEthMonType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricEthMonDestEpAdminSpeed(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("indeterminate", 0),
          ("n1gbps", 1),
          ("n10gbps", 2),
          ("n20gbps", 3),
          ("n40gbps", 4))
    )



class CfprApFabricEthMonDestEpIfRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApFabricEthMonDestEpPortId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 48),
    )



class CfprApFabricEthMonDestEpSlotId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )



class CfprApFabricEthMonDestEpType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricEthMonFiltEpType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricEthMonFiltRefType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricEthMonLanTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricEthMonLanType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricEthMonSrcEpType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricEthMonSrcRefType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricEthPcProtocol(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("static", 1),
          ("lacp", 2))
    )



class CfprApFabricEthSourceType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              20)
        )
    )
    namedValues = NamedValues(
        *(("vnic", 1),
          ("uplinkPort", 2),
          ("vlan", 3),
          ("serverPort", 4),
          ("portChannel", 5),
          ("hostPort", 6),
          ("storage", 7),
          ("nasPort", 8),
          ("nasPortChannel", 9),
          ("fcoeuplinkPort", 10),
          ("fcoeuplinkPortchannel", 11),
          ("vmNic", 12),
          ("vhba", 20))
    )



class CfprApFabricEthTargetEpTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricEthUdldPolicyProtocol(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("udld", 1),
          ("cdp", 2))
    )



class CfprApFabricEthVlanPcTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricExternalLocale(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("server", 0),
          ("chassis", 1),
          ("internal", 2),
          ("external", 3))
    )


class CfprApFabricExternalEpAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApFabricExternalEpLocale(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("server", 0),
          ("chassis", 1),
          ("internal", 2),
          ("external", 3))
    )


class CfprApFabricExternalPcLocale(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("server", 0),
          ("chassis", 1),
          ("internal", 2),
          ("external", 3))
    )


class CfprApFabricFcEstcTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricFcEstcType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricFcEstcEpPortId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 48),
    )



class CfprApFabricFcEstcEpSlotId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )



class CfprApFabricFcMonTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricFcMonType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricFcMonDestEpAdminSpeed(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("indeterminate", 0),
          ("n1gbps", 1),
          ("n2gbps", 2),
          ("n4gbps", 3),
          ("n8gbps", 4),
          ("auto", 5))
    )



class CfprApFabricFcMonDestEpIfRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApFabricFcMonDestEpPortId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 48),
    )



class CfprApFabricFcMonDestEpSlotId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )



class CfprApFabricFcMonDestEpType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricFcMonFiltEpType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricFcMonFiltRefType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricFcMonSanTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricFcMonSanType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricFcMonSrcEpType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricFcMonSrcRefType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricFcSanTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricFcSanUplinkTrunking(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApFabricFcSanEpPortId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 48),
    )



class CfprApFabricFcSanEpSlotId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )



class CfprApFabricFcSanPcTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricFcSanPcEpPortId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 48),
    )



class CfprApFabricFcSanPcEpSlotId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )



class CfprApFabricFcSourceType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              20)
        )
    )
    namedValues = NamedValues(
        *(("uplinkPort", 2),
          ("vsan", 3),
          ("storage", 4),
          ("portChannel", 5),
          ("vhba", 20))
    )



class CfprApFabricFcVsanPcTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricFcVsanPortEpPortId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 256),
    )



class CfprApFabricFcVsanPortEpSlotId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )



class CfprApFabricFcZoneSharingMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("coalesce", 0),
          ("clearUnmanagedZoneAll", 1))
    )



class CfprApFabricFcoeEstcEpPortId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 48),
    )



class CfprApFabricFcoeEstcEpSlotId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )



class CfprApFabricFcoeSanEpPortId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 48),
    )



class CfprApFabricFcoeSanEpSlotId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )



class CfprApFabricFcoeSanPcTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricFcoeSanPcEpPortId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 48),
    )



class CfprApFabricFcoeSanPcEpSlotId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )



class CfprApFabricFcoeVsanPcTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricFcoeVsanPortEpPortId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 256),
    )



class CfprApFabricFcoeVsanPortEpSlotId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )



class CfprApFabricFillPattern(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("idle", 0),
          ("arbff", 1))
    )



class CfprApFabricFlowMonCollectorLocale(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("server", 0),
          ("chassis", 1),
          ("internal", 2),
          ("external", 3))
    )


class CfprApFabricFlowMonDefType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("systemDefined", 1),
          ("userDefined", 2))
    )



class CfprApFabricFlowMonIpv4Keys(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ipv4SrcAddress", 0),
          ("ipv4DestAddress", 1),
          ("ipProtocol", 2),
          ("ipTos", 3),
          ("srcPort", 4),
          ("destPort", 5))
    )


class CfprApFabricFlowMonIpv6Keys(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ipv6SrcAddress", 0),
          ("ipv6DestAddress", 1),
          ("ipProtocol", 2),
          ("reserved", 3),
          ("srcPort", 4),
          ("destPort", 5))
    )


class CfprApFabricFlowMonKeyType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("l2keys", 0),
          ("ipv4keys", 1),
          ("ipv6keys", 2))
    )



class CfprApFabricFlowMonL2Keys(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ethertype", 0),
          ("destMacAddress", 1),
          ("srcMacAddress", 2))
    )


class CfprApFabricFlowMonNonKeys(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("counterPacketsLong", 0),
          ("counterBytesLong", 1),
          ("sysUptimeFirst", 2),
          ("sysUptimeLast", 3))
    )


class CfprApFabricFlowMonitoringCategoryAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApFabricHostPortId(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              10)
        )
    )
    namedValues = NamedValues(
        *(("any", 0),
          ("n1", 1),
          ("n2", 2),
          ("none", 10))
    )



class CfprApFabricInternalLocale(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("server", 0),
          ("chassis", 1),
          ("internal", 2),
          ("external", 3))
    )


class CfprApFabricInternalDceSrvTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApFabricInternalDceSrvType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricInternalEpAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApFabricInternalEpLocale(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("server", 0),
          ("chassis", 1),
          ("internal", 2),
          ("external", 3))
    )


class CfprApFabricInternalPcLocale(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("server", 0),
          ("chassis", 1),
          ("internal", 2),
          ("external", 3))
    )


class CfprApFabricLacpMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("active", 1),
          ("on", 2),
          ("passive", 3))
    )



class CfprApFabricLacpRate(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("normal", 0),
          ("fast", 1))
    )



class CfprApFabricLacpSuspend(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )



class CfprApFabricLanType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricLanCloudVlanCompression(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApFabricLanCloudFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              449)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("switchMode", 449))
    )



class CfprApFabricLanCloudFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              449,
              450,
              451,
              606,
              607)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("switchModeBegin", 449),
          ("switchModeSwConfigPeer", 450),
          ("switchModeSwConfigLocal", 451),
          ("switchModeFail", 606),
          ("switchModeSuccess", 607))
    )



class CfprApFabricLanCloudFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              449)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("switchMode", 449))
    )



class CfprApFabricLanEpIfRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApFabricLanEpType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricLanFlowMonType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricLanFlowMonCollectorType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricLanFlowMonExporterType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricLanFlowMonSrcEpType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricLanFlowMonitorType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricLanPcIfRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApFabricLanPcType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricLifeCycle(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("inService", 1),
          ("outOfService", 2),
          ("outOfServiceSlave", 3))
    )



class CfprApFabricMemberStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("up", 0),
          ("down", 1))
    )



class CfprApFabricMembershipStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("down", 1),
          ("up", 2),
          ("hotStandby", 3),
          ("suspended", 4),
          ("individual", 5),
          ("moduleRemoved", 6),
          ("incompatibleSpeed", 7),
          ("unknown", 8))
    )



class CfprApFabricMonAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApFabricMonOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("up", 1),
          ("down", 2),
          ("error", 3))
    )



class CfprApFabricMonOperStateReason(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("active", 0),
          ("noHardwareResource", 1),
          ("noOperationalSrcDst", 2),
          ("genericError", 3),
          ("noSourcesConfigured", 4),
          ("noDestinationConfigured", 5),
          ("noSourceDestinationConfigured", 6),
          ("sessionAdminShut", 7),
          ("wrongDestinationMode", 8),
          ("wrongSourceMode", 9),
          ("tunnelMisconfDown", 10),
          ("noFlowIdSpecified", 11),
          ("unknown", 12))
    )



class CfprApFabricNFExporterVersion(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("v9", 1),
          ("ipfix", 2))
    )



class CfprApFabricNFTransport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("udp", 1),
          ("sctp", 2))
    )



class CfprApFabricNetGroupSwitchId(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("a", 1),
          ("b", 2),
          ("dual", 3))
    )



class CfprApFabricNetGroupType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("mgmt", 0),
          ("vlanCompression", 1),
          ("vlanUncompressed", 2))
    )


class CfprApFabricNetflowCollectorFlowProtocol(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("netflow", 1)
    )



class CfprApFabricNetflowConfigIssues(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("monitorUnresolved", 0),
          ("exporterUnresolved", 1),
          ("exporterProfileUnresolved", 2),
          ("collectorUnresolved", 3),
          ("sourceVlanUnresolved", 4))
    )


class CfprApFabricNetflowMonExporterProtocol(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("netflow", 1)
    )



class CfprApFabricNetflowMonSessionAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApFabricNetflowMonSessionProtocol(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("netflow", 1)
    )



class CfprApFabricNetflowMonSrcEpProtocol(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("netflow", 1)
    )



class CfprApFabricNetflowMonSrcRefProtocol(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("netflow", 1)
    )



class CfprApFabricNetflowMonitorFlowMonProtocol(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("netflow", 1)
    )



class CfprApFabricOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("up", 1),
          ("down", 2),
          ("errorMisconfigured", 3))
    )



class CfprApFabricOwner(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("policy", 1),
          ("management", 2))
    )



class CfprApFabricPIoEpIfType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("physical", 1),
          ("aggregation", 2),
          ("virtual", 3),
          ("fabric", 4))
    )



class CfprApFabricPIoEpOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("up", 1),
          ("down", 2),
          ("errorMisconfigured", 3))
    )



class CfprApFabricPIoEpPortId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 48),
    )



class CfprApFabricPIoEpSlotId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )



class CfprApFabricPathEpIfType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("physical", 1),
          ("aggregation", 2),
          ("virtual", 3),
          ("fabric", 4))
    )



class CfprApFabricPathEpLocale(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("server", 0),
          ("chassis", 1),
          ("internal", 2),
          ("external", 3))
    )


class CfprApFabricPcConfigStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("applied", 1),
          ("incompatibleSpeed", 2))
    )



class CfprApFabricPktCaptureAppSlotId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )



class CfprApFabricPktCaptureAppendFlag(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("append", 1),
          ("overwrite", 2))
    )



class CfprApFabricPoolMemberConfigIssues(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        ("namedVlanUnresolved", 0)
    )


class CfprApFabricPort(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )



class CfprApFabricQosPrio(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("low", 0),
          ("high", 1))
    )



class CfprApFabricQuerierType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 0),
          ("disabled", 1))
    )



class CfprApFabricReqIssues(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        ("permitUnresolved", 0)
    )


class CfprApFabricSSAPortType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("data", 0),
          ("mgmt", 1),
          ("cluster", 2),
          ("firepowerEventing", 3))
    )



class CfprApFabricSanType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricSanCloudFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              452)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("switchMode", 452))
    )



class CfprApFabricSanCloudFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              452,
              453,
              454,
              608,
              609)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("switchModeBegin", 452),
          ("switchModeSwConfigPeer", 453),
          ("switchModeSwConfigLocal", 454),
          ("switchModeFail", 608),
          ("switchModeSuccess", 609))
    )



class CfprApFabricSanCloudFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              452)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("switchMode", 452))
    )



class CfprApFabricSanEpIfRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApFabricSanEpType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricSanPcIfRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApFabricSanPcType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricSlotAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("acknowledged", 1),
          ("reacknowledge", 3))
    )



class CfprApFabricSnoopingType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 0),
          ("disabled", 1))
    )



class CfprApFabricSpannedCluster(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApFabricSspEthMonAppendFlag(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("append", 1),
          ("overwrite", 2))
    )



class CfprApFabricSspMonAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApFabricSspMonDelPcap(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApFabricSspMonOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("up", 1),
          ("down", 2),
          ("error", 3))
    )



class CfprApFabricSspMonOperStateReason(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              8,
              12,
              16,
              32,
              64,
              128)
        )
    )
    namedValues = NamedValues(
        *(("active", 0),
          ("noHardwareResource", 1),
          ("noOperationalSrcDst", 2),
          ("genericError", 3),
          ("noSourcesConfigured", 4),
          ("sessionAdminShut", 5),
          ("directoryError", 8),
          ("unknown", 12),
          ("fileError", 16),
          ("memoryOvershoot", 32),
          ("pipeError", 64),
          ("linkError", 128))
    )



class CfprApFabricStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("modified", 0),
          ("created", 1),
          ("deleted", 2),
          ("intentDeletion", 3))
    )



class CfprApFabricSubGroupAggrPortId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 48),
    )



class CfprApFabricSubGroupConfigState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApFabricSubGroupSlotId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )



class CfprApFabricSwChEpIfRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApFabricSwChEpType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricSwChPhEpAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2),
          ("remove", 3))
    )



class CfprApFabricSwSrvEpIfRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApFabricSwSrvEpType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricSwSrvPcIfRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApFabricSwSrvPcType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricSwSubGroupAggrPortId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 48),
    )



class CfprApFabricSwSubGroupConfigState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApFabricSwSubGroupSlotId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )



class CfprApFabricSwitchingMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("endHost", 0),
          ("switch", 1),
          ("securityNode", 2))
    )



class CfprApFabricTargetEpType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApFabricTargetStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("valid", 0),
          ("invalid", 1))
    )



class CfprApFabricTrafficDirection(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("rx", 1),
          ("tx", 2),
          ("both", 3))
    )



class CfprApFabricUdldLinkPolicyAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApFabricUdldLinkPolicyMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("normal", 0),
          ("aggressive", 1))
    )



class CfprApFabricUdldOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("unidirectional", 1),
          ("bidirectional", 2),
          ("txRxLoop", 3),
          ("mismatch", 4),
          ("echoEmpty", 5),
          ("adminDisabled", 6))
    )



class CfprApFabricVConInstType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("manual", 2),
          ("policy", 3))
    )



class CfprApFabricVConMappingScheme(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("roundRobin", 2),
          ("linearOrdered", 3),
          ("roundRobinToLinearOrdered", 4),
          ("linearOrderedToRoundRobin", 5))
    )



class CfprApFabricVConPlacementPref(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("physical", 1),
          ("auto", 2))
    )



class CfprApFabricVConSelectPref(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              7,
              8,
              11,
              13,
              15)
        )
    )
    namedValues = NamedValues(
        *(("assignedOnly", 1),
          ("unassignedOnly", 2),
          ("dynamicOnly", 4),
          ("excludeUsnic", 7),
          ("usnicOnly", 8),
          ("excludeDynamic", 11),
          ("excludeUnassigned", 13),
          ("all", 15))
    )



class CfprApFabricVConSharePref(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("exclusiveOnly", 1),
          ("exclusivePreferred", 2),
          ("sameTransport", 3),
          ("differentTransport", 4),
          ("shared", 5))
    )



class CfprApFabricVConTransportPref(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("fc", 0),
          ("ethernet", 1))
    )


class CfprApFabricVlanSwitchId(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("a", 1),
          ("b", 2),
          ("dual", 3))
    )



class CfprApFabricVlanAssocPrimaryVlanState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("isEmpty", 2),
          ("doesNotExists", 3),
          ("isNotPrimaryType", 4),
          ("isInErrorState", 5))
    )



class CfprApFabricVlanCompType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("included", 1),
          ("excluded", 2))
    )



class CfprApFabricVlanConfigIssues(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("conflictingVlanAccess", 0),
          ("unsupportedMulticastPolicy", 1))
    )


class CfprApFabricVlanOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("errorMisconfigured", 2))
    )



class CfprApFabricVlanOverlapState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notActive", 0),
          ("ok", 1),
          ("sharingTypeMismatch", 2),
          ("primaryIdMismatch", 3))
    )



class CfprApFabricVlanSharingType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("primary", 1),
          ("isolated", 2),
          ("community", 3))
    )



class CfprApFabricVnetEpIfRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApFabricVnetEpLocale(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("server", 0),
          ("chassis", 1),
          ("internal", 2),
          ("external", 3))
    )


class CfprApFabricVnetEpPolicyOwner(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("local", 0),
          ("policy", 1),
          ("pendingPolicy", 2))
    )



class CfprApFabricVnetEpSyncEpFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              447)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("pushVnetEpDeletion", 447))
    )



class CfprApFabricVnetEpSyncEpFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              447,
              448,
              610,
              611)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("pushVnetEpDeletionBegin", 447),
          ("pushVnetEpDeletionSync", 448),
          ("pushVnetEpDeletionFail", 610),
          ("pushVnetEpDeletionSuccess", 611))
    )



class CfprApFabricVnetEpSyncEpFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              447)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("pushVnetEpDeletion", 447))
    )



class CfprApFabricVsanSwitchId(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("a", 1),
          ("b", 2),
          ("dual", 3))
    )



class CfprApFabricVsanOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("errorMisconfigured", 2),
          ("errorReserved", 3))
    )



class CfprApFabricWarnings(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("fcZoningEnabled", 0),
          ("configurationError", 1))
    )


class CfprApFabricZoningState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApFabricRecoveryAction(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("reset", 1))
    )



class CfprApFaultBasePolicyClearAction(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("retain", 0),
          ("delete", 1))
    )



class CfprApFaultBasePolicySoakingSeverity(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("info", 1),
          ("condition", 2),
          ("warning", 3))
    )



class CfprApFcErrStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("crcRxDelta", 0),
          ("crcRxDeltaAvg", 1),
          ("crcRxDeltaMax", 2),
          ("crcRxDeltaMin", 3),
          ("discardRxDelta", 4),
          ("discardRxDeltaAvg", 5),
          ("discardRxDeltaMax", 6),
          ("discardRxDeltaMin", 7),
          ("discardTxDelta", 8),
          ("discardTxDeltaAvg", 9),
          ("discardTxDeltaMax", 10),
          ("discardTxDeltaMin", 11),
          ("linkFailuresDelta", 12),
          ("linkFailuresDeltaAvg", 13),
          ("linkFailuresDeltaMax", 14),
          ("linkFailuresDeltaMin", 15),
          ("rxDelta", 16),
          ("rxDeltaAvg", 17),
          ("rxDeltaMax", 18),
          ("rxDeltaMin", 19),
          ("signalLossesDelta", 20),
          ("signalLossesDeltaAvg", 21),
          ("signalLossesDeltaMax", 22),
          ("signalLossesDeltaMin", 23),
          ("syncLossesDelta", 24),
          ("syncLossesDeltaAvg", 25),
          ("syncLossesDeltaMax", 26),
          ("syncLossesDeltaMin", 27),
          ("tooLongRxDelta", 28),
          ("tooLongRxDeltaAvg", 29),
          ("tooLongRxDeltaMax", 30),
          ("tooLongRxDeltaMin", 31),
          ("tooShortRxDelta", 32),
          ("tooShortRxDeltaAvg", 33),
          ("tooShortRxDeltaMax", 34),
          ("tooShortRxDeltaMin", 35),
          ("txDelta", 36),
          ("txDeltaAvg", 37),
          ("txDeltaMax", 38),
          ("txDeltaMin", 39))
    )


class CfprApFcErrStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("crcRxDelta", 0),
          ("crcRxDeltaAvg", 1),
          ("crcRxDeltaMax", 2),
          ("crcRxDeltaMin", 3),
          ("discardRxDelta", 4),
          ("discardRxDeltaAvg", 5),
          ("discardRxDeltaMax", 6),
          ("discardRxDeltaMin", 7),
          ("discardTxDelta", 8),
          ("discardTxDeltaAvg", 9),
          ("discardTxDeltaMax", 10),
          ("discardTxDeltaMin", 11),
          ("linkFailuresDelta", 12),
          ("linkFailuresDeltaAvg", 13),
          ("linkFailuresDeltaMax", 14),
          ("linkFailuresDeltaMin", 15),
          ("rxDelta", 16),
          ("rxDeltaAvg", 17),
          ("rxDeltaMax", 18),
          ("rxDeltaMin", 19),
          ("signalLossesDelta", 20),
          ("signalLossesDeltaAvg", 21),
          ("signalLossesDeltaMax", 22),
          ("signalLossesDeltaMin", 23),
          ("syncLossesDelta", 24),
          ("syncLossesDeltaAvg", 25),
          ("syncLossesDeltaMax", 26),
          ("syncLossesDeltaMin", 27),
          ("tooLongRxDelta", 28),
          ("tooLongRxDeltaAvg", 29),
          ("tooLongRxDeltaMax", 30),
          ("tooLongRxDeltaMin", 31),
          ("tooShortRxDelta", 32),
          ("tooShortRxDeltaAvg", 33),
          ("tooShortRxDeltaMax", 34),
          ("tooShortRxDeltaMin", 35),
          ("txDelta", 36),
          ("txDeltaAvg", 37),
          ("txDeltaMax", 38),
          ("txDeltaMin", 39))
    )


class CfprApFcPIoFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              235,
              237)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("inCompatSfpPresence", 235),
          ("inCompatSfpReplaced", 237))
    )



class CfprApFcPIoFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              235,
              236,
              237,
              238,
              732,
              733,
              734,
              735)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("inCompatSfpPresenceBegin", 235),
          ("inCompatSfpPresenceShutdown", 236),
          ("inCompatSfpReplacedBegin", 237),
          ("inCompatSfpReplacedEnablePort", 238),
          ("inCompatSfpPresenceFail", 732),
          ("inCompatSfpPresenceSuccess", 733),
          ("inCompatSfpReplacedFail", 734),
          ("inCompatSfpReplacedSuccess", 735))
    )



class CfprApFcStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("bytesRxDelta", 0),
          ("bytesRxDeltaAvg", 1),
          ("bytesRxDeltaMax", 2),
          ("bytesRxDeltaMin", 3),
          ("bytesTxDelta", 4),
          ("bytesTxDeltaAvg", 5),
          ("bytesTxDeltaMax", 6),
          ("bytesTxDeltaMin", 7),
          ("packetsRxDelta", 8),
          ("packetsRxDeltaAvg", 9),
          ("packetsRxDeltaMax", 10),
          ("packetsRxDeltaMin", 11),
          ("packetsTxDelta", 12),
          ("packetsTxDeltaAvg", 13),
          ("packetsTxDeltaMax", 14),
          ("packetsTxDeltaMin", 15))
    )


class CfprApFcStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("bytesRxDelta", 0),
          ("bytesRxDeltaAvg", 1),
          ("bytesRxDeltaMax", 2),
          ("bytesRxDeltaMin", 3),
          ("bytesTxDelta", 4),
          ("bytesTxDeltaAvg", 5),
          ("bytesTxDeltaMax", 6),
          ("bytesTxDeltaMin", 7),
          ("packetsRxDelta", 8),
          ("packetsRxDeltaAvg", 9),
          ("packetsRxDeltaMax", 10),
          ("packetsRxDeltaMin", 11),
          ("packetsTxDelta", 12),
          ("packetsTxDeltaAvg", 13),
          ("packetsTxDeltaMax", 14),
          ("packetsTxDeltaMin", 15))
    )


class CfprApFcpoolBootTargetType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("primary", 0),
          ("secondary", 1))
    )



class CfprApFcpoolInitiatorPurpose(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("portWwn", 0),
          ("nodeWwn", 1),
          ("derived", 2))
    )



class CfprApFcpoolInitiatorEpPurpose(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("portWwn", 0),
          ("nodeWwn", 1))
    )



class CfprApFcpoolInitiatorsAssignmentOrder(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("sequential", 1))
    )



class CfprApFcpoolInitiatorsMaxPortsPerNode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              7,
              15,
              31,
              63)
        )
    )
    namedValues = NamedValues(
        *(("upto3", 3),
          ("upto7", 7),
          ("upto15", 15),
          ("upto31", 31),
          ("upto63", 63))
    )



class CfprApFcpoolInitiatorsPurpose(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("nodeAndPortWwnAssignment", 0),
          ("portWwnAssignment", 1),
          ("nodeWwnAssignment", 2))
    )



class CfprApFeatureSupportabilityType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("supported", 0),
          ("notSupported", 1),
          ("deprecated", 2))
    )



class CfprApFirmwareAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("active", 0),
          ("deleted", 1))
    )



class CfprApFirmwareAutoSyncConfigIssue(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noIssues", 0),
          ("defaultPackageMissing", 1),
          ("versionsEmptyInDefaultPackage", 2))
    )



class CfprApFirmwareAutoSyncState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("autoAcknowledge", 0),
          ("userAcknowledge", 1),
          ("noActions", 2))
    )



class CfprApFirmwareBootUnitImage(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("running", 0),
          ("backup", 1))
    )



class CfprApFirmwareBootUnitMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("install", 0),
          ("upgrade", 1))
    )



class CfprApFirmwareCatalogPackConfigState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 0),
          ("notApplied", 1),
          ("failed", 2))
    )



class CfprApFirmwareCompleteness(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("partial", 0),
          ("complete", 1))
    )



class CfprApFirmwareComponentType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("kernel", 0),
          ("system", 1),
          ("combined", 2),
          ("bootLoader", 3))
    )


class CfprApFirmwareDependencyRelationship(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("special", 0),
          ("ancestor", 1),
          ("descendent", 2))
    )



class CfprApFirmwareDependencyScope(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              4,
              8,
              16)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("blade", 1),
          ("chassis", 2),
          ("system", 4),
          ("switch", 8),
          ("global", 16))
    )



class CfprApFirmwareDependencySensitivity(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("global", 0),
          ("fabric", 1),
          ("path", 2))
    )



class CfprApFirmwareDistributableFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              14)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("delete", 14))
    )



class CfprApFirmwareDistributableFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              14,
              15,
              16,
              612,
              613)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deleteBegin", 14),
          ("deleteLocal", 15),
          ("deleteRemote", 16),
          ("deleteFail", 612),
          ("deleteSuccess", 613))
    )



class CfprApFirmwareDistributableFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              14)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("delete", 14))
    )



class CfprApFirmwareDistributableType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("image", 1),
          ("fullBundle", 2),
          ("infrastructureBundle", 3),
          ("bSeriesBundle", 4),
          ("cSeriesBundle", 5),
          ("catalog", 6),
          ("platformBundle", 7),
          ("firmwareFpr9kBundle", 8),
          ("firmwareFpr4kBundle", 9),
          ("appBundle", 10))
    )



class CfprApFirmwareDownloadActivity(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("restart", 0),
          ("idle", 1))
    )



class CfprApFirmwareDownloaderFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              6)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("download", 6))
    )



class CfprApFirmwareDownloaderFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              6,
              7,
              8,
              9,
              10,
              614,
              615)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("downloadBegin", 6),
          ("downloadLocal", 7),
          ("downloadUnpackLocal", 8),
          ("downloadDeleteLocal", 9),
          ("downloadCopyRemote", 10),
          ("downloadFail", 614),
          ("downloadSuccess", 615))
    )



class CfprApFirmwareDownloaderFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              6)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("download", 6))
    )



class CfprApFirmwareEquipmentType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("system", 1),
          ("switch", 2),
          ("iocard", 3),
          ("server", 4),
          ("cimc", 5),
          ("adaptor", 6),
          ("storageController", 7),
          ("boardController", 8),
          ("bios", 9),
          ("serviceProfile", 10),
          ("graphicsCard", 11))
    )



class CfprApFirmwareFirmwareState(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("cimcFirmwareMismatch", 0),
          ("pldFirmwareMismatch", 1))
    )


class CfprApFirmwareFwState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("sameRelease", 1),
          ("compatible", 2),
          ("incompatible", 3),
          ("multipleReleases", 4))
    )



class CfprApFirmwareFwUpgradeState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("ready", 0),
          ("inProgress", 1),
          ("upgrading", 2),
          ("updatingImageVersion", 3),
          ("updatingPackageVersion", 4),
          ("failed", 5),
          ("failedUpgrade", 6))
    )



class CfprApFirmwareHostPackConfigQualifier(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        ("biosImageNotSelected", 0)
    )


class CfprApFirmwareImageDeleted(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("a", 0),
          ("b", 1))
    )


class CfprApFirmwareImageError(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("checksumFailure", 1),
          ("filesystemError", 2),
          ("mgmtConnectError", 3),
          ("bootConfMissing", 4),
          ("crcFailure", 5),
          ("unknownError", 6),
          ("rebuilding", 7))
    )



class CfprApFirmwareImageFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              11)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("delete", 11))
    )



class CfprApFirmwareImageFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              11,
              12,
              13,
              616,
              617)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deleteBegin", 11),
          ("deleteLocal", 12),
          ("deleteRemote", 13),
          ("deleteFail", 616),
          ("deleteSuccess", 617))
    )



class CfprApFirmwareImageFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              11)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("delete", 11))
    )



class CfprApFirmwareImagePresence(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("a", 0),
          ("b", 1))
    )


class CfprApFirmwareImageState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("ready", 0),
          ("scheduled", 1),
          ("updating", 2),
          ("activating", 3),
          ("failed", 4),
          ("setStartup", 5),
          ("rebooting", 6),
          ("pendingNextBoot", 7),
          ("throttled", 8),
          ("upgrading", 9),
          ("autoUpdating", 10),
          ("autoActivating", 11),
          ("pendingPowerCycle", 12),
          ("badImage", 13),
          ("rebuilding", 14))
    )



class CfprApFirmwareImpactType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("activate", 0),
          ("noimpact", 1),
          ("reset", 2),
          ("update", 3))
    )



class CfprApFirmwareInfraPackFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              828)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("infraVersion", 828))
    )



class CfprApFirmwareInfraPackFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              828,
              829,
              830,
              831,
              832)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("infraVersionBegin", 828),
          ("infraVersionWaitForReady", 829),
          ("infraVersionRestore", 830),
          ("infraVersionFail", 831),
          ("infraVersionSuccess", 832))
    )



class CfprApFirmwareInfraPackFsmTaskFlags(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        ("samDmeFirmwareInfraPackInfraVersionInitRestore", 33)
    )


class CfprApFirmwareInfraPackFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              828)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("infraVersion", 828))
    )



class CfprApFirmwareInstallState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("ready", 0),
          ("scheduled", 1),
          ("inProgress", 2),
          ("failed", 3),
          ("pendingUserAck", 4),
          ("startPendingExtPermission", 5))
    )



class CfprApFirmwareItemType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              20,
              22,
              25)
        )
    )
    namedValues = NamedValues(
        *(("unspecified", 0),
          ("switchKernel", 1),
          ("switchSoftware", 2),
          ("system", 3),
          ("bladeController", 4),
          ("iocard", 5),
          ("bladeBios", 6),
          ("adaptor", 7),
          ("storageController", 8),
          ("hostNic", 9),
          ("hostHba", 10),
          ("hostHbaOptionrom", 11),
          ("hostNicOptionrom", 12),
          ("boardController", 13),
          ("localDisk", 14),
          ("flexflashController", 20),
          ("bladeSspOsController", 22),
          ("graphicsCard", 25))
    )



class CfprApFirmwarePackMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("staged", 0),
          ("oneShot", 1))
    )



class CfprApFirmwarePackItemPresence(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("missing", 1),
          ("present", 2))
    )



class CfprApFirmwarePlatformPackFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              34)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("platformVersion", 34))
    )



class CfprApFirmwarePlatformPackFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              34,
              35,
              36,
              618,
              619)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("platformVersionBegin", 34),
          ("platformVersionWaitForReady", 35),
          ("platformVersionRestore", 36),
          ("platformVersionFail", 618),
          ("platformVersionSuccess", 619))
    )



class CfprApFirmwarePlatformPackFsmTaskFlags(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        ("samDmeFirmwarePlatformPackPlatformVersionInitRestore", 3)
    )


class CfprApFirmwarePlatformPackFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              34)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("platformVersion", 34))
    )



class CfprApFirmwarePlatformType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ucs", 0),
          ("ucsMini", 1),
          ("sspBakerstreet", 2),
          ("fpr2100", 3))
    )



class CfprApFirmwareRunningDeployment(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unspecified", 0),
          ("kernel", 1),
          ("bootLoader", 2),
          ("system", 3))
    )



class CfprApFirmwareSupFirmwareFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              56)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deploy", 56))
    )



class CfprApFirmwareSupFirmwareFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              63,
              64,
              65,
              66,
              620,
              621)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deployBegin", 56),
          ("deployWaitForDeploy", 57),
          ("deployValidateFirmwarePack", 58),
          ("deployDebundlePort", 59),
          ("deployPollDebundlePort", 60),
          ("deployActivateFirmwarePack", 61),
          ("deployPollActivateOfFirmwarePack", 62),
          ("deployUpdateImageVersion", 63),
          ("deployWaitForFirmwareVersionUpdate", 64),
          ("deployUpdatePackageVersion", 65),
          ("deployCompleteFirmwareUpgrade", 66),
          ("deployFail", 620),
          ("deploySuccess", 621))
    )



class CfprApFirmwareSupFirmwareFsmTaskFlags(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        ("samDmeFirmwareSupFirmwareDeployApplySupfw", 10)
    )


class CfprApFirmwareSupFirmwareFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              56)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deploy", 56))
    )



class CfprApFirmwareSystemFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              37,
              67)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deploy", 37),
          ("applyCatalogPack", 67))
    )



class CfprApFirmwareSystemFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              67,
              68,
              69,
              70,
              71,
              622,
              623,
              624,
              625,
              834)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deployBegin", 37),
          ("deployWaitForDeploy", 38),
          ("deployValidateApplicationPack", 39),
          ("deployDeleteCurrentApplication", 40),
          ("deployPollDeleteCurrentApplicationStatus", 41),
          ("deploySetStartupServiceManagerVersion", 42),
          ("deployPollStartupServiceManagerStatus", 43),
          ("deployActivateNpuImage", 44),
          ("deployPollNpuActivationStatus", 45),
          ("deployActivateSystemImage", 46),
          ("deployActivateFirmwareImage", 47),
          ("deployRebootSystemForImageUpgrade", 48),
          ("deployWaitForSystemReady", 49),
          ("deployPollSystemActivationStatus", 50),
          ("deployActivateManagerImage", 51),
          ("deployPollManagerActivationStatus", 52),
          ("deployActivateApplicationImage", 53),
          ("deployPollApplicationActivationStatus", 54),
          ("deployCompleteFirmwareUpgrade", 55),
          ("applyCatalogPackBegin", 67),
          ("applyCatalogPackResolveDistributableNames", 68),
          ("applyCatalogPackResolveDistributable", 69),
          ("applyCatalogPackResolveImages", 70),
          ("applyCatalogPackActivateCatalog", 71),
          ("applyCatalogPackFail", 622),
          ("applyCatalogPackSuccess", 623),
          ("deployFail", 624),
          ("deploySuccess", 625),
          ("deployCheckFirmwareUpgradeStatus", 834))
    )



class CfprApFirmwareSystemFsmTaskFlags(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("samDmeFirmwareSystemDeployApplyInfra", 4),
          ("samDmeFirmwareSystemDeployApplyApp", 5),
          ("samDmeFirmwareSystemDeployApplyMgr", 6),
          ("samDmeFirmwareSystemDeployApplyNpu", 7),
          ("samDmeFirmwareSystemDeployApplySys", 8),
          ("samDmeFirmwareSystemDeployApplyFw", 9))
    )


class CfprApFirmwareSystemFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              37,
              67)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deploy", 37),
          ("applyCatalogPack", 67))
    )



class CfprApFirmwareTransferState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("init", 0),
          ("downloading", 1),
          ("downloaded", 2),
          ("failed", 3))
    )



class CfprApFirmwareTransport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("ftp", 0),
          ("tftp", 1),
          ("scp", 2),
          ("sftp", 3),
          ("local", 4),
          ("usbA", 5),
          ("usbB", 6))
    )



class CfprApFirmwareTriggerState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("triggered", 0),
          ("trigger", 1))
    )



class CfprApFirmwareType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              22,
              23,
              24,
              25,
              26,
              27)
        )
    )
    namedValues = NamedValues(
        *(("unspecified", 0),
          ("switchKernel", 1),
          ("switchSoftware", 2),
          ("system", 3),
          ("bladeController", 4),
          ("iocard", 5),
          ("fex", 6),
          ("adaptor", 7),
          ("storageController", 8),
          ("hostNic", 9),
          ("hostHba", 10),
          ("hostHbaOptionrom", 11),
          ("hostNicOptionrom", 12),
          ("boardController", 13),
          ("localDisk", 14),
          ("diag", 15),
          ("catalog", 16),
          ("mgmtExt", 17),
          ("debugPlugIn", 18),
          ("switch", 19),
          ("flexflashController", 20),
          ("bladeSspOsController", 22),
          ("fxosCspCompatibility", 23),
          ("fprRommon", 24),
          ("graphicsCard", 25),
          ("fprFirmware", 26),
          ("fprCspapp", 27))
    )



class CfprApFirmwareUpdatableDeployment(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unspecified", 0),
          ("backup", 4))
    )



class CfprApFirmwareUpgradeCategory(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("other", 0),
          ("dataLoad", 1),
          ("catalog", 2),
          ("config", 3),
          ("serverReboot", 4),
          ("faults", 5))
    )



class CfprApFirmwareUpgradeSeverity(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("fatal", 1),
          ("error", 2),
          ("warn", 3),
          ("info", 4))
    )



class CfprApFirmwareUpgradeState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23)
        )
    )
    namedValues = NamedValues(
        *(("ready", 0),
          ("validatingImages", 1),
          ("removingApplication", 2),
          ("updatingManagerStartup", 3),
          ("upgradingNpu", 4),
          ("upgradingSystem", 5),
          ("upgradingFirmware", 6),
          ("rebootingSystem", 7),
          ("waitingSystemReady", 8),
          ("checkingServiceManager", 9),
          ("upgradingServiceManager", 10),
          ("updatingSoftwarePackVersion", 11),
          ("updateSoftwarePackCompleted", 12),
          ("installingApplication", 13),
          ("failedImageValidation", 14),
          ("failedToRemoveApplication", 15),
          ("failedToUpgradeNpuImage", 16),
          ("failedToSetServiceMgrVersion", 17),
          ("failedToUpgradeSystemImage", 18),
          ("failedToRebootSystem", 19),
          ("failedToUpgradeFirmware", 20),
          ("failedToUpdatePackageVersion", 21),
          ("failedToUpgradeServiceManager", 22),
          ("failedToInstallApplication", 23))
    )



class CfprApFirmwareUpgradeStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("inProgress", 1),
          ("failed", 2),
          ("success", 3),
          ("warnings", 4),
          ("skipped", 5))
    )



class CfprApFlowctrlFlowControl(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )



class CfprApFlowctrlPriorityPause(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("auto", 0),
          ("on", 1))
    )



class CfprApFsmCompletion(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("scheduled", 0),
          ("processing", 1),
          ("completed", 2),
          ("cancelled", 3))
    )



class CfprApFsmFlags(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        ("unused", 1)
    )


class CfprApFsmFsmStageStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              255)
        )
    )
    namedValues = NamedValues(
        *(("fail", 0),
          ("success", 1),
          ("skip", 2),
          ("pending", 3),
          ("inProgress", 4),
          ("throttled", 5),
          ("nop", 255))
    )



class CfprApFsmLifecycle(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("available", 0),
          ("allocated", 1),
          ("deallocated", 2),
          ("repurposed", 3))
    )



class CfprApGmetaCategory(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("inventory", 1))
    )



class CfprApGmetaHolderFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              3)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("inventory", 3))
    )



class CfprApGmetaHolderFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              3,
              4,
              5,
              626,
              627)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("inventoryBegin", 3),
          ("inventoryCheckInventoryStatus", 4),
          ("inventoryReportFullInventory", 5),
          ("inventoryFail", 626),
          ("inventorySuccess", 627))
    )



class CfprApGmetaHolderFsmTaskFlags(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        ("samDmeGmetaHolderInventoryRegister", 0)
    )


class CfprApGmetaHolderFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              3)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("inventory", 3))
    )



class CfprApGmetaInventoryStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("invDisable", 0),
          ("invEnable", 1),
          ("invStop", 2),
          ("invThrottled", 3))
    )



class CfprApGmetaPollInterval(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              5,
              10,
              15,
              30)
        )
    )
    namedValues = NamedValues(
        *(("never", 0),
          ("n1min", 1),
          ("n2min", 2),
          ("n5min", 5),
          ("n10min", 10),
          ("n15min", 15),
          ("n30min", 30))
    )



class CfprApHostagAction(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            0
        )
    )
    namedValues = NamedValues(
        ("none", 0)
    )



class CfprApHostagAgentType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("indeterminate", 0),
          ("pnuosAgent", 1),
          ("hostAgent", 2))
    )



class CfprApHostagEvent(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            0
        )
    )
    namedValues = NamedValues(
        ("none", 0)
    )



class CfprApHostimgComposition(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("complete", 0),
          ("componentized", 1))
    )



class CfprApHostimgDistribution(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("fedora", 1))
    )



class CfprApHostimgImgType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("esxi", 1),
          ("kvm", 2),
          ("xen", 3),
          ("linux", 4),
          ("windows", 5),
          ("gpxeScript", 6))
    )



class CfprApHostimgType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("complete", 0),
          ("kernel", 1),
          ("fileSystem", 2),
          ("module", 3),
          ("gpxeScript", 4))
    )



class CfprApIdentConsType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("vnic", 1),
          ("vhba", 2),
          ("server", 3),
          ("chassis", 4),
          ("vm", 5),
          ("vmnic", 6))
    )



class CfprApIdentIdDefinedInIdm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )



class CfprApIdentIdentReqIntent(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("requisition", 1),
          ("assign", 2),
          ("unassign", 3),
          ("addPooled", 4),
          ("deletePooled", 5),
          ("checkDuplicateId", 6))
    )



class CfprApIdentIdentRequestFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              72)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateIdent", 72))
    )



class CfprApIdentIdentRequestFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              72,
              73,
              628,
              629)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateIdentBegin", 72),
          ("updateIdentExecute", 73),
          ("updateIdentFail", 628),
          ("updateIdentSuccess", 629))
    )



class CfprApIdentIdentRequestFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              72)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateIdent", 72))
    )



class CfprApIdentIdentType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("mac", 1),
          ("wwnn", 2),
          ("wwpn", 3),
          ("uuid", 4),
          ("vlan", 5),
          ("ipV4", 6),
          ("ipV6", 7),
          ("iqn", 8))
    )



class CfprApIdentMetaSystemFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              74,
              77)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("sync", 74),
          ("ucscUnivSync", 77))
    )



class CfprApIdentMetaSystemFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              74,
              75,
              76,
              77,
              78,
              630,
              631,
              632,
              633)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("syncBegin", 74),
          ("syncPing", 75),
          ("syncExecute", 76),
          ("ucscUnivSyncBegin", 77),
          ("ucscUnivSyncExecute", 78),
          ("syncFail", 630),
          ("syncSuccess", 631),
          ("ucscUnivSyncFail", 632),
          ("ucscUnivSyncSuccess", 633))
    )



class CfprApIdentMetaSystemFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              74,
              77)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("sync", 74),
          ("ucscUnivSync", 77))
    )



class CfprApIdentRetStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("succeeded", 1),
          ("assignedByOther", 2),
          ("outOfSync", 3),
          ("failed", 4),
          ("synced", 5))
    )



class CfprApImgsecKeyType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("public", 0),
          ("private", 1),
          ("shared", 2))
    )



class CfprApInitiatorFcInitiatorEpProt(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("derived", 0),
          ("fc", 1),
          ("iscsi", 2))
    )



class CfprApInitiatorGroupType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dedicated", 1),
          ("shared", 2),
          ("policy", 3))
    )



class CfprApInitiatorIScsiInitiatorEpProt(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("derived", 0),
          ("fc", 1),
          ("iscsi", 2))
    )



class CfprApInitiatorInitiatorEpPref(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("preferred", 0),
          ("alternate", 1))
    )



class CfprApIpIPv4DnsPref(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("preferred", 0),
          ("alternate", 1))
    )



class CfprApIpIpV4StaticAddrPref(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("preferred", 0),
          ("alternate", 1))
    )



class CfprApIpProtocol(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("tcp", 1),
          ("udp", 2))
    )



class CfprApIpServiceIfPref(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("preferred", 0),
          ("alternate", 1))
    )



class CfprApIppoolDHCPMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApIppoolManagementMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("internal", 0),
          ("external", 1))
    )



class CfprApIppoolNetBIOSMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApIppoolPoolAssignmentOrder(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("sequential", 1))
    )



class CfprApIqnpoolBlockFrom(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )



class CfprApIqnpoolBlockTo(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )



class CfprApIqnpoolPoolAssignmentOrder(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("sequential", 1))
    )



class CfprApIqnpoolTransportBlockFrom(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )



class CfprApIqnpoolTransportBlockTo(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )



class CfprApLicenseConfigOperation(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("register", 0),
          ("unregister", 1),
          ("setdebug", 2),
          ("cleardebug", 3),
          ("renew", 4),
          ("expireauth", 5),
          ("expireeval", 6),
          ("cadev", 7),
          ("caprod", 8))
    )



class CfprApLicenseDebugFlag(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("error", 0),
          ("debug", 1),
          ("trace", 2),
          ("all", 3))
    )



class CfprApLicenseDownloadActivity(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("restart", 0),
          ("idle", 1))
    )



class CfprApLicenseDownloaderFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              140)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("download", 140))
    )



class CfprApLicenseDownloaderFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              140,
              141,
              142,
              143,
              144,
              145,
              146,
              634,
              635)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("downloadBegin", 140),
          ("downloadLocal", 141),
          ("downloadValidateLocal", 142),
          ("downloadCopyRemote", 143),
          ("downloadDeleteLocal", 144),
          ("downloadValidateRemote", 145),
          ("downloadDeleteRemote", 146),
          ("downloadFail", 634),
          ("downloadSuccess", 635))
    )



class CfprApLicenseDownloaderFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              140)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("download", 140))
    )



class CfprApLicenseFeatureType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("counted", 0),
          ("boolean", 1))
    )



class CfprApLicenseFileFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              147,
              150)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("install", 147),
          ("clear", 150))
    )



class CfprApLicenseFileFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              147,
              148,
              149,
              150,
              151,
              152,
              636,
              637,
              638,
              639)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("installBegin", 147),
          ("installLocal", 148),
          ("installRemote", 149),
          ("clearBegin", 150),
          ("clearLocal", 151),
          ("clearRemote", 152),
          ("clearFail", 636),
          ("clearSuccess", 637),
          ("installFail", 638),
          ("installSuccess", 639))
    )



class CfprApLicenseFileFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              147,
              150)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("install", 147),
          ("clear", 150))
    )



class CfprApLicenseFileState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("installPending", 1),
          ("installing", 2),
          ("stale", 3),
          ("installed", 4),
          ("installFailed", 5),
          ("deletePending", 6),
          ("deleting", 7),
          ("deleted", 8),
          ("deleteFailed", 9),
          ("validated", 10))
    )



class CfprApLicenseInstanceFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              153)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateFlexlm", 153))
    )



class CfprApLicenseInstanceFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              153,
              154,
              155,
              640,
              641)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateFlexlmBegin", 153),
          ("updateFlexlmLocal", 154),
          ("updateFlexlmRemote", 155),
          ("updateFlexlmFail", 640),
          ("updateFlexlmSuccess", 641))
    )



class CfprApLicenseInstanceFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              153)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateFlexlm", 153))
    )



class CfprApLicensePeerStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("noPeer", 0),
          ("unknown", 1),
          ("lacks", 2),
          ("exceeds", 3),
          ("matching", 4))
    )



class CfprApLicenseScope(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("a", 1),
          ("b", 2),
          ("server", 3),
          ("unknown", 4))
    )



class CfprApLicenseSmartConfigFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              156)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("setConfig", 156))
    )



class CfprApLicenseSmartConfigFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              156,
              157,
              642,
              643)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("setConfigBegin", 156),
          ("setConfigLocal", 157),
          ("setConfigFail", 642),
          ("setConfigSuccess", 643))
    )



class CfprApLicenseSmartConfigFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              156)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("setConfig", 156))
    )



class CfprApLicenseState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("licenseOk", 1),
          ("licenseInsufficient", 2),
          ("licenseGraceperiod", 3),
          ("licenseExpired", 4),
          ("notApplicable", 5))
    )



class CfprApLicenseTransferState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("init", 0),
          ("downloading", 1),
          ("downloaded", 2),
          ("failed", 3))
    )



class CfprApLicenseTransport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ftp", 0),
          ("tftp", 1),
          ("scp", 2),
          ("sftp", 3),
          ("local", 4))
    )



class CfprApLicenseType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("increment", 0),
          ("upgrade", 1),
          ("feature", 2))
    )



class CfprApLsAgentCapability(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              8,
              16)
        )
    )
    namedValues = NamedValues(
        *(("l2IfConfig", 1),
          ("l3IfConfig", 2),
          ("hostNameConfig", 4),
          ("stats", 8),
          ("states", 16))
    )



class CfprApLsAgentMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4)
        )
    )
    namedValues = NamedValues(
        *(("noAgent", 1),
          ("readOnly", 2),
          ("full", 4))
    )



class CfprApLsApply(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("onAssociation", 1),
          ("runTime", 2))
    )



class CfprApLsAssignment(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unassigned", 0),
          ("assigned", 1),
          ("failed", 2))
    )



class CfprApLsAssocState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unassociated", 0),
          ("associating", 1),
          ("associated", 2),
          ("disassociating", 3),
          ("failed", 4))
    )



class CfprApLsComputeBindingOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unused", 0),
          ("used", 1),
          ("failedToApply", 2))
    )



class CfprApLsConfigIssues(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("insufficientResources", 0),
          ("vnicCapacity", 1),
          ("vhbaCapacity", 2),
          ("fcoeCapacity", 3),
          ("switchVirtualIfCapacity", 4),
          ("macAddressAssignment", 5),
          ("wwpnAssignment", 6),
          ("wwnnAssignment", 7),
          ("systemUuidAssignment", 8),
          ("bootOrderSanImagePath", 9),
          ("bootOrderPxe", 10),
          ("computeUndiscovered", 11),
          ("adaptorProtectedEthCapability", 12),
          ("adaptorFcoeCapability", 13),
          ("incompatibleNumberOfLocalDisks", 14),
          ("adaptorRequirement", 15),
          ("memoryRequirement", 16),
          ("processorRequirement", 17),
          ("serverPositionRequirement", 18),
          ("computeUnavailable", 19),
          ("wwnnDerivationFromVhba", 20),
          ("bootConfigurationInvalid", 21),
          ("connectionPlacement", 22),
          ("wwpnDerivationVirtualizedPort", 23),
          ("macDerivationVirtualizedPort", 24),
          ("qosPolicyInvalid", 25),
          ("vlanPortCapacity", 26),
          ("physicalRequirement", 27),
          ("destructiveLocalDiskConfig", 28),
          ("powerGroupRequirement", 29),
          ("migration", 30),
          ("incompatibleBiosImage", 31),
          ("incompatibleDiskTypes", 32),
          ("incompatibleRaidLevel", 33),
          ("invalidWwn", 34),
          ("insufficientPowerBudget", 35),
          ("bootipPolicyInvalid", 36),
          ("hostimgPolicyInvalid", 37),
          ("imgsecPolicyInvalid", 38),
          ("provsrvPolicyInvalid", 39),
          ("incompatBiosForSriovVnics", 40),
          ("iscsiConfig", 41),
          ("vnicNotHaReady", 42),
          ("missingPrimaryVlan", 43),
          ("missingRaidKey", 44),
          ("bootOrderIscsi", 45),
          ("vfcVnicPvlanConflict", 46),
          ("vifResourcesOverprovisioned", 47),
          ("pinningVlanMismatch", 48),
          ("vnicVlanAssignmentError", 49),
          ("iscsiInitiatorIpAddress", 50),
          ("storagePathConfigurationError", 51),
          ("zoneCapacity", 52),
          ("dynamicVfVnic", 53),
          ("boardControllerUpdateUnsupported", 54),
          ("vnicVconProvisioningChange", 55),
          ("namedVlanInaccessible", 56),
          ("pinningInvalid", 57),
          ("nonInterruptFsmRunning", 58),
          ("missingFirmwareImage", 59),
          ("remotePolicy", 60),
          ("resourceOwnershipConflict", 61),
          ("duplicateAddressConflict", 62))
    )


class CfprApLsConfigState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplied", 0),
          ("applying", 1),
          ("failedToApply", 2),
          ("applied", 3))
    )



class CfprApLsConfigWarnings(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        ("kvmMgmtPolicyUnsupported", 0)
    )


class CfprApLsFcZoneGroupSwitchId(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("a", 1),
          ("b", 2),
          ("dual", 3))
    )



class CfprApLsFcZoneState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("notApplied", 0),
          ("applied", 1),
          ("applying", 2),
          ("applyPending", 3),
          ("notActive", 4),
          ("active", 5),
          ("created", 6),
          ("createFailed", 7),
          ("deleted", 8),
          ("zoneMergeFailure", 9))
    )



class CfprApLsOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              10,
              11,
              12,
              13,
              14,
              15,
              20,
              21,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              40,
              41,
              50,
              60,
              61,
              62,
              63,
              101,
              201,
              202,
              203,
              204,
              210,
              211,
              212)
        )
    )
    namedValues = NamedValues(
        *(("indeterminate", 0),
          ("unassociated", 1),
          ("ok", 10),
          ("discovery", 11),
          ("config", 12),
          ("unconfig", 13),
          ("powerOff", 14),
          ("restart", 15),
          ("maintenance", 20),
          ("test", 21),
          ("computeMismatch", 29),
          ("computeFailed", 30),
          ("degraded", 31),
          ("discoveryFailed", 32),
          ("configFailure", 33),
          ("unconfigFailed", 34),
          ("testFailed", 35),
          ("maintenanceFailed", 36),
          ("removed", 40),
          ("disabled", 41),
          ("inaccessible", 50),
          ("thermalProblem", 60),
          ("powerProblem", 61),
          ("voltageProblem", 62),
          ("inoperable", 63),
          ("decomissioning", 101),
          ("biosRestore", 201),
          ("cmosReset", 202),
          ("diagnostics", 203),
          ("diagnosticsFailed", 204),
          ("pendingReboot", 210),
          ("pendingReassociation", 211),
          ("svnicNotPresent", 212))
    )



class CfprApLsOwner(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              8)
        )
    )
    namedValues = NamedValues(
        *(("management", 1),
          ("physicalInherit", 2),
          ("physicalDefaultConfig", 4),
          ("tier", 8))
    )



class CfprApLsPowerState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              12,
              13,
              14,
              15,
              16,
              31,
              32,
              33)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1),
          ("cycleImmediate", 2),
          ("cycleWait", 3),
          ("hardResetImmediate", 4),
          ("hardResetWait", 5),
          ("softShutDown", 6),
          ("softShutDownOnly", 7),
          ("cmosResetImmediate", 12),
          ("bmcResetImmediate", 13),
          ("bmcResetWait", 14),
          ("diagnosticInterrupt", 15),
          ("kvmReset", 16),
          ("adminUp", 31),
          ("adminDown", 32),
          ("ipmiReset", 33))
    )



class CfprApLsResolveFromRemoteServer(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )



class CfprApLsServerFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              158)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configure", 158))
    )



class CfprApLsServerFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              158,
              159,
              160,
              161,
              162,
              163,
              164,
              165,
              166,
              167,
              168,
              169,
              170,
              171,
              172,
              173,
              174,
              175,
              176,
              177,
              178,
              179,
              180,
              181,
              182,
              183,
              184,
              185,
              644,
              645)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configureBegin", 158),
          ("configureApplyTemplate", 159),
          ("configureApplyIdentifiers", 160),
          ("configureCheckAssignedIdentifiersForDup", 161),
          ("configureResolvePolicies", 162),
          ("configureResolveNetworkPolicies", 163),
          ("configureResolveNetworkTemplates", 164),
          ("configureResolveIdentifiers", 165),
          ("configureApplyDefaultIdentifiers", 166),
          ("configureCheckAssignedDefaultIdentifiersForDup", 167),
          ("configureResolveDefaultIdentifiers", 168),
          ("configureResolveDistributableNames", 169),
          ("configureResolveDistributable", 170),
          ("configureResolveImages", 171),
          ("configureResolveSchedule", 172),
          ("configureValidatePolicyOwnership", 173),
          ("configureApplyPolicies", 174),
          ("configureProvisionStorage", 175),
          ("configureWaitForStorageProvision", 176),
          ("configureResolveBootConfig", 177),
          ("configureEvaluateAssociation", 178),
          ("configureAnalyzeImpact", 179),
          ("configureWaitForMaintPermission", 180),
          ("configureWaitForMaintWindow", 181),
          ("configureCommitStorage", 182),
          ("configureWaitForCommitStorage", 183),
          ("configureApplyConfig", 184),
          ("configureWaitForAssocCompletion", 185),
          ("configureFail", 644),
          ("configureSuccess", 645))
    )



class CfprApLsServerFsmTaskFlags(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("samDmeLsServerConfigureModification", 14),
          ("samDmeLsServerConfigureFinalDisassoc", 15),
          ("samDmeLsServerConfigureLsRename", 16))
    )


class CfprApLsServerFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              158)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configure", 158))
    )



class CfprApLsType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("instance", 0),
          ("initialTemplate", 1),
          ("updatingTemplate", 2))
    )



class CfprApLsbootADefBootMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("legacy", 1),
          ("uefi", 2))
    )



class CfprApLsbootAccessType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("readWrite", 0),
          ("readOnly", 1),
          ("readWriteLocal", 2),
          ("readWriteRemote", 3),
          ("readOnlyLocal", 4),
          ("readOnlyRemote", 5),
          ("readWriteDrive", 6),
          ("readOnlyRemoteCimc", 7),
          ("readWriteRemoteCimc", 8))
    )



class CfprApLsbootDefaultLocalImageType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("localAny", 1),
          ("sdCard", 2),
          ("localLun", 3),
          ("usbIntern", 4),
          ("usbExtern", 5))
    )



class CfprApLsbootIScsiAccess(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("readWrite", 0),
          ("readOnly", 1),
          ("readWriteLocal", 2),
          ("readWriteRemote", 3),
          ("readOnlyLocal", 4),
          ("readOnlyRemote", 5),
          ("readWriteDrive", 6),
          ("readOnlyRemoteCimc", 7),
          ("readWriteRemoteCimc", 8))
    )



class CfprApLsbootIScsiType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("virtualMedia", 1),
          ("storage", 2),
          ("lan", 3),
          ("iscsi", 4),
          ("san", 5))
    )



class CfprApLsbootIScsiImagePathType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("primary", 0),
          ("secondary", 1))
    )



class CfprApLsbootLanAccess(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("readWrite", 0),
          ("readOnly", 1),
          ("readWriteLocal", 2),
          ("readWriteRemote", 3),
          ("readOnlyLocal", 4),
          ("readOnlyRemote", 5),
          ("readWriteDrive", 6),
          ("readOnlyRemoteCimc", 7),
          ("readWriteRemoteCimc", 8))
    )



class CfprApLsbootLanType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("virtualMedia", 1),
          ("storage", 2),
          ("lan", 3),
          ("iscsi", 4),
          ("san", 5))
    )



class CfprApLsbootLanBootProt(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("pxe", 0),
          ("gpxe", 1),
          ("iSCSI", 2))
    )



class CfprApLsbootLanImagePathType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("primary", 0),
          ("secondary", 1))
    )



class CfprApLsbootLocalHddImageType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("localAny", 1),
          ("sdCard", 2),
          ("localLun", 3),
          ("usbIntern", 4),
          ("usbExtern", 5))
    )



class CfprApLsbootPurpose(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("utility", 1),
          ("operational", 2))
    )



class CfprApLsbootSanAccess(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("readWrite", 0),
          ("readOnly", 1),
          ("readWriteLocal", 2),
          ("readWriteRemote", 3),
          ("readOnlyLocal", 4),
          ("readOnlyRemote", 5),
          ("readWriteDrive", 6),
          ("readOnlyRemoteCimc", 7),
          ("readWriteRemoteCimc", 8))
    )



class CfprApLsbootSanType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("virtualMedia", 1),
          ("storage", 2),
          ("lan", 3),
          ("iscsi", 4),
          ("san", 5))
    )



class CfprApLsbootSanCatSanImageType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("primary", 0),
          ("secondary", 1))
    )



class CfprApLsbootSanCatSanImagePathType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("primary", 0),
          ("secondary", 1))
    )



class CfprApLsbootSanImageType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("primary", 0),
          ("secondary", 1))
    )



class CfprApLsbootSanImagePathType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("primary", 0),
          ("secondary", 1))
    )



class CfprApLsbootStorageAccess(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("readWrite", 0),
          ("readOnly", 1),
          ("readWriteLocal", 2),
          ("readWriteRemote", 3),
          ("readOnlyLocal", 4),
          ("readOnlyRemote", 5),
          ("readWriteDrive", 6),
          ("readOnlyRemoteCimc", 7),
          ("readWriteRemoteCimc", 8))
    )



class CfprApLsbootStorageType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("virtualMedia", 1),
          ("storage", 2),
          ("lan", 3),
          ("iscsi", 4),
          ("san", 5))
    )



class CfprApLsbootUsbExternalImageType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("localAny", 1),
          ("sdCard", 2),
          ("localLun", 3),
          ("usbIntern", 4),
          ("usbExtern", 5))
    )



class CfprApLsbootUsbFlashStorageImageType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("localAny", 1),
          ("sdCard", 2),
          ("localLun", 3),
          ("usbIntern", 4),
          ("usbExtern", 5))
    )



class CfprApLsbootUsbInternalImageType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("localAny", 1),
          ("sdCard", 2),
          ("localLun", 3),
          ("usbIntern", 4),
          ("usbExtern", 5))
    )



class CfprApLsbootVirtualMediaType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("virtualMedia", 1),
          ("storage", 2),
          ("lan", 3),
          ("iscsi", 4),
          ("san", 5))
    )



class CfprApLsmaintAckChangeDetails(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("binding", 0),
          ("hostVirtEthIf", 1),
          ("hostNonvirtEthIf", 2),
          ("hostEthIfProfile", 3),
          ("hostEthIfQos", 4),
          ("hostEthIfNwCtrl", 5),
          ("hostVirtFcIf", 6),
          ("hostNonvirtFcIf", 7),
          ("hostVirtFcIfPersBind", 8),
          ("hostNonvirtFcIfPersBind", 9),
          ("hostFcIfProfile", 10),
          ("hostFcIfQos", 11),
          ("hostFcoeIf", 12),
          ("vif", 13),
          ("vlan", 14),
          ("vsan", 15),
          ("ip", 16),
          ("bootOrder", 17),
          ("bootVirtVnic", 18),
          ("bootNonvirtVnic", 19),
          ("bootLocalStorage", 20),
          ("bootVirtPxe", 21),
          ("bootNonvirtPxe", 22),
          ("bladeIdentity", 24),
          ("agentPolicy", 25),
          ("biosFw", 26),
          ("storageControllerFw", 27),
          ("adaptorHostFw", 28),
          ("adaptorNwFw", 29),
          ("mgmtControllerFw", 30),
          ("localDiskPolicy", 31),
          ("pin", 32),
          ("sol", 33),
          ("epAuth", 34),
          ("biosProfile", 35),
          ("checkpoint", 36),
          ("implicitReboot", 37),
          ("implicitHostFcIfProfileRedeploy", 38),
          ("boardControllerFw", 39),
          ("hostEthIfQosHostControl", 40),
          ("localDiskFw", 41),
          ("implicitHostEthIfProfileRedeploy", 42),
          ("storagePath", 43),
          ("bmcUpdateBiosFw", 44),
          ("hostIfPcie", 45),
          ("flexflashConfig", 46),
          ("bootmodeConfig", 48),
          ("securebootConfig", 49),
          ("vmediaConfig", 50),
          ("ssposUpdateFw", 51))
    )


class CfprApLsmaintAckChanges(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("serverIdentity", 0),
          ("storage", 1),
          ("networking", 2),
          ("vnicVhbaPlacement", 3),
          ("bootOrder", 4),
          ("serverAssignment", 5),
          ("operationalPolicies", 6))
    )


class CfprApLsmaintAckDisr(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("upTime", 0),
          ("acPowerCycle", 1))
    )


class CfprApLsmaintChangeMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              4,
              8,
              16,
              32,
              64,
              128)
        )
    )
    namedValues = NamedValues(
        *(("noChange", 0),
          ("unconfig", 1),
          ("forceUnconfig", 2),
          ("rediscover", 4),
          ("config", 8),
          ("diagConfig", 16),
          ("diagUnconfig", 32),
          ("removeConfig", 64),
          ("diag", 128))
    )



class CfprApMacpoolPoolAssignmentOrder(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("sequential", 1))
    )



class CfprApMemoryAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("policy", 1),
          ("resetErrors", 2))
    )



class CfprApMemoryArrayId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )



class CfprApMemoryArrayEnvStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("inputCurrent", 0),
          ("inputCurrentAvg", 1),
          ("inputCurrentMax", 2),
          ("inputCurrentMin", 3))
    )


class CfprApMemoryArrayEnvStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("inputCurrent", 0),
          ("inputCurrentAvg", 1),
          ("inputCurrentMax", 2),
          ("inputCurrentMin", 3))
    )


class CfprApMemoryBufferUnitId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )



class CfprApMemoryBufferUnitEnvStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("temperature", 0),
          ("temperatureAvg", 1),
          ("temperatureMax", 2),
          ("temperatureMin", 3))
    )


class CfprApMemoryBufferUnitEnvStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("temperature", 0),
          ("temperatureAvg", 1),
          ("temperatureMax", 2),
          ("temperatureMin", 3))
    )


class CfprApMemoryErrorCorrection(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("undiscovered", 0),
          ("other", 1),
          ("unknown", 2),
          ("none", 3),
          ("parity", 4),
          ("singleBitECC", 5),
          ("multiBitECC", 6),
          ("crc", 7))
    )



class CfprApMemoryErrorStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("addressParityErrors", 0),
          ("eccMultibitErrors", 1),
          ("eccSinglebitErrors", 2),
          ("mismatchErrors", 3))
    )


class CfprApMemoryFormFactor(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              9,
              10,
              12,
              13,
              14,
              15)
        )
    )
    namedValues = NamedValues(
        *(("undiscovered", 0),
          ("other", 1),
          ("unknown", 2),
          ("simm", 3),
          ("dimm", 9),
          ("tsop", 10),
          ("rimm", 12),
          ("sodimm", 13),
          ("srimm", 14),
          ("fbDimm", 15))
    )



class CfprApMemoryIssues(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("uncorrectableEccError", 0),
          ("correctableEccError", 1),
          ("addressParityError", 2),
          ("memoryMismatchError", 3))
    )


class CfprApMemoryRuntimeThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("available", 0),
          ("availableAvg", 1),
          ("availableMax", 2),
          ("availableMin", 3),
          ("cached", 4),
          ("cachedAvg", 5),
          ("cachedMax", 6),
          ("cachedMin", 7),
          ("total", 8),
          ("totalAvg", 9),
          ("totalMax", 10),
          ("totalMin", 11))
    )


class CfprApMemoryRuntimeType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("swap", 1),
          ("total", 2))
    )



class CfprApMemoryRuntimeHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("available", 0),
          ("availableAvg", 1),
          ("availableMax", 2),
          ("availableMin", 3),
          ("cached", 4),
          ("cachedAvg", 5),
          ("cachedMax", 6),
          ("cachedMin", 7),
          ("total", 8),
          ("totalAvg", 9),
          ("totalMax", 10),
          ("totalMin", 11))
    )


class CfprApMemoryType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              24,
              25)
        )
    )
    namedValues = NamedValues(
        *(("undiscovered", 0),
          ("other", 1),
          ("unknown", 2),
          ("dram", 3),
          ("edram", 4),
          ("vram", 5),
          ("sram", 6),
          ("ram", 7),
          ("rom", 8),
          ("flash", 9),
          ("eeprom", 10),
          ("feprom", 11),
          ("eprom", 12),
          ("cdram", 13),
          ("n3DRAM", 14),
          ("sdram", 15),
          ("sgram", 16),
          ("rdram", 17),
          ("ddr", 18),
          ("ddr2", 19),
          ("ddr2FbDimm", 20),
          ("ddr3", 24),
          ("fbd2", 25))
    )



class CfprApMemoryUnitId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 256),
    )



class CfprApMemoryUnitOperability(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              51,
              52,
              81,
              82,
              83,
              84,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("operable", 1),
          ("inoperable", 2),
          ("degraded", 3),
          ("poweredOff", 4),
          ("powerProblem", 5),
          ("removed", 6),
          ("voltageProblem", 7),
          ("thermalProblem", 8),
          ("performanceProblem", 9),
          ("accessibilityProblem", 10),
          ("identityUnestablishable", 11),
          ("biosPostTimeout", 12),
          ("disabled", 13),
          ("malformedFru", 14),
          ("fabricConnProblem", 51),
          ("fabricUnsupportedConn", 52),
          ("config", 81),
          ("equipmentProblem", 82),
          ("decomissioning", 83),
          ("chassisLimitExceeded", 84),
          ("notSupported", 100),
          ("discovery", 101),
          ("discoveryFailed", 102),
          ("identify", 103),
          ("postFailure", 104),
          ("upgradeProblem", 105),
          ("peerCommProblem", 106),
          ("autoUpgrade", 107),
          ("linkActivateBlocked", 108))
    )



class CfprApMemoryUnitEnvStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("temperature", 0),
          ("temperatureAvg", 1),
          ("temperatureMax", 2),
          ("temperatureMin", 3))
    )


class CfprApMemoryUnitEnvStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("temperature", 0),
          ("temperatureAvg", 1),
          ("temperatureMax", 2),
          ("temperatureMin", 3))
    )


class CfprApMemoryVisibility(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("yes", 1),
          ("no", 2))
    )



class CfprApMgmtAccess(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              4,
              8)
        )
    )
    namedValues = NamedValues(
        *(("unspecified", 0),
          ("inBand", 1),
          ("outOfBand", 2),
          ("internal", 4),
          ("virtual", 8))
    )



class CfprApMgmtAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )



class CfprApMgmtBackupPostAction(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("remove", 1))
    )



class CfprApMgmtBackupProto(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ftp", 1),
          ("tftp", 2),
          ("scp", 3),
          ("http", 4),
          ("sftp", 5),
          ("nfsCopy", 6))
    )



class CfprApMgmtBackupFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              473)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("backup", 473))
    )



class CfprApMgmtBackupFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              473,
              474,
              475,
              646,
              647)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("backupBegin", 473),
          ("backupBackupLocal", 474),
          ("backupUpload", 475),
          ("backupFail", 646),
          ("backupSuccess", 647))
    )



class CfprApMgmtBackupFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              473)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("backup", 473))
    )



class CfprApMgmtBackupInterval(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(86400,
              604800,
              1209600)
        )
    )
    namedValues = NamedValues(
        *(("n1day", 86400),
          ("n1week", 604800),
          ("n2week", 1209600))
    )



class CfprApMgmtBackupIssue(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("outdated", 1))
    )



class CfprApMgmtBackupJob(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            2
        )
    )
    namedValues = NamedValues(
        ("immediate", 2)
    )



class CfprApMgmtBackupPolicyFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              460)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("reportConfigCopy", 460))
    )



class CfprApMgmtBackupPolicyFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              460,
              461,
              660,
              661)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("reportConfigCopyBegin", 460),
          ("reportConfigCopyReport", 461),
          ("reportConfigCopyFail", 660),
          ("reportConfigCopySuccess", 661))
    )



class CfprApMgmtBackupStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("idle", 0),
          ("exporting", 1),
          ("succeeded", 2),
          ("failed", 3))
    )



class CfprApMgmtBackupType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fullState", 1),
          ("configAll", 2))
    )



class CfprApMgmtCfgExportPolicyFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              460)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("reportConfigCopy", 460))
    )



class CfprApMgmtCfgExportPolicyFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              460,
              461,
              660,
              661)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("reportConfigCopyBegin", 460),
          ("reportConfigCopyReport", 461),
          ("reportConfigCopyFail", 660),
          ("reportConfigCopySuccess", 661))
    )



class CfprApMgmtCimcSecureBootAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )



class CfprApMgmtConfigState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("incomplete", 0),
          ("unsupportedVlan", 1),
          ("unsupportedServer", 2),
          ("unresolvedVlan", 3),
          ("unsupportedFirmware", 4),
          ("valid", 5))
    )



class CfprApMgmtConnectionState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unInitialized", 0),
          ("acknowledged", 1),
          ("unsupportedConnectivity", 2))
    )



class CfprApMgmtControllerFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              17,
              22,
              31,
              205,
              393,
              483)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateUCSManager", 17),
          ("updateSwitch", 22),
          ("updateIOM", 31),
          ("extMgmtInterfaceConfig", 205),
          ("registryConfig", 393),
          ("sysConfig", 483))
    )



class CfprApMgmtControllerFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              205,
              206,
              207,
              393,
              394,
              483,
              484,
              485,
              648,
              649,
              650,
              651,
              652,
              653,
              654,
              655,
              656,
              657,
              658,
              659)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateUCSManagerBegin", 17),
          ("updateUCSManagerCopyExtToLocal", 18),
          ("updateUCSManagerCopyExtToPeer", 19),
          ("updateUCSManagerStart", 20),
          ("updateUCSManagerExecute", 21),
          ("updateSwitchBegin", 22),
          ("updateSwitchCopyToLocal", 23),
          ("updateSwitchCopyToPeer", 24),
          ("updateSwitchUpdateLocal", 25),
          ("updateSwitchVerifyLocal", 26),
          ("updateSwitchResetLocal", 27),
          ("updateSwitchUpdateRemote", 28),
          ("updateSwitchVerifyRemote", 29),
          ("updateSwitchResetRemote", 30),
          ("updateIOMBegin", 31),
          ("updateIOMCopyImgFromRep", 32),
          ("updateIOMCopyIOMImgToSub", 33),
          ("extMgmtInterfaceConfigBegin", 205),
          ("extMgmtInterfaceConfigCIMCVlanCfgLocal", 206),
          ("extMgmtInterfaceConfigCIMCVlanCfgPeer", 207),
          ("registryConfigBegin", 393),
          ("registryConfigRemove", 394),
          ("sysConfigBegin", 483),
          ("sysConfigPrimary", 484),
          ("sysConfigSecondary", 485),
          ("extMgmtInterfaceConfigFail", 648),
          ("extMgmtInterfaceConfigSuccess", 649),
          ("registryConfigFail", 650),
          ("registryConfigSuccess", 651),
          ("sysConfigFail", 652),
          ("sysConfigSuccess", 653),
          ("updateIOMFail", 654),
          ("updateIOMSuccess", 655),
          ("updateSwitchFail", 656),
          ("updateSwitchSuccess", 657),
          ("updateUCSManagerFail", 658),
          ("updateUCSManagerSuccess", 659))
    )



class CfprApMgmtControllerFsmTaskFlags(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("samDmeMgmtControllerUpdateSwitchActivate", 1),
          ("samDmeMgmtControllerUpdateSwitchReset", 2))
    )


class CfprApMgmtControllerFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              17,
              22,
              31,
              205,
              393,
              483)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateUCSManager", 17),
          ("updateSwitch", 22),
          ("updateIOM", 31),
          ("extMgmtInterfaceConfig", 205),
          ("registryConfig", 393),
          ("sysConfig", 483))
    )



class CfprApMgmtDimmBlacklistingOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("enabled", 1),
          ("disabled", 2),
          ("unsupported", 3))
    )



class CfprApMgmtEntityChassisDeviceIoState1(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ok", 1),
          ("openError", 2),
          ("readError", 3),
          ("writeError", 4))
    )



class CfprApMgmtEntityChassisDeviceIoState2(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ok", 1),
          ("openError", 2),
          ("readError", 3),
          ("writeError", 4))
    )



class CfprApMgmtEntityChassisDeviceIoState3(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ok", 1),
          ("openError", 2),
          ("readError", 3),
          ("writeError", 4))
    )



class CfprApMgmtEntityHaFailureReason(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("nodeDown", 1),
          ("peerNodeDown", 2),
          ("mgmtServicesUnresponsive", 3),
          ("peerMgmtServicesUnresponsive", 4),
          ("chassisConfigIncomplete", 5),
          ("peerChassisConfigIncomplete", 6),
          ("networkInterfaceDown", 7))
    )



class CfprApMgmtEntityHaReadiness(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ready", 1),
          ("downgraded", 2),
          ("notReady", 3))
    )



class CfprApMgmtEntityLeadership(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("primary", 1),
          ("subordinate", 2),
          ("inapplicable", 3),
          ("electionInProgress", 4),
          ("electionFailed", 5))
    )



class CfprApMgmtEntityMgmtServicesState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("up", 1),
          ("unresponsive", 2),
          ("down", 3),
          ("switchoverInProgress", 4))
    )



class CfprApMgmtEntityProblems(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("leadership", 0),
          ("membership", 1),
          ("umbilical", 2),
          ("haReady", 3),
          ("versionMismatch", 4))
    )


class CfprApMgmtEntityState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("up", 1),
          ("down", 2))
    )



class CfprApMgmtEntityUmbilicalState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("degraded", 1),
          ("full", 2),
          ("failed", 3))
    )



class CfprApMgmtExportPolicyAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )



class CfprApMgmtExportPolicyProto(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ftp", 1),
          ("tftp", 2),
          ("scp", 3),
          ("http", 4),
          ("sftp", 5),
          ("nfsCopy", 6))
    )



class CfprApMgmtExportPolicyFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              460)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("reportConfigCopy", 460))
    )



class CfprApMgmtExportPolicyFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              460,
              461,
              660,
              661)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("reportConfigCopyBegin", 460),
          ("reportConfigCopyReport", 461),
          ("reportConfigCopyFail", 660),
          ("reportConfigCopySuccess", 661))
    )



class CfprApMgmtExportPolicyFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              460)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("reportConfigCopy", 460))
    )



class CfprApMgmtIPv6IfAddrFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              399)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("swMgmtOobIpv6IfConfig", 399))
    )



class CfprApMgmtIPv6IfAddrFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              399,
              400,
              662,
              663)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("swMgmtOobIpv6IfConfigBegin", 399),
          ("swMgmtOobIpv6IfConfigSwitch", 400),
          ("swMgmtOobIpv6IfConfigFail", 662),
          ("swMgmtOobIpv6IfConfigSuccess", 663))
    )



class CfprApMgmtIPv6IfAddrFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              399)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("swMgmtOobIpv6IfConfig", 399))
    )



class CfprApMgmtIfFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              395,
              397,
              464,
              467,
              469,
              471)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("swMgmtOobIfConfig", 395),
          ("swMgmtInbandIfConfig", 397),
          ("virtualIfConfig", 464),
          ("enableVip", 467),
          ("disableVip", 469),
          ("enableHA", 471))
    )



class CfprApMgmtIfFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              395,
              396,
              397,
              398,
              464,
              465,
              466,
              467,
              468,
              469,
              470,
              471,
              472,
              664,
              665,
              666,
              667,
              668,
              669,
              670,
              671,
              672,
              673,
              674,
              675)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("swMgmtOobIfConfigBegin", 395),
          ("swMgmtOobIfConfigSwitch", 396),
          ("swMgmtInbandIfConfigBegin", 397),
          ("swMgmtInbandIfConfigSwitch", 398),
          ("virtualIfConfigBegin", 464),
          ("virtualIfConfigLocal", 465),
          ("virtualIfConfigRemote", 466),
          ("enableVipBegin", 467),
          ("enableVipLocal", 468),
          ("disableVipBegin", 469),
          ("disableVipPeer", 470),
          ("enableHABegin", 471),
          ("enableHALocal", 472),
          ("disableVipFail", 664),
          ("disableVipSuccess", 665),
          ("enableHAFail", 666),
          ("enableHASuccess", 667),
          ("enableVipFail", 668),
          ("enableVipSuccess", 669),
          ("swMgmtInbandIfConfigFail", 670),
          ("swMgmtInbandIfConfigSuccess", 671),
          ("swMgmtOobIfConfigFail", 672),
          ("swMgmtOobIfConfigSuccess", 673),
          ("virtualIfConfigFail", 674),
          ("virtualIfConfigSuccess", 675))
    )



class CfprApMgmtIfFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              395,
              397,
              464,
              467,
              469,
              471)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("swMgmtOobIfConfig", 395),
          ("swMgmtInbandIfConfig", 397),
          ("virtualIfConfig", 464),
          ("enableVip", 467),
          ("disableVip", 469),
          ("enableHA", 471))
    )



class CfprApMgmtImportAction(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            0
        )
    )
    namedValues = NamedValues(
        ("replace", 0)
    )



class CfprApMgmtImportStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("idle", 0),
          ("downloadSucceeded", 1),
          ("configSucceeded", 2),
          ("succeeded", 3),
          ("failed", 4))
    )



class CfprApMgmtImporterPostAction(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("remove", 1))
    )



class CfprApMgmtImporterProto(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ftp", 1),
          ("tftp", 2),
          ("scp", 3),
          ("http", 4),
          ("sftp", 5),
          ("nfsCopy", 6))
    )



class CfprApMgmtImporterFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              476)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("import", 476))
    )



class CfprApMgmtImporterFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              476,
              477,
              478,
              479,
              480,
              481,
              482,
              676,
              677)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("importBegin", 476),
          ("importDownloadLocal", 477),
          ("importCleanUp", 478),
          ("importConfigBreakout", 479),
          ("importWaitForSwitch", 480),
          ("importConfig", 481),
          ("importReportResults", 482),
          ("importFail", 676),
          ("importSuccess", 677))
    )



class CfprApMgmtImporterFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              476)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("import", 476))
    )



class CfprApMgmtIntAuthPolicyMethod(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("password", 1))
    )



class CfprApMgmtMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            0
        )
    )
    namedValues = NamedValues(
        ("inBand", 0)
    )



class CfprApMgmtOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("notDeployed", 1),
          ("deployed", 2),
          ("up", 3),
          ("down", 4))
    )



class CfprApMgmtPmonEntryState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("idle", 1),
          ("running", 2),
          ("pending", 3),
          ("failed", 4),
          ("error", 5),
          ("exitPending", 6),
          ("terminated", 7),
          ("killed", 8))
    )



class CfprApMgmtSecureBootOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1),
          ("unsupported", 2),
          ("enabling", 3))
    )



class CfprApMgmtSource(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unspecified", 0),
          ("sharedLom", 1),
          ("sideband", 2))
    )



class CfprApMgmtStateQual(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unspecified", 0),
          ("valid", 1),
          ("misconnected", 2))
    )



class CfprApMgmtStorageSubsystemState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("uninitialized", 1),
          ("initializing", 2),
          ("initialized", 3),
          ("unsupported", 4))
    )



class CfprApMgmtSubject(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              4,
              8,
              16,
              32,
              64)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("blade", 1),
          ("chassis", 2),
          ("system", 4),
          ("switch", 8),
          ("adaptor", 16),
          ("iocard", 32),
          ("boardController", 64))
    )



class CfprApMgmtUpgradeStatus(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("hwChangeDetected", 0),
          ("fwChangeDetected", 1),
          ("hwIncompatible", 2),
          ("fwIncompatible", 3),
          ("unsupportedHwVersion", 4),
          ("unsupportedFwVersion", 5),
          ("hwChangeSuccess", 6),
          ("fwChangeSuccess", 7))
    )


class CfprApMoMoClassId(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              63,
              64,
              65,
              66,
              67,
              68,
              69,
              70,
              71,
              72,
              73,
              74,
              75,
              76,
              77,
              78,
              79,
              80,
              81,
              82,
              83,
              84,
              85,
              86,
              87,
              88,
              89,
              90,
              91,
              92,
              93,
              94,
              95,
              96,
              97,
              98,
              99,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              119,
              120,
              121,
              122,
              123,
              124,
              125,
              126,
              127,
              128,
              129,
              130,
              131,
              132,
              133,
              134,
              135,
              136,
              137,
              138,
              139,
              140,
              141,
              142,
              143,
              144,
              145,
              146,
              147,
              148,
              149,
              150,
              151,
              152,
              153,
              154,
              155,
              156,
              157,
              158,
              159,
              160,
              161,
              162,
              163,
              164,
              165,
              166,
              167,
              168,
              169,
              170,
              171,
              172,
              173,
              174,
              175,
              176,
              177,
              178,
              179,
              180,
              181,
              182,
              183,
              184,
              185,
              186,
              187,
              188,
              189,
              190,
              191,
              192,
              193,
              194,
              195,
              196,
              197,
              198,
              199,
              200,
              201,
              202,
              203,
              204,
              205,
              206,
              207,
              208,
              209,
              210,
              211,
              212,
              213,
              214,
              215,
              216,
              217,
              218,
              219,
              220,
              221,
              222,
              223,
              224,
              225,
              226,
              227,
              228,
              229,
              230,
              231,
              232,
              233,
              234,
              235,
              236,
              237,
              238,
              239,
              240,
              241,
              242,
              243,
              244,
              245,
              246,
              247,
              248,
              249,
              250,
              251,
              252,
              253,
              254,
              255,
              256,
              257,
              258,
              259,
              260,
              261,
              262,
              263,
              264,
              265,
              266,
              267,
              268,
              269,
              270,
              271,
              272,
              273,
              274,
              275,
              276,
              277,
              278,
              279,
              280,
              281,
              282,
              283,
              284,
              285,
              286,
              287,
              288,
              289,
              290,
              291,
              292,
              293,
              294,
              295,
              296,
              297,
              298,
              299,
              300,
              301,
              302,
              303,
              304,
              305,
              306,
              307,
              308,
              309,
              310,
              311,
              312,
              313,
              314,
              315,
              316,
              317,
              318,
              319,
              320,
              321,
              322,
              323,
              324,
              325,
              326,
              327,
              328,
              329,
              330,
              331,
              332,
              333,
              334,
              335,
              336,
              337,
              338,
              339,
              340,
              341,
              342,
              343,
              344,
              345,
              346,
              347,
              348,
              349,
              350,
              351,
              352,
              353,
              354,
              355,
              356,
              357,
              358,
              359,
              360,
              361,
              362,
              363,
              364,
              365,
              366,
              367,
              368,
              369,
              370,
              371,
              372,
              373,
              374,
              375,
              376,
              377,
              378,
              379,
              380,
              381,
              382,
              383,
              384,
              385,
              386,
              387,
              388,
              389,
              390,
              391,
              392,
              393,
              394,
              395,
              396,
              397,
              398,
              399,
              400,
              401,
              402,
              403,
              404,
              405,
              406,
              407,
              408,
              409,
              410,
              411,
              412,
              413,
              414,
              415,
              416,
              417,
              418,
              419,
              420,
              421,
              422,
              423,
              424,
              425,
              426,
              427,
              428,
              429,
              430,
              431,
              432,
              433,
              434,
              435,
              436,
              437,
              438,
              439,
              440,
              441,
              442,
              443,
              444,
              445,
              446,
              447,
              448,
              449,
              450,
              451,
              452,
              453,
              454,
              455,
              456,
              457,
              458,
              459,
              460,
              461,
              462,
              463,
              464,
              465,
              466,
              467,
              468,
              469,
              470,
              471,
              472,
              473,
              474,
              475,
              476,
              477,
              478,
              479,
              480,
              481,
              482,
              483,
              484,
              485,
              486,
              487,
              488,
              489,
              490,
              491,
              492,
              493,
              494,
              495,
              496,
              497,
              498,
              499,
              500,
              501,
              502,
              503,
              504,
              505,
              506,
              507,
              508,
              509,
              510,
              511,
              512,
              513,
              514,
              515,
              516,
              517,
              518,
              519,
              520,
              521,
              522,
              523,
              524,
              525,
              526,
              527,
              528,
              529,
              530,
              531,
              532,
              533,
              534,
              535,
              536,
              537,
              538,
              539,
              540,
              541,
              542,
              543,
              544,
              545,
              546,
              547,
              548,
              549,
              550,
              551,
              552,
              553,
              554,
              555,
              556,
              557,
              558,
              559,
              560,
              561,
              562,
              563,
              564,
              565,
              566,
              567,
              568,
              569,
              570,
              571,
              572,
              573,
              574,
              575,
              576,
              577,
              578,
              579,
              580,
              581,
              582,
              583,
              584,
              585,
              586,
              587,
              588,
              589,
              590,
              591,
              592,
              593,
              594,
              595,
              596,
              597,
              598,
              599,
              600,
              601,
              602,
              603,
              604,
              605,
              606,
              607,
              608,
              609,
              610,
              611,
              612,
              613,
              614,
              615,
              616,
              617,
              618,
              619,
              620,
              621,
              622,
              623,
              624,
              625,
              626,
              627,
              628,
              629,
              630,
              631,
              632,
              633,
              634,
              635,
              636,
              637,
              638,
              639,
              640,
              641,
              642,
              643,
              644,
              645,
              646,
              647,
              648,
              649,
              650,
              651,
              652,
              653,
              654,
              655,
              656,
              657,
              658,
              659,
              660,
              661,
              662,
              663,
              664,
              665,
              666,
              667,
              668,
              669,
              670,
              671,
              672,
              673,
              674,
              675,
              676,
              677,
              678,
              679,
              680,
              681,
              682,
              683,
              684,
              685,
              686,
              687,
              688,
              689,
              690,
              691,
              692,
              693,
              694,
              695,
              696,
              697,
              698,
              699,
              700,
              701,
              702,
              703,
              704,
              705,
              706,
              707,
              708,
              709,
              710,
              711,
              712,
              713,
              714,
              715,
              716,
              717,
              718,
              719,
              720,
              721,
              722,
              723,
              724,
              725,
              726,
              727,
              728,
              729,
              730,
              731,
              732,
              733,
              734,
              735,
              736,
              737,
              738,
              739,
              740,
              741,
              742,
              743,
              744,
              745,
              746,
              747,
              748,
              749,
              750,
              751,
              752,
              753,
              754,
              755,
              756,
              757,
              758,
              759,
              760,
              761,
              762,
              763,
              764,
              765,
              766,
              767,
              768,
              769,
              770,
              771,
              772,
              773,
              774,
              775,
              776,
              777,
              778,
              779,
              780,
              781,
              782,
              783,
              784,
              785,
              786,
              787,
              788,
              789,
              790,
              791,
              792,
              793,
              794,
              795,
              796,
              797,
              798,
              799,
              800,
              801,
              802,
              803,
              804,
              805,
              806,
              807,
              808,
              809,
              810,
              811,
              812,
              813,
              814,
              815,
              816,
              817,
              818,
              819,
              820,
              821,
              822,
              823,
              824,
              825,
              826,
              827,
              828,
              829,
              830,
              831,
              832,
              833,
              834,
              835,
              836,
              837,
              838,
              839,
              840,
              841,
              842,
              843,
              844,
              845,
              846,
              847,
              848,
              849,
              850,
              851,
              852,
              853,
              854,
              855,
              856,
              857,
              858,
              859,
              860,
              861,
              862,
              863,
              864,
              865,
              866,
              867,
              868,
              869,
              870,
              871,
              872,
              873,
              874,
              875,
              876,
              877,
              878,
              879,
              880,
              881,
              882,
              883,
              884,
              885,
              886,
              887,
              888,
              889,
              890,
              891,
              892,
              893,
              894,
              895,
              896,
              897,
              898,
              899,
              900,
              901,
              902,
              903,
              904,
              905,
              906,
              907,
              908,
              909,
              910,
              911,
              912,
              913,
              914,
              915,
              916,
              917,
              918,
              919,
              920,
              921,
              922,
              923,
              924,
              925,
              926,
              927,
              928,
              929,
              930,
              931,
              932,
              933,
              934,
              935,
              936,
              937,
              938,
              939,
              940,
              941,
              942,
              943,
              944,
              945,
              946,
              947,
              948,
              949,
              950,
              951,
              952,
              953,
              954,
              955,
              956,
              957,
              958,
              959,
              960,
              961,
              962,
              963,
              964,
              965,
              966,
              967,
              968,
              969,
              970,
              971,
              972,
              973,
              974,
              975,
              976,
              977,
              978,
              979,
              980,
              981,
              982,
              983,
              984,
              985,
              986,
              987,
              988,
              989,
              990,
              991,
              992,
              993,
              994,
              995,
              996,
              997,
              998,
              999,
              1000,
              1001,
              1002,
              1003,
              1004,
              1005,
              1006,
              1007,
              1008,
              1009,
              1010,
              1011,
              1012,
              1013,
              1014,
              1015,
              1016,
              1017,
              1018,
              1019,
              1020,
              1021,
              1022,
              1023,
              1024,
              1025,
              1026,
              1027,
              1028,
              1029,
              1030,
              1031,
              1032,
              1033,
              1034,
              1035,
              1036,
              1037,
              1038,
              1039,
              1040,
              1041,
              1042,
              1043,
              1044,
              1045,
              1046,
              1047,
              1048,
              1049,
              1050,
              1051,
              1052,
              1053,
              1054,
              1055,
              1056,
              1057,
              1058,
              1059,
              1060,
              1061,
              1062,
              1063,
              1064,
              1065,
              1066,
              1067,
              1068,
              1069,
              1070,
              1071,
              1072,
              1073,
              1074,
              1075,
              1076,
              1077,
              1078,
              1079,
              1080,
              1081,
              1082,
              1083,
              1084,
              1085,
              1086,
              1087,
              1088,
              1089,
              1090,
              1091,
              1092,
              1093,
              1094,
              1095,
              1096,
              1097,
              1098,
              1099,
              1100,
              1101,
              1102,
              1103,
              1104,
              1105,
              1106,
              1107,
              1108,
              1109,
              1110,
              1111,
              1112,
              1113,
              1114,
              1115,
              1116,
              1117,
              1118,
              1119,
              1120,
              1121,
              1122,
              1123,
              1124,
              1125,
              1126,
              1127,
              1128,
              1129,
              1130,
              1131,
              1132,
              1133,
              1134,
              1135,
              1136,
              1137,
              1138,
              1139,
              1140,
              1141,
              1142,
              1143,
              1144,
              1145,
              1146,
              1147,
              1148,
              1149,
              1150,
              1151,
              1152,
              1153,
              1154,
              1155,
              1156,
              1157,
              1158,
              1159,
              1160,
              1161,
              1162,
              1163,
              1164,
              1165,
              1166,
              1167,
              1168,
              1169,
              1170,
              1171,
              1172,
              1173,
              1174,
              1175,
              1176,
              1177,
              1178,
              1179,
              1180,
              1181,
              1182,
              1183,
              1184,
              1185,
              1186,
              1187,
              1188,
              1189,
              1190,
              1191,
              1192,
              1193,
              1194,
              1195,
              1196,
              1197,
              1198,
              1199,
              1200,
              1201,
              1202,
              1203,
              1204,
              1205,
              1206,
              1207,
              1208,
              1209,
              1210,
              1211,
              1212,
              1213,
              1214,
              1215,
              1216,
              1217,
              1218,
              1219,
              1220,
              1221,
              1222,
              1223,
              1224,
              1225,
              1226,
              1227,
              1228,
              1229,
              1230,
              1231,
              1232,
              1233,
              1234,
              1235,
              1236,
              1237,
              1238,
              1239,
              1240,
              1241,
              1242,
              1243,
              1244,
              1245,
              1246,
              1247,
              1248,
              1249,
              1250,
              1251,
              1252,
              1253,
              1254,
              1255,
              1256,
              1257,
              1258,
              1259,
              1260,
              1261,
              1262,
              1263,
              1264,
              1265,
              1266,
              1267,
              1268,
              1269,
              1270,
              1271,
              1272,
              1273,
              1274,
              1275,
              1276,
              1277,
              1278,
              1279,
              1280,
              1281,
              1282,
              1283,
              1284,
              1285,
              1286,
              1287,
              1288,
              1289,
              1290,
              1291,
              1292,
              1293,
              1294,
              1295,
              1296,
              1297,
              1298,
              1299,
              1300,
              1301,
              1302,
              1303,
              1304,
              1305,
              1306,
              1307,
              1308,
              1309,
              1310,
              1311,
              1312,
              1313,
              1314,
              1315,
              1316,
              1317,
              1318,
              1319,
              1320,
              1321,
              1322,
              1323,
              1324,
              1325,
              1326,
              1327,
              1328,
              1329,
              1330,
              1331,
              1332,
              1333,
              1334,
              1335,
              1336,
              1337,
              1338,
              1339,
              1340,
              1341,
              1342,
              1343,
              1344,
              1345,
              1346,
              1347,
              1348,
              1349,
              1350,
              1351,
              1352,
              1353,
              1354,
              1355,
              1356,
              1357,
              1358,
              1359,
              1360,
              1361,
              1362,
              1363,
              1364,
              1365,
              1366,
              1367,
              1368,
              1369,
              1370,
              1371,
              1372,
              1373,
              1374,
              1375,
              1376,
              1377,
              1378,
              1379,
              1380,
              1381,
              1382,
              1383,
              1384,
              1385,
              1386,
              1387,
              1388,
              1389,
              1390,
              1391,
              1392,
              1393,
              1394,
              1395,
              1396,
              1397,
              1398,
              1399,
              1400,
              1401,
              1402,
              1403,
              1404,
              1405,
              1406,
              1407,
              1408,
              1409,
              1410,
              1411,
              1412,
              1413,
              1414,
              1415,
              1416,
              1417,
              1418,
              1419,
              1420,
              1421,
              1422,
              1423,
              1424,
              1425,
              1426,
              1427,
              1428,
              1429,
              1430,
              1431,
              1432,
              1433,
              1434,
              1435,
              1436,
              1437,
              1438,
              1439,
              1440,
              1441,
              1442,
              1443,
              1444,
              1445,
              1446,
              1447,
              1448,
              1449,
              1450,
              1451,
              1452,
              1453,
              1454,
              1455,
              1456,
              1457,
              1458,
              1459,
              1460,
              1461,
              1462,
              1463,
              1464,
              1465,
              1466,
              1467,
              1468,
              1469,
              1470,
              1471,
              1472,
              1473,
              1474,
              1475,
              1476,
              1477,
              1478,
              1479,
              1480,
              1481,
              1482,
              1483,
              1484,
              1485,
              1486,
              1487,
              1488,
              1489,
              1490,
              1491,
              1492,
              1493,
              1494,
              1495,
              1496,
              1497,
              1498,
              1499,
              1500,
              1501,
              1502,
              1503,
              1504,
              1505,
              1506,
              1507,
              1508,
              1509,
              1510,
              1511,
              1512,
              1513,
              1514,
              1515,
              1516,
              1517,
              1518,
              1519,
              1520,
              1521,
              1522,
              1523,
              1524,
              1525,
              1526,
              1527,
              1528,
              1529,
              1530,
              1531,
              1532,
              1533,
              1534,
              1535,
              1536,
              1537,
              1538,
              1539,
              1540,
              1541,
              1542,
              1543,
              1544,
              1545,
              1546,
              1547,
              1548,
              1549,
              1550,
              1551,
              1552,
              1553,
              1554,
              1555,
              1556,
              1557,
              1558,
              1559,
              1560,
              1561,
              1562,
              1563,
              1564,
              1565,
              1566,
              1567,
              1568,
              1569,
              1570,
              1571,
              1572,
              1573,
              1574,
              1575,
              1576,
              1577,
              1578,
              1579,
              1580,
              1581,
              1582,
              1583,
              1584,
              1585,
              1586,
              1587,
              1588,
              1589,
              1590,
              1591,
              1592,
              1593,
              1594,
              1595,
              1596,
              1597,
              1598,
              1599,
              1600,
              1601,
              1602,
              1603,
              1604,
              1605,
              1606,
              1607,
              1608,
              1609,
              1610,
              1611,
              1612,
              1613,
              1614,
              1615,
              1616,
              1617,
              1618,
              1619,
              1620,
              1621,
              1622,
              1623,
              1624,
              1625,
              1626,
              1627,
              1628,
              1629,
              1630,
              1631,
              1632,
              1633,
              1634,
              1635,
              1636,
              1637,
              1638,
              1639,
              1640,
              1641,
              1642,
              1643,
              1644,
              1645,
              1646,
              1647,
              1648,
              1649,
              1650,
              1651,
              1652,
              1653,
              1654,
              1655,
              1656,
              1657,
              1658,
              1659,
              1660,
              1661,
              1662,
              1663,
              1664,
              1665,
              1666,
              1667,
              1668,
              1669,
              1670,
              1671,
              1672,
              1673,
              1674,
              1675,
              1676,
              1677,
              1678,
              1679,
              1680,
              1681,
              1682,
              1683,
              1684,
              1685,
              1686,
              1687,
              1688,
              1689,
              1690,
              1691,
              1692,
              1693,
              1694,
              1695,
              1696,
              1697,
              1698,
              1699,
              1700,
              1701,
              1702,
              1703,
              1704,
              1705,
              1706,
              1707,
              1708,
              1709,
              1710,
              1711,
              1712,
              1713,
              1714,
              1715,
              1716,
              1717,
              1718,
              1719,
              1720,
              1721,
              1722,
              1723,
              1724,
              1725,
              1726,
              1727,
              1728,
              1729,
              1730,
              1731,
              1732,
              1733,
              1734,
              1735,
              1736,
              1737,
              1738,
              1739,
              1740,
              1741,
              1742,
              1743,
              1744,
              1745,
              1746,
              1747,
              1748,
              1749,
              1750,
              1751,
              1752,
              1753,
              1754,
              1755,
              1756,
              1757,
              1758,
              1759,
              1760,
              1761,
              1762,
              1763,
              1764,
              1765,
              1766,
              1767,
              1768,
              1769,
              1770,
              1771,
              1772,
              1773,
              1774,
              1775,
              1776,
              1777,
              1778,
              1779,
              1780,
              1781,
              1782,
              1783,
              1784,
              1785,
              1786,
              1787,
              1788,
              1789,
              1790,
              1791,
              1792,
              1793,
              1794,
              1795,
              1796,
              1797,
              1798,
              1799,
              1800,
              1801,
              1802,
              1803,
              1804,
              1805,
              1806,
              1807,
              1808,
              1809,
              1810,
              1811,
              1812,
              1813,
              1814,
              1815,
              1816,
              1817,
              1818,
              1819,
              1820,
              1821,
              1822,
              1823,
              1824,
              1825,
              1826,
              1827,
              1828,
              1829,
              1830,
              1831,
              1832,
              1833,
              1834,
              1835,
              1836,
              1837,
              1838,
              1839,
              1840,
              1841,
              1842,
              1843,
              1844,
              1845,
              1846,
              1847,
              1848,
              1849,
              1850,
              1851,
              1852,
              1853,
              1854,
              1855,
              1856,
              1857,
              1858,
              1859,
              1860,
              1861,
              1862,
              1863,
              1864,
              1865,
              1866,
              1867,
              1868,
              1869,
              1870,
              1871,
              1872,
              1873,
              1874,
              1875,
              1876,
              1877,
              1878,
              1879,
              1880,
              1881,
              1882,
              1883,
              1884,
              1885,
              1886,
              1887,
              1888,
              1889,
              1890,
              1891,
              1892,
              1893,
              1894,
              1895,
              1896,
              1897,
              1898,
              1899,
              1900,
              1901,
              1902,
              1903,
              1904,
              1905,
              1906,
              1907,
              1908,
              1909,
              1910,
              1911,
              1912,
              1913,
              1914,
              1915,
              1916,
              1917,
              1918,
              1919,
              1920,
              1921,
              1922,
              1923,
              1924,
              1925,
              1926,
              1927,
              1928,
              1929,
              1930,
              1931,
              1932,
              1933,
              1934,
              1935,
              1936,
              1937,
              1938,
              1939,
              1940,
              1941,
              1942,
              1943,
              1944,
              1945,
              1946,
              1947,
              1948,
              1949,
              1950,
              1951,
              1952,
              1953,
              1954,
              1955,
              1956,
              1957,
              1958,
              1959,
              1960,
              1961,
              1962,
              1963,
              1964,
              1965,
              1966,
              1967,
              1968,
              1969,
              1970,
              1971,
              1972,
              1973,
              1974,
              1975,
              1976,
              1977,
              1978,
              1979,
              1980,
              1981,
              1982,
              1983,
              1984,
              1985,
              1986,
              1987,
              1988,
              1989,
              1990,
              1991,
              1992,
              1993,
              1994,
              1995,
              1996,
              1997,
              1998,
              1999,
              2000,
              2001,
              2002,
              2003,
              2004,
              2005,
              2006,
              2007,
              2008,
              2009,
              2010,
              2011,
              2012,
              2013,
              2014,
              2015,
              2016,
              2017,
              2018,
              2019,
              2020,
              2021,
              2022,
              2023,
              2024,
              2025,
              2026,
              2027,
              2028,
              2029,
              2030,
              2031,
              2032,
              2033,
              2034,
              2035,
              2036,
              2037,
              2038,
              2039,
              2040,
              2041,
              2042,
              2043,
              2044,
              2045,
              2046,
              2047,
              2048,
              2049,
              2050,
              2051,
              2052,
              2053,
              2054,
              2055,
              2056,
              2057,
              2058,
              2059,
              2060,
              2062)
        )
    )
    namedValues = NamedValues(
        *(("unspecified", 0),
          ("moTopProps", 1),
          ("topRoot", 2),
          ("topSystem", 3),
          ("topMetaInf", 4),
          ("topInfoPolicy", 5),
          ("topSysDefaults", 6),
          ("fsmTask", 7),
          ("fsmFsm", 8),
          ("fsmStage", 9),
          ("namingNamedObject", 10),
          ("namingNamedIdentifiedObject", 11),
          ("conditionInfo", 12),
          ("conditionReportable", 13),
          ("conditionMutable", 14),
          ("conditionImmutable", 15),
          ("conditionMultiInstanceImmutable", 16),
          ("conditionPolicy", 17),
          ("conditionLog", 18),
          ("conditionLoggable", 19),
          ("aaaLog", 20),
          ("aaaUserAction", 21),
          ("aaaModLR", 22),
          ("aaaSessionLR", 23),
          ("eventEpCtrl", 24),
          ("eventLog", 25),
          ("eventRecord", 26),
          ("eventHolder", 27),
          ("eventInst", 28),
          ("eventPolicy", 29),
          ("faultBaseHolder", 30),
          ("faultLocalTypedHolder", 31),
          ("faultHolder", 32),
          ("faultInst", 33),
          ("faultBasePolicy", 34),
          ("faultPolicy", 35),
          ("faultSuppressPolicy", 36),
          ("faultSuppressPolicyItem", 37),
          ("faultSuppressTask", 38),
          ("faultAffectedClass", 39),
          ("statsItem", 40),
          ("statsCurr", 41),
          ("statsHist", 42),
          ("statsHolder", 43),
          ("statsCollectionPolicy", 44),
          ("statsThresholdPolicy", 45),
          ("statsThresholdClass", 46),
          ("statsThresholdDefinition", 47),
          ("statsThr32Definition", 48),
          ("statsThr64Definition", 49),
          ("statsThrFloatDefinition", 50),
          ("statsThresholdValue", 51),
          ("statsThr32Value", 52),
          ("statsThr64Value", 53),
          ("statsThrFloatValue", 54),
          ("gmetaEp", 55),
          ("gmetaHolder", 56),
          ("gmetaClass", 57),
          ("gmetaProp", 58),
          ("gmetaPolicyMapHolder", 59),
          ("equipmentPOSTCodeContainer", 60),
          ("equipmentPOSTCodeTemplate", 61),
          ("equipmentPOSTCodeReporter", 62),
          ("equipmentPOSTCodeData", 63),
          ("equipmentPOSTCode", 64),
          ("equipmentPOST", 65),
          ("swatInjection", 66),
          ("swatTrigger", 67),
          ("swatCondition", 68),
          ("swatTarget", 69),
          ("swatAction", 70),
          ("swatResultstats", 71),
          ("apeManager", 72),
          ("apeMc", 73),
          ("apeMcTable", 74),
          ("apeFru", 75),
          ("apeSdr", 76),
          ("apeReading", 77),
          ("apeParam", 78),
          ("apeBootMethod", 79),
          ("apeLANBoot", 80),
          ("apeSANBoot", 81),
          ("apeLocalDiskBoot", 82),
          ("apeVirtualMediaBoot", 83),
          ("apeHostAgent", 84),
          ("apeDcosAgManager", 85),
          ("apeSwitchFirmwareInv", 86),
          ("apeControllerManager", 87),
          ("apeControllerChassis", 88),
          ("apeControllerEeprom", 89),
          ("apeNicAgManager", 90),
          ("apeAdapter", 91),
          ("apeMenlo", 92),
          ("apePalo", 93),
          ("apeAdapterVnic", 94),
          ("apeMenloVnic", 95),
          ("apePaloVnic", 96),
          ("apeVnicStats", 97),
          ("apeMenloVnicStats", 98),
          ("apePaloVnicStats", 99),
          ("computeQualItem", 100),
          ("computeQualifiedPolicy", 101),
          ("computePhysicalQual", 102),
          ("computeBladePosQual", 103),
          ("computeRackPosQual", 104),
          ("computeChassisQual", 105),
          ("computeSlotQual", 106),
          ("computeRackQual", 107),
          ("computePool", 108),
          ("computePoolingPolicy", 109),
          ("computePooledPhysical", 110),
          ("computePooledSlot", 111),
          ("computePooledRackUnit", 112),
          ("computeConfigPolicy", 113),
          ("computeDiscPolicy", 114),
          ("computeServerDiscPolicy", 115),
          ("computeAChassisDiscPolicy", 116),
          ("computeComputeDiscPolicy", 117),
          ("computeChassisDiscPolicy", 118),
          ("computePoolPolicyRef", 119),
          ("computeItem", 120),
          ("computeIOHub", 121),
          ("computePhysical", 122),
          ("computeLogical", 123),
          ("computeABoard", 124),
          ("computeBoard", 125),
          ("computeExtBoard", 126),
          ("computeBoardConnector", 127),
          ("queryresultItem", 128),
          ("queryresultUsage", 129),
          ("queryresultDependency", 130),
          ("dpsecMac", 131),
          ("powerPolicy", 132),
          ("powerGroupQual", 133),
          ("powerAGroup", 134),
          ("powerGroup", 135),
          ("dcxVc", 136),
          ("vnicL3If", 137),
          ("vnicIPIf", 138),
          ("vnicIPv4If", 139),
          ("vnicIpAddr", 140),
          ("vnicIpV4Addr", 141),
          ("vnicIpV6Addr", 142),
          ("vnicIpV4AddrConf", 143),
          ("vnicIpV4AddrExplConf", 144),
          ("vnicIpV6AddrConf", 145),
          ("vnicIpV6AddrExplConf", 146),
          ("vnicIpV4ProfDerivedAddr", 147),
          ("vnicIpV4StaticAddr", 148),
          ("vnicIpV6StaticAddr", 149),
          ("vnicIpV4PooledAddr", 150),
          ("vnicIpV4MgmtPooledAddr", 151),
          ("vnicIpV6MgmtPooledAddr", 152),
          ("vnicIPv4Dhcp", 153),
          ("vnicIPv4Dns", 154),
          ("vnicIPv4StaticRoute", 155),
          ("vnicIPv4IscsiAddr", 156),
          ("vnicIPv4PooledIscsiAddr", 157),
          ("vnicBootIpPolicy", 158),
          ("vnicConReq", 159),
          ("vnicConPolicyRef", 160),
          ("vnicDynamicConReq", 161),
          ("vnicDynamicConPolicy", 162),
          ("vnicSanConnPolicy", 163),
          ("vnicLanConnPolicy", 164),
          ("vnicFcNode", 165),
          ("vnicIScsiNode", 166),
          ("vnicBootTarget", 167),
          ("vnicVlan", 168),
          ("vnicIScsiTargetIf", 169),
          ("vnicIScsiStaticTargetIf", 170),
          ("vnicLun", 171),
          ("vnicIScsiAutoTargetIf", 172),
          ("vnicIScsiBootParams", 173),
          ("vnicIScsiBootVnic", 174),
          ("vnicConnection", 175),
          ("vnicNicConn", 176),
          ("vnicConnDef", 177),
          ("vnicIf", 178),
          ("vnicABeh", 179),
          ("vnicDefBeh", 180),
          ("vnicVnicBehPolicy", 181),
          ("vnicVhbaBehPolicy", 182),
          ("vnicUsnicConReq", 183),
          ("vnicUsnicConPolicy", 184),
          ("vnicUsnicConPolicyRef", 185),
          ("vnicDynamicConPolicyRef", 186),
          ("vnicL2If", 187),
          ("vnicAFcIf", 188),
          ("vnicEtherBaseIf", 189),
          ("vnicAEtherIf", 190),
          ("vnicFcOEIf", 191),
          ("vnicFcIf", 192),
          ("vnicEtherIf", 193),
          ("vnicVmqConReq", 194),
          ("vnicVmqConPolicy", 195),
          ("vnicVmqConPolicyRef", 196),
          ("adaptorUnit", 197),
          ("adaptorHostIfProfile", 198),
          ("adaptorHostEthIfProfile", 199),
          ("adaptorHostFcIfProfile", 200),
          ("adaptorProfileItem", 201),
          ("adaptorQueueProfile", 202),
          ("adaptorFcLogiProfile", 203),
          ("adaptorEthQueueProfile", 204),
          ("adaptorFcQueueProfile", 205),
          ("adaptorEthWorkQueueProfile", 206),
          ("adaptorEthArfsProfile", 207),
          ("adaptorEthNVGREProfile", 208),
          ("adaptorEthVxLANProfile", 209),
          ("adaptorEthRoCEProfile", 210),
          ("adaptorEthRecvQueueProfile", 211),
          ("adaptorEthCompQueueProfile", 212),
          ("adaptorEthInterruptProfile", 213),
          ("adaptorRssProfile", 214),
          ("adaptorRssHashProfile", 215),
          ("adaptorTcpIpRssHashProfile", 216),
          ("adaptorIpV4RssHashProfile", 217),
          ("adaptorIpV6RssHashProfile", 218),
          ("adaptorExtIpV6RssHashProfile", 219),
          ("adaptorEthOffloadProfile", 220),
          ("adaptorEthFailoverProfile", 221),
          ("adaptorFcRecvQueueProfile", 222),
          ("adaptorFcWorkQueueProfile", 223),
          ("adaptorFcCdbWorkQueueProfile", 224),
          ("adaptorFcPortFLogiProfile", 225),
          ("adaptorFcPortPLogiProfile", 226),
          ("adaptorFcPortProfile", 227),
          ("adaptorFcErrorRecoveryProfile", 228),
          ("adaptorFcInterruptProfile", 229),
          ("adaptorHostIscsiIfProfile", 230),
          ("adaptorProtocolProfile", 231),
          ("adaptorFruCapProvider", 232),
          ("adaptorCapSpec", 233),
          ("adaptorIScsiCap", 234),
          ("adaptorBehCap", 235),
          ("adaptorHwAddrCap", 236),
          ("adaptorHostIf", 237),
          ("adaptorExtEthIf", 238),
          ("adaptorExtIf", 239),
          ("adaptorHostEthIf", 240),
          ("adaptorHostFcIf", 241),
          ("adaptorHostIfConnDef", 242),
          ("adaptorUsnicConnDef", 243),
          ("adaptorVlan", 244),
          ("adaptorQual", 245),
          ("adaptorCapQual", 246),
          ("adaptorCapDef", 247),
          ("memoryArray", 248),
          ("memoryBufferUnit", 249),
          ("memoryUnit", 250),
          ("memoryQual", 251),
          ("lsbootADef", 252),
          ("lsbootDef", 253),
          ("lsbootPolicy", 254),
          ("lsbootBootSecurity", 255),
          ("lsbootItem", 256),
          ("lsbootCategory", 257),
          ("lsbootStorage", 258),
          ("lsbootSan", 259),
          ("lsbootLan", 260),
          ("lsbootIScsi", 261),
          ("lsbootImagePath", 262),
          ("lsbootLanImagePath", 263),
          ("lsbootIScsiImagePath", 264),
          ("lsbootVirtualMedia", 265),
          ("lsbootImage", 266),
          ("lsbootRemoteImage", 267),
          ("lsbootSanImage", 268),
          ("lsbootSanCatSanImage", 269),
          ("lsbootLocalImage", 270),
          ("lsbootLocalStorage", 271),
          ("lsbootLocalMediaItem", 272),
          ("lsbootDefaultLocalImage", 273),
          ("lsbootUsbFlashStorageImage", 274),
          ("lsbootLocalHddImage", 275),
          ("lsbootUsbInternalImage", 276),
          ("lsbootUsbExternalImage", 277),
          ("lsbootSanImagePath", 278),
          ("lsbootSanCatSanImagePath", 279),
          ("lsVConAssign", 280),
          ("lsServerExtension", 281),
          ("vmNic", 282),
          ("vmAdaptor", 283),
          ("flowctrlDefinition", 284),
          ("flowctrlItem", 285),
          ("configImpact", 286),
          ("iqnpoolTransportBlock", 287),
          ("equipmentItem", 288),
          ("equipmentStateful", 289),
          ("equipmentStatefulBladeComp", 290),
          ("equipmentPsu", 291),
          ("equipmentFanModule", 292),
          ("equipmentFan", 293),
          ("equipmentXcvr", 294),
          ("equipmentLocalDiskCapProvider", 295),
          ("equipmentProcessorUnitCapProvider", 296),
          ("equipmentBehCap", 297),
          ("equipmentLocalDiskDef", 298),
          ("etherPIo", 299),
          ("etherServerIntFIo", 300),
          ("storageADef", 301),
          ("storageConnectionPolicy", 302),
          ("storageTarget", 303),
          ("storageFcTargetEp", 304),
          ("storageVsanRef", 305),
          ("storageConnectionDef", 306),
          ("storageIniGroup", 307),
          ("storageInitiator", 308),
          ("storageQual", 309),
          ("storageLocalDiskConfig", 310),
          ("storageLocalDiskConfigPolicy", 311),
          ("storageControllerBase", 312),
          ("storageController", 313),
          ("storageMezzFlashLife", 314),
          ("storageFlexFlashController", 315),
          ("storageDevice", 316),
          ("storageUnit", 317),
          ("storagePhysical", 318),
          ("storageLogical", 319),
          ("storageLocalDiskBase", 320),
          ("storageLocalDisk", 321),
          ("storageRaidBattery", 322),
          ("storageFlexFlashCard", 323),
          ("storageFlexFlashDrive", 324),
          ("storageFlexFlashVirtualDrive", 325),
          ("epqosDefinition", 326),
          ("epqosItem", 327),
          ("epqosEgress", 328),
          ("qosDefinition", 329),
          ("qosItem", 330),
          ("mgmtCimcInterface", 331),
          ("mgmtInterface", 332),
          ("mgmtVnet", 333),
          ("domainFeature", 334),
          ("domainParameter", 335),
          ("domainServerFeature", 336),
          ("domainNetworkFeature", 337),
          ("domainStorageFeature", 338),
          ("domainEnvironmentFeature", 339),
          ("domainServerParam", 340),
          ("domainNetworkParam", 341),
          ("domainStorageParam", 342),
          ("domainEnvironmentParam", 343),
          ("poolPoolMember", 344),
          ("networkConn", 345),
          ("networkEp", 346),
          ("networkCIoEp", 347),
          ("networkIfEp", 348),
          ("networkPhysEp", 349),
          ("networkVnetEp", 350),
          ("pciCard", 351),
          ("processorUnit", 352),
          ("processorQual", 353),
          ("iscsiAuthProfile", 354),
          ("graphicsCard", 355),
          ("graphicsController", 356),
          ("biosVFeat", 357),
          ("biosVProfile", 358),
          ("biosVfIntelTurboBoostTech", 359),
          ("biosVfInterleaveConfiguration", 360),
          ("biosVfDramRefreshRate", 361),
          ("biosVfEnhancedIntelSpeedStepTech", 362),
          ("clitestTypeTest", 363),
          ("biosVfIntelHyperThreadingTech", 364),
          ("biosVfLocalX2Apic", 365),
          ("biosVfCoreMultiProcessing", 366),
          ("clitestTypeTestParent", 367),
          ("clitestTypeTestChild", 368),
          ("clitestTypeTest2", 369),
          ("biosVfExecuteDisableBit", 370),
          ("biosVfIntelVirtualizationTechnology", 371),
          ("biosVfIntelVTForDirectedIO", 372),
          ("biosVfDirectCacheAccess", 373),
          ("biosVfSelectMemoryRASConfiguration", 374),
          ("biosVfSparingMode", 375),
          ("biosVfMirroringMode", 376),
          ("biosVfNUMAOptimized", 377),
          ("biosVfIntelEntrySASRAIDModule", 378),
          ("biosVfOnboardSATAController", 379),
          ("biosVfOnboardStorage", 380),
          ("biosVfSerialPortAEnable", 381),
          ("biosVfMaximumMemoryBelow4GB", 382),
          ("biosVfMemoryMappedIOAbove4GB", 383),
          ("biosVfSriovConfig", 384),
          ("biosVfFrontPanelLockout", 385),
          ("biosVfAssertNMIOnSERR", 386),
          ("biosVfAssertNMIOnPERR", 387),
          ("biosVfResumeOnACPowerLoss", 388),
          ("biosVfConsoleRedirection", 389),
          ("biosVfUEFIOSUseLegacyVideo", 390),
          ("biosVfBootOptionRetry", 391),
          ("biosVfUSBBootConfig", 392),
          ("biosVfQuietBoot", 393),
          ("biosVfPOSTErrorPause", 394),
          ("biosVfProcessorC3Report", 395),
          ("biosVfProcessorC6Report", 396),
          ("biosVfProcessorCState", 397),
          ("biosVfProcessorC7Report", 398),
          ("biosVfProcessorC1E", 399),
          ("biosVfOSBootWatchdogTimer", 400),
          ("biosVfOSBootWatchdogTimerPolicy", 401),
          ("biosVfOSBootWatchdogTimerTimeout", 402),
          ("biosVfACPI10Support", 403),
          ("biosVfLvDIMMSupport", 404),
          ("biosVfOptionROMLoad", 405),
          ("biosVfOptionROMEnable", 406),
          ("biosVfPCISlotOptionROMEnable", 407),
          ("biosVfPCISlotLinkSpeed", 408),
          ("biosVfCPUPerformance", 409),
          ("biosVfMaxVariableMTRRSetting", 410),
          ("biosVfUSBSystemIdlePowerOptimizingSetting", 411),
          ("biosVfUSBFrontPanelAccessLock", 412),
          ("biosVfUCSMBootOrderRuleControl", 413),
          ("biosVfUCSMBootModeControl", 414),
          ("biosVfPackageCStateLimit", 415),
          ("biosVfAllUSBDevices", 416),
          ("biosVfUSBPortConfiguration", 417),
          ("biosVfProcessorPrefetchConfig", 418),
          ("biosVfScrubPolicies", 419),
          ("biosVfVGAPriority", 420),
          ("biosVfFRB2Timer", 421),
          ("biosVfProcessorEnergyConfiguration", 422),
          ("biosVfFrequencyFloorOverride", 423),
          ("biosVfPSTATECoordination", 424),
          ("biosVfDRAMClockThrottling", 425),
          ("biosVfQPILinkFrequencySelect", 426),
          ("biosVfTPMSupport", 427),
          ("biosVfUSBConfiguration", 428),
          ("biosVfAltitude", 429),
          ("biosUnit", 430),
          ("biosBOT", 431),
          ("biosBootDevGrp", 432),
          ("biosBootDev", 433),
          ("solDef", 434),
          ("solPolicy", 435),
          ("fabricVnetEp", 436),
          ("fabricAVsan", 437),
          ("fabricEpVlan", 438),
          ("fabricAVlan", 439),
          ("fabricVlan", 440),
          ("fabricVsan", 441),
          ("fabricMulticastPolicy", 442),
          ("fabricVnetReq", 443),
          ("fabricVlanReq", 444),
          ("fabricVnetGroupReq", 445),
          ("fabricVlanGroupReq", 446),
          ("fabricOrgVlanPolicy", 447),
          ("fabricSan", 448),
          ("fabricFcSan", 449),
          ("fabricSanPc", 450),
          ("fabricFcSanPc", 451),
          ("fabricSanEp", 452),
          ("fabricAFcoeSanEp", 453),
          ("fabricFcoeSanPc", 454),
          ("fabricFcoeSanEp", 455),
          ("changeChangedObjectRef", 456),
          ("fabricLacpPolicy", 457),
          ("fabricVCon", 458),
          ("fabricVConProfile", 459),
          ("fabricLan", 460),
          ("fabricEthLan", 461),
          ("fabricCablingSw", 462),
          ("fabricLanPc", 463),
          ("fabricEthLanPc", 464),
          ("fabricUdldPolicy", 465),
          ("fabricEthLinkProfile", 466),
          ("fabricEthLinkPolicy", 467),
          ("fabricEthUdldPolicy", 468),
          ("fabricEthCdpPolicy", 469),
          ("fabricUdldLinkPolicy", 470),
          ("fabricCdpLinkPolicy", 471),
          ("fabricVnetEpSyncEp", 472),
          ("fabricChangedObjectRef", 473),
          ("fabricInternalDceSrv", 474),
          ("fabricDceSrv", 475),
          ("fabricExternalEstc", 476),
          ("fabricEthEstc", 477),
          ("fabricFcEstc", 478),
          ("fabricEstcEp", 479),
          ("fabricEstcPc", 480),
          ("fabricEthEstcPc", 481),
          ("fabricAFcoeEstcEp", 482),
          ("fabricFcoeEstcEp", 483),
          ("fabricExternalEp", 484),
          ("fabricPIoEp", 485),
          ("fabricInternal", 486),
          ("fabricCloud", 487),
          ("fabricFcEstcCloud", 488),
          ("fabricCIoEp", 489),
          ("fabricExternalPc", 490),
          ("fabricSanCloud", 491),
          ("fabricLanCloud", 492),
          ("fabricCabling", 493),
          ("fabricEthEstcCloud", 494),
          ("fabricLinkPolicy", 495),
          ("fabricDomain", 496),
          ("fabricLanAccessMgr", 497),
          ("fabricExternal", 498),
          ("fabricEp", 499),
          ("cimcvmediaItem", 500),
          ("cimcvmediaMountConfig", 501),
          ("cimcvmediaMountConfigDef", 502),
          ("cimcvmediaMountConfigPolicy", 503),
          ("cimcvmediaMountInfo", 504),
          ("cimcvmediaActualMountList", 505),
          ("cimcvmediaActualMountEntry", 506),
          ("cimcvmediaExtMgmtRuleEntry", 507),
          ("cimcvmediaConfigMountEntry", 508),
          ("portIntFIo", 509),
          ("portServerIntFIo", 510),
          ("portSwitchIntFIo", 511),
          ("portPhysSwitchIo", 512),
          ("portPIo", 513),
          ("fcPIo", 514),
          ("nwctrlDefinition", 515),
          ("gmetaPolicyMapElement", 516),
          ("computeQual", 517),
          ("computePoolable", 518),
          ("computePooled", 519),
          ("computeDefaults", 520),
          ("computePlatform", 521),
          ("computeInitConfigPolicy", 522),
          ("computeAutoconfigPolicy", 523),
          ("computeBladeInheritPolicy", 524),
          ("computeScrubPolicy", 525),
          ("computeKvmMgmtPolicy", 526),
          ("computeMemoryConfigPolicy", 527),
          ("computeMemoryConfiguration", 528),
          ("computeBladeDiscPolicy", 529),
          ("computeServerMgmtPolicy", 530),
          ("computeChassisConnPolicy", 531),
          ("computePsuDef", 532),
          ("computePsuPolicy", 533),
          ("computePsuControl", 534),
          ("computeRackUnit", 535),
          ("computeMbPowerStats", 536),
          ("computeMbPowerStatsHist", 537),
          ("computeMbTempStats", 538),
          ("computeMbTempStatsHist", 539),
          ("computeRackUnitMbTempStats", 540),
          ("computeRackUnitMbTempStatsHist", 541),
          ("computeIOHubEnvStats", 542),
          ("computeIOHubEnvStatsHist", 543),
          ("computePCIeFatalProtocolStats", 544),
          ("computePCIeFatalReceiveStats", 545),
          ("computePCIeFatalCompletionStats", 546),
          ("computePCIeFatalStats", 547),
          ("domainFeatureCont", 548),
          ("domainServerFeatureCont", 549),
          ("domainNetworkFeatureCont", 550),
          ("domainStorageFeatureCont", 551),
          ("domainEnvironmentFeatureCont", 552),
          ("computeContainer", 553),
          ("computeVirtualContainer", 554),
          ("computeVirtual", 555),
          ("computePartition", 556),
          ("computeBlade", 557),
          ("computeRtcBattery", 558),
          ("computeBehCap", 559),
          ("computePciCap", 560),
          ("computePciSlotScanDef", 561),
          ("computeMemoryUnitConstraintDef", 562),
          ("computePhysicalAssocCtx", 563),
          ("computeFwSyncAck", 564),
          ("computeBoardController", 565),
          ("computePnuOSImage", 566),
          ("computeHealthLedSensorAlarm", 567),
          ("firmwareCatalogue", 568),
          ("firmwareUnit", 569),
          ("firmwareRunning", 570),
          ("firmwareUpdatable", 571),
          ("firmwareBootUnit", 572),
          ("firmwareBootDefinition", 573),
          ("firmwareImage", 574),
          ("firmwareInstallable", 575),
          ("firmwareDistImage", 576),
          ("firmwareDistributable", 577),
          ("firmwareBundleInfo", 578),
          ("firmwareCspVersion", 579),
          ("firmwareCspAppList", 580),
          ("firmwareDistCspBlackList", 581),
          ("firmwareDownloader", 582),
          ("firmwareCompItem", 583),
          ("firmwareCompSource", 584),
          ("firmwareCompTarget", 585),
          ("firmwarePack", 586),
          ("firmwareImageLock", 587),
          ("firmwareInfraPack", 588),
          ("firmwarePlatformPack", 589),
          ("firmwarePackItem", 590),
          ("firmwareComputePack", 591),
          ("firmwareComputeHostPack", 592),
          ("firmwareComputeMgmtPack", 593),
          ("firmwareCatalogPack", 594),
          ("firmwareType", 595),
          ("firmwareConstraints", 596),
          ("firmwareConstraint", 597),
          ("firmwareDependency", 598),
          ("firmwareSystem", 599),
          ("firmwareInfra", 600),
          ("firmwarePlatform", 601),
          ("firmwareSupFirmware", 602),
          ("firmwareHost", 603),
          ("firmwareBlade", 604),
          ("firmwareRack", 605),
          ("firmwareStatus", 606),
          ("firmwareSystemCompCheckResult", 607),
          ("firmwareInstallImpact", 608),
          ("firmwareHostPackModImpact", 609),
          ("firmwareAck", 610),
          ("firmwareUpgradeInfo", 611),
          ("firmwareUpgradeDetail", 612),
          ("firmwareBundleInfoDigest", 613),
          ("firmwareUpgradeConstraint", 614),
          ("firmwareAutoSyncPolicy", 615),
          ("firmwareUcscInfo", 616),
          ("firmwareCapProvider", 617),
          ("firmwareABundleTypeCapProvider", 618),
          ("firmwareBundleTypeCapProvider", 619),
          ("firmwarePlatformBundleTypeCapProvider", 620),
          ("firmwareBundleType", 621),
          ("firmwareSpec", 622),
          ("identIdentCtx", 623),
          ("identSysInfo", 624),
          ("identMetaVerse", 625),
          ("identMetaSystem", 626),
          ("identIdentRequest", 627),
          ("identRequestEp", 628),
          ("lldpAcquired", 629),
          ("nhtestUniTest", 630),
          ("powerEp", 631),
          ("powerPrioWght", 632),
          ("powerABudget", 633),
          ("powerPlacement", 634),
          ("powerGroupAdditionPolicy", 635),
          ("powerBudget", 636),
          ("powerProfiledPower", 637),
          ("powerGroupMember", 638),
          ("powerChassisMember", 639),
          ("powerRackUnitMember", 640),
          ("powerMgmtPolicy", 641),
          ("powerGroupStats", 642),
          ("powerGroupStatsHist", 643),
          ("smSecSvc", 644),
          ("smSlot", 645),
          ("smMonitor", 646),
          ("smHeartbeat", 647),
          ("smHeartbeatConfig", 648),
          ("smDiskFileSystem", 649),
          ("smLDTemplate", 650),
          ("smTemplateApp", 651),
          ("smApp", 652),
          ("smPortRequirement", 653),
          ("smPortSubType", 654),
          ("smAppInstance", 655),
          ("smResource", 656),
          ("smLogicalDevice", 657),
          ("smMgmtBootstrap", 658),
          ("smIP", 659),
          ("smIPV6", 660),
          ("smExternalPortLink", 661),
          ("smMac", 662),
          ("smSystemMac", 663),
          ("smUserMac", 664),
          ("smClusterBootstrap", 665),
          ("smKey", 666),
          ("smEncryptedKey", 667),
          ("smNetMgmtBootstrapValue", 668),
          ("smNetMgmtBootstrapKeyLimits", 669),
          ("smNetMgmtBootstrapKeyEnumValue", 670),
          ("smAppAttribute", 671),
          ("smAppAttributeValue", 672),
          ("swSspMonDomain", 673),
          ("swSspLanMon", 674),
          ("swSspEthLanMon", 675),
          ("swSspMon", 676),
          ("swSspEthMon", 677),
          ("swSspEthMonSrcPhyEp", 678),
          ("swSspEthMonSrcAppLinksEp", 679),
          ("swSspEthMonSrcAppEp", 680),
          ("swSspEthMonFilterEp", 681),
          ("swEnvStats", 682),
          ("swEnvStatsHist", 683),
          ("swCardEnvStats", 684),
          ("swCardEnvStatsHist", 685),
          ("swSystemStats", 686),
          ("swSystemStatsHist", 687),
          ("swDomain", 688),
          ("swPIoEp", 689),
          ("swPortBreakout", 690),
          ("swSubGroup", 691),
          ("swCIoEp", 692),
          ("swBorderDomain", 693),
          ("swBorderEp", 694),
          ("swBorderPc", 695),
          ("swLanBorder", 696),
          ("swLanEp", 697),
          ("swLanPc", 698),
          ("swPhys", 699),
          ("swExtUtility", 700),
          ("swPhysEtherEp", 701),
          ("swPhysFcEp", 702),
          ("swEthLanBorder", 703),
          ("swEthLanEp", 704),
          ("swMonSrcEp", 705),
          ("swEthMonSrcEp", 706),
          ("swFcMonSrcEp", 707),
          ("swEthLanPc", 708),
          ("swVlan", 709),
          ("swVlanGroup", 710),
          ("swVlanRef", 711),
          ("swUlan", 712),
          ("swAccessDomain", 713),
          ("swAccessEp", 714),
          ("swEstcEp", 715),
          ("swFcEstcEp", 716),
          ("swEthEstcEp", 717),
          ("swTargetEp", 718),
          ("swEthTargetEp", 719),
          ("swEthEstcPc", 720),
          ("swFcoeEstcEp", 721),
          ("swUtilityDomain", 722),
          ("swVlanPortNs", 723),
          ("swMonDomain", 724),
          ("swLanMon", 725),
          ("swSanMon", 726),
          ("swEthLanMon", 727),
          ("swFcSanMon", 728),
          ("swMon", 729),
          ("swEthMon", 730),
          ("swFcMon", 731),
          ("swMonDestEp", 732),
          ("swEthMonDestEp", 733),
          ("swFcMonDestEp", 734),
          ("swVlanPortNsOverride", 735),
          ("swEthLanFlowMon", 736),
          ("swFlowMonitor", 737),
          ("swEthLanFlowMonitor", 738),
          ("swNetflowMonitor", 739),
          ("swNetflowMonitorRef", 740),
          ("swFlowRecordDef", 741),
          ("swEthLanFlowRecordDef", 742),
          ("swNetflowRecordDef", 743),
          ("swFlowMonExporter", 744),
          ("swEthLanFlowMonExporter", 745),
          ("swNetflowExporter", 746),
          ("swEthFlowMonSession", 747),
          ("swNetflowMonSession", 748),
          ("swNFExporterRef", 749),
          ("swIpRoute", 750),
          ("swVirtL3Intf", 751),
          ("swSanBorder", 752),
          ("swSanEp", 753),
          ("swFcSanBorder", 754),
          ("swSanPc", 755),
          ("swFcSanEp", 756),
          ("swFcoeSanEp", 757),
          ("swFcSanPc", 758),
          ("swFcoeSanPc", 759),
          ("swVsan", 760),
          ("swFcZoneSet", 761),
          ("swFcServerZoneGroup", 762),
          ("swZoneInitiatorMember", 763),
          ("swFcZone", 764),
          ("swFcZoneMember", 765),
          ("swZoneTargetMember", 766),
          ("swFabricZoneNs", 767),
          ("swFabricZoneNsOverride", 768),
          ("swCmclan", 769),
          ("dcxVifEp", 770),
          ("dcxFcoeVifEp", 771),
          ("dcxVIf", 772),
          ("dcxUniverse", 773),
          ("dcxNs", 774),
          ("vnicTempl", 775),
          ("vnicSanConnTempl", 776),
          ("vnicLanConnTempl", 777),
          ("vnicFcGroupTempl", 778),
          ("vnicProfileSet", 779),
          ("vnicProfile", 780),
          ("vnicVProfileAlias", 781),
          ("vnicProfileAlias", 782),
          ("vnicOProfileAlias", 783),
          ("vnicInternalProfile", 784),
          ("vnicDynamicCon", 785),
          ("vnicDynamicIdUniverse", 786),
          ("vnicDynamicProvider", 787),
          ("vnicDynamicProviderEp", 788),
          ("vnicRackServerDiscoveryProfile", 789),
          ("vnicProfileRef", 790),
          ("vnicVnic", 791),
          ("vnicEtherBase", 792),
          ("vnicMacHistory", 793),
          ("vnicWwpnHistory", 794),
          ("vnicWwnnHistory", 795),
          ("vnicIqnHistory", 796),
          ("vnicIpV4History", 797),
          ("vnicIpV6History", 798),
          ("vnicEther", 799),
          ("vnicFcBase", 800),
          ("vnicFc", 801),
          ("vnicIScsiBase", 802),
          ("vnicIScsiLCP", 803),
          ("vnicIScsi", 804),
          ("vnicIpc", 805),
          ("vnicScsi", 806),
          ("vnicAGroup", 807),
          ("vnicFcGroupDef", 808),
          ("vnicL2Lif", 809),
          ("vnicEthLif", 810),
          ("vnicFcLif", 811),
          ("vnicLifVlan", 812),
          ("vnicLifVsan", 813),
          ("vnicAIpcIf", 814),
          ("vnicAScsiIf", 815),
          ("vnicIpcIf", 816),
          ("vnicScsiIf", 817),
          ("macpoolPool", 818),
          ("macpoolPooled", 819),
          ("macpoolFormat", 820),
          ("macpoolBlock", 821),
          ("macpoolAddr", 822),
          ("macpoolPoolable", 823),
          ("macpoolUniverse", 824),
          ("callhomeItem", 825),
          ("callhomeEp", 826),
          ("callhomeSource", 827),
          ("callhomeSmtp", 828),
          ("callhomeAnonymousReporting", 829),
          ("callhomePeriodicSystemInventory", 830),
          ("callhomeProfile", 831),
          ("callhomeDest", 832),
          ("callhomePolicy", 833),
          ("callhomeHttpProxy", 834),
          ("callhomeTestAlert", 835),
          ("adaptorUnitExtn", 836),
          ("adaptorHostPort", 837),
          ("adaptorVsan", 838),
          ("adaptorFcOEIf", 839),
          ("adaptorUnitAssocCtx", 840),
          ("adaptorCIoEp", 841),
          ("adaptorExternalPc", 842),
          ("adaptorExtIfPc", 843),
          ("adaptorExtEthIfPc", 844),
          ("adaptorPIoEp", 845),
          ("adaptorExternalEp", 846),
          ("adaptorExtIfEp", 847),
          ("adaptorExtEthIfPcEp", 848),
          ("adaptorHostServiceEthIf", 849),
          ("adaptorHostIscsiIf", 850),
          ("adaptorIscsiTargetIf", 851),
          ("adaptorIscsiProt", 852),
          ("adaptorIscsiAuth", 853),
          ("adaptorEthPortStats", 854),
          ("adaptorEthPortStatsHist", 855),
          ("adaptorEthPortBySizeSmallStats", 856),
          ("adaptorEthPortBySizeSmallStatsHist", 857),
          ("adaptorEthPortBySizeLargeStats", 858),
          ("adaptorEthPortBySizeLargeStatsHist", 859),
          ("adaptorEthPortOutsizedStats", 860),
          ("adaptorEthPortOutsizedStatsHist", 861),
          ("adaptorEthPortMcastStats", 862),
          ("adaptorEthPortMcastStatsHist", 863),
          ("adaptorEthPortErrStats", 864),
          ("adaptorEthPortErrStatsHist", 865),
          ("adaptorFcPortStats", 866),
          ("adaptorFcPortStatsHist", 867),
          ("adaptorVnicStats", 868),
          ("adaptorVnicStatsHist", 869),
          ("adaptorFcIfFC4Stats", 870),
          ("adaptorFcIfFC4StatsHist", 871),
          ("adaptorMenloBaseErrorStats", 872),
          ("adaptorMenloBaseErrorStatsHist", 873),
          ("adaptorMenloMcpuStats", 874),
          ("adaptorMenloMcpuStatsHist", 875),
          ("adaptorMenloMcpuErrorStats", 876),
          ("adaptorMenloMcpuErrorStatsHist", 877),
          ("adaptorMenloEthStats", 878),
          ("adaptorMenloEthStatsHist", 879),
          ("adaptorMenloEthErrorStats", 880),
          ("adaptorMenloEthErrorStatsHist", 881),
          ("adaptorMenloFcStats", 882),
          ("adaptorMenloFcStatsHist", 883),
          ("adaptorMenloFcErrorStats", 884),
          ("adaptorMenloFcErrorStatsHist", 885),
          ("adaptorMenloQStats", 886),
          ("adaptorMenloQStatsHist", 887),
          ("adaptorMenloQErrorStats", 888),
          ("adaptorMenloQErrorStatsHist", 889),
          ("adaptorMenloNetEgStats", 890),
          ("adaptorMenloNetEgStatsHist", 891),
          ("adaptorMenloNetInStats", 892),
          ("adaptorMenloNetInStatsHist", 893),
          ("adaptorMenloHostPortStats", 894),
          ("adaptorMenloHostPortStatsHist", 895),
          ("adaptorMenloDcePortStats", 896),
          ("adaptorMenloDcePortStatsHist", 897),
          ("adaptorEtherIfStats", 898),
          ("adaptorEtherIfStatsHist", 899),
          ("adaptorFcIfFrameStats", 900),
          ("adaptorFcIfFrameStatsHist", 901),
          ("adaptorFcIfEventStats", 902),
          ("adaptorFcIfEventStatsHist", 903),
          ("adaptorFwCapProvider", 904),
          ("adaptorFruCapRef", 905),
          ("adaptorLldpCap", 906),
          ("adaptorLanCap", 907),
          ("adaptorSanCap", 908),
          ("adaptorMgmtCap", 909),
          ("adaptorNwMgmtCap", 910),
          ("adaptorHostMgmtCap", 911),
          ("adaptorUplinkHwAddrCap", 912),
          ("adaptorHostethHwAddrCap", 913),
          ("adaptorHostfcHwAddrCap", 914),
          ("adaptorFamilyTypeDef", 915),
          ("adaptorDiagCap", 916),
          ("adaptorHostPortCap", 917),
          ("licenseEp", 918),
          ("licenseFeature", 919),
          ("licenseServerHostId", 920),
          ("licenseFile", 921),
          ("licenseSource", 922),
          ("licenseContents", 923),
          ("licenseFeatureLine", 924),
          ("licenseInstance", 925),
          ("licenseSourceFile", 926),
          ("licenseProp", 927),
          ("licenseDownloader", 928),
          ("licenseSmartConfig", 929),
          ("licenseTarget", 930),
          ("licenseCapProvider", 931),
          ("licenseFeatureCapProvider", 932),
          ("memoryRuntime", 933),
          ("memoryRuntimeHist", 934),
          ("memoryArrayEnvStats", 935),
          ("memoryArrayEnvStatsHist", 936),
          ("memoryBufferUnitEnvStats", 937),
          ("memoryBufferUnitEnvStatsHist", 938),
          ("memoryUnitEnvStats", 939),
          ("memoryUnitEnvStatsHist", 940),
          ("memoryErrorStats", 941),
          ("imgprovPolicy", 942),
          ("imgprovTarget", 943),
          ("imgsecPolicy", 944),
          ("imgsecKey", 945),
          ("hostimgPolicy", 946),
          ("hostimgTarget", 947),
          ("lsmaintMaintPolicy", 948),
          ("lsmaintAck", 949),
          ("lsServer", 950),
          ("lsIssues", 951),
          ("lsUuidHistory", 952),
          ("lsPower", 953),
          ("lsComputeBinding", 954),
          ("lsBinding", 955),
          ("lsRequirement", 956),
          ("lsAgentPolicy", 957),
          ("lsServerAssocCtx", 958),
          ("lsFcLocale", 959),
          ("lsFcZoneGroup", 960),
          ("lsZoneInitiatorMember", 961),
          ("lsFcZone", 962),
          ("lsFcZoneMember", 963),
          ("lsZoneTargetMember", 964),
          ("lsVersionBeh", 965),
          ("lsTier", 966),
          ("extvmmNetworkSets", 967),
          ("extvmmVMNetworkSets", 968),
          ("extvmmFabricNetwork", 969),
          ("extvmmFabricNetworkDefinition", 970),
          ("extvmmVMNetworkDefinition", 971),
          ("extvmmVMNetwork", 972),
          ("extvmmVMNDRef", 973),
          ("extvmmUpLinkPP", 974),
          ("extvmmFNDReference", 975),
          ("vmLifeCyclePolicy", 976),
          ("vmCont", 977),
          ("vmDirCont", 978),
          ("vmDCOrg", 979),
          ("vmDC", 980),
          ("vmOrg", 981),
          ("vmSwitch", 982),
          ("vmVnicProfInst", 983),
          ("vmVnicProfCl", 984),
          ("extvmmEp", 985),
          ("extvmmMasterExtKey", 986),
          ("extvmmKeyInst", 987),
          ("extvmmKeyStore", 988),
          ("extvmmKeyRing", 989),
          ("extvmmSwitchSet", 990),
          ("extvmmProvider", 991),
          ("extvmmSwitchDelTask", 992),
          ("vmEp", 993),
          ("vmClientContainer", 994),
          ("vmVirtual", 995),
          ("vmComputeEp", 996),
          ("vmHv", 997),
          ("vmInstance", 998),
          ("vmHba", 999),
          ("vmVlan", 1000),
          ("vmVsan", 1001),
          ("vmVif", 1002),
          ("configImpactResponse", 1003),
          ("configManagedEpImpactResponse", 1004),
          ("configSorter", 1005),
          ("iqnpoolPool", 1006),
          ("iqnpoolPooled", 1007),
          ("iqnpoolAbsBlock", 1008),
          ("iqnpoolBlock", 1009),
          ("iqnpoolAddr", 1010),
          ("iqnpoolFormat", 1011),
          ("iqnpoolPoolable", 1012),
          ("iqnpoolUniverse", 1013),
          ("rmetaClass", 1014),
          ("rmetaProp", 1015),
          ("rmetaRnComponent", 1016),
          ("ipDnsSuffix", 1017),
          ("ipIPv4WinsServer", 1018),
          ("observeObservedCont", 1019),
          ("observeObserved", 1020),
          ("observeFilter", 1021),
          ("featureDefinition", 1022),
          ("featureProvider", 1023),
          ("featureBaseRef", 1024),
          ("featureDefinitionRef", 1025),
          ("featureDefinitionInstance", 1026),
          ("featureFruCapProviderRef", 1027),
          ("featureFruCapProviderInstance", 1028),
          ("featureContextEp", 1029),
          ("featureProviderInstance", 1030),
          ("computeNpu", 1031),
          ("equipmentHolder", 1032),
          ("equipmentStatefulChComp", 1033),
          ("equipmentEnvSensor", 1034),
          ("equipmentCard", 1035),
          ("equipmentIOCardBase", 1036),
          ("equipmentSwitchCard", 1037),
          ("equipmentBeaconLed", 1038),
          ("equipmentChassis", 1039),
          ("equipmentRommon", 1040),
          ("equipmentFpga", 1041),
          ("equipmentIOCard", 1042),
          ("equipmentSwitchIOCard", 1043),
          ("equipmentLed", 1044),
          ("equipmentIndicatorLed", 1045),
          ("equipmentLocatorLed", 1046),
          ("equipmentHealthLed", 1047),
          ("equipmentAssocCtx", 1048),
          ("equipmentFex", 1049),
          ("equipmentHwCapProvider", 1050),
          ("equipmentPicture", 1051),
          ("equipmentFruCapProvider", 1052),
          ("equipmentIntegratedComponentCapProvider", 1053),
          ("equipmentHolderCapProvider", 1054),
          ("equipmentSwitchCapProvider", 1055),
          ("equipmentSwitchIOCardCapProvider", 1056),
          ("equipmentSwitchCap", 1057),
          ("equipmentPortCap", 1058),
          ("equipmentBreakOutCapProvider", 1059),
          ("equipmentFailToWireCapProvider", 1060),
          ("equipmentFailToWirePortDef", 1061),
          ("equipmentUnifiedPortCapProvider", 1062),
          ("equipmentMaxPortSpeedCapProvider", 1063),
          ("equipmentServerPortCapProvider", 1064),
          ("equipmentBeaconCapProvider", 1065),
          ("equipmentMgmtCapProvider", 1066),
          ("equipmentCatalogCapProvider", 1067),
          ("equipmentMgmtExtCapProvider", 1068),
          ("equipmentDbgPluginCapProvider", 1069),
          ("equipmentChassisCapProvider", 1070),
          ("equipmentBladeCapProvider", 1071),
          ("equipmentRackUnitCapProvider", 1072),
          ("equipmentAdvancedBootOrder", 1073),
          ("equipmentCimcVmedia", 1074),
          ("equipmentSecureBoot", 1075),
          ("equipmentPowerCapDef", 1076),
          ("equipmentBladeAGLibrary", 1077),
          ("equipmentBaseBoardCapProvider", 1078),
          ("equipmentTpmCapProvider", 1079),
          ("equipmentBladeBiosCapProvider", 1080),
          ("equipmentGraphicsCardCapProvider", 1081),
          ("equipmentGraphicsCardCapRef", 1082),
          ("equipmentLocalDiskControllerCapProvider", 1083),
          ("equipmentLocalDiskControllerCapRef", 1084),
          ("equipmentHostIfCapProvider", 1085),
          ("equipmentMemoryUnitCapProvider", 1086),
          ("equipmentIOCardCapProvider", 1087),
          ("equipmentFexCapProvider", 1088),
          ("equipmentPsuCapProvider", 1089),
          ("equipmentFanModuleCapProvider", 1090),
          ("equipmentGemCapProvider", 1091),
          ("equipmentGemPortCap", 1092),
          ("equipmentDiscoveryCap", 1093),
          ("equipmentSecureController", 1094),
          ("equipmentTpm", 1095),
          ("equipmentManufacturingDef", 1096),
          ("equipmentRackFanModuleDef", 1097),
          ("equipmentPhysicalDef", 1098),
          ("equipmentInbandMgmtCap", 1099),
          ("equipmentKvmMgmtCap", 1100),
          ("equipmentBiosDef", 1101),
          ("equipmentDimmMapping", 1102),
          ("equipmentDimmEntry", 1103),
          ("equipmentServiceDef", 1104),
          ("equipmentAdaptorDef", 1105),
          ("equipmentPciDef", 1106),
          ("equipmentProcessorUnitDef", 1107),
          ("equipmentRaidDef", 1108),
          ("equipmentFlashLife", 1109),
          ("equipmentHDDFaultMonDef", 1110),
          ("equipmentPortGroupDef", 1111),
          ("equipmentFanModuleDef", 1112),
          ("equipmentPsuDef", 1113),
          ("equipmentPortGroupAggregationDef", 1114),
          ("equipmentPortGroupSwComplexDef", 1115),
          ("equipmentPortSwComplexRef", 1116),
          ("equipmentBoardControllerDef", 1117),
          ("equipmentFirmwareConstraint", 1118),
          ("equipmentVersionConstraint", 1119),
          ("equipmentBladeAggregationCapRef", 1120),
          ("equipmentPhysDevicesPerBoard", 1121),
          ("equipmentDowngradeConstraint", 1122),
          ("equipmentLocalDiskControllerDef", 1123),
          ("equipmentMemoryUnitDiscoveryModifierDef", 1124),
          ("equipmentSlotArrayRef", 1125),
          ("equipmentSlotArray", 1126),
          ("equipmentBladeConnDef", 1127),
          ("equipmentBladeIOMConnDef", 1128),
          ("equipmentBladeSwitchConnDef", 1129),
          ("equipmentAdaptorConnDef", 1130),
          ("equipmentIOCardTypeDef", 1131),
          ("equipmentSwitchTypeDef", 1132),
          ("equipmentServerFeatureCap", 1133),
          ("equipmentUuidFeatureCap", 1134),
          ("equipmentChassisStats", 1135),
          ("equipmentChassisStatsHist", 1136),
          ("equipmentIOCardStats", 1137),
          ("equipmentIOCardStatsHist", 1138),
          ("equipmentPsuStats", 1139),
          ("equipmentPsuStatsHist", 1140),
          ("equipmentPsuInputStats", 1141),
          ("equipmentPsuInputStatsHist", 1142),
          ("equipmentPsuOutputStats", 1143),
          ("equipmentPsuOutputStatsHist", 1144),
          ("equipmentFanModuleStats", 1145),
          ("equipmentFanModuleStatsHist", 1146),
          ("equipmentFanStats", 1147),
          ("equipmentFanStatsHist", 1148),
          ("equipmentFexEnvStats", 1149),
          ("equipmentFexEnvStatsHist", 1150),
          ("equipmentFexPowerSummary", 1151),
          ("equipmentFexPowerSummaryHist", 1152),
          ("equipmentFexPsuInputStats", 1153),
          ("equipmentFexPsuInputStatsHist", 1154),
          ("equipmentRackUnitPsuStats", 1155),
          ("equipmentRackUnitPsuStatsHist", 1156),
          ("equipmentNetworkElementFanStats", 1157),
          ("equipmentNetworkElementFanStatsHist", 1158),
          ("equipmentRackUnitFanStats", 1159),
          ("equipmentRackUnitFanStatsHist", 1160),
          ("sdSysSecSvc", 1161),
          ("sdSlot", 1162),
          ("sdAppInstance", 1163),
          ("sdResource", 1164),
          ("sdLogicalDevice", 1165),
          ("sdExternalPortLink", 1166),
          ("sdMac", 1167),
          ("sdSystemMac", 1168),
          ("sdUserMac", 1169),
          ("sdClusterBootstrap", 1170),
          ("sdLdu", 1171),
          ("sdLink", 1172),
          ("sdExternalLduLink", 1173),
          ("sdAppLduLink", 1174),
          ("sdNPPortCfg", 1175),
          ("sdNPInterfaceCfg", 1176),
          ("sdNPPortBundleCfg", 1177),
          ("sdMgmtBootstrap", 1178),
          ("sdIP", 1179),
          ("sdIPV6", 1180),
          ("sdKey", 1181),
          ("sdEncryptedKey", 1182),
          ("sdAppAttribute", 1183),
          ("sdAppAttributeCtrl", 1184),
          ("sdMgmtInfo", 1185),
          ("sdNetMgmtBootstrap", 1186),
          ("sdInternalMgmtBootstrap", 1187),
          ("sdUpgradeTask", 1188),
          ("etherPortChanIdElem", 1189),
          ("etherPortChanIdUniverse", 1190),
          ("etherPIoEndPoint", 1191),
          ("etherSwitchIntFIo", 1192),
          ("etherConfig", 1193),
          ("etherIfConfig", 1194),
          ("etherSwIfConfig", 1195),
          ("etherNicIfConfig", 1196),
          ("etherCIoEp", 1197),
          ("etherPc", 1198),
          ("etherInternalPc", 1199),
          ("etherExternalPc", 1200),
          ("etherServerIntFIoPc", 1201),
          ("etherSwitchIntFIoPc", 1202),
          ("etherPIoEp", 1203),
          ("etherExternalEp", 1204),
          ("etherIntFIoEp", 1205),
          ("etherServerIntFIoPcEp", 1206),
          ("etherSwitchIntFIoPcEp", 1207),
          ("etherFailToWire", 1208),
          ("etherFtwPortPair", 1209),
          ("etherTxStats", 1210),
          ("etherTxStatsHist", 1211),
          ("etherRxStats", 1212),
          ("etherRxStatsHist", 1213),
          ("etherErrStats", 1214),
          ("etherErrStatsHist", 1215),
          ("etherNiErrStats", 1216),
          ("etherNiErrStatsHist", 1217),
          ("etherLossStats", 1218),
          ("etherLossStatsHist", 1219),
          ("etherPauseStats", 1220),
          ("etherPauseStatsHist", 1221),
          ("etherFcoeInterfaceStats", 1222),
          ("etherFcoeInterfaceStatsHist", 1223),
          ("extpolConnectorContainer", 1224),
          ("extpolEp", 1225),
          ("extpolConnector", 1226),
          ("extpolSvc", 1227),
          ("extpolRegistry", 1228),
          ("extpolProviderCont", 1229),
          ("extpolProvider", 1230),
          ("extpolControllerCont", 1231),
          ("extpolController", 1232),
          ("extpolClientCont", 1233),
          ("extpolClient", 1234),
          ("extpolSystemContext", 1235),
          ("storageEp", 1236),
          ("storageNodeEp", 1237),
          ("storageEpUser", 1238),
          ("storageAuthKey", 1239),
          ("storageTransportIf", 1240),
          ("storageTargetIf", 1241),
          ("storageIScsiTargetIf", 1242),
          ("storageFcTargetIf", 1243),
          ("storageL2If", 1244),
          ("storageFcIf", 1245),
          ("storageEtherIf", 1246),
          ("storageSystem", 1247),
          ("ipIpV4Addr", 1248),
          ("ipIPv4Dns", 1249),
          ("ipServiceIf", 1250),
          ("ipIpV4StaticAddr", 1251),
          ("initiatorEp", 1252),
          ("initiatorRequestorEp", 1253),
          ("initiatorGroupEp", 1254),
          ("initiatorInitiatorEp", 1255),
          ("initiatorIScsiInitiatorEp", 1256),
          ("initiatorFcInitiatorEp", 1257),
          ("initiatorStoreEp", 1258),
          ("initiatorUnitEp", 1259),
          ("initiatorLunEp", 1260),
          ("initiatorRequestorGrpEp", 1261),
          ("initiatorMemberEp", 1262),
          ("storageOperation", 1263),
          ("storageDomainEp", 1264),
          ("storageDrive", 1265),
          ("storageTransportableFlashModule", 1266),
          ("storageLocalLun", 1267),
          ("storageVirtualDrive", 1268),
          ("storageLocalDiskSlotEp", 1269),
          ("storageEnclosure", 1270),
          ("storageLunDisk", 1271),
          ("storageItem", 1272),
          ("storageLocalDiskConfigDef", 1273),
          ("storageLocalDiskPartition", 1274),
          ("sysfileEp", 1275),
          ("sysfileRepository", 1276),
          ("sysfileExporter", 1277),
          ("sysfileImporter", 1278),
          ("sysfileMutation", 1279),
          ("sysfileInstance", 1280),
          ("sysfileDigest", 1281),
          ("ippoolPool", 1282),
          ("ippoolPooled", 1283),
          ("ippoolIpV6Pooled", 1284),
          ("ippoolBlock", 1285),
          ("ippoolIpV6Block", 1286),
          ("ippoolAddr", 1287),
          ("ippoolIpV6Addr", 1288),
          ("ippoolPoolable", 1289),
          ("ippoolUniverse", 1290),
          ("applicationCatalogue", 1291),
          ("applicationDownloader", 1292),
          ("pkiEp", 1293),
          ("pkiItem", 1294),
          ("pkiCertReq", 1295),
          ("pkiKeyRing", 1296),
          ("pkiTP", 1297),
          ("aaaDefinition", 1298),
          ("aaaItem", 1299),
          ("commDefinition", 1300),
          ("commItem", 1301),
          ("pkiDefinition", 1302),
          ("aaaRealm", 1303),
          ("aaaConfig", 1304),
          ("aaaAuthMethod", 1305),
          ("aaaDefaultAuth", 1306),
          ("aaaConsoleAuth", 1307),
          ("aaaDomainAuth", 1308),
          ("aaaDomain", 1309),
          ("aaaAuthRealm", 1310),
          ("aaaEp", 1311),
          ("aaaRadiusEp", 1312),
          ("aaaLdapEp", 1313),
          ("aaaTacacsPlusEp", 1314),
          ("aaaProvider", 1315),
          ("aaaRadiusProvider", 1316),
          ("aaaLdapProvider", 1317),
          ("aaaTacacsPlusProvider", 1318),
          ("aaaLdapGroupRule", 1319),
          ("aaaUserGroup", 1320),
          ("aaaLdapGroup", 1321),
          ("aaaProviderGroup", 1322),
          ("aaaProviderRef", 1323),
          ("aaaUserEp", 1324),
          ("aaaSystemUser", 1325),
          ("aaaEpAuthProfile", 1326),
          ("aaaUserLogin", 1327),
          ("aaaBanner", 1328),
          ("aaaPreLoginBanner", 1329),
          ("aaaShellLogin", 1330),
          ("aaaWebLogin", 1331),
          ("aaaEpLogin", 1332),
          ("aaaRemoteUser", 1333),
          ("aaaEpUser", 1334),
          ("aaaUser", 1335),
          ("aaaSshAuth", 1336),
          ("aaaUserRole", 1337),
          ("aaaRole", 1338),
          ("aaaUserLocale", 1339),
          ("aaaLocale", 1340),
          ("aaaOrg", 1341),
          ("aaaSession", 1342),
          ("aaaExtMgmtCutThruTkn", 1343),
          ("aaaPwdProfile", 1344),
          ("aaaUserData", 1345),
          ("aaaCimcSession", 1346),
          ("aaaSessionInfoTable", 1347),
          ("aaaSessionInfo", 1348),
          ("commSvcEp", 1349),
          ("commSvcChannel", 1350),
          ("commWebChannel", 1351),
          ("commEvtChannel", 1352),
          ("commSvc", 1353),
          ("commWeb", 1354),
          ("commHttps", 1355),
          ("commWsman", 1356),
          ("commShell", 1357),
          ("commTelnet", 1358),
          ("commSsh", 1359),
          ("commSnmp", 1360),
          ("commSnmpUser", 1361),
          ("commDateTime", 1362),
          ("commSnmpTrap", 1363),
          ("commDns", 1364),
          ("commClient", 1365),
          ("commClientItem", 1366),
          ("commNtpProvider", 1367),
          ("commDnsProvider", 1368),
          ("commSyslog", 1369),
          ("commSyslogConsole", 1370),
          ("commSyslogMonitor", 1371),
          ("commSyslogFile", 1372),
          ("commSyslogClient", 1373),
          ("commSyslogSource", 1374),
          ("commSvcLimits", 1375),
          ("commShellSvcLimits", 1376),
          ("commWebSvcLimits", 1377),
          ("sysdebugEp", 1378),
          ("sysdebugRepository", 1379),
          ("sysdebugCoreFileRepository", 1380),
          ("sysdebugExporter", 1381),
          ("sysdebugCoreFileExportTarget", 1382),
          ("sysdebugLogExportStatus", 1383),
          ("sysdebugLogExportPolicy", 1384),
          ("sysdebugAutoCoreFileExportTarget", 1385),
          ("sysdebugManualCoreFileExportTarget", 1386),
          ("sysdebugFile", 1387),
          ("sysdebugCore", 1388),
          ("sysdebugTechSupFileRepository", 1389),
          ("sysdebugTechSupport", 1390),
          ("sysdebugTechSupportCmdOpt", 1391),
          ("sysdebugLogControlEp", 1392),
          ("sysdebugLogControlDomain", 1393),
          ("sysdebugLogControlModule", 1394),
          ("sysdebugLogControlDestinationFile", 1395),
          ("sysdebugLogControlDestinationSyslog", 1396),
          ("sysdebugMEpLog", 1397),
          ("sysdebugMEpLogDef", 1398),
          ("sysdebugMEpLogPolicy", 1399),
          ("sysdebugLogBehavior", 1400),
          ("sysdebugBackupBehavior", 1401),
          ("procManager", 1402),
          ("procProcCounts", 1403),
          ("procTxCounts", 1404),
          ("procStimulusCounts", 1405),
          ("procPrtCounts", 1406),
          ("procProcs", 1407),
          ("procPrt", 1408),
          ("procDoer", 1409),
          ("procSvc", 1410),
          ("diagSrvCapProvider", 1411),
          ("diagCtrl", 1412),
          ("diagRslt", 1413),
          ("diagSrvCtrl", 1414),
          ("diagRunPolicy", 1415),
          ("diagTest", 1416),
          ("diagBladeTest", 1417),
          ("diagNetworkTest", 1418),
          ("versionEp", 1419),
          ("versionVersion", 1420),
          ("versionApplication", 1421),
          ("epqosDefinitionDelTask", 1422),
          ("qosclassDefinition", 1423),
          ("qosclassItem", 1424),
          ("qosclassFc", 1425),
          ("qosclassEth", 1426),
          ("qosclassEthBE", 1427),
          ("qosclassEthClassified", 1428),
          ("extmgmtIf", 1429),
          ("extmgmtIfMonPolicy", 1430),
          ("extmgmtMiiStatus", 1431),
          ("extmgmtGatewayPing", 1432),
          ("extmgmtNdiscTargets", 1433),
          ("extmgmtArpTargets", 1434),
          ("poolUniverse", 1435),
          ("poolElement", 1436),
          ("poolPoolable", 1437),
          ("poolPool", 1438),
          ("networkElement", 1439),
          ("networkOperLevel", 1440),
          ("networkLanNeighbors", 1441),
          ("networkANeighborEntry", 1442),
          ("networkLanNeighborEntry", 1443),
          ("networkSanNeighbors", 1444),
          ("networkSanNeighborEntry", 1445),
          ("networkIfStats", 1446),
          ("networkDomainEp", 1447),
          ("networkPIoEp", 1448),
          ("fcpoolInitiators", 1449),
          ("fcpoolInitiator", 1450),
          ("fcpoolInitiatorEp", 1451),
          ("fcpoolBlock", 1452),
          ("fcpoolFormat", 1453),
          ("fcpoolAddr", 1454),
          ("fcpoolPoolable", 1455),
          ("fcpoolUniverse", 1456),
          ("fcpoolBootTarget", 1457),
          ("nhTableHolder", 1458),
          ("nhLinkTable", 1459),
          ("nhEcmpIdent", 1460),
          ("nhIpmcIdent", 1461),
          ("nhLdevItem", 1462),
          ("nhInstItem", 1463),
          ("nhLinks", 1464),
          ("nhEndPoint", 1465),
          ("nhPortCfg", 1466),
          ("nhMacVlanCfg", 1467),
          ("nhSystemMac", 1468),
          ("nhUserMac", 1469),
          ("trigAck", 1470),
          ("trigConfAck", 1471),
          ("trigResAck", 1472),
          ("trigInst", 1473),
          ("trigWindow", 1474),
          ("trigToken", 1475),
          ("trigClientToken", 1476),
          ("trigBaseSched", 1477),
          ("trigSched", 1478),
          ("trigLocalSched", 1479),
          ("trigSchedWindow", 1480),
          ("trigBaseAbsWindow", 1481),
          ("trigAbsWindow", 1482),
          ("trigLocalAbsWindow", 1483),
          ("trigRecurrWindow", 1484),
          ("trigMeta", 1485),
          ("trigTriggered", 1486),
          ("trigTriggerable", 1487),
          ("trigTest", 1488),
          ("dhcpInst", 1489),
          ("dhcpLease", 1490),
          ("dhcpAcquired", 1491),
          ("osInstance", 1492),
          ("osController", 1493),
          ("osAgent", 1494),
          ("pciEquipSlot", 1495),
          ("pciUnit", 1496),
          ("uuidpoolPool", 1497),
          ("uuidpoolPooled", 1498),
          ("uuidpoolBlock", 1499),
          ("uuidpoolAddr", 1500),
          ("uuidpoolFormat", 1501),
          ("uuidpoolPoolable", 1502),
          ("uuidpoolUniverse", 1503),
          ("processorComponent", 1504),
          ("processorCore", 1505),
          ("processorThread", 1506),
          ("processorRuntime", 1507),
          ("processorRuntimeHist", 1508),
          ("processorEnvStats", 1509),
          ("processorEnvStatsHist", 1510),
          ("processorErrorStats", 1511),
          ("processorUnitAssocCtx", 1512),
          ("biosSettings", 1513),
          ("biosARef", 1514),
          ("biosRef", 1515),
          ("biosFeatureRef", 1516),
          ("biosParameterRef", 1517),
          ("biosSettingRef", 1518),
          ("biosVIdentityParams", 1519),
          ("syntheticDirectory", 1520),
          ("syntheticFile", 1521),
          ("syntheticFsObj", 1522),
          ("syntheticTime", 1523),
          ("syntheticFileSystem", 1524),
          ("policyObject", 1525),
          ("policyHolder", 1526),
          ("policyBinding", 1527),
          ("policyDefinition", 1528),
          ("policyItem", 1529),
          ("orgOrg", 1530),
          ("orgSourceMask", 1531),
          ("capabilityCatalogue", 1532),
          ("capabilityProvider", 1533),
          ("capabilityDef", 1534),
          ("capabilityItem", 1535),
          ("capabilityFeatureLimits", 1536),
          ("capabilitySystemLimits", 1537),
          ("capabilityNetworkLimits", 1538),
          ("capabilityStorageLimits", 1539),
          ("capabilityEp", 1540),
          ("capabilityMgmtExtension", 1541),
          ("capabilityUpdater", 1542),
          ("capabilityUpdate", 1543),
          ("solConfig", 1544),
          ("solIf", 1545),
          ("fabricLanMonCloud", 1546),
          ("fabricSanMonCloud", 1547),
          ("fabricEthMonLan", 1548),
          ("fabricFcMonSan", 1549),
          ("fabricMon", 1550),
          ("fabricEthMon", 1551),
          ("fabricFcMon", 1552),
          ("fabricMonDestEp", 1553),
          ("fabricEthMonDestEp", 1554),
          ("fabricFcMonDestEp", 1555),
          ("fabricMonSrcEp", 1556),
          ("fabricEthMonSrcEp", 1557),
          ("fabricFcMonSrcEp", 1558),
          ("fabricMonSrcRef", 1559),
          ("fabricEthMonSrcRef", 1560),
          ("fabricFcMonSrcRef", 1561),
          ("fabricMonSrcFiltEp", 1562),
          ("fabricEthMonFiltEp", 1563),
          ("fabricFcMonFiltEp", 1564),
          ("fabricMonFiltRef", 1565),
          ("fabricEthMonFiltRef", 1566),
          ("fabricFcMonFiltRef", 1567),
          ("fabricEpVsan", 1568),
          ("fabricVsanEp", 1569),
          ("fabricVsanMembership", 1570),
          ("fabricVlanEp", 1571),
          ("fabricVnetPermit", 1572),
          ("fabricVlanPermit", 1573),
          ("fabricAFcSanEp", 1574),
          ("fabricFcSanEp", 1575),
          ("fabricFcSanPcEp", 1576),
          ("fabricFcoeSanPcEp", 1577),
          ("fabricFcVsanPortEp", 1578),
          ("fabricFcoeVsanPortEp", 1579),
          ("fabricFcVsanPc", 1580),
          ("fabricFcoeVsanPc", 1581),
          ("fabricSanPinGroup", 1582),
          ("fabricSanPinTarget", 1583),
          ("fabricNetGroup", 1584),
          ("fabricPooledVlan", 1585),
          ("fabricPoolableVlan", 1586),
          ("ipIpV4StaticTargetAddr", 1587),
          ("fabricNetflowIPv4Addr", 1588),
          ("fabricFlowMon", 1589),
          ("fabricLanFlowMon", 1590),
          ("fabricEthLanFlowMon", 1591),
          ("fabricNetflowMonSession", 1592),
          ("fabricFlowMonSrcEp", 1593),
          ("fabricLanFlowMonSrcEp", 1594),
          ("fabricEthLanFlowMonSrcEp", 1595),
          ("fabricNetflowMonSrcEp", 1596),
          ("fabricFlowMonSrcRef", 1597),
          ("fabricEthFlowMonSrcRef", 1598),
          ("fabricNetflowMonSrcRef", 1599),
          ("fabricFlowMonExporterProfile", 1600),
          ("fabricFlowMonDefinition", 1601),
          ("fabricFlowMonItem", 1602),
          ("fabricFlowMonitoringCategory", 1603),
          ("fabricEthLanFlowMonitoring", 1604),
          ("fabricEthFlowMonLan", 1605),
          ("fabricFlowMonitor", 1606),
          ("fabricLanFlowMonitor", 1607),
          ("fabricEthLanFlowMonitor", 1608),
          ("fabricNetflowMonitor", 1609),
          ("fabricNetflowMonitorRef", 1610),
          ("fabricFlowMonCollector", 1611),
          ("fabricLanFlowMonCollector", 1612),
          ("fabricEthLanFlowMonCollector", 1613),
          ("fabricNetflowCollector", 1614),
          ("fabricFlowMonExporter", 1615),
          ("fabricLanFlowMonExporter", 1616),
          ("fabricEthLanFlowMonExporter", 1617),
          ("fabricNetflowMonExporter", 1618),
          ("fabricNetflowMonExporterRef", 1619),
          ("fabricNetflowTimeoutPolicy", 1620),
          ("fabricLocale", 1621),
          ("fabricPath", 1622),
          ("fabricPathEp", 1623),
          ("fabricPathConn", 1624),
          ("fabricLanEp", 1625),
          ("fabricAEthLanEp", 1626),
          ("fabricEthVlanPortEp", 1627),
          ("fabricEthLanEp", 1628),
          ("fabricEthLanPcEp", 1629),
          ("fabricLanPinGroup", 1630),
          ("fabricLanPinTarget", 1631),
          ("fabricSwChEp", 1632),
          ("fabricSwChPhEp", 1633),
          ("fabricComputeEp", 1634),
          ("fabricChassisEp", 1635),
          ("fabricComputeSlotEp", 1636),
          ("fabricIf", 1637),
          ("fabricComputePhEp", 1638),
          ("fabricLastAckedSlot", 1639),
          ("fabricSspLanMonCloud", 1640),
          ("fabricSspMon", 1641),
          ("fabricSspEthMon", 1642),
          ("fabricSspEthMonSrcPhyTopEp", 1643),
          ("fabricSspEthMonSrcAppLinksEp", 1644),
          ("fabricSspEthMonSrcPhyEp", 1645),
          ("fabricSspEthMonSrcPhyAggrEp", 1646),
          ("fabricSspEthMonSrcAppEp", 1647),
          ("fabricSspEthMonFilterEp", 1648),
          ("fabricDceSwSrv", 1649),
          ("fabricSwSrvEp", 1650),
          ("fabricADceSwSrvEp", 1651),
          ("fabricDceSwSrvEp", 1652),
          ("fabricSwSrvPc", 1653),
          ("fabricSubGroup", 1654),
          ("fabricSwSubGroup", 1655),
          ("fabricDceSwSrvPc", 1656),
          ("fabricDceSwSrvPcEp", 1657),
          ("fabricAEthEstcEp", 1658),
          ("fabricAFcEstcEp", 1659),
          ("fabricFcEstcEp", 1660),
          ("fabricEthEstcEp", 1661),
          ("fabricTargetEp", 1662),
          ("fabricEthTargetEp", 1663),
          ("fabricBHVlan", 1664),
          ("fabricEthEstcPcEp", 1665),
          ("fabricEthVlanPc", 1666),
          ("fabricEpMgr", 1667),
          ("fabricBreakout", 1668),
          ("fabricInternalEp", 1669),
          ("fabricInternalPc", 1670),
          ("fabricPinGroup", 1671),
          ("fabricPinTarget", 1672),
          ("fabricZoneIdUniverse", 1673),
          ("bmcSELCounter", 1674),
          ("mgmtBackupExportExtPolicy", 1675),
          ("mgmtBackupPolicyConfig", 1676),
          ("mgmtImportConfigInfo", 1677),
          ("mgmtExportPolicy", 1678),
          ("mgmtCfgExportPolicy", 1679),
          ("mgmtBackupPolicy", 1680),
          ("mgmtEntity", 1681),
          ("mgmtPmonEntry", 1682),
          ("mgmtBackup", 1683),
          ("mgmtImporter", 1684),
          ("mgmtAccessPolicy", 1685),
          ("mgmtAccessPolicyItem", 1686),
          ("mgmtAccessPort", 1687),
          ("mgmtIntAuthPolicy", 1688),
          ("mgmtCimcSecureBoot", 1689),
          ("mgmtController", 1690),
          ("mgmtIf", 1691),
          ("mgmtIPv6IfConfig", 1692),
          ("mgmtIPv6Addr", 1693),
          ("mgmtIPv6IfAddr", 1694),
          ("mgmtConnection", 1695),
          ("mgmtInbandProfile", 1696),
          ("mgmtProfDerivedInterface", 1697),
          ("fsmStatus", 1698),
          ("nfsEp", 1699),
          ("nfsMountDef", 1700),
          ("nfsMountInst", 1701),
          ("portDomainEp", 1702),
          ("portTrustMode", 1703),
          ("portGroup", 1704),
          ("portSubGroup", 1705),
          ("fcConfig", 1706),
          ("fcIfConfig", 1707),
          ("fcSwIfConfig", 1708),
          ("fcNicIfConfig", 1709),
          ("fcStats", 1710),
          ("fcStatsHist", 1711),
          ("fcErrStats", 1712),
          ("fcErrStatsHist", 1713),
          ("ruleDefinition", 1714),
          ("ruleItem", 1715),
          ("ruleRequirement", 1716),
          ("ruleSizeRequirement", 1717),
          ("networkruleDefinition", 1718),
          ("networkruleItem", 1719),
          ("networkruleRequirement", 1720),
          ("policyControlEp", 1721),
          ("policyCentraleSync", 1722),
          ("policyIdResolvePolicy", 1723),
          ("policyControl", 1724),
          ("policyDateTime", 1725),
          ("policyCommunication", 1726),
          ("policyDns", 1727),
          ("policySecurity", 1728),
          ("policyMonitoring", 1729),
          ("policyFault", 1730),
          ("policyInfraFirmware", 1731),
          ("policyConfigBackup", 1732),
          ("policyMEp", 1733),
          ("policyDiscovery", 1734),
          ("policyPowerMgmt", 1735),
          ("policyPsu", 1736),
          ("policyControlled", 1737),
          ("policyControlledInstance", 1738),
          ("policyControlledType", 1739),
          ("policyPolicyEp", 1740),
          ("policyPolicyScopeCont", 1741),
          ("policyPolicyScopeContext", 1742),
          ("policyPolicyScope", 1743),
          ("policyPolicyRequestor", 1744),
          ("policyDigest", 1745),
          ("policyLocalMap", 1746),
          ("policyElement", 1747),
          ("policyRefReq", 1748),
          ("aaaEpFsmTask", 1749),
          ("aaaRealmFsmTask", 1750),
          ("aaaUserEpFsmTask", 1751),
          ("adaptorExtEthIfFsmTask", 1752),
          ("adaptorHostEthIfFsmTask", 1753),
          ("adaptorHostFcIfFsmTask", 1754),
          ("applicationDownloaderFsmTask", 1755),
          ("callhomeEpFsmTask", 1756),
          ("capabilityCatalogueFsmTask", 1757),
          ("capabilityMgmtExtensionFsmTask", 1758),
          ("capabilityUpdaterFsmTask", 1759),
          ("commSvcEpFsmTask", 1760),
          ("computeBladeFsmTask", 1761),
          ("computePhysicalFsmTask", 1762),
          ("computeServerDiscPolicyFsmTask", 1763),
          ("epqosDefinitionDelTaskFsmTask", 1764),
          ("epqosDefinitionFsmTask", 1765),
          ("equipmentBeaconLedFsmTask", 1766),
          ("equipmentChassisFsmTask", 1767),
          ("equipmentIOCardBaseFsmTask", 1768),
          ("equipmentIOCardFsmTask", 1769),
          ("equipmentLocatorLedFsmTask", 1770),
          ("etherFtwPortPairFsmTask", 1771),
          ("etherServerIntFIoFsmTask", 1772),
          ("extpolEpFsmTask", 1773),
          ("extpolProviderFsmTask", 1774),
          ("extpolRegistryFsmTask", 1775),
          ("fabricEpMgrFsmTask", 1776),
          ("fabricLanCloudFsmTask", 1777),
          ("fabricSanCloudFsmTask", 1778),
          ("fabricVnetEpSyncEpFsmTask", 1779),
          ("firmwareDistributableFsmTask", 1780),
          ("firmwareDownloaderFsmTask", 1781),
          ("firmwareImageFsmTask", 1782),
          ("firmwarePlatformPackFsmTask", 1783),
          ("firmwareSupFirmwareFsmTask", 1784),
          ("firmwareSystemFsmTask", 1785),
          ("gmetaHolderFsmTask", 1786),
          ("identIdentRequestFsmTask", 1787),
          ("identMetaSystemFsmTask", 1788),
          ("licenseDownloaderFsmTask", 1789),
          ("licenseFileFsmTask", 1790),
          ("licenseInstanceFsmTask", 1791),
          ("licenseSmartConfigFsmTask", 1792),
          ("lsServerFsmTask", 1793),
          ("mgmtBackupFsmTask", 1794),
          ("mgmtControllerFsmTask", 1795),
          ("mgmtExportPolicyFsmTask", 1796),
          ("mgmtIPv6IfAddrFsmTask", 1797),
          ("mgmtIfFsmTask", 1798),
          ("mgmtImporterFsmTask", 1799),
          ("nfsMountDefFsmTask", 1800),
          ("nfsMountInstFsmTask", 1801),
          ("nhTableHolderFsmTask", 1802),
          ("observeObservedFsmTask", 1803),
          ("pkiEpFsmTask", 1804),
          ("policyControlEpFsmTask", 1805),
          ("policyControlledTypeFsmTask", 1806),
          ("policyPolicyScopeFsmTask", 1807),
          ("portPIoFsmTask", 1808),
          ("qosclassDefinitionFsmTask", 1809),
          ("sdAppAttributeCtrlFsmTask", 1810),
          ("sdAppInstanceFsmTask", 1811),
          ("sdClusterBootstrapFsmTask", 1812),
          ("sdLduFsmTask", 1813),
          ("sdLinkFsmTask", 1814),
          ("sdLogicalDeviceFsmTask", 1815),
          ("sdMgmtInfoFsmTask", 1816),
          ("sdNetMgmtBootstrapFsmTask", 1817),
          ("sdSlotFsmTask", 1818),
          ("sdUpgradeTaskFsmTask", 1819),
          ("smAppFsmTask", 1820),
          ("smAppInstanceFsmTask", 1821),
          ("smSecSvcFsmTask", 1822),
          ("statsCollectionPolicyFsmTask", 1823),
          ("storageSystemFsmTask", 1824),
          ("swAccessDomainFsmTask", 1825),
          ("swEthLanBorderFsmTask", 1826),
          ("swEthLanFlowMonFsmTask", 1827),
          ("swEthMonFsmTask", 1828),
          ("swExtUtilityFsmTask", 1829),
          ("swFcMonFsmTask", 1830),
          ("swFcSanBorderFsmTask", 1831),
          ("swPhysFsmTask", 1832),
          ("swSspEthMonFsmTask", 1833),
          ("swSspEthMonSrcPhyEpFsmTask", 1834),
          ("swUtilityDomainFsmTask", 1835),
          ("syntheticFsObjFsmTask", 1836),
          ("sysdebugAutoCoreFileExportTargetFsmTask", 1837),
          ("sysdebugCoreFsmTask", 1838),
          ("sysdebugLogControlEpFsmTask", 1839),
          ("sysdebugLogExportPolicyFsmTask", 1840),
          ("sysdebugManualCoreFileExportTargetFsmTask", 1841),
          ("sysdebugTechSupportFsmTask", 1842),
          ("sysfileMutationFsmTask", 1843),
          ("aaaEpFsm", 1844),
          ("aaaEpFsmStage", 1845),
          ("aaaLdapEpFsm", 1846),
          ("aaaLdapEpFsmStage", 1847),
          ("aaaRadiusEpFsm", 1848),
          ("aaaRadiusEpFsmStage", 1849),
          ("aaaTacacsPlusEpFsm", 1850),
          ("aaaTacacsPlusEpFsmStage", 1851),
          ("aaaRealmFsm", 1852),
          ("aaaRealmFsmStage", 1853),
          ("aaaAuthRealmFsm", 1854),
          ("aaaAuthRealmFsmStage", 1855),
          ("aaaUserEpFsm", 1856),
          ("aaaUserEpFsmStage", 1857),
          ("adaptorExtEthIfFsm", 1858),
          ("adaptorExtEthIfFsmStage", 1859),
          ("adaptorHostEthIfFsm", 1860),
          ("adaptorHostEthIfFsmStage", 1861),
          ("adaptorHostFcIfFsm", 1862),
          ("adaptorHostFcIfFsmStage", 1863),
          ("applicationDownloaderFsm", 1864),
          ("applicationDownloaderFsmStage", 1865),
          ("callhomeEpFsm", 1866),
          ("callhomeEpFsmStage", 1867),
          ("capabilityCatalogueFsm", 1868),
          ("capabilityCatalogueFsmStage", 1869),
          ("capabilityMgmtExtensionFsm", 1870),
          ("capabilityMgmtExtensionFsmStage", 1871),
          ("capabilityUpdaterFsm", 1872),
          ("capabilityUpdaterFsmStage", 1873),
          ("commSvcEpFsm", 1874),
          ("commSvcEpFsmStage", 1875),
          ("computeBladeFsm", 1876),
          ("computeBladeFsmStage", 1877),
          ("computePhysicalFsm", 1878),
          ("computePhysicalFsmStage", 1879),
          ("computeRackUnitFsm", 1880),
          ("computeRackUnitFsmStage", 1881),
          ("computeServerDiscPolicyFsm", 1882),
          ("computeServerDiscPolicyFsmStage", 1883),
          ("epqosDefinitionDelTaskFsm", 1884),
          ("epqosDefinitionDelTaskFsmStage", 1885),
          ("epqosDefinitionFsm", 1886),
          ("epqosDefinitionFsmStage", 1887),
          ("equipmentBeaconLedFsm", 1888),
          ("equipmentBeaconLedFsmStage", 1889),
          ("equipmentChassisFsm", 1890),
          ("equipmentChassisFsmStage", 1891),
          ("equipmentIOCardBaseFsm", 1892),
          ("equipmentIOCardBaseFsmStage", 1893),
          ("equipmentIOCardFsm", 1894),
          ("equipmentIOCardFsmStage", 1895),
          ("equipmentSwitchIOCardFsm", 1896),
          ("equipmentSwitchIOCardFsmStage", 1897),
          ("equipmentLocatorLedFsm", 1898),
          ("equipmentLocatorLedFsmStage", 1899),
          ("etherFtwPortPairFsm", 1900),
          ("etherFtwPortPairFsmStage", 1901),
          ("etherServerIntFIoFsm", 1902),
          ("etherServerIntFIoFsmStage", 1903),
          ("extpolEpFsm", 1904),
          ("extpolEpFsmStage", 1905),
          ("extpolProviderFsm", 1906),
          ("extpolProviderFsmStage", 1907),
          ("extpolRegistryFsm", 1908),
          ("extpolRegistryFsmStage", 1909),
          ("fabricEpMgrFsm", 1910),
          ("fabricEpMgrFsmStage", 1911),
          ("fabricLanCloudFsm", 1912),
          ("fabricLanCloudFsmStage", 1913),
          ("fabricSanCloudFsm", 1914),
          ("fabricSanCloudFsmStage", 1915),
          ("fabricVnetEpSyncEpFsm", 1916),
          ("fabricVnetEpSyncEpFsmStage", 1917),
          ("firmwareDistributableFsm", 1918),
          ("firmwareDistributableFsmStage", 1919),
          ("firmwareDownloaderFsm", 1920),
          ("firmwareDownloaderFsmStage", 1921),
          ("firmwareImageFsm", 1922),
          ("firmwareImageFsmStage", 1923),
          ("firmwarePlatformPackFsm", 1924),
          ("firmwarePlatformPackFsmStage", 1925),
          ("firmwareSupFirmwareFsm", 1926),
          ("firmwareSupFirmwareFsmStage", 1927),
          ("firmwareSystemFsm", 1928),
          ("firmwareSystemFsmStage", 1929),
          ("gmetaHolderFsm", 1930),
          ("gmetaHolderFsmStage", 1931),
          ("identIdentRequestFsm", 1932),
          ("identIdentRequestFsmStage", 1933),
          ("identMetaSystemFsm", 1934),
          ("identMetaSystemFsmStage", 1935),
          ("licenseDownloaderFsm", 1936),
          ("licenseDownloaderFsmStage", 1937),
          ("licenseFileFsm", 1938),
          ("licenseFileFsmStage", 1939),
          ("licenseInstanceFsm", 1940),
          ("licenseInstanceFsmStage", 1941),
          ("licenseSmartConfigFsm", 1942),
          ("licenseSmartConfigFsmStage", 1943),
          ("lsServerFsm", 1944),
          ("lsServerFsmStage", 1945),
          ("mgmtBackupFsm", 1946),
          ("mgmtBackupFsmStage", 1947),
          ("mgmtControllerFsm", 1948),
          ("mgmtControllerFsmStage", 1949),
          ("mgmtExportPolicyFsm", 1950),
          ("mgmtExportPolicyFsmStage", 1951),
          ("mgmtBackupPolicyFsm", 1952),
          ("mgmtBackupPolicyFsmStage", 1953),
          ("mgmtCfgExportPolicyFsm", 1954),
          ("mgmtCfgExportPolicyFsmStage", 1955),
          ("mgmtIPv6IfAddrFsm", 1956),
          ("mgmtIPv6IfAddrFsmStage", 1957),
          ("mgmtIfFsm", 1958),
          ("mgmtIfFsmStage", 1959),
          ("mgmtImporterFsm", 1960),
          ("mgmtImporterFsmStage", 1961),
          ("nfsMountDefFsm", 1962),
          ("nfsMountDefFsmStage", 1963),
          ("nfsMountInstFsm", 1964),
          ("nfsMountInstFsmStage", 1965),
          ("nhTableHolderFsm", 1966),
          ("nhTableHolderFsmStage", 1967),
          ("observeObservedFsm", 1968),
          ("observeObservedFsmStage", 1969),
          ("pkiEpFsm", 1970),
          ("pkiEpFsmStage", 1971),
          ("policyControlEpFsm", 1972),
          ("policyControlEpFsmStage", 1973),
          ("policyControlledTypeFsm", 1974),
          ("policyControlledTypeFsmStage", 1975),
          ("policyPolicyScopeFsm", 1976),
          ("policyPolicyScopeFsmStage", 1977),
          ("portPIoFsm", 1978),
          ("portPIoFsmStage", 1979),
          ("etherPIoFsm", 1980),
          ("etherPIoFsmStage", 1981),
          ("fcPIoFsm", 1982),
          ("fcPIoFsmStage", 1983),
          ("qosclassDefinitionFsm", 1984),
          ("qosclassDefinitionFsmStage", 1985),
          ("sdAppAttributeCtrlFsm", 1986),
          ("sdAppAttributeCtrlFsmStage", 1987),
          ("sdAppInstanceFsm", 1988),
          ("sdAppInstanceFsmStage", 1989),
          ("sdClusterBootstrapFsm", 1990),
          ("sdClusterBootstrapFsmStage", 1991),
          ("sdLduFsm", 1992),
          ("sdLduFsmStage", 1993),
          ("sdLinkFsm", 1994),
          ("sdLinkFsmStage", 1995),
          ("sdAppLduLinkFsm", 1996),
          ("sdAppLduLinkFsmStage", 1997),
          ("sdExternalLduLinkFsm", 1998),
          ("sdExternalLduLinkFsmStage", 1999),
          ("sdLogicalDeviceFsm", 2000),
          ("sdLogicalDeviceFsmStage", 2001),
          ("sdMgmtInfoFsm", 2002),
          ("sdMgmtInfoFsmStage", 2003),
          ("sdNetMgmtBootstrapFsm", 2004),
          ("sdNetMgmtBootstrapFsmStage", 2005),
          ("sdSlotFsm", 2006),
          ("sdSlotFsmStage", 2007),
          ("sdUpgradeTaskFsm", 2008),
          ("sdUpgradeTaskFsmStage", 2009),
          ("smAppFsm", 2010),
          ("smAppFsmStage", 2011),
          ("smAppInstanceFsm", 2012),
          ("smAppInstanceFsmStage", 2013),
          ("smSecSvcFsm", 2014),
          ("smSecSvcFsmStage", 2015),
          ("statsCollectionPolicyFsm", 2016),
          ("statsCollectionPolicyFsmStage", 2017),
          ("storageSystemFsm", 2018),
          ("storageSystemFsmStage", 2019),
          ("swAccessDomainFsm", 2020),
          ("swAccessDomainFsmStage", 2021),
          ("swEthLanBorderFsm", 2022),
          ("swEthLanBorderFsmStage", 2023),
          ("swEthLanFlowMonFsm", 2024),
          ("swEthLanFlowMonFsmStage", 2025),
          ("swEthMonFsm", 2026),
          ("swEthMonFsmStage", 2027),
          ("swExtUtilityFsm", 2028),
          ("swExtUtilityFsmStage", 2029),
          ("swFcMonFsm", 2030),
          ("swFcMonFsmStage", 2031),
          ("swFcSanBorderFsm", 2032),
          ("swFcSanBorderFsmStage", 2033),
          ("swPhysFsm", 2034),
          ("swPhysFsmStage", 2035),
          ("swSspEthMonFsm", 2036),
          ("swSspEthMonFsmStage", 2037),
          ("swSspEthMonSrcPhyEpFsm", 2038),
          ("swSspEthMonSrcPhyEpFsmStage", 2039),
          ("swUtilityDomainFsm", 2040),
          ("swUtilityDomainFsmStage", 2041),
          ("syntheticFsObjFsm", 2042),
          ("syntheticFsObjFsmStage", 2043),
          ("sysdebugAutoCoreFileExportTargetFsm", 2044),
          ("sysdebugAutoCoreFileExportTargetFsmStage", 2045),
          ("sysdebugCoreFsm", 2046),
          ("sysdebugCoreFsmStage", 2047),
          ("sysdebugLogControlEpFsm", 2048),
          ("sysdebugLogControlEpFsmStage", 2049),
          ("sysdebugLogExportPolicyFsm", 2050),
          ("sysdebugLogExportPolicyFsmStage", 2051),
          ("sysdebugManualCoreFileExportTargetFsm", 2052),
          ("sysdebugManualCoreFileExportTargetFsmStage", 2053),
          ("sysdebugTechSupportFsm", 2054),
          ("sysdebugTechSupportFsmStage", 2055),
          ("sysfileMutationFsm", 2056),
          ("sysfileMutationFsmStage", 2057),
          ("firmwareInfraPackFsmTask", 2058),
          ("firmwareInfraPackFsm", 2059),
          ("firmwareInfraPackFsmStage", 2060),
          ("equipmentCardStatsHist", 2062))
    )



class CfprApNetworkConfigIssues(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("conflictingVlanAccess", 0),
          ("namedVlanInaccessible", 1),
          ("permitUnresolved", 2),
          ("pinningInvalid", 3),
          ("switchVirtualIfCapacity", 4),
          ("unsupportedMulticastPolicy", 5),
          ("vlanPortCapacity", 6),
          ("networkFeatureCapabilityMismatch", 7))
    )


class CfprApNetworkConnectionType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApNetworkElementOperability(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("operable", 1),
          ("inoperable", 2),
          ("removed", 3))
    )



class CfprApNetworkIfStatsType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("generic", 0),
          ("broadcast", 1),
          ("multicast", 2),
          ("unicast", 3),
          ("total", 4))
    )



class CfprApNetworkIfStatsUnits(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("raw", 0),
          ("packets", 1),
          ("octets", 2))
    )



class CfprApNetworkIfStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("down", 1),
          ("up", 2))
    )



class CfprApNetworkInventoryStatus(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("switchFru", 0),
          ("vlanPortCount", 1),
          ("cardInventory", 2),
          ("ethPortInventory", 3),
          ("fcPortInventory", 4),
          ("mgmtPortInventory", 5),
          ("ethPcInventory", 6),
          ("fcPcInventory", 7),
          ("switchInventory", 8),
          ("xcvrInventory", 9),
          ("remoteEthPortInventory", 10),
          ("vlanCompGrpInventory", 11))
    )


class CfprApNetworkLocale(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("server", 0),
          ("chassis", 1),
          ("internal", 2),
          ("external", 3))
    )


class CfprApNetworkPhysEpIfType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("physical", 1),
          ("aggregation", 2),
          ("virtual", 3),
          ("fabric", 4))
    )



class CfprApNetworkPortOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("indeterminate", 0),
          ("up", 1),
          ("adminDown", 2),
          ("linkDown", 3),
          ("failed", 4),
          ("noLicense", 5),
          ("linkUp", 6),
          ("hardwareFailure", 7),
          ("softwareFailure", 8),
          ("errorDisabled", 9),
          ("sfpNotPresent", 10),
          ("udldAggrDown", 11))
    )



class CfprApNetworkPortRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApNetworkPortType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("physical", 1),
          ("aggregation", 2),
          ("virtual", 3),
          ("fabric", 4))
    )



class CfprApNetworkSide(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("left", 0),
          ("right", 1))
    )



class CfprApNetworkSwitchId(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("a", 1),
          ("b", 2))
    )



class CfprApNetworkTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApNetworkVlanCountStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("withinLimit", 0),
          ("aboveLimit", 1))
    )



class CfprApNetworkVnetEpIfType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("physical", 1),
          ("aggregation", 2),
          ("virtual", 3),
          ("fabric", 4))
    )



class CfprApNfsClientConfigState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unregistered", 0),
          ("registered", 1),
          ("configured", 2),
          ("failed", 3))
    )



class CfprApNfsDefAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1),
          ("suspended", 2))
    )



class CfprApNfsMntAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("unmount", 1),
          ("mount", 2),
          ("remount", 3))
    )



class CfprApNfsMntOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("unmounted", 0),
          ("mounted", 1))
    )



class CfprApNfsMountDefFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              494)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("reportNfsMountSuspend", 494))
    )



class CfprApNfsMountDefFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              494,
              495,
              678,
              679)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("reportNfsMountSuspendBegin", 494),
          ("reportNfsMountSuspendReport", 495),
          ("reportNfsMountSuspendFail", 678),
          ("reportNfsMountSuspendSuccess", 679))
    )



class CfprApNfsMountDefFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              494)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("reportNfsMountSuspend", 494))
    )



class CfprApNfsMountInstFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              486,
              491)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("mount", 486),
          ("unmount", 491))
    )



class CfprApNfsMountInstFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              486,
              487,
              488,
              489,
              490,
              491,
              492,
              493,
              680,
              681,
              682,
              683)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("mountBegin", 486),
          ("mountRegisterClient", 487),
          ("mountVerifyRegistration", 488),
          ("mountMountLocal", 489),
          ("mountMountPeer", 490),
          ("unmountBegin", 491),
          ("unmountUnmountLocal", 492),
          ("unmountUnmountPeer", 493),
          ("mountFail", 680),
          ("mountSuccess", 681),
          ("unmountFail", 682),
          ("unmountSuccess", 683))
    )



class CfprApNfsMountInstFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              486,
              491)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("mount", 486),
          ("unmount", 491))
    )



class CfprApNfsPurpose(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("image", 0),
          ("backup", 1))
    )



class CfprApNhConfMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ok", 0),
          ("config", 1),
          ("unconfig", 2),
          ("error", 3),
          ("fail", 4))
    )



class CfprApNhEpIdType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("intf", 1),
          ("lbgBlade", 2),
          ("lbgClust", 3),
          ("bcg", 4),
          ("flg", 5))
    )



class CfprApNhEpType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ingress", 1),
          ("egress", 2),
          ("pcGrp", 3))
    )



class CfprApNhExecState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("ready", 0),
          ("init", 1))
    )



class CfprApNhLinkType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unicast", 1),
          ("bcast", 2))
    )



class CfprApNhMacVlanType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("normal", 0),
          ("miss", 1),
          ("ucAll", 2),
          ("mcAll", 3),
          ("macAll", 4),
          ("fpmac", 5))
    )



class CfprApNhPortType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("phy", 0),
          ("pch", 1),
          ("vif", 2))
    )



class CfprApNhTableHolderFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              401,
              405)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configureLinks", 401),
          ("bootstrapLinks", 405))
    )



class CfprApNhTableHolderFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              401,
              402,
              403,
              404,
              405,
              406,
              684,
              685,
              686,
              687)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configureLinksBegin", 401),
          ("configureLinksConfigInterface", 402),
          ("configureLinksApplyConfig", 403),
          ("configureLinksVerifyLinkConfig", 404),
          ("bootstrapLinksBegin", 405),
          ("bootstrapLinksApplyConfig", 406),
          ("bootstrapLinksFail", 684),
          ("bootstrapLinksSuccess", 685),
          ("configureLinksFail", 686),
          ("configureLinksSuccess", 687))
    )



class CfprApNhTableHolderFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              401,
              405)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configureLinks", 401),
          ("bootstrapLinks", 405))
    )



class CfprApNhTableType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("ctrl", 2))
    )



class CfprApNhTpHashType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("normal", 0),
          ("twoTuple", 1))
    )



class CfprApNhtestTestState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("ready", 0),
          ("config", 1),
          ("abort", 2),
          ("unconfig", 3),
          ("portmac", 4),
          ("clean", 5),
          ("delld", 6),
          ("allocip", 7),
          ("freeip", 8))
    )



class CfprApNwctrlAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApNwctrlLinkFailAction(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("linkDown", 0),
          ("warning", 1))
    )



class CfprApNwctrlRegistrationMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("onlyNativeVlan", 0),
          ("allHostVlans", 1))
    )



class CfprApObserveObservedFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              239,
              241,
              243,
              245)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("resolvePolicyFsm", 239),
          ("resolveResourceFsm", 241),
          ("resolveVMFsm", 243),
          ("resolveControllerFsm", 245))
    )



class CfprApObserveObservedFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              239,
              240,
              241,
              242,
              243,
              244,
              245,
              246,
              688,
              689,
              690,
              691,
              692,
              693,
              694,
              695)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("resolvePolicyFsmBegin", 239),
          ("resolvePolicyFsmExecute", 240),
          ("resolveResourceFsmBegin", 241),
          ("resolveResourceFsmExecute", 242),
          ("resolveVMFsmBegin", 243),
          ("resolveVMFsmExecute", 244),
          ("resolveControllerFsmBegin", 245),
          ("resolveControllerFsmExecute", 246),
          ("resolveControllerFsmFail", 688),
          ("resolveControllerFsmSuccess", 689),
          ("resolvePolicyFsmFail", 690),
          ("resolvePolicyFsmSuccess", 691),
          ("resolveResourceFsmFail", 692),
          ("resolveResourceFsmSuccess", 693),
          ("resolveVMFsmFail", 694),
          ("resolveVMFsmSuccess", 695))
    )



class CfprApObserveObservedFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              239,
              241,
              243,
              245)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("resolvePolicyFsm", 239),
          ("resolveResourceFsm", 241),
          ("resolveVMFsm", 243),
          ("resolveControllerFsm", 245))
    )



class CfprApOrgLevel(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("root", 0),
          ("n1", 1),
          ("n2", 2),
          ("n3", 3),
          ("n4", 4),
          ("n5", 5))
    )



class CfprApOrgSrcMask(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("local", 0),
          ("global", 1))
    )


class CfprApOsBootingUpType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("outOfService", 0),
          ("bootingUp", 1),
          ("inService", 2),
          ("failure", 3))
    )



class CfprApOsControllerBootMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("normal", 0),
          ("local", 1),
          ("mio", 2))
    )



class CfprApOsControllerFormatDisk(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noOp", 0),
          ("quickFormat", 1),
          ("removeCfgapp", 2))
    )



class CfprApOsDeployState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("undefined", 0),
          ("inProgress", 1),
          ("complete", 2),
          ("retry", 3),
          ("failed", 4),
          ("throttled", 5))
    )



class CfprApOsInitState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("undefined", 0),
          ("inProgress", 1),
          ("complete", 2),
          ("retry", 3),
          ("failed", 4),
          ("throttled", 5))
    )



class CfprApOsOsMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("normal", 0),
          ("failsafe", 1))
    )



class CfprApOsOsType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("unspecified", 0),
          ("pnuOS", 1),
          ("linux", 2),
          ("windows", 3),
          ("solaris", 4),
          ("vmwareESX", 5),
          ("fxOS", 6))
    )



class CfprApOsUpgradeReturnCode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("requesting", 1),
          ("successful", 2),
          ("downloading", 3),
          ("validating", 4),
          ("failedComm", 5),
          ("failedDownloading", 6),
          ("failedValidation", 7))
    )



class CfprApOsUpgradeState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("undefined", 0),
          ("inProgress", 1),
          ("complete", 2),
          ("retry", 3),
          ("failed", 4),
          ("throttled", 5))
    )



class CfprApPciEquipSlotId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5000),
    )



class CfprApPkiCertStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("valid", 0),
          ("expired", 1),
          ("revoked", 2),
          ("notYetValid", 3),
          ("emptyCert", 4),
          ("unknown", 5),
          ("failedToVerifyWithTp", 6),
          ("failedToVerifyWithPrivateKey", 7),
          ("certChainTooLong", 8),
          ("selfSignedCertificate", 9))
    )



class CfprApPkiEpFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              344)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateEp", 344))
    )



class CfprApPkiEpFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              344,
              345,
              346,
              347,
              348,
              696,
              697)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateEpBegin", 344),
          ("updateEpSetKeyRingLocal", 345),
          ("updateEpSetKeyRingPeer", 346),
          ("updateEpPostSetKeyRingLocal", 347),
          ("updateEpPostSetKeyRingPeer", 348),
          ("updateEpFail", 696),
          ("updateEpSuccess", 697))
    )



class CfprApPkiEpFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              344)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateEp", 344))
    )



class CfprApPkiKeyringState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("started", 1),
          ("created", 2),
          ("reqCreated", 3),
          ("tpSet", 4),
          ("completed", 5))
    )



class CfprApPkiModulus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1536,
              2048,
              2560,
              3072,
              3584,
              4096)
        )
    )
    namedValues = NamedValues(
        *(("modinvalid", 0),
          ("mod1536", 1536),
          ("mod2048", 2048),
          ("mod2560", 2560),
          ("mod3072", 3072),
          ("mod3584", 3584),
          ("mod4096", 4096))
    )



class CfprApPolicyCleanupMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("localizeGlobal", 0),
          ("deepRemoveGlobal", 1))
    )



class CfprApPolicyControlSource(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("local", 0),
          ("policy", 1),
          ("pendingPolicy", 2))
    )



class CfprApPolicyControlEpFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              502)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("operate", 502))
    )



class CfprApPolicyControlEpFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              502,
              503,
              698,
              699)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("operateBegin", 502),
          ("operateResolve", 503),
          ("operateFail", 698),
          ("operateSuccess", 699))
    )



class CfprApPolicyControlEpFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              502)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("operate", 502))
    )



class CfprApPolicyControlEpType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            0
        )
    )
    namedValues = NamedValues(
        ("policy", 0)
    )



class CfprApPolicyControlledTypeFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              504)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("operate", 504))
    )



class CfprApPolicyControlledTypeFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              504,
              505,
              700,
              701)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("operateBegin", 504),
          ("operateResolveAll", 505),
          ("operateFail", 700),
          ("operateSuccess", 701))
    )



class CfprApPolicyControlledTypeFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              504)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("operate", 504))
    )



class CfprApPolicyIdResolvePolicyType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noDuplicateCheck", 0),
          ("looseDuplicateCheck", 1),
          ("strictDuplicateCheck", 2))
    )



class CfprApPolicyPolicyOperStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 0),
          ("resolved", 1),
          ("released", 2))
    )



class CfprApPolicyPolicyOwner(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("local", 0),
          ("policy", 1),
          ("pendingPolicy", 2))
    )



class CfprApPolicyPolicyResolveType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("name", 0),
          ("rn", 1))
    )



class CfprApPolicyPolicyScopeFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              506,
              508,
              510,
              512,
              514,
              516,
              518,
              520,
              522,
              524,
              526,
              528,
              530,
              532,
              534)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("releasePolicyFsm", 506),
          ("releaseOperationFsm", 508),
          ("releaseStorageFsm", 510),
          ("resolveManyPolicyFsm", 512),
          ("resolveManyOperationFsm", 514),
          ("resolveManyStorageFsm", 516),
          ("releaseManyPolicyFsm", 518),
          ("releaseManyOperationFsm", 520),
          ("releaseManyStorageFsm", 522),
          ("resolveAllPolicyFsm", 524),
          ("resolveAllOperationFsm", 526),
          ("resolveAllStorageFsm", 528),
          ("releaseAllPolicyFsm", 530),
          ("releaseAllOperationFsm", 532),
          ("releaseAllStorageFsm", 534))
    )



class CfprApPolicyPolicyScopeFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              506,
              507,
              508,
              509,
              510,
              511,
              512,
              513,
              514,
              515,
              516,
              517,
              518,
              519,
              520,
              521,
              522,
              523,
              524,
              525,
              526,
              527,
              528,
              529,
              530,
              531,
              532,
              533,
              534,
              535,
              702,
              703,
              704,
              705,
              706,
              707,
              708,
              709,
              710,
              711,
              712,
              713,
              714,
              715,
              716,
              717,
              718,
              719,
              720,
              721,
              722,
              723,
              724,
              725,
              726,
              727,
              728,
              729,
              730,
              731)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("releasePolicyFsmBegin", 506),
          ("releasePolicyFsmRelease", 507),
          ("releaseOperationFsmBegin", 508),
          ("releaseOperationFsmRelease", 509),
          ("releaseStorageFsmBegin", 510),
          ("releaseStorageFsmRelease", 511),
          ("resolveManyPolicyFsmBegin", 512),
          ("resolveManyPolicyFsmResolveMany", 513),
          ("resolveManyOperationFsmBegin", 514),
          ("resolveManyOperationFsmResolveMany", 515),
          ("resolveManyStorageFsmBegin", 516),
          ("resolveManyStorageFsmResolveMany", 517),
          ("releaseManyPolicyFsmBegin", 518),
          ("releaseManyPolicyFsmReleaseMany", 519),
          ("releaseManyOperationFsmBegin", 520),
          ("releaseManyOperationFsmReleaseMany", 521),
          ("releaseManyStorageFsmBegin", 522),
          ("releaseManyStorageFsmReleaseMany", 523),
          ("resolveAllPolicyFsmBegin", 524),
          ("resolveAllPolicyFsmResolveAll", 525),
          ("resolveAllOperationFsmBegin", 526),
          ("resolveAllOperationFsmResolveAll", 527),
          ("resolveAllStorageFsmBegin", 528),
          ("resolveAllStorageFsmResolveAll", 529),
          ("releaseAllPolicyFsmBegin", 530),
          ("releaseAllPolicyFsmReleaseAll", 531),
          ("releaseAllOperationFsmBegin", 532),
          ("releaseAllOperationFsmReleaseAll", 533),
          ("releaseAllStorageFsmBegin", 534),
          ("releaseAllStorageFsmReleaseAll", 535),
          ("releaseAllOperationFsmFail", 702),
          ("releaseAllOperationFsmSuccess", 703),
          ("releaseAllPolicyFsmFail", 704),
          ("releaseAllPolicyFsmSuccess", 705),
          ("releaseAllStorageFsmFail", 706),
          ("releaseAllStorageFsmSuccess", 707),
          ("releaseManyOperationFsmFail", 708),
          ("releaseManyOperationFsmSuccess", 709),
          ("releaseManyPolicyFsmFail", 710),
          ("releaseManyPolicyFsmSuccess", 711),
          ("releaseManyStorageFsmFail", 712),
          ("releaseManyStorageFsmSuccess", 713),
          ("releaseOperationFsmFail", 714),
          ("releaseOperationFsmSuccess", 715),
          ("releasePolicyFsmFail", 716),
          ("releasePolicyFsmSuccess", 717),
          ("releaseStorageFsmFail", 718),
          ("releaseStorageFsmSuccess", 719),
          ("resolveAllOperationFsmFail", 720),
          ("resolveAllOperationFsmSuccess", 721),
          ("resolveAllPolicyFsmFail", 722),
          ("resolveAllPolicyFsmSuccess", 723),
          ("resolveAllStorageFsmFail", 724),
          ("resolveAllStorageFsmSuccess", 725),
          ("resolveManyOperationFsmFail", 726),
          ("resolveManyOperationFsmSuccess", 727),
          ("resolveManyPolicyFsmFail", 728),
          ("resolveManyPolicyFsmSuccess", 729),
          ("resolveManyStorageFsmFail", 730),
          ("resolveManyStorageFsmSuccess", 731))
    )



class CfprApPolicyPolicyScopeFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              506,
              508,
              510,
              512,
              514,
              516,
              518,
              520,
              522,
              524,
              526,
              528,
              530,
              532,
              534)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("releasePolicyFsm", 506),
          ("releaseOperationFsm", 508),
          ("releaseStorageFsm", 510),
          ("resolveManyPolicyFsm", 512),
          ("resolveManyOperationFsm", 514),
          ("resolveManyStorageFsm", 516),
          ("releaseManyPolicyFsm", 518),
          ("releaseManyOperationFsm", 520),
          ("releaseManyStorageFsm", 522),
          ("resolveAllPolicyFsm", 524),
          ("resolveAllOperationFsm", 526),
          ("resolveAllStorageFsm", 528),
          ("releaseAllPolicyFsm", 530),
          ("releaseAllOperationFsm", 532),
          ("releaseAllStorageFsm", 534))
    )



class CfprApPolicyRegistrationStateType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("registering", 0),
          ("registered", 1),
          ("failed", 2),
          ("lostVisibility", 3),
          ("unregistered", 4))
    )



class CfprApPolicyRepairStateType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("done", 0),
          ("notDone", 1))
    )



class CfprApPolicyResumeAckState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("noAck", 0),
          ("acked", 1))
    )



class CfprApPolicyState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("ok", 0),
          ("outOfSync", 1))
    )



class CfprApPolicySuspendState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )



class CfprApPoolElementOwner(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("endPoint", 0),
          ("pool", 1))
    )



class CfprApPoolPoolAssignmentOrder(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("sequential", 1))
    )



class CfprApPortDuplex(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4)
        )
    )
    namedValues = NamedValues(
        *(("halfDuplex", 1),
          ("fullDuplex", 2),
          ("auto", 4))
    )



class CfprApPortEncap(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("dot1q", 1),
          ("isl", 2),
          ("negotiate", 3),
          ("proprietary", 4))
    )



class CfprApPortEthAdminSpeed(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("indeterminate", 0),
          ("n1gbps", 1),
          ("n10gbps", 2),
          ("n20gbps", 3),
          ("n40gbps", 4))
    )



class CfprApPortEthSpeed(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              7)
        )
    )
    namedValues = NamedValues(
        *(("indeterminate", 0),
          ("n1gbps", 1),
          ("n10gbps", 2),
          ("n20gbps", 3),
          ("n40gbps", 4),
          ("n100gbps", 5),
          ("n100mbps", 7))
    )



class CfprApPortGroupType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              4,
              8,
              16,
              17,
              18,
              19,
              20,
              21)
        )
    )
    namedValues = NamedValues(
        *(("switchEther", 1),
          ("switchFc", 4),
          ("host", 8),
          ("fabric", 16),
          ("fabricPc", 17),
          ("hostPc", 18),
          ("adaptorExt", 19),
          ("adaptorPc", 20),
          ("serverPc", 21))
    )



class CfprApPortMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("access", 1),
          ("trunk", 2),
          ("fabric", 3),
          ("nProxy", 4),
          ("f", 5),
          ("e", 6),
          ("sd", 7))
    )



class CfprApPortPIoFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              235,
              237)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("inCompatSfpPresence", 235),
          ("inCompatSfpReplaced", 237))
    )



class CfprApPortPIoFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              235,
              236,
              237,
              238,
              732,
              733,
              734,
              735)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("inCompatSfpPresenceBegin", 235),
          ("inCompatSfpPresenceShutdown", 236),
          ("inCompatSfpReplacedBegin", 237),
          ("inCompatSfpReplacedEnablePort", 238),
          ("inCompatSfpPresenceFail", 732),
          ("inCompatSfpPresenceSuccess", 733),
          ("inCompatSfpReplacedFail", 734),
          ("inCompatSfpReplacedSuccess", 735))
    )



class CfprApPortPIoFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              235,
              237)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("inCompatSfpPresence", 235),
          ("inCompatSfpReplaced", 237))
    )



class CfprApPortSpeed(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("indeterminate", 0),
          ("n1gbps", 1),
          ("n2gbps", 2),
          ("n4gbps", 3),
          ("n8gbps", 4),
          ("auto", 5))
    )



class CfprApPortSubGroupConfigState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApPortSubGroupSlotId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )



class CfprApPortTrust(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("trusted", 0),
          ("untrusted", 1))
    )



class CfprApPowerCapAction(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("nothing", 0),
          ("clockDown", 1),
          ("throttled", 2))
    )



class CfprApPowerChThrAction(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("nothing", 0),
          ("throttleBladeDisc", 1),
          ("stopBladeDisc", 2))
    )



class CfprApPowerGroupState(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("capOk", 0),
          ("capInsufficient", 1),
          ("capMismatch", 2))
    )


class CfprApPowerGroupStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("power", 0),
          ("powerAvg", 1),
          ("powerMax", 2),
          ("powerMin", 3))
    )


class CfprApPowerGroupStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("power", 0),
          ("powerAvg", 1),
          ("powerMax", 2),
          ("powerMin", 3))
    )


class CfprApPowerLockState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("locked", 1),
          ("unlocked", 2))
    )



class CfprApPowerMemberState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("uninitialized", 0),
          ("capOk", 1),
          ("fwMismatch", 2),
          ("psuInsufficient", 3),
          ("psuRedundancyFailed", 4),
          ("capInsufficient", 5))
    )



class CfprApPowerMgmtStyle(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("manualPerBlade", 0),
          ("intelligentPolicyDriven", 1))
    )



class CfprApPowerOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("notCapped", 0),
          ("budgeting", 1),
          ("budgeted", 2),
          ("deploying", 3),
          ("deployed", 4),
          ("discoveryRetry", 5),
          ("nonCompliant", 6),
          ("firmwareMismatch", 7),
          ("discoveryBudgeted", 8),
          ("unbudgeted", 9))
    )



class CfprApPowerPrioritySharing(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noPreference", 0),
          ("highestPrioInChassis", 1),
          ("highestPrioInPowerGroup", 2))
    )



class CfprApPowerProfilingMethod(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("default", 1),
          ("static", 2),
          ("pnuos", 3),
          ("nodemgr", 4))
    )



class CfprApPowerPsuLineMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("undetermined", 1),
          ("highLine", 2),
          ("lowLine", 3),
          ("mixedLine", 4),
          ("lowerLine", 5))
    )



class CfprApPowerPsuState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("ok", 0),
          ("insufficient", 1))
    )



class CfprApPowerReallocation(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("chassis", 0),
          ("none", 1))
    )



class CfprApPowerReqConflict(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("ignore", 0),
          ("failPlacement", 1))
    )



class CfprApProcStatAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("clearStats", 2),
          ("logStats", 3))
    )



class CfprApProcessorEnvStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("inputCurrent", 0),
          ("inputCurrentAvg", 1),
          ("inputCurrentMax", 2),
          ("inputCurrentMin", 3),
          ("temperature", 4),
          ("temperatureAvg", 5),
          ("temperatureMax", 6),
          ("temperatureMin", 7))
    )


class CfprApProcessorEnvStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("inputCurrent", 0),
          ("inputCurrentAvg", 1),
          ("inputCurrentMax", 2),
          ("inputCurrentMin", 3),
          ("temperature", 4),
          ("temperatureAvg", 5),
          ("temperatureMax", 6),
          ("temperatureMin", 7))
    )


class CfprApProcessorErrorStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("mirroringInterSockErrors", 0),
          ("mirroringIntraSockErrors", 1),
          ("smiLinkCorrErrors", 2),
          ("smiLinkUncorrErrors", 3),
          ("sparingErrors", 4))
    )


class CfprApProcessorQualArch(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              132,
              134,
              135,
              178,
              179,
              181)
        )
    )
    namedValues = NamedValues(
        *(("any", 0),
          ("intelP4C", 1),
          ("opteron", 132),
          ("turion64", 134),
          ("dualCoreOpteron", 135),
          ("pentium4", 178),
          ("xeon", 179),
          ("xeonMP", 181))
    )



class CfprApProcessorRuntimeThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("load", 0),
          ("loadAvg", 1),
          ("loadMax", 2),
          ("loadMin", 3))
    )


class CfprApProcessorRuntimeHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("load", 0),
          ("loadAvg", 1),
          ("loadMax", 2),
          ("loadMin", 3))
    )


class CfprApProcessorUnitArch(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              132,
              134,
              135,
              178,
              179,
              181)
        )
    )
    namedValues = NamedValues(
        *(("any", 0),
          ("intelP4C", 1),
          ("opteron", 132),
          ("turion64", 134),
          ("dualCoreOpteron", 135),
          ("pentium4", 178),
          ("xeon", 179),
          ("xeonMP", 181))
    )



class CfprApQosHostControl(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("full", 1),
          ("fullWithException", 2))
    )



class CfprApQosPriority(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("fc", 1),
          ("platinum", 2),
          ("gold", 3),
          ("silver", 4),
          ("bronze", 5),
          ("bestEffort", 6))
    )



class CfprApQosclassDefinitionFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              390)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configGlobalQoS", 390))
    )



class CfprApQosclassDefinitionFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              390,
              391,
              392,
              736,
              737)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configGlobalQoSBegin", 390),
          ("configGlobalQoSSetLocal", 391),
          ("configGlobalQoSSetPeer", 392),
          ("configGlobalQoSFail", 736),
          ("configGlobalQoSSuccess", 737))
    )



class CfprApQosclassDefinitionFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              390)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configGlobalQoS", 390))
    )



class CfprApQosclassEthBEAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApQosclassEthBEDrop(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("drop", 0),
          ("noDrop", 1))
    )



class CfprApQosclassEthBEPriority(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("fc", 1),
          ("platinum", 2),
          ("gold", 3),
          ("silver", 4),
          ("bronze", 5),
          ("bestEffort", 6))
    )



class CfprApQosclassEthClassifiedAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApQosclassEthClassifiedDrop(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("drop", 0),
          ("noDrop", 1))
    )



class CfprApQosclassEthClassifiedPriority(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("fc", 1),
          ("platinum", 2),
          ("gold", 3),
          ("silver", 4),
          ("bronze", 5),
          ("bestEffort", 6))
    )



class CfprApQosclassFcAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApQosclassFcDrop(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("drop", 0),
          ("noDrop", 1))
    )



class CfprApQosclassFcPriority(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("fc", 1),
          ("platinum", 2),
          ("gold", 3),
          ("silver", 4),
          ("bronze", 5),
          ("bestEffort", 6))
    )



class CfprApRmetaModType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("readOnly", 0),
          ("readWrite", 1),
          ("readCreate", 2))
    )



class CfprApSdActionType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("add", 1),
          ("update", 2),
          ("delete", 3))
    )



class CfprApSdAppAttributeCtrlFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              300)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("getAppAttributes", 300))
    )



class CfprApSdAppAttributeCtrlFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              300,
              301,
              738,
              739)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("getAppAttributesBegin", 300),
          ("getAppAttributesGetAttributes", 301),
          ("getAppAttributesFail", 738),
          ("getAppAttributesSuccess", 739))
    )



class CfprApSdAppAttributeCtrlFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              300)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("getAppAttributes", 300))
    )



class CfprApSdAppInstAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 0),
          ("disabled", 1))
    )



class CfprApSdAppInstState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("notInstalled", 0),
          ("installing", 1),
          ("installFailed", 2),
          ("offline", 3),
          ("starting", 4),
          ("startFailed", 5),
          ("started", 6),
          ("online", 7),
          ("stopping", 8),
          ("stopFailed", 9),
          ("notResponding", 10),
          ("updating", 11),
          ("updateFailed", 12),
          ("updateSucceeded", 13),
          ("unsupported", 14))
    )



class CfprApSdAppInstanceCurrentJobProgress(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )



class CfprApSdAppInstanceFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              250,
              254,
              263,
              267,
              272,
              278)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("installApplication", 250),
          ("startApplication", 254),
          ("upgradeApplication", 263),
          ("stopApplication", 267),
          ("uninstallApplication", 272),
          ("bundleDataPorts", 278))
    )



class CfprApSdAppInstanceFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              250,
              251,
              252,
              253,
              254,
              255,
              256,
              257,
              263,
              264,
              265,
              266,
              267,
              268,
              269,
              270,
              271,
              272,
              273,
              274,
              275,
              278,
              279,
              280,
              281,
              282,
              740,
              741,
              742,
              743,
              744,
              745,
              746,
              747,
              748,
              749,
              750,
              751)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("installApplicationBegin", 250),
          ("installApplicationSendCommand", 251),
          ("installApplicationWaitStage", 252),
          ("installApplicationUpdateAppInstance", 253),
          ("startApplicationBegin", 254),
          ("startApplicationSendCommand", 255),
          ("startApplicationWaitStage", 256),
          ("startApplicationUpdateAppInstance", 257),
          ("upgradeApplicationBegin", 263),
          ("upgradeApplicationSendCommand", 264),
          ("upgradeApplicationWaitStage", 265),
          ("upgradeApplicationUpdateAppInstance", 266),
          ("stopApplicationBegin", 267),
          ("stopApplicationReleaseAppLicense", 268),
          ("stopApplicationSendCommand", 269),
          ("stopApplicationWaitStage", 270),
          ("stopApplicationUpdateAppInstance", 271),
          ("uninstallApplicationBegin", 272),
          ("uninstallApplicationReleaseAppLicense", 273),
          ("uninstallApplicationSendCommand", 274),
          ("uninstallApplicationWaitStage", 275),
          ("bundleDataPortsBegin", 278),
          ("bundleDataPortsConfigureLinks", 279),
          ("bundleDataPortsWaitForConfigCompletion", 280),
          ("bundleDataPortsUpdateBundleStatus", 281),
          ("bundleDataPortsSendBundleStatus", 282),
          ("bundleDataPortsFail", 740),
          ("bundleDataPortsSuccess", 741),
          ("installApplicationFail", 742),
          ("installApplicationSuccess", 743),
          ("startApplicationFail", 744),
          ("startApplicationSuccess", 745),
          ("stopApplicationFail", 746),
          ("stopApplicationSuccess", 747),
          ("uninstallApplicationFail", 748),
          ("uninstallApplicationSuccess", 749),
          ("upgradeApplicationFail", 750),
          ("upgradeApplicationSuccess", 751))
    )



class CfprApSdAppInstanceFsmTaskFlags(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("samDmeSdAppInstanceStopApplicationReleaseLicense", 22),
          ("samDmeSdAppInstanceStopApplicationStopAppInstance", 23))
    )


class CfprApSdAppInstanceFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              250,
              254,
              263,
              267,
              272,
              278)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("installApplication", 250),
          ("startApplication", 254),
          ("upgradeApplication", 263),
          ("stopApplication", 267),
          ("uninstallApplication", 272),
          ("bundleDataPorts", 278))
    )



class CfprApSdAppLduLinkFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              289)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateInterfaceStatus", 289))
    )



class CfprApSdAppLduLinkFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              289,
              290,
              756,
              757)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateInterfaceStatusBegin", 289),
          ("updateInterfaceStatusSendStatus", 290),
          ("updateInterfaceStatusFail", 756),
          ("updateInterfaceStatusSuccess", 757))
    )



class CfprApSdAppResetState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("waitBladeReboot", 1))
    )



class CfprApSdCfgPortForwardingMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("individual", 1),
          ("promiscuous", 2))
    )



class CfprApSdClusterBootstrapChassisId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )



class CfprApSdClusterBootstrapFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              291)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateClusterConfiguration", 291))
    )



class CfprApSdClusterBootstrapFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              291,
              292,
              752,
              753)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateClusterConfigurationBegin", 291),
          ("updateClusterConfigurationSendConfig", 292),
          ("updateClusterConfigurationFail", 752),
          ("updateClusterConfigurationSuccess", 753))
    )



class CfprApSdClusterBootstrapFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              291)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateClusterConfiguration", 291))
    )



class CfprApSdClusterStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("joined", 1),
          ("left", 2))
    )



class CfprApSdExternalLduLinkFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              289)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateInterfaceStatus", 289))
    )



class CfprApSdExternalLduLinkFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              289,
              290,
              756,
              757)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateInterfaceStatusBegin", 289),
          ("updateInterfaceStatusSendStatus", 290),
          ("updateInterfaceStatusFail", 756),
          ("updateInterfaceStatusSuccess", 757))
    )



class CfprApSdInterfaceType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("root", 0),
          ("sub", 1))
    )



class CfprApSdJobState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("queued", 1),
          ("failed", 2),
          ("succeeded", 3))
    )



class CfprApSdJobType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("install", 1),
          ("uninstall", 2),
          ("upgrade", 3),
          ("start", 4),
          ("stop", 5),
          ("formatDisk", 6),
          ("uploadPlatformImage", 7))
    )



class CfprApSdLdOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ok", 1),
          ("incompleteConfiguration", 2))
    )



class CfprApSdLduFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              258)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("provisionLDU", 258))
    )



class CfprApSdLduFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              258,
              259,
              260,
              261,
              262,
              754,
              755)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("provisionLDUBegin", 258),
          ("provisionLDUCheckBladeReadiness", 259),
          ("provisionLDUWaitForAppsInstallation", 260),
          ("provisionLDUWaitForLinkConfiguration", 261),
          ("provisionLDUStartApps", 262),
          ("provisionLDUFail", 754),
          ("provisionLDUSuccess", 755))
    )



class CfprApSdLduFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              258)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("provisionLDU", 258))
    )



class CfprApSdLduOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("active", 1),
          ("suspended", 2))
    )



class CfprApSdLinkDirection(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("rin", 1),
          ("out", 2),
          ("both", 3))
    )



class CfprApSdLinkFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              289)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateInterfaceStatus", 289))
    )



class CfprApSdLinkFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              289,
              290,
              756,
              757)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateInterfaceStatusBegin", 289),
          ("updateInterfaceStatusSendStatus", 290),
          ("updateInterfaceStatusFail", 756),
          ("updateInterfaceStatusSuccess", 757))
    )



class CfprApSdLinkFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              289)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateInterfaceStatus", 289))
    )



class CfprApSdLinkOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("up", 1),
          ("down", 2))
    )



class CfprApSdLogicalDeviceFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              283)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configureLinks", 283))
    )



class CfprApSdLogicalDeviceFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              283,
              284,
              285,
              286,
              287,
              288,
              758,
              759)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configureLinksBegin", 283),
          ("configureLinksSendInterfaces", 284),
          ("configureLinksUnconfigureLinks", 285),
          ("configureLinksConfigureSwitch", 286),
          ("configureLinksWaitForSwitchConfig", 287),
          ("configureLinksUnconfigureLogicalDevice", 288),
          ("configureLinksFail", 758),
          ("configureLinksSuccess", 759))
    )



class CfprApSdLogicalDeviceFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              283)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configureLinks", 283))
    )



class CfprApSdMacType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unicast", 1),
          ("multicast", 2))
    )



class CfprApSdMgmtInfoFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              302)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateMgmtInfo", 302))
    )



class CfprApSdMgmtInfoFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              302,
              303,
              760,
              761)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateMgmtInfoBegin", 302),
          ("updateMgmtInfoSendUpdate", 303),
          ("updateMgmtInfoFail", 760),
          ("updateMgmtInfoSuccess", 761))
    )



class CfprApSdMgmtInfoFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              302)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateMgmtInfo", 302))
    )



class CfprApSdNetMgmtBootstrapFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              304)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateNetMgmtBootstrap", 304))
    )



class CfprApSdNetMgmtBootstrapFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              304,
              305,
              762,
              763)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateNetMgmtBootstrapBegin", 304),
          ("updateNetMgmtBootstrapSendUpdate", 305),
          ("updateNetMgmtBootstrapFail", 762),
          ("updateNetMgmtBootstrapSuccess", 763))
    )



class CfprApSdNetMgmtBootstrapFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              304)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateNetMgmtBootstrap", 304))
    )



class CfprApSdPortBundleOpType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("bundled", 0),
          ("deBundled", 1))
    )



class CfprApSdPortBundleStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("failure", 1),
          ("partial", 2),
          ("success", 3))
    )



class CfprApSdPortForwardingMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("individual", 0),
          ("promiscuous", 1))
    )



class CfprApSdSlotFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              276,
              293,
              298)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("changePlatformLogLevel", 276),
          ("formatDisk", 293),
          ("synchTimeZone", 298))
    )



class CfprApSdSlotFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              276,
              277,
              293,
              294,
              295,
              296,
              297,
              298,
              299,
              764,
              765,
              766,
              767,
              768,
              769)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("changePlatformLogLevelBegin", 276),
          ("changePlatformLogLevelSendCommand", 277),
          ("formatDiskBegin", 293),
          ("formatDiskCheckBladeReadiness", 294),
          ("formatDiskStartDiskFormat", 295),
          ("formatDiskResetBladePower", 296),
          ("formatDiskWaitForDiskFormatComplete", 297),
          ("synchTimeZoneBegin", 298),
          ("synchTimeZoneUpdateTimeZone", 299),
          ("changePlatformLogLevelFail", 764),
          ("changePlatformLogLevelSuccess", 765),
          ("formatDiskFail", 766),
          ("formatDiskSuccess", 767),
          ("synchTimeZoneFail", 768),
          ("synchTimeZoneSuccess", 769))
    )



class CfprApSdSlotFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              276,
              293,
              298)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("changePlatformLogLevel", 276),
          ("formatDisk", 293),
          ("synchTimeZone", 298))
    )



class CfprApSdUpgradeTaskFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              306)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("stopUpgradeStartApp", 306))
    )



class CfprApSdUpgradeTaskFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              306,
              307,
              308,
              309,
              310,
              311,
              312,
              770,
              771)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("stopUpgradeStartAppBegin", 306),
          ("stopUpgradeStartAppStopApp", 307),
          ("stopUpgradeStartAppWaitForStopApp", 308),
          ("stopUpgradeStartAppWaitForBladeReboot", 309),
          ("stopUpgradeStartAppUpgradeApp", 310),
          ("stopUpgradeStartAppWaitForUpgradeApp", 311),
          ("stopUpgradeStartAppStartApp", 312),
          ("stopUpgradeStartAppFail", 770),
          ("stopUpgradeStartAppSuccess", 771))
    )



class CfprApSdUpgradeTaskFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              306)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("stopUpgradeStartApp", 306))
    )



class CfprApServerConfigIssues(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("insufficientResources", 0),
          ("boardControllerUpdateUnsupported", 1),
          ("bootConfigurationInvalid", 2),
          ("bootOrderIscsi", 3),
          ("bootOrderPxe", 4),
          ("bootOrderSanImagePath", 5),
          ("computeUnavailable", 6),
          ("computeUndiscovered", 7),
          ("incompatBiosForSriovVnics", 8),
          ("incompatibleBiosImage", 9),
          ("insufficientPowerBudget", 10),
          ("macAddressAssignment", 11),
          ("memoryRequirement", 12),
          ("migration", 13),
          ("missingFirmwareImage", 14),
          ("nonInterruptFsmRunning", 15),
          ("physicalRequirement", 16),
          ("powerGroupRequirement", 17),
          ("processorRequirement", 18),
          ("remotePolicy", 19),
          ("serverPositionRequirement", 20),
          ("remoteServiceProfile", 21),
          ("systemUuidAssignment", 22),
          ("wwnnDerivationFromVhba", 23),
          ("resourceOwnershipConflict", 24),
          ("bootipPolicyInvalid", 25),
          ("hostimgPolicyInvalid", 26),
          ("imgsecPolicyInvalid", 27),
          ("provsrvPolicyInvalid", 28),
          ("qosPolicyInvalid", 29),
          ("bootConfigurationUnsupported", 30),
          ("serverFeatureCapabilityMismatch", 31),
          ("domainRequirement", 32),
          ("duplicateAddressConflict", 33),
          ("vmediaPolicyUnsupported", 34),
          ("bootPolicyVmediaInvalid", 35),
          ("vmediaMountConfigInvalid", 36),
          ("softPinningVlanMismatch", 37),
          ("cimcDowngradeRestriction", 38),
          ("ivbCimcDowngradeRestriction", 39),
          ("ivbBiosDowngradeRestriction", 40),
          ("incompatibleSsposImage", 41))
    )


class CfprApSmActionStages(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("available", 0),
          ("perform", 1),
          ("performing", 2),
          ("failure", 3),
          ("notAvailable", 4))
    )



class CfprApSmAppAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("active", 0),
          ("deleted", 1))
    )



class CfprApSmAppAggregatorType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("none", 1),
          ("partial", 2),
          ("full", 3),
          ("serviceStandard", 4))
    )



class CfprApSmAppClusterOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 0),
          ("inCluster", 1),
          ("notInCluster", 2),
          ("joiningCluster", 3),
          ("leavingCluster", 4))
    )



class CfprApSmAppCommand(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 0),
          ("retryAction", 1),
          ("clearMgmtBootstrap", 2))
    )



class CfprApSmAppFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              79,
              83)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("delete", 79),
          ("updateApplication", 83))
    )



class CfprApSmAppFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              79,
              80,
              83,
              84,
              772,
              773,
              776,
              777)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deleteBegin", 79),
          ("deleteLocal", 80),
          ("updateApplicationBegin", 83),
          ("updateApplicationUpdate", 84),
          ("deleteFail", 772),
          ("deleteSuccess", 773),
          ("updateApplicationFail", 776),
          ("updateApplicationSuccess", 777))
    )



class CfprApSmAppFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              79,
              83)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("delete", 79),
          ("updateApplication", 83))
    )



class CfprApSmAppInstanceCurrentJobProgress(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )



class CfprApSmAppInstanceFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              85)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("resetApplication", 85))
    )



class CfprApSmAppInstanceFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              85,
              86,
              87,
              88,
              89,
              90,
              91,
              774,
              775)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("resetApplicationBegin", 85),
          ("resetApplicationStopDecoratorApps", 86),
          ("resetApplicationWairForStopDecorators", 87),
          ("resetApplicationStopMainApp", 88),
          ("resetApplicationWaitForBladeReboot", 89),
          ("resetApplicationWaitForStopMainApp", 90),
          ("resetApplicationStartApps", 91),
          ("resetApplicationFail", 774),
          ("resetApplicationSuccess", 775))
    )



class CfprApSmAppInstanceFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              85)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("resetApplication", 85))
    )



class CfprApSmClusterBootstrapChassisId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )



class CfprApSmClusterMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            0
        )
    )
    namedValues = NamedValues(
        ("spannedEtherchannel", 0)
    )



class CfprApSmCspType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("application", 1),
          ("osPatch", 2))
    )



class CfprApSmDeployType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("native", 1),
          ("lxc", 2),
          ("vm", 3))
    )



class CfprApSmDiskState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 0),
          ("formatting", 1),
          ("formatFailure", 2))
    )



class CfprApSmHeartbeatState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )



class CfprApSmLogLevel(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("debug", 0),
          ("info", 1),
          ("warning", 2),
          ("error", 3),
          ("critical", 4))
    )



class CfprApSmLogicalDeviceMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("clustered", 1),
          ("standalone", 2),
          ("none", 3))
    )



class CfprApSmMgmtSubType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("firepower", 1))
    )



class CfprApSmNetMgmtBootstrapScope(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("global", 0),
          ("instanceOnly", 1))
    )



class CfprApSmNetMgmtBootstrapType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("nA", 0),
          ("appagent", 1),
          ("disk", 2))
    )



class CfprApSmSecSvcFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              81,
              92)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("restoreApplication", 81),
          ("autoDeployCSP", 92))
    )



class CfprApSmSecSvcFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              81,
              82,
              92,
              93,
              94,
              778,
              779,
              780,
              781,
              833)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("restoreApplicationBegin", 81),
          ("restoreApplicationRestore", 82),
          ("autoDeployCSPBegin", 92),
          ("autoDeployCSPWaitForPortReady", 93),
          ("autoDeployCSPCreateLogicalDevice", 94),
          ("autoDeployCSPFail", 778),
          ("autoDeployCSPSuccess", 779),
          ("restoreApplicationFail", 780),
          ("restoreApplicationSuccess", 781),
          ("autoDeployCSPWaitForChassisMoReady", 833))
    )



class CfprApSmSecSvcFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              81,
              92)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("restoreApplication", 81),
          ("autoDeployCSP", 92))
    )



class CfprApSmSlotAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("ok", 0),
          ("reinitialize", 1))
    )



class CfprApSmSlotOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("notAvailable", 0),
          ("offline", 1),
          ("online", 2),
          ("notResponding", 3),
          ("fault", 4),
          ("tokenMismatch", 5))
    )



class CfprApSolAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )



class CfprApSolSpeed(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("n9600", 6),
          ("n19200", 7),
          ("n38400", 8),
          ("n57600", 9),
          ("n115200", 10))
    )



class CfprApStatsCollectionDomain(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("chassis", 1),
          ("server", 2),
          ("port", 3),
          ("fex", 4))
    )



class CfprApStatsCollectionInterval(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(30,
              60,
              120,
              300)
        )
    )
    namedValues = NamedValues(
        *(("n30seconds", 30),
          ("n1minute", 60),
          ("n2minutes", 120),
          ("n5minutes", 300))
    )



class CfprApStatsCollectionPolicyFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              407)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateEp", 407))
    )



class CfprApStatsCollectionPolicyFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              407,
              408,
              409,
              782,
              783)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateEpBegin", 407),
          ("updateEpSetEpA", 408),
          ("updateEpSetEpB", 409),
          ("updateEpFail", 782),
          ("updateEpSuccess", 783))
    )



class CfprApStatsCollectionPolicyFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              407)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("updateEp", 407))
    )



class CfprApStatsReportingInterval(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(120,
              900,
              1800,
              3600,
              7200,
              14400,
              28800)
        )
    )
    namedValues = NamedValues(
        *(("n2minutes", 120),
          ("n15minutes", 900),
          ("n30minutes", 1800),
          ("n60minutes", 3600),
          ("n2hours", 7200),
          ("n4hours", 14400),
          ("n8hours", 28800))
    )



class CfprApStatsThr32DefinitionPropType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("uint32", 1),
          ("uint64", 2),
          ("float", 3))
    )



class CfprApStatsThr32ValuePropType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("uint32", 1),
          ("uint64", 2),
          ("float", 3))
    )



class CfprApStatsThr64DefinitionPropType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("uint32", 1),
          ("uint64", 2),
          ("float", 3))
    )



class CfprApStatsThr64ValuePropType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("uint32", 1),
          ("uint64", 2),
          ("float", 3))
    )



class CfprApStatsThrFloatDefinitionPropType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("uint32", 1),
          ("uint64", 2),
          ("float", 3))
    )



class CfprApStatsThrFloatValuePropType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("uint32", 1),
          ("uint64", 2),
          ("float", 3))
    )



class CfprApStatsThresholdDirection(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("aboveNormal", 1),
          ("belowNormal", 2))
    )



class CfprApStorageAccessType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("readWrite", 1),
          ("readOnly", 2),
          ("blocked", 3))
    )



class CfprApStorageActualWriteType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("writeThrough", 1),
          ("writeBack", 2))
    )



class CfprApStorageAllocState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("allocating", 1),
          ("allocated", 2),
          ("failed", 3))
    )



class CfprApStorageBatteryType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("battery", 1),
          ("supercap", 2))
    )



class CfprApStorageBbuStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("optimal", 1),
          ("learnCycleActive", 2),
          ("learnCycleNeeded", 3),
          ("failurePredicted", 4),
          ("premiumFeatureReqd", 5),
          ("microcodeUpdateReqd", 6),
          ("replacementNeeded", 7),
          ("noFlashSpace", 8),
          ("notSupported", 9),
          ("notPresent", 10))
    )



class CfprApStorageBootableType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("true", 1),
          ("false", 2))
    )



class CfprApStorageCacheType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("noChange", 1),
          ("enable", 2),
          ("disable", 3))
    )



class CfprApStorageConfigIssues(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("destructiveLocalDiskConfig", 0),
          ("incompatibleDiskTypes", 1),
          ("incompatibleNumberOfLocalDisks", 2),
          ("incompatibleRaidLevel", 3),
          ("missingRaidKey", 4),
          ("storagePathConfigurationError", 5),
          ("wwnnAssignment", 6),
          ("zoneCapacity", 7),
          ("flexflashController", 8),
          ("flexflashCard", 9),
          ("flexflashMetadata", 10),
          ("storageFeatureCapabilityMismatch", 11))
    )


class CfprApStorageConfiguration(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("supported", 1),
          ("notSupported", 2))
    )



class CfprApStorageConfiguredWriteType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("writeThrough", 1),
          ("writeBackGoodBbu", 2),
          ("alwaysWriteBack", 3))
    )



class CfprApStorageConnectionProtocol(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unspecified", 0),
          ("sas", 1),
          ("sata", 2))
    )



class CfprApStorageControllerFaultMonitoring(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("supported", 1),
          ("notSupported", 2))
    )



class CfprApStorageControllerId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 64),
    )



class CfprApStorageControllerForm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("onBoard", 1),
          ("mezzanine", 2),
          ("pci", 3),
          ("embedded", 4))
    )



class CfprApStorageControllerStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("optimal", 1),
          ("failed", 2),
          ("unresponsive", 3))
    )



class CfprApStorageControllerType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("sas", 1),
          ("sata", 2),
          ("flash", 3),
          ("sd", 4))
    )



class CfprApStorageDisklessAction(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unspecified", 0),
          ("yes", 1),
          ("no", 2))
    )



class CfprApStorageEpAccess(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("readonly", 1),
          ("admin", 2))
    )



class CfprApStorageEtherIfVlanType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("regular", 0),
          ("default", 1),
          ("native", 2))
    )



class CfprApStorageFFCardHealth(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ffPhyHealthNa", 0),
          ("ffPhyHealthOk", 1),
          ("ffPhyUnhealthyRaid", 2),
          ("ffPhyUnhealthyOther", 3))
    )



class CfprApStorageFFCardMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ffPhyDriveUnpairedPrimary", 0),
          ("ffPhyDrivePrimary", 1),
          ("ffPhyDriveSecondaryAct", 2),
          ("ffPhyDriveSecondaryUnhealthy", 3))
    )



class CfprApStorageFFCardSizeMismatch(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("na", 0),
          ("mismatch", 1),
          ("match", 2))
    )



class CfprApStorageFFCardState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("undefined", 0),
          ("configured", 1),
          ("initializing", 2),
          ("active", 3),
          ("ignored", 4),
          ("failed", 5),
          ("unknown", 6))
    )



class CfprApStorageFFCardSync(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("na", 0),
          ("manual", 1),
          ("auto", 2),
          ("unknown", 3))
    )



class CfprApStorageFFCardWriteEnable(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )



class CfprApStorageFFControllerHealth(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24)
        )
    )
    namedValues = NamedValues(
        *(("ffchOk", 0),
          ("ffchMetadataFailure", 1),
          ("ffchErrorCardsAccessError", 2),
          ("ffchErrorOldFirmwareRunning", 3),
          ("ffchErrorMediaWriteProtected", 4),
          ("ffchErrorInvalidSize", 5),
          ("ffchErrorCardSizeMismatch", 6),
          ("ffchInconsistentMetadata", 7),
          ("ffchErrorSecondaryUnhealthyCard", 8),
          ("ffchErrorSdCardNotConfigured", 9),
          ("ffchErrorInconsistantMetadataIgnored", 10),
          ("ffchErrorSd253WithUnOrSd247", 11),
          ("ffchErrorRebootedDuringRebuild", 12),
          ("ffchErrorSd247CardDetected", 13),
          ("ffchFlexdErrorSdCardOpModeMismatch", 14),
          ("ffchFlexdErrorSdOpModeMismatchWithUn", 15),
          ("ffchFlexdErrorImSdUnhealthySdUnIgnored", 16),
          ("ffchFlexdErrorImSdHealthySdUnIgnored", 17),
          ("ffchFlexdErrorImSdCardsOpModeMismatch", 18),
          ("ffchFlexdErrorSdCard0UnhealthyOpModeMismatch", 19),
          ("ffchFlexdErrorSdCard0HealthyOpModeMismatch", 20),
          ("ffchFlexdErrorSdCard1UnhealthyOpModeMismatch", 21),
          ("ffchFlexdErrorSdCard1HealthyOpModeMismatch", 22),
          ("ffchFlexdErrorImSd0IgnoredSd1", 23),
          ("ffchFlexdErrorImSd0Sd1Ignored", 24))
    )



class CfprApStorageFFControllerState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("ffcUninitalized", 0),
          ("ffcSoftwareErr", 1),
          ("ffcInit", 2),
          ("ffcConfig", 3),
          ("ffcWaitUser", 4),
          ("ffcUsbDisconnecting", 5),
          ("ffcUsbDisconnected", 6),
          ("ffcUsbConnecting", 7),
          ("ffcUsbConnected", 8),
          ("ffcRebuilding", 9),
          ("ffcFailed", 10))
    )



class CfprApStorageFFDriveRemovable(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("na", 0),
          ("yes", 1),
          ("no", 2))
    )



class CfprApStorageFFDriveState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("nonraid", 0),
          ("raid", 1))
    )



class CfprApStorageFFDriveType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("scu", 1),
          ("huu", 2),
          ("hv", 3),
          ("drivers", 4))
    )



class CfprApStorageFFDriveVisible(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )



class CfprApStorageFFFormatRunning(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("na", 0),
          ("yes", 1),
          ("no", 2))
    )



class CfprApStorageFFHasError(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("error", 0),
          ("noError", 1))
    )



class CfprApStorageFFRAIDHealth(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ffrHealthNa", 0),
          ("ffrHealthOk", 1),
          ("ffrHealthDegraded", 2),
          ("ffrHealthNotReporting", 3))
    )



class CfprApStorageFFRAIDState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("ffrStateDisabled", 0),
          ("ffrStateEnabledNotPaired", 1),
          ("ffrStateEnabledPairedInvalidSecondary", 2),
          ("ffrStateEnabledPairedInvalidPrimary", 3),
          ("ffrStateEnabledPairedInvalidBoth", 4),
          ("ffrStateEnabledPaired", 5))
    )



class CfprApStorageFFRWType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("readWrite", 0),
          ("readOnly", 1))
    )



class CfprApStorageFFRaidSyncSupport(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )



class CfprApStorageFFSlotENUM(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("na", 0),
          ("n1", 1),
          ("n2", 2))
    )



class CfprApStorageFFType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("astoria", 1),
          ("fx3s", 2))
    )



class CfprApStorageFcZoningType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("sist", 1),
          ("simt", 2))
    )



class CfprApStorageFileSystemStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("clean", 1),
          ("notClean", 2),
          ("mounted", 3),
          ("unmounted", 4))
    )



class CfprApStorageFlexFlashControllerId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 64),
    )



class CfprApStorageIOType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("direct", 1),
          ("cached", 2))
    )



class CfprApStorageIniGroupOperProtocol(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("derived", 0),
          ("fc", 1),
          ("iscsi", 2))
    )



class CfprApStorageIniGroupOwner(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              4,
              8)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("physical", 1),
          ("policy", 2),
          ("logical", 4),
          ("connPolicy", 8))
    )



class CfprApStorageIniGroupProtocol(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("derived", 0),
          ("fc", 1),
          ("iscsi", 2))
    )



class CfprApStorageKeyType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("initiator", 1),
          ("target", 2))
    )



class CfprApStorageLearnCycleRequested(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("true", 1),
          ("false", 2))
    )



class CfprApStorageLearnMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("auto", 1),
          ("disabled", 2),
          ("warn", 3))
    )



class CfprApStorageLinkSpeed(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("n15Gbps", 1),
          ("n3Gbps", 2),
          ("n6Gbps", 3),
          ("n12Gbps", 4))
    )



class CfprApStorageLocalDiskConfigFlexFlashRAIDReportingState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )



class CfprApStorageLocalDiskConfigFlexFlashState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )



class CfprApStorageLocalDiskMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17)
        )
    )
    namedValues = NamedValues(
        *(("noLocalStorage", 1),
          ("singleDisk", 2),
          ("dualDisk", 3),
          ("raidStriped", 4),
          ("raidMirrored", 5),
          ("bestEffortMirrored", 6),
          ("bestEffortStriped", 7),
          ("anyConfiguration", 8),
          ("noRaid", 9),
          ("raidStripedParity", 10),
          ("raidStripedDualParity", 11),
          ("raidMirroredStriped", 12),
          ("bestEffortStripedParity", 13),
          ("bestEffortStripedDualParity", 14),
          ("bestEffortMirroredStriped", 15),
          ("raidStripedParityStriped", 16),
          ("raidStripedDualParityStriped", 17))
    )



class CfprApStorageLocalDiskPartitionType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("swap", 2),
          ("ext2", 3),
          ("ext3", 4),
          ("ntfs", 5),
          ("fat32", 6))
    )



class CfprApStorageLunType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("unspecified", 0),
          ("simple", 1),
          ("mirror", 2),
          ("stripe", 3),
          ("raid", 4),
          ("stripeParity", 5),
          ("stripeDualParity", 6),
          ("mirrorStripe", 7),
          ("stripeParityStripe", 8),
          ("stripeDualParityStripe", 9))
    )



class CfprApStorageOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("ok", 0),
          ("misconfigured", 1))
    )



class CfprApStorageOperatingModeType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("mirror", 1),
          ("util", 2))
    )



class CfprApStorageOperationRequestType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("format", 1),
          ("reset", 2),
          ("pair", 3))
    )



class CfprApStorageOperationState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("inProgress", 1),
          ("completed", 2),
          ("failed", 3))
    )



class CfprApStorageOperationStateType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17)
        )
    )
    namedValues = NamedValues(
        *(("partitionNonMirrored", 0),
          ("partitionMirrored", 1),
          ("partitionMirroredSyncing", 2),
          ("partitionMirroredErasing", 3),
          ("partitionMirroredUpdating", 4),
          ("partitionNonMirroredUpdating", 5),
          ("partitionNonMirroredErasing", 6),
          ("partitionMirroredSyncingFail", 7),
          ("partitionMirroredErasingFail", 8),
          ("partitionMirroredUpdatingFail", 9),
          ("partitionNonMirroredUpdatingFail", 10),
          ("partitionNonMirroredErasingFail", 11),
          ("partitionMirroredSyncingSuccess", 12),
          ("partitionMirroredErasingSuccess", 13),
          ("partitionMirroredUpdatingSuccess", 14),
          ("partitionNonMirroredUpdatingSuccess", 15),
          ("partitionNonMirroredErasingSuccess", 16),
          ("unknown", 17))
    )



class CfprApStorageOperationType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("reconstruction", 0),
          ("relearning", 1),
          ("patrolRead", 2),
          ("consistencyCheck", 3),
          ("rebuild", 4),
          ("initialization", 5))
    )



class CfprApStoragePDriveStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("online", 1),
          ("unconfiguredGood", 2),
          ("globalHotSpare", 3),
          ("dedicatedHotSpare", 4),
          ("jbod", 5),
          ("offline", 6),
          ("rebuilding", 7),
          ("copyback", 8),
          ("failed", 9),
          ("unconfiguredBad", 10),
          ("predictiveFailure", 11),
          ("disabledForRemoval", 12),
          ("foreignConfiguration", 13))
    )



class CfprApStoragePathHA(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("initiator", 0),
          ("target", 1),
          ("fabric", 2))
    )


class CfprApStoragePowerState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("active", 1),
          ("powersave", 2),
          ("transitioning", 3))
    )



class CfprApStorageProtocol(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("derived", 0),
          ("fc", 1),
          ("iscsi", 2))
    )



class CfprApStorageRaidBatteryOperabilityQualifier(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            0
        )
    )
    namedValues = NamedValues(
        ("unknown", 0)
    )



class CfprApStorageReadType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("readAhead", 1),
          ("normal", 2))
    )



class CfprApStorageSystemFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              325)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("sync", 325))
    )



class CfprApStorageSystemFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              325,
              326,
              784,
              785)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("syncBegin", 325),
          ("syncExecute", 326),
          ("syncFail", 784),
          ("syncSuccess", 785))
    )



class CfprApStorageSystemFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              325)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("sync", 325))
    )



class CfprApStorageTargetPath(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("a", 1),
          ("b", 2),
          ("dual", 3))
    )



class CfprApStorageTechnology(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unspecified", 0),
          ("hdd", 1),
          ("ssd", 2))
    )



class CfprApStorageVDriveState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("optimal", 1),
          ("cacheDegraded", 2),
          ("partiallyDegraded", 3),
          ("degraded", 4),
          ("offline", 5))
    )



class CfprApStorageVsanRefSwitchId(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("a", 1),
          ("b", 2),
          ("dual", 3))
    )



class CfprApSwAccessDomainLocale(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("server", 0),
          ("chassis", 1),
          ("internal", 2),
          ("external", 3))
    )


class CfprApSwAccessDomainType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApSwAccessDomainFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              95)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deploy", 95))
    )



class CfprApSwAccessDomainFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              95,
              96,
              786,
              787)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deployBegin", 95),
          ("deployUpdateConnectivity", 96),
          ("deployFail", 786),
          ("deploySuccess", 787))
    )



class CfprApSwAccessDomainFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              95)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deploy", 95))
    )



class CfprApSwAccessEpLocale(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("server", 0),
          ("chassis", 1),
          ("internal", 2),
          ("external", 3))
    )


class CfprApSwAccessEpTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApSwBorderDomainLocale(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("server", 0),
          ("chassis", 1),
          ("internal", 2),
          ("external", 3))
    )


class CfprApSwBorderEpLocale(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("server", 0),
          ("chassis", 1),
          ("internal", 2),
          ("external", 3))
    )


class CfprApSwBorderPcLocale(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("server", 0),
          ("chassis", 1),
          ("internal", 2),
          ("external", 3))
    )


class CfprApSwBreakoutType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("n10g4x", 1))
    )



class CfprApSwCIoEpIfType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("physical", 1),
          ("aggregation", 2),
          ("virtual", 3),
          ("fabric", 4))
    )



class CfprApSwCardEnvStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("slotOutlet1", 0),
          ("slotOutlet1Avg", 1),
          ("slotOutlet1Max", 2),
          ("slotOutlet1Min", 3),
          ("slotOutlet2", 4),
          ("slotOutlet2Avg", 5),
          ("slotOutlet2Max", 6),
          ("slotOutlet2Min", 7),
          ("slotOutlet3", 8),
          ("slotOutlet3Avg", 9),
          ("slotOutlet3Max", 10),
          ("slotOutlet3Min", 11))
    )


class CfprApSwCardEnvStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("slotOutlet1", 0),
          ("slotOutlet1Avg", 1),
          ("slotOutlet1Max", 2),
          ("slotOutlet1Min", 3),
          ("slotOutlet2", 4),
          ("slotOutlet2Avg", 5),
          ("slotOutlet2Max", 6),
          ("slotOutlet2Min", 7),
          ("slotOutlet3", 8),
          ("slotOutlet3Avg", 9),
          ("slotOutlet3Max", 10),
          ("slotOutlet3Min", 11))
    )


class CfprApSwCimcId(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        ("unused", 1)
    )


class CfprApSwConfMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("inProgress", 1),
          ("verifying", 2),
          ("failed", 3))
    )



class CfprApSwConfigStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("noVlanComp", 2))
    )



class CfprApSwEnvStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("fanCtrlrInlet1", 0),
          ("fanCtrlrInlet1Avg", 1),
          ("fanCtrlrInlet1Max", 2),
          ("fanCtrlrInlet1Min", 3),
          ("fanCtrlrInlet2", 4),
          ("fanCtrlrInlet2Avg", 5),
          ("fanCtrlrInlet2Max", 6),
          ("fanCtrlrInlet2Min", 7),
          ("fanCtrlrInlet3", 8),
          ("fanCtrlrInlet3Avg", 9),
          ("fanCtrlrInlet3Max", 10),
          ("fanCtrlrInlet3Min", 11),
          ("fanCtrlrInlet4", 12),
          ("fanCtrlrInlet4Avg", 13),
          ("fanCtrlrInlet4Max", 14),
          ("fanCtrlrInlet4Min", 15),
          ("mainBoardOutlet1", 16),
          ("mainBoardOutlet1Avg", 17),
          ("mainBoardOutlet1Max", 18),
          ("mainBoardOutlet1Min", 19),
          ("mainBoardOutlet2", 20),
          ("mainBoardOutlet2Avg", 21),
          ("mainBoardOutlet2Max", 22),
          ("mainBoardOutlet2Min", 23),
          ("psuCtrlrInlet1", 24),
          ("psuCtrlrInlet1Avg", 25),
          ("psuCtrlrInlet1Max", 26),
          ("psuCtrlrInlet1Min", 27),
          ("psuCtrlrInlet2", 28),
          ("psuCtrlrInlet2Avg", 29),
          ("psuCtrlrInlet2Max", 30),
          ("psuCtrlrInlet2Min", 31))
    )


class CfprApSwEnvStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("fanCtrlrInlet1", 0),
          ("fanCtrlrInlet1Avg", 1),
          ("fanCtrlrInlet1Max", 2),
          ("fanCtrlrInlet1Min", 3),
          ("fanCtrlrInlet2", 4),
          ("fanCtrlrInlet2Avg", 5),
          ("fanCtrlrInlet2Max", 6),
          ("fanCtrlrInlet2Min", 7),
          ("fanCtrlrInlet3", 8),
          ("fanCtrlrInlet3Avg", 9),
          ("fanCtrlrInlet3Max", 10),
          ("fanCtrlrInlet3Min", 11),
          ("fanCtrlrInlet4", 12),
          ("fanCtrlrInlet4Avg", 13),
          ("fanCtrlrInlet4Max", 14),
          ("fanCtrlrInlet4Min", 15),
          ("mainBoardOutlet1", 16),
          ("mainBoardOutlet1Avg", 17),
          ("mainBoardOutlet1Max", 18),
          ("mainBoardOutlet1Min", 19),
          ("mainBoardOutlet2", 20),
          ("mainBoardOutlet2Avg", 21),
          ("mainBoardOutlet2Max", 22),
          ("mainBoardOutlet2Min", 23),
          ("psuCtrlrInlet1", 24),
          ("psuCtrlrInlet1Avg", 25),
          ("psuCtrlrInlet1Max", 26),
          ("psuCtrlrInlet1Min", 27),
          ("psuCtrlrInlet2", 28),
          ("psuCtrlrInlet2Avg", 29),
          ("psuCtrlrInlet2Max", 30),
          ("psuCtrlrInlet2Min", 31))
    )


class CfprApSwEstcEpLocale(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("server", 0),
          ("chassis", 1),
          ("internal", 2),
          ("external", 3))
    )


class CfprApSwEthEstcEpTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwEthEstcPcTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwEthFlowMonSessionTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwEthFlowMonSessionType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApSwEthLanBorderTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwEthLanBorderFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              97)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deploy", 97))
    )



class CfprApSwEthLanBorderFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              97,
              98,
              99,
              788,
              789)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deployBegin", 97),
          ("deployUpdateVlanGroups", 98),
          ("deployUpdateConnectivity", 99),
          ("deployFail", 788),
          ("deploySuccess", 789))
    )



class CfprApSwEthLanBorderFsmTaskFlags(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("samDmeSwEthLanBorderDeployVlanGroupConfig", 11),
          ("samDmeSwEthLanBorderDeployVlanGroupRetry", 12),
          ("samDmeSwEthLanBorderDeployPortConfig", 13))
    )


class CfprApSwEthLanBorderFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              97)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deploy", 97))
    )



class CfprApSwEthLanEpTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwEthLanEpUdldAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApSwEthLanEpUdldMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("normal", 0),
          ("aggressive", 1))
    )



class CfprApSwEthLanFlowMonTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwEthLanFlowMonExporterTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwEthLanFlowMonExporterType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApSwEthLanFlowMonFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              104)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deploy", 104))
    )



class CfprApSwEthLanFlowMonFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              104,
              105,
              790,
              791)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deployBegin", 104),
          ("deployUpdateEthFlowMon", 105),
          ("deployFail", 790),
          ("deploySuccess", 791))
    )



class CfprApSwEthLanFlowMonFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              104)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deploy", 104))
    )



class CfprApSwEthLanFlowMonitorTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwEthLanFlowMonitorType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApSwEthLanFlowRecordDefTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwEthLanFlowRecordDefType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApSwEthLanMonTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwEthLanPcTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwEthMonTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwEthMonType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApSwEthMonDestEpTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwEthMonFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              439)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deploy", 439))
    )



class CfprApSwEthMonFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              439,
              440,
              792,
              793)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deployBegin", 439),
          ("deployUpdateEthMon", 440),
          ("deployFail", 792),
          ("deploySuccess", 793))
    )



class CfprApSwEthMonFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              439)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deploy", 439))
    )



class CfprApSwEthMonSrcEpTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwEthTargetEpAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApSwEthTargetEpTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwExtUtilityFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              114)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("confPortBreakout", 114))
    )



class CfprApSwExtUtilityFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              114,
              115,
              116,
              117,
              118,
              119,
              120,
              121)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("confPortBreakoutBegin", 114),
          ("confPortBreakoutPortInventorySwA", 115),
          ("confPortBreakoutPortInventorySwB", 116),
          ("confPortBreakoutConfigSwA", 117),
          ("confPortBreakoutConfigSwB", 118),
          ("confPortBreakoutVerifyBreakoutConfig", 119),
          ("confPortBreakoutSuccess", 120),
          ("confPortBreakoutFail", 121))
    )



class CfprApSwExtUtilityFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              114)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("confPortBreakout", 114))
    )



class CfprApSwFabricRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("npu", 0),
          ("cpu", 1))
    )



class CfprApSwFabricZoneNsAllocStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("available", 0),
          ("full", 1))
    )



class CfprApSwFcEstcEpTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwFcMonTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwFcMonType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApSwFcMonDestEpTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwFcMonFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              441)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deploy", 441))
    )



class CfprApSwFcMonFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              441,
              442,
              794,
              795)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deployBegin", 441),
          ("deployUpdateFcMon", 442),
          ("deployFail", 794),
          ("deploySuccess", 795))
    )



class CfprApSwFcMonFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              441)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deploy", 441))
    )



class CfprApSwFcMonSrcEpTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwFcSanBorderTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwFcSanBorderUplinkTrunking(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApSwFcSanBorderFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              100,
              122)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deploy", 100),
          ("activateZoneSet", 122))
    )



class CfprApSwFcSanBorderFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              100,
              101,
              122,
              123,
              796,
              797,
              798,
              799)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deployBegin", 100),
          ("deployUpdateConnectivity", 101),
          ("activateZoneSetBegin", 122),
          ("activateZoneSetUpdateZones", 123),
          ("activateZoneSetFail", 796),
          ("activateZoneSetSuccess", 797),
          ("deployFail", 798),
          ("deploySuccess", 799))
    )



class CfprApSwFcSanBorderFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              100,
              122)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deploy", 100),
          ("activateZoneSet", 122))
    )



class CfprApSwFcSanEpTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwFcSanMonTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwFcSanPcTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwFcServerZoneGroupLc(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("available", 0),
          ("allocated", 1),
          ("deallocated", 2),
          ("repurposed", 3))
    )



class CfprApSwFcZoneLc(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("available", 0),
          ("allocated", 1),
          ("deallocated", 2),
          ("repurposed", 3))
    )



class CfprApSwFcZoneMemberLc(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("available", 0),
          ("allocated", 1),
          ("deallocated", 2),
          ("repurposed", 3))
    )



class CfprApSwFcZoneSetLc(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("available", 0),
          ("allocated", 1),
          ("deallocated", 2),
          ("repurposed", 3))
    )



class CfprApSwFcoeEstcEpTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwFcoeSanEpTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwFcoeSanEpUdldAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApSwFcoeSanEpUdldMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("normal", 0),
          ("aggressive", 1))
    )



class CfprApSwFcoeSanPcTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwFlowMonitorAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApSwLanBorderType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApSwLanEpIfRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApSwLanEpType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApSwLanMonType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApSwLanPcIfRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApSwLanPcType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApSwMonAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApSwMonDomainLocale(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("server", 0),
          ("chassis", 1),
          ("internal", 2),
          ("external", 3))
    )


class CfprApSwMonLifeCycle(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("normal", 1),
          ("new", 2),
          ("deleted", 3))
    )



class CfprApSwMonSrcEpLocale(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("server", 0),
          ("chassis", 1),
          ("internal", 2),
          ("external", 3))
    )


class CfprApSwNFConfigStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("incomplete", 2))
    )



class CfprApSwNetflowExporterProtocol(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("netflow", 1)
    )



class CfprApSwNetflowMonSessionProtocol(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("netflow", 1)
    )



class CfprApSwNetflowMonitorProtocol(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("netflow", 1)
    )



class CfprApSwNetflowRecordDefProtocol(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("netflow", 1)
    )



class CfprApSwPIoEpIfType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("physical", 1),
          ("aggregation", 2),
          ("virtual", 3),
          ("fabric", 4))
    )



class CfprApSwPIoEpLc(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("available", 0),
          ("allocated", 1),
          ("deallocated", 2),
          ("repurposed", 3),
          ("pending", 4))
    )



class CfprApSwPeerStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("existing", 1),
          ("nonexisting", 2))
    )



class CfprApSwPhysFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              106)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("confPhysical", 106))
    )



class CfprApSwPhysFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("confPhysicalBegin", 106),
          ("confPhysicalPortInventorySwA", 107),
          ("confPhysicalPortInventorySwB", 108),
          ("confPhysicalConfigSwA", 109),
          ("confPhysicalConfigSwB", 110),
          ("confPhysicalVerifyPhysConfig", 111),
          ("confPhysicalSuccess", 112),
          ("confPhysicalFail", 113))
    )



class CfprApSwPhysFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              106)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("confPhysical", 106))
    )



class CfprApSwPktCaptureLifeCycle(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("normal", 1),
          ("new", 2),
          ("deleted", 3))
    )



class CfprApSwPortBreakoutPortId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )



class CfprApSwPortBreakoutSlotId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 3),
    )



class CfprApSwSanBorderType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApSwSanEpIfRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApSwSanEpType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApSwSanMonType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApSwSanPcIfRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("network", 1),
          ("server", 2),
          ("mgmt", 3),
          ("diag", 4),
          ("storage", 5),
          ("monitor", 6),
          ("fcoeStorage", 7),
          ("nasStorage", 8),
          ("fcoeNasStorage", 9),
          ("fcoeUplink", 10),
          ("networkFcoeUplink", 11),
          ("service", 12))
    )



class CfprApSwSanPcType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApSwSspEthLanMonTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwSspEthMonTransport(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("ether", 0),
          ("dce", 1),
          ("fc", 2))
    )


class CfprApSwSspEthMonType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApSwSspEthMonFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              443)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deploy", 443))
    )



class CfprApSwSspEthMonFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              443,
              444,
              800,
              801)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deployBegin", 443),
          ("deployUpdateSspEthMon", 444),
          ("deployFail", 800),
          ("deploySuccess", 801))
    )



class CfprApSwSspEthMonFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              443)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deploy", 443))
    )



class CfprApSwSspEthMonSrcPhyEpFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              445)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("delete", 445))
    )



class CfprApSwSspEthMonSrcPhyEpFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              445,
              446,
              802,
              803)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deleteBegin", 445),
          ("deleteDeletePcapFile", 446),
          ("deleteFail", 802),
          ("deleteSuccess", 803))
    )



class CfprApSwSspEthMonSrcPhyEpFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              445)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("delete", 445))
    )



class CfprApSwSspLanMonType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApSwSspMonAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApSwSspMonDelPcap(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApSwSspMonDomainLocale(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("server", 0),
          ("chassis", 1),
          ("internal", 2),
          ("external", 3))
    )


class CfprApSwSubGroupAggrPortId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 48),
    )



class CfprApSwSubGroupSlotId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )



class CfprApSwSystemStatsThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("load", 0),
          ("loadAvg", 1),
          ("loadMax", 2),
          ("loadMin", 3),
          ("memAvailable", 4),
          ("memAvailableAvg", 5),
          ("memAvailableMax", 6),
          ("memAvailableMin", 7),
          ("memCached", 8),
          ("memCachedAvg", 9),
          ("memCachedMax", 10),
          ("memCachedMin", 11))
    )


class CfprApSwSystemStatsHistThresholded(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("load", 0),
          ("loadAvg", 1),
          ("loadMax", 2),
          ("loadMin", 3),
          ("memAvailable", 4),
          ("memAvailableAvg", 5),
          ("memAvailableMax", 6),
          ("memAvailableMin", 7),
          ("memCached", 8),
          ("memCachedAvg", 9),
          ("memCachedMax", 10),
          ("memCachedMin", 11))
    )


class CfprApSwTargetEpType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApSwUlanPurpose(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("management", 1),
          ("boot", 2),
          ("reserved1", 3),
          ("reserved2", 4))
    )



class CfprApSwUtilityDomainLocale(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("server", 0),
          ("chassis", 1),
          ("internal", 2),
          ("external", 3))
    )


class CfprApSwUtilityDomainType(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("lan", 0),
          ("san", 1),
          ("ipc", 2))
    )


class CfprApSwUtilityDomainFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              102)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deploy", 102))
    )



class CfprApSwUtilityDomainFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              102,
              103,
              804,
              805)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deployBegin", 102),
          ("deployUpdateConnectivity", 103),
          ("deployFail", 804),
          ("deploySuccess", 805))
    )



class CfprApSwUtilityDomainFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              102)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("deploy", 102))
    )



class CfprApSwVlanLc(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("available", 0),
          ("allocated", 1),
          ("deallocated", 2),
          ("repurposed", 3),
          ("pending", 4),
          ("provisioned", 5))
    )



class CfprApSwVlanCompType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("included", 1),
          ("excluded", 2))
    )



class CfprApSwVlanConfigStatusType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("applied", 1),
          ("unApplied", 2))
    )



class CfprApSwVlanGroupType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("compressed", 1),
          ("uncompressed", 2))
    )



class CfprApSwVlanPortNsAllocStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("available", 0),
          ("exceeded", 1))
    )



class CfprApSysdebugAutoCoreFileExportTargetProto(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ftp", 1),
          ("tftp", 2),
          ("scp", 3),
          ("http", 4),
          ("sftp", 5),
          ("nfsCopy", 6))
    )



class CfprApSysdebugAutoCoreFileExportTargetFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              363)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configure", 363))
    )



class CfprApSysdebugAutoCoreFileExportTargetFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              363,
              364,
              365,
              808,
              809)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configureBegin", 363),
          ("configureLocal", 364),
          ("configurePeer", 365),
          ("configureFail", 808),
          ("configureSuccess", 809))
    )



class CfprApSysdebugAutoCoreFileExportTargetFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              363)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configure", 363))
    )



class CfprApSysdebugBackupBehaviorInterval(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              3600,
              7200,
              14400,
              28800,
              86400,
              604800,
              2592000)
        )
    )
    namedValues = NamedValues(
        *(("never", 0),
          ("n1hour", 3600),
          ("n2hours", 7200),
          ("n4hours", 14400),
          ("n8hours", 28800),
          ("n24hours", 86400),
          ("n1week", 604800),
          ("n1month", 2592000))
    )



class CfprApSysdebugBackupBehaviorProto(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ftp", 1),
          ("tftp", 2),
          ("scp", 3),
          ("http", 4),
          ("sftp", 5),
          ("nfsCopy", 6))
    )



class CfprApSysdebugBackupFormat(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ascii", 1),
          ("binary", 2))
    )



class CfprApSysdebugCoreExportStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("success", 1),
          ("failure", 2))
    )



class CfprApSysdebugCoreFileAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("init", 0),
          ("prepareDownload", 1),
          ("downloaded", 2))
    )



class CfprApSysdebugCoreFileOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unavailable", 0),
          ("available", 1),
          ("availableOnSubordinate", 2),
          ("inProgress", 3),
          ("failed", 4))
    )



class CfprApSysdebugCoreFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              376)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("download", 376))
    )



class CfprApSysdebugCoreFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              376,
              377,
              378,
              379,
              380,
              810,
              811)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("downloadBegin", 376),
          ("downloadCopySub", 377),
          ("downloadCopyPrimary", 378),
          ("downloadDeleteSub", 379),
          ("downloadDeletePrimary", 380),
          ("downloadFail", 810),
          ("downloadSuccess", 811))
    )



class CfprApSysdebugCoreFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              376)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("download", 376))
    )



class CfprApSysdebugEpLogAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("policy", 0),
          ("backup", 1),
          ("clear", 2))
    )



class CfprApSysdebugEpLogBackupAction(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("logFull", 0),
          ("onClear", 1),
          ("timer", 2),
          ("onAssocChange", 3))
    )


class CfprApSysdebugEpLogCapacity(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("available", 1),
          ("low", 2),
          ("veryLow", 3),
          ("full", 4))
    )



class CfprApSysdebugEpLogType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("sel", 1),
          ("obfl", 2),
          ("syslog", 3))
    )



class CfprApSysdebugExportStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("success", 1),
          ("failure", 2))
    )



class CfprApSysdebugLogControlDomainEnum(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            0
        )
    )
    namedValues = NamedValues(
        ("sysmgmt", 0)
    )



class CfprApSysdebugLogControlEpFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              381)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("logControlPersist", 381))
    )



class CfprApSysdebugLogControlEpFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              381,
              382,
              383,
              812,
              813)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("logControlPersistBegin", 381),
          ("logControlPersistLocal", 382),
          ("logControlPersistPeer", 383),
          ("logControlPersistFail", 812),
          ("logControlPersistSuccess", 813))
    )



class CfprApSysdebugLogControlEpFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              381)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("logControlPersist", 381))
    )



class CfprApSysdebugLogControlLevel(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("debug0", 0),
          ("debug1", 1),
          ("debug2", 2),
          ("debug3", 3),
          ("debug4", 4),
          ("info", 5),
          ("warn", 6),
          ("minor", 7),
          ("major", 8),
          ("crit", 9))
    )



class CfprApSysdebugLogExportPolicyProto(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ftp", 1),
          ("tftp", 2),
          ("scp", 3),
          ("http", 4),
          ("sftp", 5),
          ("nfsCopy", 6))
    )



class CfprApSysdebugLogExportPolicyFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              360)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configure", 360))
    )



class CfprApSysdebugLogExportPolicyFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              360,
              361,
              362,
              814,
              815)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configureBegin", 360),
          ("configureLocal", 361),
          ("configurePeer", 362),
          ("configureFail", 814),
          ("configureSuccess", 815))
    )



class CfprApSysdebugLogExportPolicyFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              360)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("configure", 360))
    )



class CfprApSysdebugMEpLogOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ok", 0),
          ("permissionDeniedError", 1),
          ("remoteCommunicationError", 2),
          ("bmcCommunicationError", 3),
          ("internalUcsmError", 4))
    )



class CfprApSysdebugManualCoreFileExportTargetAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )



class CfprApSysdebugManualCoreFileExportTargetProto(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ftp", 1),
          ("tftp", 2),
          ("scp", 3),
          ("http", 4),
          ("sftp", 5),
          ("nfsCopy", 6))
    )



class CfprApSysdebugManualCoreFileExportTargetFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              358)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("export", 358))
    )



class CfprApSysdebugManualCoreFileExportTargetFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              358,
              359,
              816,
              817)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("exportBegin", 358),
          ("exportExecute", 359),
          ("exportFail", 816),
          ("exportSuccess", 817))
    )



class CfprApSysdebugManualCoreFileExportTargetFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              358)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("export", 358))
    )



class CfprApSysdebugTSCmdOptMajorType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("chassis", 0),
          ("fex", 1),
          ("server", 2),
          ("ucsm", 3),
          ("ucsmMgmt", 4))
    )



class CfprApSysdebugTechSupportAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("init", 0),
          ("start", 1),
          ("created", 2),
          ("prepareDownload", 3),
          ("delete", 4))
    )



class CfprApSysdebugTechSupportFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              366,
              368,
              371)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("initiate", 366),
          ("deleteTechSupFile", 368),
          ("download", 371))
    )



class CfprApSysdebugTechSupportFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              366,
              367,
              368,
              369,
              370,
              371,
              372,
              373,
              374,
              375,
              818,
              819,
              820,
              821,
              822,
              823)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("initiateBegin", 366),
          ("initiateLocal", 367),
          ("deleteTechSupFileBegin", 368),
          ("deleteTechSupFileLocal", 369),
          ("deleteTechSupFilePeer", 370),
          ("downloadBegin", 371),
          ("downloadCopySub", 372),
          ("downloadCopyPrimary", 373),
          ("downloadDeleteSub", 374),
          ("downloadDeletePrimary", 375),
          ("deleteTechSupFileFail", 818),
          ("deleteTechSupFileSuccess", 819),
          ("downloadFail", 820),
          ("downloadSuccess", 821),
          ("initiateFail", 822),
          ("initiateSuccess", 823))
    )



class CfprApSysdebugTechSupportFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              366,
              368,
              371)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("initiate", 366),
          ("deleteTechSupFile", 368),
          ("download", 371))
    )



class CfprApSysdebugTechSupportOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unavailable", 0),
          ("available", 1),
          ("availableOnSubordinate", 2),
          ("inProgress", 3),
          ("failed", 4))
    )



class CfprApSysfileExporterPostAction(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("remove", 1))
    )



class CfprApSysfileMutationAction(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("remove", 1))
    )



class CfprApSysfileMutationFsmCurrentFsm(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              327,
              329)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("single", 327),
          ("global", 329))
    )



class CfprApSysfileMutationFsmStageName(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              327,
              328,
              329,
              330,
              331,
              824,
              825,
              826,
              827)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("singleBegin", 327),
          ("singleExecute", 328),
          ("globalBegin", 329),
          ("globalLocal", 330),
          ("globalPeer", 331),
          ("globalFail", 824),
          ("globalSuccess", 825),
          ("singleFail", 826),
          ("singleSuccess", 827))
    )



class CfprApSysfileMutationFsmTaskItem(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              327,
              329)
        )
    )
    namedValues = NamedValues(
        *(("nop", 0),
          ("single", 327),
          ("global", 329))
    )



class CfprApTopInfoPolicyState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApTopMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unspecified", 0),
          ("standAlone", 1),
          ("cluster", 2))
    )



class CfprApTrigAckOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("untriggered", 0),
          ("evaluationPending", 1),
          ("evaluated", 2),
          ("waitingForUser", 3),
          ("waitingForMaintWindow", 4),
          ("applyPending", 5),
          ("applied", 6),
          ("waitingForDependency", 7),
          ("none", 8),
          ("expired", 9),
          ("pending", 10),
          ("active", 11))
    )



class CfprApTrigAckPrevOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("untriggered", 0),
          ("evaluationPending", 1),
          ("evaluated", 2),
          ("waitingForUser", 3),
          ("waitingForMaintWindow", 4),
          ("applyPending", 5),
          ("applied", 6),
          ("waitingForDependency", 7),
          ("none", 8),
          ("expired", 9),
          ("pending", 10),
          ("active", 11))
    )



class CfprApTrigAckChangeDetails(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("binding", 0),
          ("hostVirtEthIf", 1),
          ("hostNonvirtEthIf", 2),
          ("hostEthIfProfile", 3),
          ("hostEthIfQos", 4),
          ("hostEthIfNwCtrl", 5),
          ("hostVirtFcIf", 6),
          ("hostNonvirtFcIf", 7),
          ("hostVirtFcIfPersBind", 8),
          ("hostNonvirtFcIfPersBind", 9),
          ("hostFcIfProfile", 10),
          ("hostFcIfQos", 11),
          ("hostFcoeIf", 12),
          ("vif", 13),
          ("vlan", 14),
          ("vsan", 15),
          ("ip", 16),
          ("bootOrder", 17),
          ("bootVirtVnic", 18),
          ("bootNonvirtVnic", 19),
          ("bootLocalStorage", 20),
          ("bootVirtPxe", 21),
          ("bootNonvirtPxe", 22),
          ("bladeIdentity", 24),
          ("agentPolicy", 25),
          ("biosFw", 26),
          ("storageControllerFw", 27),
          ("adaptorHostFw", 28),
          ("adaptorNwFw", 29),
          ("mgmtControllerFw", 30),
          ("localDiskPolicy", 31),
          ("pin", 32),
          ("sol", 33),
          ("epAuth", 34),
          ("biosProfile", 35),
          ("checkpoint", 36),
          ("implicitReboot", 37),
          ("implicitHostFcIfProfileRedeploy", 38),
          ("boardControllerFw", 39),
          ("hostEthIfQosHostControl", 40),
          ("localDiskFw", 41),
          ("implicitHostEthIfProfileRedeploy", 42),
          ("storagePath", 43),
          ("bmcUpdateBiosFw", 44),
          ("hostIfPcie", 45),
          ("flexflashConfig", 46),
          ("bootmodeConfig", 48),
          ("securebootConfig", 49),
          ("vmediaConfig", 50),
          ("ssposUpdateFw", 51))
    )


class CfprApTrigAckChanges(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("serverIdentity", 0),
          ("storage", 1),
          ("networking", 2),
          ("vnicVhbaPlacement", 3),
          ("bootOrder", 4),
          ("serverAssignment", 5),
          ("operationalPolicies", 6))
    )


class CfprApTrigAckDisr(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("upTime", 0),
          ("acPowerCycle", 1))
    )


class CfprApTrigAckMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("immediate", 0),
          ("userAck", 1),
          ("timerAutomatic", 2))
    )



class CfprApTrigAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("triggerImmediate", 0),
          ("trigger", 1),
          ("triggered", 2),
          ("untriggered", 3),
          ("userAck", 4),
          ("userDiscard", 5))
    )



class CfprApTrigDay(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("everyDay", 0),
          ("monday", 1),
          ("tuesday", 2),
          ("wednesday", 3),
          ("thursday", 4),
          ("friday", 5),
          ("saturday", 6),
          ("sunday", 7),
          ("oddDay", 8),
          ("evenDay", 9))
    )



class CfprApTrigOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("pending", 0),
          ("inProgress", 1),
          ("failed", 2),
          ("triggered", 3),
          ("capReached", 4))
    )



class CfprApTrigTokenOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("valid", 0),
          ("expired", 1))
    )



class CfprApTrigTrigOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("untriggered", 0),
          ("evaluationPending", 1),
          ("evaluated", 2),
          ("waitingForUser", 3),
          ("waitingForMaintWindow", 4),
          ("applyPending", 5),
          ("applied", 6),
          ("waitingForDependency", 7),
          ("none", 8),
          ("expired", 9),
          ("pending", 10),
          ("active", 11))
    )



class CfprApTrigTriggeredState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("pending", 0),
          ("inProgress", 1),
          ("failed", 2),
          ("triggered", 3))
    )



class CfprApUuidpoolPoolAssignmentOrder(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("sequential", 1))
    )



class CfprApVmAdaptorOwner(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              4,
              8)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("physical", 1),
          ("policy", 2),
          ("logical", 4),
          ("connPolicy", 8))
    )



class CfprApVmComputeEpClInstType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("vm", 0),
          ("hv", 1),
          ("computeEp", 2))
    )



class CfprApVmHbaType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              4,
              8,
              16)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ether", 1),
          ("fc", 4),
          ("scsi", 8),
          ("ipc", 16))
    )



class CfprApVmHvClInstType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("vm", 0),
          ("hv", 1),
          ("computeEp", 2))
    )



class CfprApVmHvType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unspecified", 0),
          ("esx", 1),
          ("kvm", 2),
          ("hyperv", 3),
          ("xen", 4))
    )



class CfprApVmInstType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("vm", 0),
          ("hv", 1),
          ("computeEp", 2))
    )



class CfprApVmMgmtPlane(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unmanaged", 0),
          ("vcenter", 1),
          ("rhevM", 2),
          ("scvmm", 3))
    )



class CfprApVmNicType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              4,
              8,
              16)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ether", 1),
          ("fc", 4),
          ("scsi", 8),
          ("ipc", 16))
    )



class CfprApVmOsHvVendor(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("unspecified", 0),
          ("vmware", 1),
          ("redhat", 2),
          ("microsoft", 3),
          ("novell", 4),
          ("oracle", 5),
          ("citrix", 6))
    )



class CfprApVmStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("online", 1),
          ("offline", 2))
    )



class CfprApVmSwitchAdminState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )



class CfprApVmSwitchVendor(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("undetermined", 0),
          ("vmware", 1),
          ("microsoft", 2))
    )



class CfprApVnicAEtherIfType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              4,
              8,
              16)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ether", 1),
          ("fc", 4),
          ("scsi", 8),
          ("ipc", 16))
    )



class CfprApVnicAFcIfType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              4,
              8,
              16)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ether", 1),
          ("fc", 4),
          ("scsi", 8),
          ("ipc", 16))
    )



class CfprApVnicAIpcIfType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              4,
              8,
              16)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ether", 1),
          ("fc", 4),
          ("scsi", 8),
          ("ipc", 16))
    )



class CfprApVnicAScsiIfType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              4,
              8,
              16)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ether", 1),
          ("fc", 4),
          ("scsi", 8),
          ("ipc", 16))
    )



class CfprApVnicAppRole(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("mainCp", 1),
          ("appCp", 2),
          ("appIntMgmt", 3),
          ("appExtMgmt", 4),
          ("asaDp", 5),
          ("appDp", 6),
          ("offloadDp", 7))
    )



class CfprApVnicConfigIssues(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("pinningVlanMismatch", 0),
          ("vnicVlanAssignmentError", 1),
          ("missingPrimaryVlan", 2),
          ("pinnedTargetMisconfig", 3),
          ("unresolvedVlanName", 4),
          ("inaccessibleVlan", 5),
          ("unresolvedVsanName", 6),
          ("unresolvedRemoteVlanName", 7),
          ("unresolvedRemoteVsanName", 8),
          ("adaptorFcoeCapability", 9),
          ("adaptorProtectedEthCapability", 10),
          ("adaptorRequirement", 11),
          ("connectionPlacement", 12),
          ("dynamicVfVnic", 13),
          ("fcoeCapacity", 14),
          ("insufficientVhbaCapacity", 15),
          ("insufficientVnicCapacity", 16),
          ("invalidWwn", 17),
          ("macDerivationVirtualizedPort", 18),
          ("vfcVnicPvlanConflict", 19),
          ("vifResourcesOverprovisioned", 20),
          ("vnicNotHaReady", 21),
          ("vnicVconProvisioningChange", 22),
          ("wwpnAssignment", 23),
          ("wwpnDerivationVirtualizedPort", 24),
          ("unableToUpdateUcsm", 25),
          ("unassociatedVlan", 26),
          ("serviceProfileVirtualizationConflict", 27),
          ("vnicVirtualizationConflict", 28),
          ("virtualizationNotSupported", 29),
          ("ungroupedDomain", 30),
          ("missingIpv4InbandMgmtAddr", 31),
          ("missingIpv6InbandMgmtAddr", 32),
          ("missingIpv4Addr", 33),
          ("vnicVirtualizationNetflowConflict", 34),
          ("softPinningVlanMismatch", 35),
          ("unsupportedRoceVmq", 36),
          ("unsupportedRoceNetflow", 37),
          ("unsupportedRoce", 38),
          ("unsupportedVxlan", 39),
          ("unsupportedNvgre", 40),
          ("unsupportedNvgreDynamicVnic", 41),
          ("unsupportedNvgreUsnic", 42),
          ("unsupportedVxlanDynamicVnic", 43),
          ("unsupportedVxlanUsnic", 44),
          ("unsupportedNvgreVmq", 45),
          ("unsupportedVxlanVmq", 46),
          ("unsupportedVxlanNetflow", 47),
          ("unsupportedNvgreNetflow", 48))
    )


class CfprApVnicConnectionOwner(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              4,
              8)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("physical", 1),
          ("policy", 2),
          ("logical", 4),
          ("connPolicy", 8))
    )



class CfprApVnicConnectionType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              4,
              8,
              16)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ether", 1),
          ("fc", 4),
          ("scsi", 8),
          ("ipc", 16))
    )



class CfprApVnicDefBehType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("vnic", 1),
          ("vhba", 2))
    )



class CfprApVnicDefaultAction(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("hwInherit", 1))
    )



class CfprApVnicDynamicConReqProtection(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("protectedPrefA", 1),
          ("protectedPrefB", 2),
          ("protected", 3))
    )



class CfprApVnicEtherType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              4,
              8,
              16)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ether", 1),
          ("fc", 4),
          ("scsi", 8),
          ("ipc", 16))
    )



class CfprApVnicEtherBaseSwitchId(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("a", 1),
          ("b", 2),
          ("aB", 5),
          ("bA", 6))
    )



class CfprApVnicExternalMgmtIPMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("static", 2),
          ("pooled", 3))
    )



class CfprApVnicFcBasePersBind(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 4))
    )



class CfprApVnicFcBaseType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              4,
              8,
              16)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ether", 1),
          ("fc", 4),
          ("scsi", 8),
          ("ipc", 16))
    )



class CfprApVnicFcNodeOwner(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              4,
              8)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("physical", 1),
          ("policy", 2),
          ("logical", 4),
          ("connPolicy", 8))
    )



class CfprApVnicHostNwIOPerfPref(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("highPerfReqd", 1))
    )



class CfprApVnicIPv4DnsPref(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("preferred", 0),
          ("alternate", 1))
    )



class CfprApVnicIScsiConfigIssues(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("initiatorName", 0),
          ("iqnPoolName", 1),
          ("targetName", 2),
          ("authProfileSame", 3),
          ("invalidTargetName", 4),
          ("noLuns", 5),
          ("iscsiCardinality", 6),
          ("autoTargetAuth", 7),
          ("autoTargetInit", 8),
          ("noVlanIp", 9),
          ("staticTargetMix", 10),
          ("ipAddrDhcp", 11),
          ("unclassified", 12),
          ("internalCfgError", 13),
          ("missingVlan", 14),
          ("vnicName", 15),
          ("allowedVlan", 16),
          ("iscsiConfig", 17),
          ("iscsiInitiatorIpAddress", 18),
          ("invalidMac", 19),
          ("nativeVlan", 20),
          ("initTargetPasswd", 21),
          ("initIdentity", 22))
    )


class CfprApVnicIScsiIfDefType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              4)
        )
    )
    namedValues = NamedValues(
        *(("static", 0),
          ("dynamicNw", 1),
          ("option17", 2),
          ("option43", 4))
    )



class CfprApVnicIScsiNodeOwner(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              4,
              8)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("physical", 1),
          ("policy", 2),
          ("logical", 4),
          ("connPolicy", 8))
    )



class CfprApVnicIfOperState(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              4)
        )
    )
    namedValues = NamedValues(
        *(("indeterminate", 0),
          ("up", 1),
          ("down", 2),
          ("failed", 4))
    )



class CfprApVnicInstantiation(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("manual", 0),
          ("default", 1),
          ("dynamic", 2),
          ("dynamicVf", 3))
    )



class CfprApVnicIpcType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              4,
              8,
              16)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ether", 1),
          ("fc", 4),
          ("scsi", 8),
          ("ipc", 16))
    )



class CfprApVnicL2IfSwitchId(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("a", 1),
          ("b", 2),
          ("aB", 5),
          ("bA", 6))
    )



class CfprApVnicLanConnTemplSwitchId(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("a", 1),
          ("b", 2),
          ("aB", 5),
          ("bA", 6))
    )



class CfprApVnicLunId(TextualConvention, Gauge32):
    status = "current"
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )



class CfprApVnicMezzMappingScheme(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("physicalCapFirst", 1),
          ("capLoadDistribute", 2))
    )



class CfprApVnicOrderScheme(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("zeroFuncAll", 0),
          ("multiFuncAll", 1),
          ("staticZeroFunc", 2))
    )



class CfprApVnicPlacement(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("allVnic", 0),
          ("staticAllFirst", 1),
          ("dynamicAllLast", 2))
    )



class CfprApVnicProfileConfigQualifier(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("normal", 0),
          ("invalidName", 1))
    )



class CfprApVnicSanConnTemplTarget(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("vm", 0),
          ("adaptor", 1))
    )


class CfprApVnicScsiType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              4,
              8,
              16)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ether", 1),
          ("fc", 4),
          ("scsi", 8),
          ("ipc", 16))
    )



class CfprApVnicTemplateTarget(TextualConvention, Bits):
    status = "current"
    namedValues = NamedValues(
        *(("vm", 0),
          ("adaptor", 1))
    )


class CfprApVnicTemplateType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("initialTemplate", 1),
          ("updatingTemplate", 2))
    )



class CfprApVnicVhbaBehPolicyType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("vnic", 1),
          ("vhba", 2))
    )



class CfprApVnicVirtualizationPreferenceType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("sriov", 2),
          ("sriovVmfex", 3),
          ("sriovUsnic", 4),
          ("vmq", 5))
    )



class CfprApVnicVnicBootDev(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class CfprApVnicVnicOperHostPort(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              10)
        )
    )
    namedValues = NamedValues(
        *(("any", 0),
          ("n1", 1),
          ("n2", 2),
          ("none", 10))
    )



class CfprApVnicVnicBehPolicyType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("vnic", 1),
          ("vhba", 2))
    )



class CfprApVnicPortProfileType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("regular", 0),
          ("slaOnly", 1))
    )



# MIB Managed Objects in the order of their OIDs


# Managed Objects groups


# Notification objects


# Notifications groups


# Agent capabilities


# Module compliance


# Export all MIB objects to the MIB builder

mibBuilder.exportSymbols(
    "CISCO-FIREPOWER-AP-TC-MIB",
    **{"CfprApAaaAccess": CfprApAaaAccess,
       "CfprApAaaAccountStatus": CfprApAaaAccountStatus,
       "CfprApAaaAuthRealmFsmCurrentFsm": CfprApAaaAuthRealmFsmCurrentFsm,
       "CfprApAaaAuthRealmFsmStageName": CfprApAaaAuthRealmFsmStageName,
       "CfprApAaaCimcSessionType": CfprApAaaCimcSessionType,
       "CfprApAaaClear": CfprApAaaClear,
       "CfprApAaaConfigState": CfprApAaaConfigState,
       "CfprApAaaDomainAuthRealm": CfprApAaaDomainAuthRealm,
       "CfprApAaaEpAccess": CfprApAaaEpAccess,
       "CfprApAaaEpFsmCurrentFsm": CfprApAaaEpFsmCurrentFsm,
       "CfprApAaaEpFsmStageName": CfprApAaaEpFsmStageName,
       "CfprApAaaEpFsmTaskItem": CfprApAaaEpFsmTaskItem,
       "CfprApAaaExtMgmtAccess": CfprApAaaExtMgmtAccess,
       "CfprApAaaIpmiOverLan": CfprApAaaIpmiOverLan,
       "CfprApAaaLdapEpFsmCurrentFsm": CfprApAaaLdapEpFsmCurrentFsm,
       "CfprApAaaLdapEpFsmStageName": CfprApAaaLdapEpFsmStageName,
       "CfprApAaaLdapGroupRuleAuthorization": CfprApAaaLdapGroupRuleAuthorization,
       "CfprApAaaLdapGroupRuleTraversal": CfprApAaaLdapGroupRuleTraversal,
       "CfprApAaaLdapVendor": CfprApAaaLdapVendor,
       "CfprApAaaNoRolePolicy": CfprApAaaNoRolePolicy,
       "CfprApAaaPwdPolicy": CfprApAaaPwdPolicy,
       "CfprApAaaRadiusEpFsmCurrentFsm": CfprApAaaRadiusEpFsmCurrentFsm,
       "CfprApAaaRadiusEpFsmStageName": CfprApAaaRadiusEpFsmStageName,
       "CfprApAaaRadiusService": CfprApAaaRadiusService,
       "CfprApAaaRealm": CfprApAaaRealm,
       "CfprApAaaRealmFsmCurrentFsm": CfprApAaaRealmFsmCurrentFsm,
       "CfprApAaaRealmFsmStageName": CfprApAaaRealmFsmStageName,
       "CfprApAaaRealmFsmTaskItem": CfprApAaaRealmFsmTaskItem,
       "CfprApAaaSession": CfprApAaaSession,
       "CfprApAaaSessionState": CfprApAaaSessionState,
       "CfprApAaaSshStr": CfprApAaaSshStr,
       "CfprApAaaTacacsPlusEpFsmCurrentFsm": CfprApAaaTacacsPlusEpFsmCurrentFsm,
       "CfprApAaaTacacsPlusEpFsmStageName": CfprApAaaTacacsPlusEpFsmStageName,
       "CfprApAaaUserEpFsmCurrentFsm": CfprApAaaUserEpFsmCurrentFsm,
       "CfprApAaaUserEpFsmStageName": CfprApAaaUserEpFsmStageName,
       "CfprApAaaUserEpFsmTaskItem": CfprApAaaUserEpFsmTaskItem,
       "CfprApAaaUserInterface": CfprApAaaUserInterface,
       "CfprApAdaptorAdapterStatsTrafficDir": CfprApAdaptorAdapterStatsTrafficDir,
       "CfprApAdaptorAdminPowerState": CfprApAdaptorAdminPowerState,
       "CfprApAdaptorCIoEpIfType": CfprApAdaptorCIoEpIfType,
       "CfprApAdaptorCapDefFwVersionOpr": CfprApAdaptorCapDefFwVersionOpr,
       "CfprApAdaptorCapDefType": CfprApAdaptorCapDefType,
       "CfprApAdaptorCapSpecType": CfprApAdaptorCapSpecType,
       "CfprApAdaptorDefaultAction": CfprApAdaptorDefaultAction,
       "CfprApAdaptorEthArfsProfileAccelaratedRFS": CfprApAdaptorEthArfsProfileAccelaratedRFS,
       "CfprApAdaptorEthInterruptProfileCoalescingType": CfprApAdaptorEthInterruptProfileCoalescingType,
       "CfprApAdaptorEthNVGREProfileAdminState": CfprApAdaptorEthNVGREProfileAdminState,
       "CfprApAdaptorEthOffloadProfileLargeReceive": CfprApAdaptorEthOffloadProfileLargeReceive,
       "CfprApAdaptorEthOffloadProfileTcpRxChecksum": CfprApAdaptorEthOffloadProfileTcpRxChecksum,
       "CfprApAdaptorEthOffloadProfileTcpSegment": CfprApAdaptorEthOffloadProfileTcpSegment,
       "CfprApAdaptorEthOffloadProfileTcpTxChecksum": CfprApAdaptorEthOffloadProfileTcpTxChecksum,
       "CfprApAdaptorEthPortBySizeLargeStatsThresholded": CfprApAdaptorEthPortBySizeLargeStatsThresholded,
       "CfprApAdaptorEthPortBySizeLargeStatsHistThresholded": CfprApAdaptorEthPortBySizeLargeStatsHistThresholded,
       "CfprApAdaptorEthPortBySizeSmallStatsThresholded": CfprApAdaptorEthPortBySizeSmallStatsThresholded,
       "CfprApAdaptorEthPortBySizeSmallStatsHistThresholded": CfprApAdaptorEthPortBySizeSmallStatsHistThresholded,
       "CfprApAdaptorEthPortErrStatsThresholded": CfprApAdaptorEthPortErrStatsThresholded,
       "CfprApAdaptorEthPortErrStatsHistThresholded": CfprApAdaptorEthPortErrStatsHistThresholded,
       "CfprApAdaptorEthPortMcastStatsThresholded": CfprApAdaptorEthPortMcastStatsThresholded,
       "CfprApAdaptorEthPortMcastStatsHistThresholded": CfprApAdaptorEthPortMcastStatsHistThresholded,
       "CfprApAdaptorEthPortOutsizedStatsThresholded": CfprApAdaptorEthPortOutsizedStatsThresholded,
       "CfprApAdaptorEthPortOutsizedStatsHistThresholded": CfprApAdaptorEthPortOutsizedStatsHistThresholded,
       "CfprApAdaptorEthPortStatsThresholded": CfprApAdaptorEthPortStatsThresholded,
       "CfprApAdaptorEthPortStatsHistThresholded": CfprApAdaptorEthPortStatsHistThresholded,
       "CfprApAdaptorEthRoCEProfileAdminState": CfprApAdaptorEthRoCEProfileAdminState,
       "CfprApAdaptorEthVxLANProfileAdminState": CfprApAdaptorEthVxLANProfileAdminState,
       "CfprApAdaptorEtherIfStatsThresholded": CfprApAdaptorEtherIfStatsThresholded,
       "CfprApAdaptorEtherIfStatsHistThresholded": CfprApAdaptorEtherIfStatsHistThresholded,
       "CfprApAdaptorExtEthIfFsmCurrentFsm": CfprApAdaptorExtEthIfFsmCurrentFsm,
       "CfprApAdaptorExtEthIfFsmStageName": CfprApAdaptorExtEthIfFsmStageName,
       "CfprApAdaptorExtEthIfFsmTaskItem": CfprApAdaptorExtEthIfFsmTaskItem,
       "CfprApAdaptorExtEthIfPcPortId": CfprApAdaptorExtEthIfPcPortId,
       "CfprApAdaptorExtEthIfPcTransport": CfprApAdaptorExtEthIfPcTransport,
       "CfprApAdaptorExtEthIfPcEpPortId": CfprApAdaptorExtEthIfPcEpPortId,
       "CfprApAdaptorExtEthIfPcEpSlotId": CfprApAdaptorExtEthIfPcEpSlotId,
       "CfprApAdaptorExtIfAdminState": CfprApAdaptorExtIfAdminState,
       "CfprApAdaptorExtIfEpIfRole": CfprApAdaptorExtIfEpIfRole,
       "CfprApAdaptorExtIfEpType": CfprApAdaptorExtIfEpType,
       "CfprApAdaptorExtIfPcIfRole": CfprApAdaptorExtIfPcIfRole,
       "CfprApAdaptorExtIfPcType": CfprApAdaptorExtIfPcType,
       "CfprApAdaptorExtIpV6RssHashProfileIpHash": CfprApAdaptorExtIpV6RssHashProfileIpHash,
       "CfprApAdaptorExtIpV6RssHashProfileTcpHash": CfprApAdaptorExtIpV6RssHashProfileTcpHash,
       "CfprApAdaptorExternalEpLocale": CfprApAdaptorExternalEpLocale,
       "CfprApAdaptorExternalPcLocale": CfprApAdaptorExternalPcLocale,
       "CfprApAdaptorFcErrorRecoveryProfileFcpErrorRecovery": CfprApAdaptorFcErrorRecoveryProfileFcpErrorRecovery,
       "CfprApAdaptorFcIfEventStatsThresholded": CfprApAdaptorFcIfEventStatsThresholded,
       "CfprApAdaptorFcIfEventStatsHistThresholded": CfprApAdaptorFcIfEventStatsHistThresholded,
       "CfprApAdaptorFcIfFC4StatsThresholded": CfprApAdaptorFcIfFC4StatsThresholded,
       "CfprApAdaptorFcIfFC4StatsHistThresholded": CfprApAdaptorFcIfFC4StatsHistThresholded,
       "CfprApAdaptorFcIfFrameStatsThresholded": CfprApAdaptorFcIfFrameStatsThresholded,
       "CfprApAdaptorFcIfFrameStatsHistThresholded": CfprApAdaptorFcIfFrameStatsHistThresholded,
       "CfprApAdaptorFcPortStatsThresholded": CfprApAdaptorFcPortStatsThresholded,
       "CfprApAdaptorFcPortStatsHistThresholded": CfprApAdaptorFcPortStatsHistThresholded,
       "CfprApAdaptorHostEthIfHostPort": CfprApAdaptorHostEthIfHostPort,
       "CfprApAdaptorHostEthIfFsmCurrentFsm": CfprApAdaptorHostEthIfFsmCurrentFsm,
       "CfprApAdaptorHostEthIfFsmStageName": CfprApAdaptorHostEthIfFsmStageName,
       "CfprApAdaptorHostEthIfFsmTaskItem": CfprApAdaptorHostEthIfFsmTaskItem,
       "CfprApAdaptorHostFcIfAdminState": CfprApAdaptorHostFcIfAdminState,
       "CfprApAdaptorHostFcIfHostPort": CfprApAdaptorHostFcIfHostPort,
       "CfprApAdaptorHostFcIfPersBind": CfprApAdaptorHostFcIfPersBind,
       "CfprApAdaptorHostFcIfFsmCurrentFsm": CfprApAdaptorHostFcIfFsmCurrentFsm,
       "CfprApAdaptorHostFcIfFsmStageName": CfprApAdaptorHostFcIfFsmStageName,
       "CfprApAdaptorHostFcIfFsmTaskItem": CfprApAdaptorHostFcIfFsmTaskItem,
       "CfprApAdaptorHostIfAdminState": CfprApAdaptorHostIfAdminState,
       "CfprApAdaptorHostIfBootDev": CfprApAdaptorHostIfBootDev,
       "CfprApAdaptorHostMgmtCapPreboot": CfprApAdaptorHostMgmtCapPreboot,
       "CfprApAdaptorHostMgmtCapPresence": CfprApAdaptorHostMgmtCapPresence,
       "CfprApAdaptorHostPortId": CfprApAdaptorHostPortId,
       "CfprApAdaptorHostServiceEthIfIfRole": CfprApAdaptorHostServiceEthIfIfRole,
       "CfprApAdaptorHostVisibility": CfprApAdaptorHostVisibility,
       "CfprApAdaptorIScsiCapBootOrderType": CfprApAdaptorIScsiCapBootOrderType,
       "CfprApAdaptorInterruptMode": CfprApAdaptorInterruptMode,
       "CfprApAdaptorIpV4RssHashProfileIpHash": CfprApAdaptorIpV4RssHashProfileIpHash,
       "CfprApAdaptorIpV4RssHashProfileTcpHash": CfprApAdaptorIpV4RssHashProfileTcpHash,
       "CfprApAdaptorIpV6RssHashProfileIpHash": CfprApAdaptorIpV6RssHashProfileIpHash,
       "CfprApAdaptorIpV6RssHashProfileTcpHash": CfprApAdaptorIpV6RssHashProfileTcpHash,
       "CfprApAdaptorIscsiProtConnectionTimeOut": CfprApAdaptorIscsiProtConnectionTimeOut,
       "CfprApAdaptorIscsiProtDhcpTimeOut": CfprApAdaptorIscsiProtDhcpTimeOut,
       "CfprApAdaptorIscsiProtLunBusyRetryCount": CfprApAdaptorIscsiProtLunBusyRetryCount,
       "CfprApAdaptorLanCapDefaultVlan": CfprApAdaptorLanCapDefaultVlan,
       "CfprApAdaptorLinkState": CfprApAdaptorLinkState,
       "CfprApAdaptorLldpCapSupport": CfprApAdaptorLldpCapSupport,
       "CfprApAdaptorMenloBaseErrorStatsThresholded": CfprApAdaptorMenloBaseErrorStatsThresholded,
       "CfprApAdaptorMenloBaseErrorStatsHistThresholded": CfprApAdaptorMenloBaseErrorStatsHistThresholded,
       "CfprApAdaptorMenloDcePortStatsThresholded": CfprApAdaptorMenloDcePortStatsThresholded,
       "CfprApAdaptorMenloDcePortStatsHistThresholded": CfprApAdaptorMenloDcePortStatsHistThresholded,
       "CfprApAdaptorMenloEthErrorStatsThresholded": CfprApAdaptorMenloEthErrorStatsThresholded,
       "CfprApAdaptorMenloEthErrorStatsHistThresholded": CfprApAdaptorMenloEthErrorStatsHistThresholded,
       "CfprApAdaptorMenloEthStatsThresholded": CfprApAdaptorMenloEthStatsThresholded,
       "CfprApAdaptorMenloEthStatsHistThresholded": CfprApAdaptorMenloEthStatsHistThresholded,
       "CfprApAdaptorMenloFcErrorStatsThresholded": CfprApAdaptorMenloFcErrorStatsThresholded,
       "CfprApAdaptorMenloFcErrorStatsHistThresholded": CfprApAdaptorMenloFcErrorStatsHistThresholded,
       "CfprApAdaptorMenloFcStatsThresholded": CfprApAdaptorMenloFcStatsThresholded,
       "CfprApAdaptorMenloFcStatsHistThresholded": CfprApAdaptorMenloFcStatsHistThresholded,
       "CfprApAdaptorMenloHostPortStatsThresholded": CfprApAdaptorMenloHostPortStatsThresholded,
       "CfprApAdaptorMenloHostPortStatsHistThresholded": CfprApAdaptorMenloHostPortStatsHistThresholded,
       "CfprApAdaptorMenloMcpuErrorStatsThresholded": CfprApAdaptorMenloMcpuErrorStatsThresholded,
       "CfprApAdaptorMenloMcpuErrorStatsHistThresholded": CfprApAdaptorMenloMcpuErrorStatsHistThresholded,
       "CfprApAdaptorMenloMcpuStatsThresholded": CfprApAdaptorMenloMcpuStatsThresholded,
       "CfprApAdaptorMenloMcpuStatsHistThresholded": CfprApAdaptorMenloMcpuStatsHistThresholded,
       "CfprApAdaptorMenloNetEgStatsThresholded": CfprApAdaptorMenloNetEgStatsThresholded,
       "CfprApAdaptorMenloNetEgStatsHistThresholded": CfprApAdaptorMenloNetEgStatsHistThresholded,
       "CfprApAdaptorMenloNetInStatsThresholded": CfprApAdaptorMenloNetInStatsThresholded,
       "CfprApAdaptorMenloNetInStatsHistThresholded": CfprApAdaptorMenloNetInStatsHistThresholded,
       "CfprApAdaptorMenloQErrorStatsThresholded": CfprApAdaptorMenloQErrorStatsThresholded,
       "CfprApAdaptorMenloQErrorStatsHistThresholded": CfprApAdaptorMenloQErrorStatsHistThresholded,
       "CfprApAdaptorMenloQStatsThresholded": CfprApAdaptorMenloQStatsThresholded,
       "CfprApAdaptorMenloQStatsHistThresholded": CfprApAdaptorMenloQStatsHistThresholded,
       "CfprApAdaptorMenloQueueStatsComponent": CfprApAdaptorMenloQueueStatsComponent,
       "CfprApAdaptorMenloStatsIndex": CfprApAdaptorMenloStatsIndex,
       "CfprApAdaptorMgmtCapMode": CfprApAdaptorMgmtCapMode,
       "CfprApAdaptorMgmtCapOperPowerRequirement": CfprApAdaptorMgmtCapOperPowerRequirement,
       "CfprApAdaptorMgmtCapRebootActionOnDestructive": CfprApAdaptorMgmtCapRebootActionOnDestructive,
       "CfprApAdaptorNwMgmtCapApi": CfprApAdaptorNwMgmtCapApi,
       "CfprApAdaptorNwMgmtCapMgmtTransport": CfprApAdaptorNwMgmtCapMgmtTransport,
       "CfprApAdaptorOffloadMethod": CfprApAdaptorOffloadMethod,
       "CfprApAdaptorPIoEpIfType": CfprApAdaptorPIoEpIfType,
       "CfprApAdaptorProtocolProfileConnectionTimeOut": CfprApAdaptorProtocolProfileConnectionTimeOut,
       "CfprApAdaptorProtocolProfileLunBusyRetryCount": CfprApAdaptorProtocolProfileLunBusyRetryCount,
       "CfprApAdaptorPurpose": CfprApAdaptorPurpose,
       "CfprApAdaptorReachability": CfprApAdaptorReachability,
       "CfprApAdaptorRssProfileReceiveSideScaling": CfprApAdaptorRssProfileReceiveSideScaling,
       "CfprApAdaptorSanCapHostNvram": CfprApAdaptorSanCapHostNvram,
       "CfprApAdaptorServiceState": CfprApAdaptorServiceState,
       "CfprApAdaptorUnitId": CfprApAdaptorUnitId,
       "CfprApAdaptorUnitExtnId": CfprApAdaptorUnitExtnId,
       "CfprApAdaptorVnicStatsThresholded": CfprApAdaptorVnicStatsThresholded,
       "CfprApAdaptorVnicStatsHistThresholded": CfprApAdaptorVnicStatsHistThresholded,
       "CfprApAddressMACMask": CfprApAddressMACMask,
       "CfprApAddressType": CfprApAddressType,
       "CfprApAddressUIDSuffxMask": CfprApAddressUIDSuffxMask,
       "CfprApAddressWWNMask": CfprApAddressWWNMask,
       "CfprApApplicationDownloaderFsmCurrentFsm": CfprApApplicationDownloaderFsmCurrentFsm,
       "CfprApApplicationDownloaderFsmStageName": CfprApApplicationDownloaderFsmStageName,
       "CfprApApplicationDownloaderFsmTaskItem": CfprApApplicationDownloaderFsmTaskItem,
       "CfprApBiosBootDevErrorCode": CfprApBiosBootDevErrorCode,
       "CfprApBiosBootDevGrpType": CfprApBiosBootDevGrpType,
       "CfprApBiosBootDevOrder": CfprApBiosBootDevOrder,
       "CfprApBiosDefaultAction": CfprApBiosDefaultAction,
       "CfprApBiosSupportedAction": CfprApBiosSupportedAction,
       "CfprApBiosVfACPI10SupportVpACPI10Support": CfprApBiosVfACPI10SupportVpACPI10Support,
       "CfprApBiosVfAllUSBDevicesVpAllUSBDevices": CfprApBiosVfAllUSBDevicesVpAllUSBDevices,
       "CfprApBiosVfAltitudeVpAltitude": CfprApBiosVfAltitudeVpAltitude,
       "CfprApBiosVfAssertNMIOnPERRVpAssertNMIOnPERR": CfprApBiosVfAssertNMIOnPERRVpAssertNMIOnPERR,
       "CfprApBiosVfAssertNMIOnSERRVpAssertNMIOnSERR": CfprApBiosVfAssertNMIOnSERRVpAssertNMIOnSERR,
       "CfprApBiosVfBootOptionRetryVpBootOptionRetry": CfprApBiosVfBootOptionRetryVpBootOptionRetry,
       "CfprApBiosVfCPUPerformanceVpCPUPerformance": CfprApBiosVfCPUPerformanceVpCPUPerformance,
       "CfprApBiosVfConsoleRedirectionVpBaudRate": CfprApBiosVfConsoleRedirectionVpBaudRate,
       "CfprApBiosVfConsoleRedirectionVpConsoleRedirection": CfprApBiosVfConsoleRedirectionVpConsoleRedirection,
       "CfprApBiosVfConsoleRedirectionVpFlowControl": CfprApBiosVfConsoleRedirectionVpFlowControl,
       "CfprApBiosVfConsoleRedirectionVpLegacyOSRedirection": CfprApBiosVfConsoleRedirectionVpLegacyOSRedirection,
       "CfprApBiosVfConsoleRedirectionVpPuttyKeyPad": CfprApBiosVfConsoleRedirectionVpPuttyKeyPad,
       "CfprApBiosVfConsoleRedirectionVpTerminalType": CfprApBiosVfConsoleRedirectionVpTerminalType,
       "CfprApBiosVfCoreMultiProcessingVpCoreMultiProcessing": CfprApBiosVfCoreMultiProcessingVpCoreMultiProcessing,
       "CfprApBiosVfDRAMClockThrottlingVpDRAMClockThrottling": CfprApBiosVfDRAMClockThrottlingVpDRAMClockThrottling,
       "CfprApBiosVfDirectCacheAccessVpDirectCacheAccess": CfprApBiosVfDirectCacheAccessVpDirectCacheAccess,
       "CfprApBiosVfDramRefreshRateVpDramRefreshRate": CfprApBiosVfDramRefreshRateVpDramRefreshRate,
       "CfprApBiosVfEnhancedIntelSpeedStepTechVpEnhancedIntelSpeedStepTech": CfprApBiosVfEnhancedIntelSpeedStepTechVpEnhancedIntelSpeedStepTech,
       "CfprApBiosVfExecuteDisableBitVpExecuteDisableBit": CfprApBiosVfExecuteDisableBitVpExecuteDisableBit,
       "CfprApBiosVfFRB2TimerVpFRB2Timer": CfprApBiosVfFRB2TimerVpFRB2Timer,
       "CfprApBiosVfFrequencyFloorOverrideVpFrequencyFloorOverride": CfprApBiosVfFrequencyFloorOverrideVpFrequencyFloorOverride,
       "CfprApBiosVfFrontPanelLockoutVpFrontPanelLockout": CfprApBiosVfFrontPanelLockoutVpFrontPanelLockout,
       "CfprApBiosVfIntelEntrySASRAIDModuleVpSASRAID": CfprApBiosVfIntelEntrySASRAIDModuleVpSASRAID,
       "CfprApBiosVfIntelEntrySASRAIDModuleVpSASRAIDModule": CfprApBiosVfIntelEntrySASRAIDModuleVpSASRAIDModule,
       "CfprApBiosVfIntelHyperThreadingTechVpIntelHyperThreadingTech": CfprApBiosVfIntelHyperThreadingTechVpIntelHyperThreadingTech,
       "CfprApBiosVfIntelTurboBoostTechVpIntelTurboBoostTech": CfprApBiosVfIntelTurboBoostTechVpIntelTurboBoostTech,
       "CfprApBiosVfIntelVTForDirectedIOVpIntelVTDATSSupport": CfprApBiosVfIntelVTForDirectedIOVpIntelVTDATSSupport,
       "CfprApBiosVfIntelVTForDirectedIOVpIntelVTDCoherencySupport": CfprApBiosVfIntelVTForDirectedIOVpIntelVTDCoherencySupport,
       "CfprApBiosVfIntelVTForDirectedIOVpIntelVTDInterruptRemapping": CfprApBiosVfIntelVTForDirectedIOVpIntelVTDInterruptRemapping,
       "CfprApBiosVfIntelVTForDirectedIOVpIntelVTDPassThroughDMASupport": CfprApBiosVfIntelVTForDirectedIOVpIntelVTDPassThroughDMASupport,
       "CfprApBiosVfIntelVTForDirectedIOVpIntelVTForDirectedIO": CfprApBiosVfIntelVTForDirectedIOVpIntelVTForDirectedIO,
       "CfprApBiosVfIntelVirtualizationTechnologyVpIntelVirtTechnology": CfprApBiosVfIntelVirtualizationTechnologyVpIntelVirtTechnology,
       "CfprApBiosVfInterleaveConfigurationVpChannelInterleaving": CfprApBiosVfInterleaveConfigurationVpChannelInterleaving,
       "CfprApBiosVfInterleaveConfigurationVpMemoryInterleaving": CfprApBiosVfInterleaveConfigurationVpMemoryInterleaving,
       "CfprApBiosVfInterleaveConfigurationVpRankInterleaving": CfprApBiosVfInterleaveConfigurationVpRankInterleaving,
       "CfprApBiosVfLocalX2ApicVpLocalX2Apic": CfprApBiosVfLocalX2ApicVpLocalX2Apic,
       "CfprApBiosVfLvDIMMSupportVpLvDDRMode": CfprApBiosVfLvDIMMSupportVpLvDDRMode,
       "CfprApBiosVfMaxVariableMTRRSettingVpProcessorMtrr": CfprApBiosVfMaxVariableMTRRSettingVpProcessorMtrr,
       "CfprApBiosVfMaximumMemoryBelow4GBVpMaximumMemoryBelow4GB": CfprApBiosVfMaximumMemoryBelow4GBVpMaximumMemoryBelow4GB,
       "CfprApBiosVfMemoryMappedIOAbove4GBVpMemoryMappedIOAbove4GB": CfprApBiosVfMemoryMappedIOAbove4GBVpMemoryMappedIOAbove4GB,
       "CfprApBiosVfMirroringModeVpMirroringMode": CfprApBiosVfMirroringModeVpMirroringMode,
       "CfprApBiosVfNUMAOptimizedVpNUMAOptimized": CfprApBiosVfNUMAOptimizedVpNUMAOptimized,
       "CfprApBiosVfOSBootWatchdogTimerVpOSBootWatchdogTimer": CfprApBiosVfOSBootWatchdogTimerVpOSBootWatchdogTimer,
       "CfprApBiosVfOSBootWatchdogTimerPolicyVpOSBootWatchdogTimerPolicy": CfprApBiosVfOSBootWatchdogTimerPolicyVpOSBootWatchdogTimerPolicy,
       "CfprApBiosVfOSBootWatchdogTimerTimeoutVpOSBootWatchdogTimerTimeout": CfprApBiosVfOSBootWatchdogTimerTimeoutVpOSBootWatchdogTimerTimeout,
       "CfprApBiosVfOnboardSATAControllerVpOnboardSATAController": CfprApBiosVfOnboardSATAControllerVpOnboardSATAController,
       "CfprApBiosVfOnboardSATAControllerVpSATAMode": CfprApBiosVfOnboardSATAControllerVpSATAMode,
       "CfprApBiosVfOnboardStorageVpOnboardSCUStorageSupport": CfprApBiosVfOnboardStorageVpOnboardSCUStorageSupport,
       "CfprApBiosVfOptionROMEnableVpState": CfprApBiosVfOptionROMEnableVpState,
       "CfprApBiosVfOptionROMLoadVpLoad": CfprApBiosVfOptionROMLoadVpLoad,
       "CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot10LinkSpeed": CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot10LinkSpeed,
       "CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot1LinkSpeed": CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot1LinkSpeed,
       "CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot2LinkSpeed": CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot2LinkSpeed,
       "CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot3LinkSpeed": CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot3LinkSpeed,
       "CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot4LinkSpeed": CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot4LinkSpeed,
       "CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot5LinkSpeed": CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot5LinkSpeed,
       "CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot6LinkSpeed": CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot6LinkSpeed,
       "CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot7LinkSpeed": CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot7LinkSpeed,
       "CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot8LinkSpeed": CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot8LinkSpeed,
       "CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot9LinkSpeed": CfprApBiosVfPCISlotLinkSpeedVpPCIeSlot9LinkSpeed,
       "CfprApBiosVfPCISlotOptionROMEnableVpPCIeSlotHBAOptionROM": CfprApBiosVfPCISlotOptionROMEnableVpPCIeSlotHBAOptionROM,
       "CfprApBiosVfPCISlotOptionROMEnableVpPCIeSlotMLOMOptionROM": CfprApBiosVfPCISlotOptionROMEnableVpPCIeSlotMLOMOptionROM,
       "CfprApBiosVfPCISlotOptionROMEnableVpPCIeSlotN1OptionROM": CfprApBiosVfPCISlotOptionROMEnableVpPCIeSlotN1OptionROM,
       "CfprApBiosVfPCISlotOptionROMEnableVpPCIeSlotN2OptionROM": CfprApBiosVfPCISlotOptionROMEnableVpPCIeSlotN2OptionROM,
       "CfprApBiosVfPCISlotOptionROMEnableVpPCIeSlotSASOptionROM": CfprApBiosVfPCISlotOptionROMEnableVpPCIeSlotSASOptionROM,
       "CfprApBiosVfPCISlotOptionROMEnableVpSlot10State": CfprApBiosVfPCISlotOptionROMEnableVpSlot10State,
       "CfprApBiosVfPCISlotOptionROMEnableVpSlot1State": CfprApBiosVfPCISlotOptionROMEnableVpSlot1State,
       "CfprApBiosVfPCISlotOptionROMEnableVpSlot2State": CfprApBiosVfPCISlotOptionROMEnableVpSlot2State,
       "CfprApBiosVfPCISlotOptionROMEnableVpSlot3State": CfprApBiosVfPCISlotOptionROMEnableVpSlot3State,
       "CfprApBiosVfPCISlotOptionROMEnableVpSlot4State": CfprApBiosVfPCISlotOptionROMEnableVpSlot4State,
       "CfprApBiosVfPCISlotOptionROMEnableVpSlot5State": CfprApBiosVfPCISlotOptionROMEnableVpSlot5State,
       "CfprApBiosVfPCISlotOptionROMEnableVpSlot6State": CfprApBiosVfPCISlotOptionROMEnableVpSlot6State,
       "CfprApBiosVfPCISlotOptionROMEnableVpSlot7State": CfprApBiosVfPCISlotOptionROMEnableVpSlot7State,
       "CfprApBiosVfPCISlotOptionROMEnableVpSlot8State": CfprApBiosVfPCISlotOptionROMEnableVpSlot8State,
       "CfprApBiosVfPCISlotOptionROMEnableVpSlot9State": CfprApBiosVfPCISlotOptionROMEnableVpSlot9State,
       "CfprApBiosVfPCISlotOptionROMEnableVpSlotMezzState": CfprApBiosVfPCISlotOptionROMEnableVpSlotMezzState,
       "CfprApBiosVfPOSTErrorPauseVpPOSTErrorPause": CfprApBiosVfPOSTErrorPauseVpPOSTErrorPause,
       "CfprApBiosVfPSTATECoordinationVpPSTATECoordination": CfprApBiosVfPSTATECoordinationVpPSTATECoordination,
       "CfprApBiosVfPackageCStateLimitVpPackageCStateLimit": CfprApBiosVfPackageCStateLimitVpPackageCStateLimit,
       "CfprApBiosVfProcessorC1EVpProcessorC1E": CfprApBiosVfProcessorC1EVpProcessorC1E,
       "CfprApBiosVfProcessorC3ReportVpProcessorC3Report": CfprApBiosVfProcessorC3ReportVpProcessorC3Report,
       "CfprApBiosVfProcessorC6ReportVpProcessorC6Report": CfprApBiosVfProcessorC6ReportVpProcessorC6Report,
       "CfprApBiosVfProcessorC7ReportVpProcessorC7Report": CfprApBiosVfProcessorC7ReportVpProcessorC7Report,
       "CfprApBiosVfProcessorCStateVpProcessorCState": CfprApBiosVfProcessorCStateVpProcessorCState,
       "CfprApBiosVfProcessorEnergyConfigurationVpEnergyPerformance": CfprApBiosVfProcessorEnergyConfigurationVpEnergyPerformance,
       "CfprApBiosVfProcessorEnergyConfigurationVpPowerTechnology": CfprApBiosVfProcessorEnergyConfigurationVpPowerTechnology,
       "CfprApBiosVfProcessorPrefetchConfigVpAdjacentCacheLinePrefetcher": CfprApBiosVfProcessorPrefetchConfigVpAdjacentCacheLinePrefetcher,
       "CfprApBiosVfProcessorPrefetchConfigVpDCUIPPrefetcher": CfprApBiosVfProcessorPrefetchConfigVpDCUIPPrefetcher,
       "CfprApBiosVfProcessorPrefetchConfigVpDCUStreamerPrefetch": CfprApBiosVfProcessorPrefetchConfigVpDCUStreamerPrefetch,
       "CfprApBiosVfProcessorPrefetchConfigVpHardwarePrefetcher": CfprApBiosVfProcessorPrefetchConfigVpHardwarePrefetcher,
       "CfprApBiosVfQPILinkFrequencySelectVpQPILinkFrequencySelect": CfprApBiosVfQPILinkFrequencySelectVpQPILinkFrequencySelect,
       "CfprApBiosVfQuietBootVpQuietBoot": CfprApBiosVfQuietBootVpQuietBoot,
       "CfprApBiosVfResumeOnACPowerLossVpResumeOnACPowerLoss": CfprApBiosVfResumeOnACPowerLossVpResumeOnACPowerLoss,
       "CfprApBiosVfScrubPoliciesVpDemandScrub": CfprApBiosVfScrubPoliciesVpDemandScrub,
       "CfprApBiosVfScrubPoliciesVpPatrolScrub": CfprApBiosVfScrubPoliciesVpPatrolScrub,
       "CfprApBiosVfSelectMemoryRASConfigurationVpSelectMemoryRASConf": CfprApBiosVfSelectMemoryRASConfigurationVpSelectMemoryRASConf,
       "CfprApBiosVfSerialPortAEnableVpSerialPortAEnable": CfprApBiosVfSerialPortAEnableVpSerialPortAEnable,
       "CfprApBiosVfSparingModeVpSparingMode": CfprApBiosVfSparingModeVpSparingMode,
       "CfprApBiosVfSriovConfigVpSriov": CfprApBiosVfSriovConfigVpSriov,
       "CfprApBiosVfTPMSupportVpTPMSupport": CfprApBiosVfTPMSupportVpTPMSupport,
       "CfprApBiosVfUCSMBootModeControlVpUEFIBootMode": CfprApBiosVfUCSMBootModeControlVpUEFIBootMode,
       "CfprApBiosVfUCSMBootOrderRuleControlVpUCSMBootOrderRule": CfprApBiosVfUCSMBootOrderRuleControlVpUCSMBootOrderRule,
       "CfprApBiosVfUEFIOSUseLegacyVideoVpUEFIOSUseLegacyVideo": CfprApBiosVfUEFIOSUseLegacyVideoVpUEFIOSUseLegacyVideo,
       "CfprApBiosVfUSBBootConfigVpLegacyUSBSupport": CfprApBiosVfUSBBootConfigVpLegacyUSBSupport,
       "CfprApBiosVfUSBBootConfigVpMakeDeviceNonBootable": CfprApBiosVfUSBBootConfigVpMakeDeviceNonBootable,
       "CfprApBiosVfUSBConfigurationVpLegacyUSBSupport": CfprApBiosVfUSBConfigurationVpLegacyUSBSupport,
       "CfprApBiosVfUSBConfigurationVpXHCIMode": CfprApBiosVfUSBConfigurationVpXHCIMode,
       "CfprApBiosVfUSBFrontPanelAccessLockVpUSBFrontPanelLock": CfprApBiosVfUSBFrontPanelAccessLockVpUSBFrontPanelLock,
       "CfprApBiosVfUSBPortConfigurationVpPort6064Emulation": CfprApBiosVfUSBPortConfigurationVpPort6064Emulation,
       "CfprApBiosVfUSBPortConfigurationVpUSBPortFront": CfprApBiosVfUSBPortConfigurationVpUSBPortFront,
       "CfprApBiosVfUSBPortConfigurationVpUSBPortInternal": CfprApBiosVfUSBPortConfigurationVpUSBPortInternal,
       "CfprApBiosVfUSBPortConfigurationVpUSBPortKVM": CfprApBiosVfUSBPortConfigurationVpUSBPortKVM,
       "CfprApBiosVfUSBPortConfigurationVpUSBPortRear": CfprApBiosVfUSBPortConfigurationVpUSBPortRear,
       "CfprApBiosVfUSBPortConfigurationVpUSBPortSDCard": CfprApBiosVfUSBPortConfigurationVpUSBPortSDCard,
       "CfprApBiosVfUSBPortConfigurationVpUSBPortVMedia": CfprApBiosVfUSBPortConfigurationVpUSBPortVMedia,
       "CfprApBiosVfUSBSysIdlePowerOptimizingSettingVpUSBIdlePowerOptimize": CfprApBiosVfUSBSysIdlePowerOptimizingSettingVpUSBIdlePowerOptimize,
       "CfprApBiosVfVGAPriorityVpVGAPriority": CfprApBiosVfVGAPriorityVpVGAPriority,
       "CfprApBmcSELCntEqptClassId": CfprApBmcSELCntEqptClassId,
       "CfprApBmcSELCntEqptInstIdPropId": CfprApBmcSELCntEqptInstIdPropId,
       "CfprApBmcSELCntStatsClassId": CfprApBmcSELCntStatsClassId,
       "CfprApCallhomeAdminState": CfprApCallhomeAdminState,
       "CfprApCallhomeAlertGroup": CfprApCallhomeAlertGroup,
       "CfprApCallhomeAlertGroups": CfprApCallhomeAlertGroups,
       "CfprApCallhomeAlertLevel": CfprApCallhomeAlertLevel,
       "CfprApCallhomeAlertMessageSubtype": CfprApCallhomeAlertMessageSubtype,
       "CfprApCallhomeAlertMessageType": CfprApCallhomeAlertMessageType,
       "CfprApCallhomeAlertThrottlingAdminState": CfprApCallhomeAlertThrottlingAdminState,
       "CfprApCallhomeAnonymousReportingAdminState": CfprApCallhomeAnonymousReportingAdminState,
       "CfprApCallhomeCallhomeProtocol": CfprApCallhomeCallhomeProtocol,
       "CfprApCallhomeEpConfigState": CfprApCallhomeEpConfigState,
       "CfprApCallhomeEpFsmCurrentFsm": CfprApCallhomeEpFsmCurrentFsm,
       "CfprApCallhomeEpFsmStageName": CfprApCallhomeEpFsmStageName,
       "CfprApCallhomeEpFsmTaskItem": CfprApCallhomeEpFsmTaskItem,
       "CfprApCallhomeFormat": CfprApCallhomeFormat,
       "CfprApCallhomeHttpProxyEnable": CfprApCallhomeHttpProxyEnable,
       "CfprApCallhomeLevel": CfprApCallhomeLevel,
       "CfprApCallhomePolicyAdminState": CfprApCallhomePolicyAdminState,
       "CfprApCallhomeUrgency": CfprApCallhomeUrgency,
       "CfprApCallhomeReportingType": CfprApCallhomeReportingType,
       "CfprApCapabilityAdminState": CfprApCapabilityAdminState,
       "CfprApCapabilityCatalogueFsmCurrentFsm": CfprApCapabilityCatalogueFsmCurrentFsm,
       "CfprApCapabilityCatalogueFsmStageName": CfprApCapabilityCatalogueFsmStageName,
       "CfprApCapabilityCatalogueFsmTaskItem": CfprApCapabilityCatalogueFsmTaskItem,
       "CfprApCapabilityFeatureStatus": CfprApCapabilityFeatureStatus,
       "CfprApCapabilityMgmtExtensionFsmCurrentFsm": CfprApCapabilityMgmtExtensionFsmCurrentFsm,
       "CfprApCapabilityMgmtExtensionFsmStageName": CfprApCapabilityMgmtExtensionFsmStageName,
       "CfprApCapabilityMgmtExtensionFsmTaskItem": CfprApCapabilityMgmtExtensionFsmTaskItem,
       "CfprApCapabilityOperStatus": CfprApCapabilityOperStatus,
       "CfprApCapabilityPlatform": CfprApCapabilityPlatform,
       "CfprApCapabilityUpdaterFsmCurrentFsm": CfprApCapabilityUpdaterFsmCurrentFsm,
       "CfprApCapabilityUpdaterFsmStageName": CfprApCapabilityUpdaterFsmStageName,
       "CfprApCapabilityUpdaterFsmTaskItem": CfprApCapabilityUpdaterFsmTaskItem,
       "CfprApChangeStatus": CfprApChangeStatus,
       "CfprApCimcvmediaDeviceType": CfprApCimcvmediaDeviceType,
       "CfprApCimcvmediaErrorType": CfprApCimcvmediaErrorType,
       "CfprApCimcvmediaMountConfigRetryOnMountFail": CfprApCimcvmediaMountConfigRetryOnMountFail,
       "CfprApCimcvmediaMountStatus": CfprApCimcvmediaMountStatus,
       "CfprApCimcvmediaTransport": CfprApCimcvmediaTransport,
       "CfprApCommAdminState": CfprApCommAdminState,
       "CfprApCommChannel": CfprApCommChannel,
       "CfprApCommCipherSuiteMode": CfprApCommCipherSuiteMode,
       "CfprApCommClientAdminState": CfprApCommClientAdminState,
       "CfprApCommDnsProviderAdminState": CfprApCommDnsProviderAdminState,
       "CfprApCommFilePathProtocol": CfprApCommFilePathProtocol,
       "CfprApCommNtpProviderAdminState": CfprApCommNtpProviderAdminState,
       "CfprApCommProtocol": CfprApCommProtocol,
       "CfprApCommShellProto": CfprApCommShellProto,
       "CfprApCommSnmpConfigState": CfprApCommSnmpConfigState,
       "CfprApCommSnmpProto": CfprApCommSnmpProto,
       "CfprApCommSnmpAuth": CfprApCommSnmpAuth,
       "CfprApCommSnmpNotificationType": CfprApCommSnmpNotificationType,
       "CfprApCommSnmpV3Privilege": CfprApCommSnmpV3Privilege,
       "CfprApCommSnmpVersion": CfprApCommSnmpVersion,
       "CfprApCommSshAdminState": CfprApCommSshAdminState,
       "CfprApCommSvcEpFsmCurrentFsm": CfprApCommSvcEpFsmCurrentFsm,
       "CfprApCommSvcEpFsmStageName": CfprApCommSvcEpFsmStageName,
       "CfprApCommSvcEpFsmTaskFlags": CfprApCommSvcEpFsmTaskFlags,
       "CfprApCommSvcEpFsmTaskItem": CfprApCommSvcEpFsmTaskItem,
       "CfprApCommSyslogProto": CfprApCommSyslogProto,
       "CfprApCommSyslogAdminState": CfprApCommSyslogAdminState,
       "CfprApCommSyslogClientEnum": CfprApCommSyslogClientEnum,
       "CfprApCommSyslogFileSize": CfprApCommSyslogFileSize,
       "CfprApCommSyslogForwardingFacility": CfprApCommSyslogForwardingFacility,
       "CfprApCommSyslogRestrictedSeverity": CfprApCommSyslogRestrictedSeverity,
       "CfprApCommSyslogSeverity": CfprApCommSyslogSeverity,
       "CfprApCommSyslogSourceAudits": CfprApCommSyslogSourceAudits,
       "CfprApCommSyslogSourceEvents": CfprApCommSyslogSourceEvents,
       "CfprApCommSyslogSourceFaults": CfprApCommSyslogSourceFaults,
       "CfprApCommTimeZoneConfigState": CfprApCommTimeZoneConfigState,
       "CfprApCommWebProto": CfprApCommWebProto,
       "CfprApComputeABoardPower": CfprApComputeABoardPower,
       "CfprApComputeAdminLinkAggregation": CfprApComputeAdminLinkAggregation,
       "CfprApComputeAdminMemoryState": CfprApComputeAdminMemoryState,
       "CfprApComputeAdminPowerState": CfprApComputeAdminPowerState,
       "CfprApComputeAdminState": CfprApComputeAdminState,
       "CfprApComputeAdminTrigger": CfprApComputeAdminTrigger,
       "CfprApComputeAlarmSeverity": CfprApComputeAlarmSeverity,
       "CfprApComputeAssociation": CfprApComputeAssociation,
       "CfprApComputeAvailability": CfprApComputeAvailability,
       "CfprApComputeBlackListing": CfprApComputeBlackListing,
       "CfprApComputeBladeSlotId": CfprApComputeBladeSlotId,
       "CfprApComputeBladeFsmCurrentFsm": CfprApComputeBladeFsmCurrentFsm,
       "CfprApComputeBladeFsmStageName": CfprApComputeBladeFsmStageName,
       "CfprApComputeBladeFsmTaskFlags": CfprApComputeBladeFsmTaskFlags,
       "CfprApComputeBladeFsmTaskItem": CfprApComputeBladeFsmTaskItem,
       "CfprApComputeChassisConnPolicyChassisId": CfprApComputeChassisConnPolicyChassisId,
       "CfprApComputeChassisDiscAction": CfprApComputeChassisDiscAction,
       "CfprApComputeChassisQualMaxId": CfprApComputeChassisQualMaxId,
       "CfprApComputeChassisQualMinId": CfprApComputeChassisQualMinId,
       "CfprApComputeCheckPoint": CfprApComputeCheckPoint,
       "CfprApComputeConnectivityRebalancing": CfprApComputeConnectivityRebalancing,
       "CfprApComputeDiscovery": CfprApComputeDiscovery,
       "CfprApComputeIOHubEnvStatsThresholded": CfprApComputeIOHubEnvStatsThresholded,
       "CfprApComputeIOHubEnvStatsHistThresholded": CfprApComputeIOHubEnvStatsHistThresholded,
       "CfprApComputeIssues": CfprApComputeIssues,
       "CfprApComputeKvmMgmtPolicyVmediaEncryption": CfprApComputeKvmMgmtPolicyVmediaEncryption,
       "CfprApComputeLinkAggregation": CfprApComputeLinkAggregation,
       "CfprApComputeLinkAggregationCap": CfprApComputeLinkAggregationCap,
       "CfprApComputeMbPowerStatsThresholded": CfprApComputeMbPowerStatsThresholded,
       "CfprApComputeMbPowerStatsHistThresholded": CfprApComputeMbPowerStatsHistThresholded,
       "CfprApComputeMbTempStatsThresholded": CfprApComputeMbTempStatsThresholded,
       "CfprApComputeMbTempStatsHistThresholded": CfprApComputeMbTempStatsHistThresholded,
       "CfprApComputeMemoryUnitConstraintType": CfprApComputeMemoryUnitConstraintType,
       "CfprApComputeMode": CfprApComputeMode,
       "CfprApComputeOwner": CfprApComputeOwner,
       "CfprApComputePCIeFatalCompletionStatsThresholded": CfprApComputePCIeFatalCompletionStatsThresholded,
       "CfprApComputePCIeFatalProtocolStatsThresholded": CfprApComputePCIeFatalProtocolStatsThresholded,
       "CfprApComputePCIeFatalReceiveStatsThresholded": CfprApComputePCIeFatalReceiveStatsThresholded,
       "CfprApComputePCIeFatalStatsThresholded": CfprApComputePCIeFatalStatsThresholded,
       "CfprApComputePciCapOrder": CfprApComputePciCapOrder,
       "CfprApComputePhysicalLowVoltageMemory": CfprApComputePhysicalLowVoltageMemory,
       "CfprApComputePhysicalFsmCurrentFsm": CfprApComputePhysicalFsmCurrentFsm,
       "CfprApComputePhysicalFsmStageName": CfprApComputePhysicalFsmStageName,
       "CfprApComputePhysicalFsmTaskItem": CfprApComputePhysicalFsmTaskItem,
       "CfprApComputePooledRackUnitId": CfprApComputePooledRackUnitId,
       "CfprApComputePooledSlotSlotId": CfprApComputePooledSlotSlotId,
       "CfprApComputePsuClusterState": CfprApComputePsuClusterState,
       "CfprApComputePsuControlRedundancy": CfprApComputePsuControlRedundancy,
       "CfprApComputePsuRedundancy": CfprApComputePsuRedundancy,
       "CfprApComputePsuRedundancyOperQualifier": CfprApComputePsuRedundancyOperQualifier,
       "CfprApComputePsuRedundancyOperState": CfprApComputePsuRedundancyOperState,
       "CfprApComputeRackQualMaxId": CfprApComputeRackQualMaxId,
       "CfprApComputeRackQualMinId": CfprApComputeRackQualMinId,
       "CfprApComputeRackUnitId": CfprApComputeRackUnitId,
       "CfprApComputeRackUnitFsmCurrentFsm": CfprApComputeRackUnitFsmCurrentFsm,
       "CfprApComputeRackUnitFsmStageName": CfprApComputeRackUnitFsmStageName,
       "CfprApComputeRackUnitMbTempStatsThresholded": CfprApComputeRackUnitMbTempStatsThresholded,
       "CfprApComputeRackUnitMbTempStatsHistThresholded": CfprApComputeRackUnitMbTempStatsHistThresholded,
       "CfprApComputeScrubAction": CfprApComputeScrubAction,
       "CfprApComputeServerDiscPolicyFsmCurrentFsm": CfprApComputeServerDiscPolicyFsmCurrentFsm,
       "CfprApComputeServerDiscPolicyFsmStageName": CfprApComputeServerDiscPolicyFsmStageName,
       "CfprApComputeServerDiscPolicyFsmTaskItem": CfprApComputeServerDiscPolicyFsmTaskItem,
       "CfprApComputeServerMgmtDiscAction": CfprApComputeServerMgmtDiscAction,
       "CfprApComputeSlotQualMaxId": CfprApComputeSlotQualMaxId,
       "CfprApComputeSlotQualMinId": CfprApComputeSlotQualMinId,
       "CfprApComputeUpgradeStatus": CfprApComputeUpgradeStatus,
       "CfprApConditionAckAction": CfprApConditionAckAction,
       "CfprApConditionActionIndicator": CfprApConditionActionIndicator,
       "CfprApConditionCallHomeCause": CfprApConditionCallHomeCause,
       "CfprApConditionCause": CfprApConditionCause,
       "CfprApConditionCode": CfprApConditionCode,
       "CfprApConditionLifecycle": CfprApConditionLifecycle,
       "CfprApConditionRemoteInvRslt": CfprApConditionRemoteInvRslt,
       "CfprApConditionRule": CfprApConditionRule,
       "CfprApConditionSeverity": CfprApConditionSeverity,
       "CfprApConditionTag": CfprApConditionTag,
       "CfprApConditionType": CfprApConditionType,
       "CfprApConfigImpactResponseState": CfprApConfigImpactResponseState,
       "CfprApConfigSorterDirection": CfprApConfigSorterDirection,
       "CfprApDcxAdminState": CfprApDcxAdminState,
       "CfprApDcxNsAllocStatus": CfprApDcxNsAllocStatus,
       "CfprApDcxOperState": CfprApDcxOperState,
       "CfprApDcxProtState": CfprApDcxProtState,
       "CfprApDcxState": CfprApDcxState,
       "CfprApDcxVIfProtRole": CfprApDcxVIfProtRole,
       "CfprApDiagAdminState": CfprApDiagAdminState,
       "CfprApDiagBladeTestType": CfprApDiagBladeTestType,
       "CfprApDiagFailureAction": CfprApDiagFailureAction,
       "CfprApDiagNetworkTestType": CfprApDiagNetworkTestType,
       "CfprApDiagSrvCtrlType": CfprApDiagSrvCtrlType,
       "CfprApDiagStatus": CfprApDiagStatus,
       "CfprApDiagStatusIssues": CfprApDiagStatusIssues,
       "CfprApDiagSuccessAction": CfprApDiagSuccessAction,
       "CfprApDiagTestOrder": CfprApDiagTestOrder,
       "CfprApDomainFeatureType": CfprApDomainFeatureType,
       "CfprApDomainFunctionalState": CfprApDomainFunctionalState,
       "CfprApDpsecForgedTransmit": CfprApDpsecForgedTransmit,
       "CfprApEpqosDefinitionDelTaskFsmCurrentFsm": CfprApEpqosDefinitionDelTaskFsmCurrentFsm,
       "CfprApEpqosDefinitionDelTaskFsmStageName": CfprApEpqosDefinitionDelTaskFsmStageName,
       "CfprApEpqosDefinitionDelTaskFsmTaskItem": CfprApEpqosDefinitionDelTaskFsmTaskItem,
       "CfprApEpqosDefinitionFsmCurrentFsm": CfprApEpqosDefinitionFsmCurrentFsm,
       "CfprApEpqosDefinitionFsmStageName": CfprApEpqosDefinitionFsmStageName,
       "CfprApEpqosDefinitionFsmTaskItem": CfprApEpqosDefinitionFsmTaskItem,
       "CfprApEquipmentActiveStatus": CfprApEquipmentActiveStatus,
       "CfprApEquipmentAdminPowerState": CfprApEquipmentAdminPowerState,
       "CfprApEquipmentAirflowDirection": CfprApEquipmentAirflowDirection,
       "CfprApEquipmentAsicType": CfprApEquipmentAsicType,
       "CfprApEquipmentBeaconLedFsmCurrentFsm": CfprApEquipmentBeaconLedFsmCurrentFsm,
       "CfprApEquipmentBeaconLedFsmStageName": CfprApEquipmentBeaconLedFsmStageName,
       "CfprApEquipmentBeaconLedFsmTaskItem": CfprApEquipmentBeaconLedFsmTaskItem,
       "CfprApEquipmentBeaconLedState": CfprApEquipmentBeaconLedState,
       "CfprApEquipmentBiosUpdateMethod": CfprApEquipmentBiosUpdateMethod,
       "CfprApEquipmentBoardAggregationRole": CfprApEquipmentBoardAggregationRole,
       "CfprApEquipmentBoardConnectorType": CfprApEquipmentBoardConnectorType,
       "CfprApEquipmentCardStatsThresholded": CfprApEquipmentCardStatsThresholded,
       "CfprApEquipmentCardStatsHistThresholded": CfprApEquipmentCardStatsHistThresholded,
       "CfprApEquipmentChassisId": CfprApEquipmentChassisId,
       "CfprApEquipmentChassisAdminState": CfprApEquipmentChassisAdminState,
       "CfprApEquipmentChassisConfigProgressIndicator": CfprApEquipmentChassisConfigProgressIndicator,
       "CfprApEquipmentChassisConfigState": CfprApEquipmentChassisConfigState,
       "CfprApEquipmentChassisFsmCurrentFsm": CfprApEquipmentChassisFsmCurrentFsm,
       "CfprApEquipmentChassisFsmStageName": CfprApEquipmentChassisFsmStageName,
       "CfprApEquipmentChassisFsmTaskItem": CfprApEquipmentChassisFsmTaskItem,
       "CfprApEquipmentChassisIssues": CfprApEquipmentChassisIssues,
       "CfprApEquipmentChassisPowerOperState": CfprApEquipmentChassisPowerOperState,
       "CfprApEquipmentChassisStatsThresholded": CfprApEquipmentChassisStatsThresholded,
       "CfprApEquipmentChassisStatsHistThresholded": CfprApEquipmentChassisStatsHistThresholded,
       "CfprApEquipmentCommStatus": CfprApEquipmentCommStatus,
       "CfprApEquipmentConnectionStatus": CfprApEquipmentConnectionStatus,
       "CfprApEquipmentCpuType": CfprApEquipmentCpuType,
       "CfprApEquipmentDiscoveryCapOperPowerRequirement": CfprApEquipmentDiscoveryCapOperPowerRequirement,
       "CfprApEquipmentDiscoveryState": CfprApEquipmentDiscoveryState,
       "CfprApEquipmentEnabledStatus": CfprApEquipmentEnabledStatus,
       "CfprApEquipmentEthPortSpeedCap": CfprApEquipmentEthPortSpeedCap,
       "CfprApEquipmentFanId": CfprApEquipmentFanId,
       "CfprApEquipmentFanModule": CfprApEquipmentFanModule,
       "CfprApEquipmentFanTray": CfprApEquipmentFanTray,
       "CfprApEquipmentFanModuleId": CfprApEquipmentFanModuleId,
       "CfprApEquipmentFanModuleTray": CfprApEquipmentFanModuleTray,
       "CfprApEquipmentFanModuleStatsThresholded": CfprApEquipmentFanModuleStatsThresholded,
       "CfprApEquipmentFanModuleStatsHistThresholded": CfprApEquipmentFanModuleStatsHistThresholded,
       "CfprApEquipmentFanStatsThresholded": CfprApEquipmentFanStatsThresholded,
       "CfprApEquipmentFanStatsHistThresholded": CfprApEquipmentFanStatsHistThresholded,
       "CfprApEquipmentFexId": CfprApEquipmentFexId,
       "CfprApEquipmentFexCapProviderRole": CfprApEquipmentFexCapProviderRole,
       "CfprApEquipmentFexEnvStatsThresholded": CfprApEquipmentFexEnvStatsThresholded,
       "CfprApEquipmentFexEnvStatsHistThresholded": CfprApEquipmentFexEnvStatsHistThresholded,
       "CfprApEquipmentFexPowerSummaryThresholded": CfprApEquipmentFexPowerSummaryThresholded,
       "CfprApEquipmentFexPowerSummaryHistThresholded": CfprApEquipmentFexPowerSummaryHistThresholded,
       "CfprApEquipmentFexPsuInputStatsThresholded": CfprApEquipmentFexPsuInputStatsThresholded,
       "CfprApEquipmentFexPsuInputStatsHistThresholded": CfprApEquipmentFexPsuInputStatsHistThresholded,
       "CfprApEquipmentHealthLedState": CfprApEquipmentHealthLedState,
       "CfprApEquipmentIOCardId": CfprApEquipmentIOCardId,
       "CfprApEquipmentIOCardBaseFsmCurrentFsm": CfprApEquipmentIOCardBaseFsmCurrentFsm,
       "CfprApEquipmentIOCardBaseFsmStageName": CfprApEquipmentIOCardBaseFsmStageName,
       "CfprApEquipmentIOCardBaseFsmTaskFlags": CfprApEquipmentIOCardBaseFsmTaskFlags,
       "CfprApEquipmentIOCardBaseFsmTaskItem": CfprApEquipmentIOCardBaseFsmTaskItem,
       "CfprApEquipmentIOCardFsmCurrentFsm": CfprApEquipmentIOCardFsmCurrentFsm,
       "CfprApEquipmentIOCardFsmStageName": CfprApEquipmentIOCardFsmStageName,
       "CfprApEquipmentIOCardFsmTaskItem": CfprApEquipmentIOCardFsmTaskItem,
       "CfprApEquipmentIOCardIssues": CfprApEquipmentIOCardIssues,
       "CfprApEquipmentIOCardStatsThresholded": CfprApEquipmentIOCardStatsThresholded,
       "CfprApEquipmentIOCardStatsHistThresholded": CfprApEquipmentIOCardStatsHistThresholded,
       "CfprApEquipmentInternalFanType": CfprApEquipmentInternalFanType,
       "CfprApEquipmentIsSupported": CfprApEquipmentIsSupported,
       "CfprApEquipmentLedColor": CfprApEquipmentLedColor,
       "CfprApEquipmentLedLocatorState": CfprApEquipmentLedLocatorState,
       "CfprApEquipmentLedOperState": CfprApEquipmentLedOperState,
       "CfprApEquipmentLocatorLedFsmCurrentFsm": CfprApEquipmentLocatorLedFsmCurrentFsm,
       "CfprApEquipmentLocatorLedFsmStageName": CfprApEquipmentLocatorLedFsmStageName,
       "CfprApEquipmentLocatorLedFsmTaskItem": CfprApEquipmentLocatorLedFsmTaskItem,
       "CfprApEquipmentMemoryUnitDiscoveryModifierAction": CfprApEquipmentMemoryUnitDiscoveryModifierAction,
       "CfprApEquipmentMethod": CfprApEquipmentMethod,
       "CfprApEquipmentNetworkElementFanStatsThresholded": CfprApEquipmentNetworkElementFanStatsThresholded,
       "CfprApEquipmentNetworkElementFanStatsHistThresholded": CfprApEquipmentNetworkElementFanStatsHistThresholded,
       "CfprApEquipmentOperability": CfprApEquipmentOperability,
       "CfprApEquipmentOwnership": CfprApEquipmentOwnership,
       "CfprApEquipmentPOSTRecoverability": CfprApEquipmentPOSTRecoverability,
       "CfprApEquipmentPasswordState": CfprApEquipmentPasswordState,
       "CfprApEquipmentPictureType": CfprApEquipmentPictureType,
       "CfprApEquipmentPortAttribute": CfprApEquipmentPortAttribute,
       "CfprApEquipmentPowerCapDefProfileMethod": CfprApEquipmentPowerCapDefProfileMethod,
       "CfprApEquipmentPowerState": CfprApEquipmentPowerState,
       "CfprApEquipmentPresence": CfprApEquipmentPresence,
       "CfprApEquipmentPsuType": CfprApEquipmentPsuType,
       "CfprApEquipmentPsuId": CfprApEquipmentPsuId,
       "CfprApEquipmentPsuFanStatus": CfprApEquipmentPsuFanStatus,
       "CfprApEquipmentPsuInputSrc": CfprApEquipmentPsuInputSrc,
       "CfprApEquipmentPsuInputStatsThresholded": CfprApEquipmentPsuInputStatsThresholded,
       "CfprApEquipmentPsuInputStatsHistThresholded": CfprApEquipmentPsuInputStatsHistThresholded,
       "CfprApEquipmentPsuOutputStatsThresholded": CfprApEquipmentPsuOutputStatsThresholded,
       "CfprApEquipmentPsuOutputStatsHistThresholded": CfprApEquipmentPsuOutputStatsHistThresholded,
       "CfprApEquipmentPsuStateQualifier": CfprApEquipmentPsuStateQualifier,
       "CfprApEquipmentPsuStatsThresholded": CfprApEquipmentPsuStatsThresholded,
       "CfprApEquipmentPsuStatsHistThresholded": CfprApEquipmentPsuStatsHistThresholded,
       "CfprApEquipmentPsuVoltageType": CfprApEquipmentPsuVoltageType,
       "CfprApEquipmentRackUnitFanStatsThresholded": CfprApEquipmentRackUnitFanStatsThresholded,
       "CfprApEquipmentRackUnitFanStatsHistThresholded": CfprApEquipmentRackUnitFanStatsHistThresholded,
       "CfprApEquipmentRackUnitPsuStatsThresholded": CfprApEquipmentRackUnitPsuStatsThresholded,
       "CfprApEquipmentRackUnitPsuStatsHistThresholded": CfprApEquipmentRackUnitPsuStatsHistThresholded,
       "CfprApEquipmentRemovalConditions": CfprApEquipmentRemovalConditions,
       "CfprApEquipmentResetOn": CfprApEquipmentResetOn,
       "CfprApEquipmentSecureBios": CfprApEquipmentSecureBios,
       "CfprApEquipmentSensorThresholdStatus": CfprApEquipmentSensorThresholdStatus,
       "CfprApEquipmentSlotArrayLocation": CfprApEquipmentSlotArrayLocation,
       "CfprApEquipmentSlotArrayOrientation": CfprApEquipmentSlotArrayOrientation,
       "CfprApEquipmentSlotArraySelector": CfprApEquipmentSlotArraySelector,
       "CfprApEquipmentSlotSpanOrientation": CfprApEquipmentSlotSpanOrientation,
       "CfprApEquipmentSlotStatus": CfprApEquipmentSlotStatus,
       "CfprApEquipmentStorageMethod": CfprApEquipmentStorageMethod,
       "CfprApEquipmentSwitchIOCardId": CfprApEquipmentSwitchIOCardId,
       "CfprApEquipmentSwitchIOCardFsmCurrentFsm": CfprApEquipmentSwitchIOCardFsmCurrentFsm,
       "CfprApEquipmentSwitchIOCardFsmStageName": CfprApEquipmentSwitchIOCardFsmStageName,
       "CfprApEquipmentTpmType": CfprApEquipmentTpmType,
       "CfprApEquipmentUnifiedPortAlgorithm": CfprApEquipmentUnifiedPortAlgorithm,
       "CfprApEquipmentUuidFeatureCapUuidSupportMode": CfprApEquipmentUuidFeatureCapUuidSupportMode,
       "CfprApEquipmentXcvrId": CfprApEquipmentXcvrId,
       "CfprApEquipmentXcvrType": CfprApEquipmentXcvrType,
       "CfprApEquipmentCType": CfprApEquipmentCType,
       "CfprApEquipmentFabricEpType": CfprApEquipmentFabricEpType,
       "CfprApEtherCIoEpIfType": CfprApEtherCIoEpIfType,
       "CfprApEtherCloudType": CfprApEtherCloudType,
       "CfprApEtherErrStatsThresholded": CfprApEtherErrStatsThresholded,
       "CfprApEtherErrStatsHistThresholded": CfprApEtherErrStatsHistThresholded,
       "CfprApEtherExternalEpAdminState": CfprApEtherExternalEpAdminState,
       "CfprApEtherExternalEpLocale": CfprApEtherExternalEpLocale,
       "CfprApEtherExternalPcAdminState": CfprApEtherExternalPcAdminState,
       "CfprApEtherExternalPcLocale": CfprApEtherExternalPcLocale,
       "CfprApEtherFcoeInterfaceStatsThresholded": CfprApEtherFcoeInterfaceStatsThresholded,
       "CfprApEtherFcoeInterfaceStatsHistThresholded": CfprApEtherFcoeInterfaceStatsHistThresholded,
       "CfprApEtherFtwOperMode": CfprApEtherFtwOperMode,
       "CfprApEtherFtwPortPairMode": CfprApEtherFtwPortPairMode,
       "CfprApEtherFtwPortPairWdtState": CfprApEtherFtwPortPairWdtState,
       "CfprApEtherFtwPortPairFsmCurrentFsm": CfprApEtherFtwPortPairFsmCurrentFsm,
       "CfprApEtherFtwPortPairFsmStageName": CfprApEtherFtwPortPairFsmStageName,
       "CfprApEtherFtwPortPairFsmTaskItem": CfprApEtherFtwPortPairFsmTaskItem,
       "CfprApEtherIntFIoEpType": CfprApEtherIntFIoEpType,
       "CfprApEtherInternalPcLocale": CfprApEtherInternalPcLocale,
       "CfprApEtherLossStatsThresholded": CfprApEtherLossStatsThresholded,
       "CfprApEtherLossStatsHistThresholded": CfprApEtherLossStatsHistThresholded,
       "CfprApEtherNiErrStatsThresholded": CfprApEtherNiErrStatsThresholded,
       "CfprApEtherNiErrStatsHistThresholded": CfprApEtherNiErrStatsHistThresholded,
       "CfprApEtherPIoEpIfType": CfprApEtherPIoEpIfType,
       "CfprApEtherPIoFsmCurrentFsm": CfprApEtherPIoFsmCurrentFsm,
       "CfprApEtherPIoFsmStageName": CfprApEtherPIoFsmStageName,
       "CfprApEtherPauseStatsThresholded": CfprApEtherPauseStatsThresholded,
       "CfprApEtherPauseStatsHistThresholded": CfprApEtherPauseStatsHistThresholded,
       "CfprApEtherRxStatsThresholded": CfprApEtherRxStatsThresholded,
       "CfprApEtherRxStatsHistThresholded": CfprApEtherRxStatsHistThresholded,
       "CfprApEtherSatelliteConnectionDisc": CfprApEtherSatelliteConnectionDisc,
       "CfprApEtherServerIntFIoAdminState": CfprApEtherServerIntFIoAdminState,
       "CfprApEtherServerIntFIoIfRole": CfprApEtherServerIntFIoIfRole,
       "CfprApEtherServerIntFIoLocale": CfprApEtherServerIntFIoLocale,
       "CfprApEtherServerIntFIoTransport": CfprApEtherServerIntFIoTransport,
       "CfprApEtherServerIntFIoType": CfprApEtherServerIntFIoType,
       "CfprApEtherServerIntFIoFsmCurrentFsm": CfprApEtherServerIntFIoFsmCurrentFsm,
       "CfprApEtherServerIntFIoFsmStageName": CfprApEtherServerIntFIoFsmStageName,
       "CfprApEtherServerIntFIoFsmTaskItem": CfprApEtherServerIntFIoFsmTaskItem,
       "CfprApEtherServerIntFIoPcIfRole": CfprApEtherServerIntFIoPcIfRole,
       "CfprApEtherServerIntFIoPcPortId": CfprApEtherServerIntFIoPcPortId,
       "CfprApEtherServerIntFIoPcTransport": CfprApEtherServerIntFIoPcTransport,
       "CfprApEtherServerIntFIoPcType": CfprApEtherServerIntFIoPcType,
       "CfprApEtherServerIntFIoPcEpIfRole": CfprApEtherServerIntFIoPcEpIfRole,
       "CfprApEtherServerIntFIoPcEpPortId": CfprApEtherServerIntFIoPcEpPortId,
       "CfprApEtherSwitchIntFIoAck": CfprApEtherSwitchIntFIoAck,
       "CfprApEtherSwitchIntFIoIfRole": CfprApEtherSwitchIntFIoIfRole,
       "CfprApEtherSwitchIntFIoLocale": CfprApEtherSwitchIntFIoLocale,
       "CfprApEtherSwitchIntFIoTransport": CfprApEtherSwitchIntFIoTransport,
       "CfprApEtherSwitchIntFIoType": CfprApEtherSwitchIntFIoType,
       "CfprApEtherSwitchIntFIoPcIfRole": CfprApEtherSwitchIntFIoPcIfRole,
       "CfprApEtherSwitchIntFIoPcPortId": CfprApEtherSwitchIntFIoPcPortId,
       "CfprApEtherSwitchIntFIoPcTransport": CfprApEtherSwitchIntFIoPcTransport,
       "CfprApEtherSwitchIntFIoPcType": CfprApEtherSwitchIntFIoPcType,
       "CfprApEtherSwitchIntFIoPcEpIfRole": CfprApEtherSwitchIntFIoPcEpIfRole,
       "CfprApEtherSwitchIntFIoPcEpPortId": CfprApEtherSwitchIntFIoPcEpPortId,
       "CfprApEtherTxStatsThresholded": CfprApEtherTxStatsThresholded,
       "CfprApEtherTxStatsHistThresholded": CfprApEtherTxStatsHistThresholded,
       "CfprApEventEpCtrlLevel": CfprApEventEpCtrlLevel,
       "CfprApExtmgmtArpTargetsMaxDeadlineTimeout": CfprApExtmgmtArpTargetsMaxDeadlineTimeout,
       "CfprApExtmgmtArpTargetsNumberOfArpRequests": CfprApExtmgmtArpTargetsNumberOfArpRequests,
       "CfprApExtmgmtGatewayPingMaxDeadlineTimeout": CfprApExtmgmtGatewayPingMaxDeadlineTimeout,
       "CfprApExtmgmtGatewayPingNumberOfPingRequests": CfprApExtmgmtGatewayPingNumberOfPingRequests,
       "CfprApExtmgmtIfType": CfprApExtmgmtIfType,
       "CfprApExtmgmtIfMonPolicyAdminState": CfprApExtmgmtIfMonPolicyAdminState,
       "CfprApExtmgmtIfMonPolicyMonitorMechanism": CfprApExtmgmtIfMonPolicyMonitorMechanism,
       "CfprApExtmgmtMiiStatusMaxRetryCount": CfprApExtmgmtMiiStatusMaxRetryCount,
       "CfprApExtmgmtMiiStatusRetryInterval": CfprApExtmgmtMiiStatusRetryInterval,
       "CfprApExtmgmtNdiscTargetsMaxDeadlineTimeout": CfprApExtmgmtNdiscTargetsMaxDeadlineTimeout,
       "CfprApExtmgmtNdiscTargetsNumberOfNdiscRequests": CfprApExtmgmtNdiscTargetsNumberOfNdiscRequests,
       "CfprApExtpolAppCapability": CfprApExtpolAppCapability,
       "CfprApExtpolConnProtocol": CfprApExtpolConnProtocol,
       "CfprApExtpolConnType": CfprApExtpolConnType,
       "CfprApExtpolConnectorOperState": CfprApExtpolConnectorOperState,
       "CfprApExtpolEpFsmCurrentFsm": CfprApExtpolEpFsmCurrentFsm,
       "CfprApExtpolEpFsmStageName": CfprApExtpolEpFsmStageName,
       "CfprApExtpolEpFsmTaskItem": CfprApExtpolEpFsmTaskItem,
       "CfprApExtpolProviderFsmCurrentFsm": CfprApExtpolProviderFsmCurrentFsm,
       "CfprApExtpolProviderFsmStageName": CfprApExtpolProviderFsmStageName,
       "CfprApExtpolProviderFsmTaskItem": CfprApExtpolProviderFsmTaskItem,
       "CfprApExtpolRegistryFsmCurrentFsm": CfprApExtpolRegistryFsmCurrentFsm,
       "CfprApExtpolRegistryFsmStageName": CfprApExtpolRegistryFsmStageName,
       "CfprApExtpolRegistryFsmTaskItem": CfprApExtpolRegistryFsmTaskItem,
       "CfprApExtpolState": CfprApExtpolState,
       "CfprApExtpolSuspendState": CfprApExtpolSuspendState,
       "CfprApExtvmmFabricNetworkType": CfprApExtvmmFabricNetworkType,
       "CfprApExtvmmNetworkSetConfigQualifier": CfprApExtvmmNetworkSetConfigQualifier,
       "CfprApExtvmmOwnership": CfprApExtvmmOwnership,
       "CfprApExtvmmRefOperState": CfprApExtvmmRefOperState,
       "CfprApExtvmmVcVersion": CfprApExtvmmVcVersion,
       "CfprApExtvmmVnicType": CfprApExtvmmVnicType,
       "CfprApExtvmmProviderVendorType": CfprApExtvmmProviderVendorType,
       "CfprApFabricADceSwSrvEpTransport": CfprApFabricADceSwSrvEpTransport,
       "CfprApFabricAEthEstcEpIfRole": CfprApFabricAEthEstcEpIfRole,
       "CfprApFabricAEthEstcEpTransport": CfprApFabricAEthEstcEpTransport,
       "CfprApFabricAEthEstcEpType": CfprApFabricAEthEstcEpType,
       "CfprApFabricAEthLanEpTransport": CfprApFabricAEthLanEpTransport,
       "CfprApFabricAFcEstcEpTransport": CfprApFabricAFcEstcEpTransport,
       "CfprApFabricAFcEstcEpType": CfprApFabricAFcEstcEpType,
       "CfprApFabricAFcSanEpTransport": CfprApFabricAFcSanEpTransport,
       "CfprApFabricAFcoeEstcEpIfRole": CfprApFabricAFcoeEstcEpIfRole,
       "CfprApFabricAFcoeEstcEpTransport": CfprApFabricAFcoeEstcEpTransport,
       "CfprApFabricAFcoeEstcEpType": CfprApFabricAFcoeEstcEpType,
       "CfprApFabricAFcoeSanEpTransport": CfprApFabricAFcoeSanEpTransport,
       "CfprApFabricAVlanAssocPrimaryVlanSwitchId": CfprApFabricAVlanAssocPrimaryVlanSwitchId,
       "CfprApFabricAVlanSharing": CfprApFabricAVlanSharing,
       "CfprApFabricAVlanTransport": CfprApFabricAVlanTransport,
       "CfprApFabricAVlanType": CfprApFabricAVlanType,
       "CfprApFabricAVsanTransport": CfprApFabricAVsanTransport,
       "CfprApFabricAVsanType": CfprApFabricAVsanType,
       "CfprApFabricAccessType": CfprApFabricAccessType,
       "CfprApFabricAdminState": CfprApFabricAdminState,
       "CfprApFabricBHVlanSwitchId": CfprApFabricBHVlanSwitchId,
       "CfprApFabricBladeLifeCycle": CfprApFabricBladeLifeCycle,
       "CfprApFabricBreakoutPortId": CfprApFabricBreakoutPortId,
       "CfprApFabricBreakoutSlotId": CfprApFabricBreakoutSlotId,
       "CfprApFabricBreakoutType": CfprApFabricBreakoutType,
       "CfprApFabricCIoEpAdminState": CfprApFabricCIoEpAdminState,
       "CfprApFabricCIoEpIfType": CfprApFabricCIoEpIfType,
       "CfprApFabricCdpLinkPolicyAdminState": CfprApFabricCdpLinkPolicyAdminState,
       "CfprApFabricCloudType": CfprApFabricCloudType,
       "CfprApFabricComputeEpIfRole": CfprApFabricComputeEpIfRole,
       "CfprApFabricComputeEpType": CfprApFabricComputeEpType,
       "CfprApFabricComputePhEpAdminState": CfprApFabricComputePhEpAdminState,
       "CfprApFabricComputeSlotEpSlotId": CfprApFabricComputeSlotEpSlotId,
       "CfprApFabricConfMode": CfprApFabricConfMode,
       "CfprApFabricConfState": CfprApFabricConfState,
       "CfprApFabricConfigState": CfprApFabricConfigState,
       "CfprApFabricDceSwSrvEpPortId": CfprApFabricDceSwSrvEpPortId,
       "CfprApFabricDceSwSrvEpSlotId": CfprApFabricDceSwSrvEpSlotId,
       "CfprApFabricDceSwSrvPcAdminState": CfprApFabricDceSwSrvPcAdminState,
       "CfprApFabricDceSwSrvPcPortId": CfprApFabricDceSwSrvPcPortId,
       "CfprApFabricDceSwSrvPcTransport": CfprApFabricDceSwSrvPcTransport,
       "CfprApFabricDceSwSrvPcEpPortId": CfprApFabricDceSwSrvPcEpPortId,
       "CfprApFabricDceSwSrvPcEpSlotId": CfprApFabricDceSwSrvPcEpSlotId,
       "CfprApFabricDefaultZoningState": CfprApFabricDefaultZoningState,
       "CfprApFabricDirection": CfprApFabricDirection,
       "CfprApFabricEpMgrFsmCurrentFsm": CfprApFabricEpMgrFsmCurrentFsm,
       "CfprApFabricEpMgrFsmStageName": CfprApFabricEpMgrFsmStageName,
       "CfprApFabricEpMgrFsmTaskFlags": CfprApFabricEpMgrFsmTaskFlags,
       "CfprApFabricEpMgrFsmTaskItem": CfprApFabricEpMgrFsmTaskItem,
       "CfprApFabricEpVlanVlanType": CfprApFabricEpVlanVlanType,
       "CfprApFabricEstcEpIfRole": CfprApFabricEstcEpIfRole,
       "CfprApFabricEstcPcIfRole": CfprApFabricEstcPcIfRole,
       "CfprApFabricEstcPcType": CfprApFabricEstcPcType,
       "CfprApFabricEthCdpPolicyProtocol": CfprApFabricEthCdpPolicyProtocol,
       "CfprApFabricEthEstcTransport": CfprApFabricEthEstcTransport,
       "CfprApFabricEthEstcType": CfprApFabricEthEstcType,
       "CfprApFabricEthEstcEpPortId": CfprApFabricEthEstcEpPortId,
       "CfprApFabricEthEstcEpPrio": CfprApFabricEthEstcEpPrio,
       "CfprApFabricEthEstcEpSlotId": CfprApFabricEthEstcEpSlotId,
       "CfprApFabricEthEstcEpTransport": CfprApFabricEthEstcEpTransport,
       "CfprApFabricEthEstcEpType": CfprApFabricEthEstcEpType,
       "CfprApFabricEthEstcOperPortMode": CfprApFabricEthEstcOperPortMode,
       "CfprApFabricEthEstcPcTransport": CfprApFabricEthEstcPcTransport,
       "CfprApFabricEthEstcPcEpPortId": CfprApFabricEthEstcPcEpPortId,
       "CfprApFabricEthEstcPcEpSlotId": CfprApFabricEthEstcPcEpSlotId,
       "CfprApFabricEthEstcPortMode": CfprApFabricEthEstcPortMode,
       "CfprApFabricEthFlowMonLanTransport": CfprApFabricEthFlowMonLanTransport,
       "CfprApFabricEthFlowMonLanType": CfprApFabricEthFlowMonLanType,
       "CfprApFabricEthFlowMonSourceType": CfprApFabricEthFlowMonSourceType,
       "CfprApFabricEthFlowMonSrcRefType": CfprApFabricEthFlowMonSrcRefType,
       "CfprApFabricEthLanTransport": CfprApFabricEthLanTransport,
       "CfprApFabricEthLanEpAdminState": CfprApFabricEthLanEpAdminState,
       "CfprApFabricEthLanEpSpeedCap": CfprApFabricEthLanEpSpeedCap,
       "CfprApFabricEthLanEpVlanStatus": CfprApFabricEthLanEpVlanStatus,
       "CfprApFabricEthLanFlowMonTransport": CfprApFabricEthLanFlowMonTransport,
       "CfprApFabricEthLanFlowMonCollectorTransport": CfprApFabricEthLanFlowMonCollectorTransport,
       "CfprApFabricEthLanFlowMonExporterTransport": CfprApFabricEthLanFlowMonExporterTransport,
       "CfprApFabricEthLanFlowMonSrcEpTransport": CfprApFabricEthLanFlowMonSrcEpTransport,
       "CfprApFabricEthLanFlowMonitorTransport": CfprApFabricEthLanFlowMonitorTransport,
       "CfprApFabricEthLanFlowMonitoringType": CfprApFabricEthLanFlowMonitoringType,
       "CfprApFabricEthLanPcAdminState": CfprApFabricEthLanPcAdminState,
       "CfprApFabricEthLanPcLacpDetach": CfprApFabricEthLanPcLacpDetach,
       "CfprApFabricEthLanPcSpeedCap": CfprApFabricEthLanPcSpeedCap,
       "CfprApFabricEthLanPcTransport": CfprApFabricEthLanPcTransport,
       "CfprApFabricEthLanPcVlanStatus": CfprApFabricEthLanPcVlanStatus,
       "CfprApFabricEthLinkPolicyType": CfprApFabricEthLinkPolicyType,
       "CfprApFabricEthMonTransport": CfprApFabricEthMonTransport,
       "CfprApFabricEthMonType": CfprApFabricEthMonType,
       "CfprApFabricEthMonDestEpAdminSpeed": CfprApFabricEthMonDestEpAdminSpeed,
       "CfprApFabricEthMonDestEpIfRole": CfprApFabricEthMonDestEpIfRole,
       "CfprApFabricEthMonDestEpPortId": CfprApFabricEthMonDestEpPortId,
       "CfprApFabricEthMonDestEpSlotId": CfprApFabricEthMonDestEpSlotId,
       "CfprApFabricEthMonDestEpType": CfprApFabricEthMonDestEpType,
       "CfprApFabricEthMonFiltEpType": CfprApFabricEthMonFiltEpType,
       "CfprApFabricEthMonFiltRefType": CfprApFabricEthMonFiltRefType,
       "CfprApFabricEthMonLanTransport": CfprApFabricEthMonLanTransport,
       "CfprApFabricEthMonLanType": CfprApFabricEthMonLanType,
       "CfprApFabricEthMonSrcEpType": CfprApFabricEthMonSrcEpType,
       "CfprApFabricEthMonSrcRefType": CfprApFabricEthMonSrcRefType,
       "CfprApFabricEthPcProtocol": CfprApFabricEthPcProtocol,
       "CfprApFabricEthSourceType": CfprApFabricEthSourceType,
       "CfprApFabricEthTargetEpTransport": CfprApFabricEthTargetEpTransport,
       "CfprApFabricEthUdldPolicyProtocol": CfprApFabricEthUdldPolicyProtocol,
       "CfprApFabricEthVlanPcTransport": CfprApFabricEthVlanPcTransport,
       "CfprApFabricExternalLocale": CfprApFabricExternalLocale,
       "CfprApFabricExternalEpAdminState": CfprApFabricExternalEpAdminState,
       "CfprApFabricExternalEpLocale": CfprApFabricExternalEpLocale,
       "CfprApFabricExternalPcLocale": CfprApFabricExternalPcLocale,
       "CfprApFabricFcEstcTransport": CfprApFabricFcEstcTransport,
       "CfprApFabricFcEstcType": CfprApFabricFcEstcType,
       "CfprApFabricFcEstcEpPortId": CfprApFabricFcEstcEpPortId,
       "CfprApFabricFcEstcEpSlotId": CfprApFabricFcEstcEpSlotId,
       "CfprApFabricFcMonTransport": CfprApFabricFcMonTransport,
       "CfprApFabricFcMonType": CfprApFabricFcMonType,
       "CfprApFabricFcMonDestEpAdminSpeed": CfprApFabricFcMonDestEpAdminSpeed,
       "CfprApFabricFcMonDestEpIfRole": CfprApFabricFcMonDestEpIfRole,
       "CfprApFabricFcMonDestEpPortId": CfprApFabricFcMonDestEpPortId,
       "CfprApFabricFcMonDestEpSlotId": CfprApFabricFcMonDestEpSlotId,
       "CfprApFabricFcMonDestEpType": CfprApFabricFcMonDestEpType,
       "CfprApFabricFcMonFiltEpType": CfprApFabricFcMonFiltEpType,
       "CfprApFabricFcMonFiltRefType": CfprApFabricFcMonFiltRefType,
       "CfprApFabricFcMonSanTransport": CfprApFabricFcMonSanTransport,
       "CfprApFabricFcMonSanType": CfprApFabricFcMonSanType,
       "CfprApFabricFcMonSrcEpType": CfprApFabricFcMonSrcEpType,
       "CfprApFabricFcMonSrcRefType": CfprApFabricFcMonSrcRefType,
       "CfprApFabricFcSanTransport": CfprApFabricFcSanTransport,
       "CfprApFabricFcSanUplinkTrunking": CfprApFabricFcSanUplinkTrunking,
       "CfprApFabricFcSanEpPortId": CfprApFabricFcSanEpPortId,
       "CfprApFabricFcSanEpSlotId": CfprApFabricFcSanEpSlotId,
       "CfprApFabricFcSanPcTransport": CfprApFabricFcSanPcTransport,
       "CfprApFabricFcSanPcEpPortId": CfprApFabricFcSanPcEpPortId,
       "CfprApFabricFcSanPcEpSlotId": CfprApFabricFcSanPcEpSlotId,
       "CfprApFabricFcSourceType": CfprApFabricFcSourceType,
       "CfprApFabricFcVsanPcTransport": CfprApFabricFcVsanPcTransport,
       "CfprApFabricFcVsanPortEpPortId": CfprApFabricFcVsanPortEpPortId,
       "CfprApFabricFcVsanPortEpSlotId": CfprApFabricFcVsanPortEpSlotId,
       "CfprApFabricFcZoneSharingMode": CfprApFabricFcZoneSharingMode,
       "CfprApFabricFcoeEstcEpPortId": CfprApFabricFcoeEstcEpPortId,
       "CfprApFabricFcoeEstcEpSlotId": CfprApFabricFcoeEstcEpSlotId,
       "CfprApFabricFcoeSanEpPortId": CfprApFabricFcoeSanEpPortId,
       "CfprApFabricFcoeSanEpSlotId": CfprApFabricFcoeSanEpSlotId,
       "CfprApFabricFcoeSanPcTransport": CfprApFabricFcoeSanPcTransport,
       "CfprApFabricFcoeSanPcEpPortId": CfprApFabricFcoeSanPcEpPortId,
       "CfprApFabricFcoeSanPcEpSlotId": CfprApFabricFcoeSanPcEpSlotId,
       "CfprApFabricFcoeVsanPcTransport": CfprApFabricFcoeVsanPcTransport,
       "CfprApFabricFcoeVsanPortEpPortId": CfprApFabricFcoeVsanPortEpPortId,
       "CfprApFabricFcoeVsanPortEpSlotId": CfprApFabricFcoeVsanPortEpSlotId,
       "CfprApFabricFillPattern": CfprApFabricFillPattern,
       "CfprApFabricFlowMonCollectorLocale": CfprApFabricFlowMonCollectorLocale,
       "CfprApFabricFlowMonDefType": CfprApFabricFlowMonDefType,
       "CfprApFabricFlowMonIpv4Keys": CfprApFabricFlowMonIpv4Keys,
       "CfprApFabricFlowMonIpv6Keys": CfprApFabricFlowMonIpv6Keys,
       "CfprApFabricFlowMonKeyType": CfprApFabricFlowMonKeyType,
       "CfprApFabricFlowMonL2Keys": CfprApFabricFlowMonL2Keys,
       "CfprApFabricFlowMonNonKeys": CfprApFabricFlowMonNonKeys,
       "CfprApFabricFlowMonitoringCategoryAdminState": CfprApFabricFlowMonitoringCategoryAdminState,
       "CfprApFabricHostPortId": CfprApFabricHostPortId,
       "CfprApFabricInternalLocale": CfprApFabricInternalLocale,
       "CfprApFabricInternalDceSrvTransport": CfprApFabricInternalDceSrvTransport,
       "CfprApFabricInternalDceSrvType": CfprApFabricInternalDceSrvType,
       "CfprApFabricInternalEpAdminState": CfprApFabricInternalEpAdminState,
       "CfprApFabricInternalEpLocale": CfprApFabricInternalEpLocale,
       "CfprApFabricInternalPcLocale": CfprApFabricInternalPcLocale,
       "CfprApFabricLacpMode": CfprApFabricLacpMode,
       "CfprApFabricLacpRate": CfprApFabricLacpRate,
       "CfprApFabricLacpSuspend": CfprApFabricLacpSuspend,
       "CfprApFabricLanType": CfprApFabricLanType,
       "CfprApFabricLanCloudVlanCompression": CfprApFabricLanCloudVlanCompression,
       "CfprApFabricLanCloudFsmCurrentFsm": CfprApFabricLanCloudFsmCurrentFsm,
       "CfprApFabricLanCloudFsmStageName": CfprApFabricLanCloudFsmStageName,
       "CfprApFabricLanCloudFsmTaskItem": CfprApFabricLanCloudFsmTaskItem,
       "CfprApFabricLanEpIfRole": CfprApFabricLanEpIfRole,
       "CfprApFabricLanEpType": CfprApFabricLanEpType,
       "CfprApFabricLanFlowMonType": CfprApFabricLanFlowMonType,
       "CfprApFabricLanFlowMonCollectorType": CfprApFabricLanFlowMonCollectorType,
       "CfprApFabricLanFlowMonExporterType": CfprApFabricLanFlowMonExporterType,
       "CfprApFabricLanFlowMonSrcEpType": CfprApFabricLanFlowMonSrcEpType,
       "CfprApFabricLanFlowMonitorType": CfprApFabricLanFlowMonitorType,
       "CfprApFabricLanPcIfRole": CfprApFabricLanPcIfRole,
       "CfprApFabricLanPcType": CfprApFabricLanPcType,
       "CfprApFabricLifeCycle": CfprApFabricLifeCycle,
       "CfprApFabricMemberStatus": CfprApFabricMemberStatus,
       "CfprApFabricMembershipStatus": CfprApFabricMembershipStatus,
       "CfprApFabricMonAdminState": CfprApFabricMonAdminState,
       "CfprApFabricMonOperState": CfprApFabricMonOperState,
       "CfprApFabricMonOperStateReason": CfprApFabricMonOperStateReason,
       "CfprApFabricNFExporterVersion": CfprApFabricNFExporterVersion,
       "CfprApFabricNFTransport": CfprApFabricNFTransport,
       "CfprApFabricNetGroupSwitchId": CfprApFabricNetGroupSwitchId,
       "CfprApFabricNetGroupType": CfprApFabricNetGroupType,
       "CfprApFabricNetflowCollectorFlowProtocol": CfprApFabricNetflowCollectorFlowProtocol,
       "CfprApFabricNetflowConfigIssues": CfprApFabricNetflowConfigIssues,
       "CfprApFabricNetflowMonExporterProtocol": CfprApFabricNetflowMonExporterProtocol,
       "CfprApFabricNetflowMonSessionAdminState": CfprApFabricNetflowMonSessionAdminState,
       "CfprApFabricNetflowMonSessionProtocol": CfprApFabricNetflowMonSessionProtocol,
       "CfprApFabricNetflowMonSrcEpProtocol": CfprApFabricNetflowMonSrcEpProtocol,
       "CfprApFabricNetflowMonSrcRefProtocol": CfprApFabricNetflowMonSrcRefProtocol,
       "CfprApFabricNetflowMonitorFlowMonProtocol": CfprApFabricNetflowMonitorFlowMonProtocol,
       "CfprApFabricOperState": CfprApFabricOperState,
       "CfprApFabricOwner": CfprApFabricOwner,
       "CfprApFabricPIoEpIfType": CfprApFabricPIoEpIfType,
       "CfprApFabricPIoEpOperState": CfprApFabricPIoEpOperState,
       "CfprApFabricPIoEpPortId": CfprApFabricPIoEpPortId,
       "CfprApFabricPIoEpSlotId": CfprApFabricPIoEpSlotId,
       "CfprApFabricPathEpIfType": CfprApFabricPathEpIfType,
       "CfprApFabricPathEpLocale": CfprApFabricPathEpLocale,
       "CfprApFabricPcConfigStatus": CfprApFabricPcConfigStatus,
       "CfprApFabricPktCaptureAppSlotId": CfprApFabricPktCaptureAppSlotId,
       "CfprApFabricPktCaptureAppendFlag": CfprApFabricPktCaptureAppendFlag,
       "CfprApFabricPoolMemberConfigIssues": CfprApFabricPoolMemberConfigIssues,
       "CfprApFabricPort": CfprApFabricPort,
       "CfprApFabricQosPrio": CfprApFabricQosPrio,
       "CfprApFabricQuerierType": CfprApFabricQuerierType,
       "CfprApFabricReqIssues": CfprApFabricReqIssues,
       "CfprApFabricSSAPortType": CfprApFabricSSAPortType,
       "CfprApFabricSanType": CfprApFabricSanType,
       "CfprApFabricSanCloudFsmCurrentFsm": CfprApFabricSanCloudFsmCurrentFsm,
       "CfprApFabricSanCloudFsmStageName": CfprApFabricSanCloudFsmStageName,
       "CfprApFabricSanCloudFsmTaskItem": CfprApFabricSanCloudFsmTaskItem,
       "CfprApFabricSanEpIfRole": CfprApFabricSanEpIfRole,
       "CfprApFabricSanEpType": CfprApFabricSanEpType,
       "CfprApFabricSanPcIfRole": CfprApFabricSanPcIfRole,
       "CfprApFabricSanPcType": CfprApFabricSanPcType,
       "CfprApFabricSlotAdminState": CfprApFabricSlotAdminState,
       "CfprApFabricSnoopingType": CfprApFabricSnoopingType,
       "CfprApFabricSpannedCluster": CfprApFabricSpannedCluster,
       "CfprApFabricSspEthMonAppendFlag": CfprApFabricSspEthMonAppendFlag,
       "CfprApFabricSspMonAdminState": CfprApFabricSspMonAdminState,
       "CfprApFabricSspMonDelPcap": CfprApFabricSspMonDelPcap,
       "CfprApFabricSspMonOperState": CfprApFabricSspMonOperState,
       "CfprApFabricSspMonOperStateReason": CfprApFabricSspMonOperStateReason,
       "CfprApFabricStatus": CfprApFabricStatus,
       "CfprApFabricSubGroupAggrPortId": CfprApFabricSubGroupAggrPortId,
       "CfprApFabricSubGroupConfigState": CfprApFabricSubGroupConfigState,
       "CfprApFabricSubGroupSlotId": CfprApFabricSubGroupSlotId,
       "CfprApFabricSwChEpIfRole": CfprApFabricSwChEpIfRole,
       "CfprApFabricSwChEpType": CfprApFabricSwChEpType,
       "CfprApFabricSwChPhEpAdminState": CfprApFabricSwChPhEpAdminState,
       "CfprApFabricSwSrvEpIfRole": CfprApFabricSwSrvEpIfRole,
       "CfprApFabricSwSrvEpType": CfprApFabricSwSrvEpType,
       "CfprApFabricSwSrvPcIfRole": CfprApFabricSwSrvPcIfRole,
       "CfprApFabricSwSrvPcType": CfprApFabricSwSrvPcType,
       "CfprApFabricSwSubGroupAggrPortId": CfprApFabricSwSubGroupAggrPortId,
       "CfprApFabricSwSubGroupConfigState": CfprApFabricSwSubGroupConfigState,
       "CfprApFabricSwSubGroupSlotId": CfprApFabricSwSubGroupSlotId,
       "CfprApFabricSwitchingMode": CfprApFabricSwitchingMode,
       "CfprApFabricTargetEpType": CfprApFabricTargetEpType,
       "CfprApFabricTargetStatus": CfprApFabricTargetStatus,
       "CfprApFabricTrafficDirection": CfprApFabricTrafficDirection,
       "CfprApFabricUdldLinkPolicyAdminState": CfprApFabricUdldLinkPolicyAdminState,
       "CfprApFabricUdldLinkPolicyMode": CfprApFabricUdldLinkPolicyMode,
       "CfprApFabricUdldOperState": CfprApFabricUdldOperState,
       "CfprApFabricVConInstType": CfprApFabricVConInstType,
       "CfprApFabricVConMappingScheme": CfprApFabricVConMappingScheme,
       "CfprApFabricVConPlacementPref": CfprApFabricVConPlacementPref,
       "CfprApFabricVConSelectPref": CfprApFabricVConSelectPref,
       "CfprApFabricVConSharePref": CfprApFabricVConSharePref,
       "CfprApFabricVConTransportPref": CfprApFabricVConTransportPref,
       "CfprApFabricVlanSwitchId": CfprApFabricVlanSwitchId,
       "CfprApFabricVlanAssocPrimaryVlanState": CfprApFabricVlanAssocPrimaryVlanState,
       "CfprApFabricVlanCompType": CfprApFabricVlanCompType,
       "CfprApFabricVlanConfigIssues": CfprApFabricVlanConfigIssues,
       "CfprApFabricVlanOperState": CfprApFabricVlanOperState,
       "CfprApFabricVlanOverlapState": CfprApFabricVlanOverlapState,
       "CfprApFabricVlanSharingType": CfprApFabricVlanSharingType,
       "CfprApFabricVnetEpIfRole": CfprApFabricVnetEpIfRole,
       "CfprApFabricVnetEpLocale": CfprApFabricVnetEpLocale,
       "CfprApFabricVnetEpPolicyOwner": CfprApFabricVnetEpPolicyOwner,
       "CfprApFabricVnetEpSyncEpFsmCurrentFsm": CfprApFabricVnetEpSyncEpFsmCurrentFsm,
       "CfprApFabricVnetEpSyncEpFsmStageName": CfprApFabricVnetEpSyncEpFsmStageName,
       "CfprApFabricVnetEpSyncEpFsmTaskItem": CfprApFabricVnetEpSyncEpFsmTaskItem,
       "CfprApFabricVsanSwitchId": CfprApFabricVsanSwitchId,
       "CfprApFabricVsanOperState": CfprApFabricVsanOperState,
       "CfprApFabricWarnings": CfprApFabricWarnings,
       "CfprApFabricZoningState": CfprApFabricZoningState,
       "CfprApFabricRecoveryAction": CfprApFabricRecoveryAction,
       "CfprApFaultBasePolicyClearAction": CfprApFaultBasePolicyClearAction,
       "CfprApFaultBasePolicySoakingSeverity": CfprApFaultBasePolicySoakingSeverity,
       "CfprApFcErrStatsThresholded": CfprApFcErrStatsThresholded,
       "CfprApFcErrStatsHistThresholded": CfprApFcErrStatsHistThresholded,
       "CfprApFcPIoFsmCurrentFsm": CfprApFcPIoFsmCurrentFsm,
       "CfprApFcPIoFsmStageName": CfprApFcPIoFsmStageName,
       "CfprApFcStatsThresholded": CfprApFcStatsThresholded,
       "CfprApFcStatsHistThresholded": CfprApFcStatsHistThresholded,
       "CfprApFcpoolBootTargetType": CfprApFcpoolBootTargetType,
       "CfprApFcpoolInitiatorPurpose": CfprApFcpoolInitiatorPurpose,
       "CfprApFcpoolInitiatorEpPurpose": CfprApFcpoolInitiatorEpPurpose,
       "CfprApFcpoolInitiatorsAssignmentOrder": CfprApFcpoolInitiatorsAssignmentOrder,
       "CfprApFcpoolInitiatorsMaxPortsPerNode": CfprApFcpoolInitiatorsMaxPortsPerNode,
       "CfprApFcpoolInitiatorsPurpose": CfprApFcpoolInitiatorsPurpose,
       "CfprApFeatureSupportabilityType": CfprApFeatureSupportabilityType,
       "CfprApFirmwareAdminState": CfprApFirmwareAdminState,
       "CfprApFirmwareAutoSyncConfigIssue": CfprApFirmwareAutoSyncConfigIssue,
       "CfprApFirmwareAutoSyncState": CfprApFirmwareAutoSyncState,
       "CfprApFirmwareBootUnitImage": CfprApFirmwareBootUnitImage,
       "CfprApFirmwareBootUnitMode": CfprApFirmwareBootUnitMode,
       "CfprApFirmwareCatalogPackConfigState": CfprApFirmwareCatalogPackConfigState,
       "CfprApFirmwareCompleteness": CfprApFirmwareCompleteness,
       "CfprApFirmwareComponentType": CfprApFirmwareComponentType,
       "CfprApFirmwareDependencyRelationship": CfprApFirmwareDependencyRelationship,
       "CfprApFirmwareDependencyScope": CfprApFirmwareDependencyScope,
       "CfprApFirmwareDependencySensitivity": CfprApFirmwareDependencySensitivity,
       "CfprApFirmwareDistributableFsmCurrentFsm": CfprApFirmwareDistributableFsmCurrentFsm,
       "CfprApFirmwareDistributableFsmStageName": CfprApFirmwareDistributableFsmStageName,
       "CfprApFirmwareDistributableFsmTaskItem": CfprApFirmwareDistributableFsmTaskItem,
       "CfprApFirmwareDistributableType": CfprApFirmwareDistributableType,
       "CfprApFirmwareDownloadActivity": CfprApFirmwareDownloadActivity,
       "CfprApFirmwareDownloaderFsmCurrentFsm": CfprApFirmwareDownloaderFsmCurrentFsm,
       "CfprApFirmwareDownloaderFsmStageName": CfprApFirmwareDownloaderFsmStageName,
       "CfprApFirmwareDownloaderFsmTaskItem": CfprApFirmwareDownloaderFsmTaskItem,
       "CfprApFirmwareEquipmentType": CfprApFirmwareEquipmentType,
       "CfprApFirmwareFirmwareState": CfprApFirmwareFirmwareState,
       "CfprApFirmwareFwState": CfprApFirmwareFwState,
       "CfprApFirmwareFwUpgradeState": CfprApFirmwareFwUpgradeState,
       "CfprApFirmwareHostPackConfigQualifier": CfprApFirmwareHostPackConfigQualifier,
       "CfprApFirmwareImageDeleted": CfprApFirmwareImageDeleted,
       "CfprApFirmwareImageError": CfprApFirmwareImageError,
       "CfprApFirmwareImageFsmCurrentFsm": CfprApFirmwareImageFsmCurrentFsm,
       "CfprApFirmwareImageFsmStageName": CfprApFirmwareImageFsmStageName,
       "CfprApFirmwareImageFsmTaskItem": CfprApFirmwareImageFsmTaskItem,
       "CfprApFirmwareImagePresence": CfprApFirmwareImagePresence,
       "CfprApFirmwareImageState": CfprApFirmwareImageState,
       "CfprApFirmwareImpactType": CfprApFirmwareImpactType,
       "CfprApFirmwareInfraPackFsmCurrentFsm": CfprApFirmwareInfraPackFsmCurrentFsm,
       "CfprApFirmwareInfraPackFsmStageName": CfprApFirmwareInfraPackFsmStageName,
       "CfprApFirmwareInfraPackFsmTaskFlags": CfprApFirmwareInfraPackFsmTaskFlags,
       "CfprApFirmwareInfraPackFsmTaskItem": CfprApFirmwareInfraPackFsmTaskItem,
       "CfprApFirmwareInstallState": CfprApFirmwareInstallState,
       "CfprApFirmwareItemType": CfprApFirmwareItemType,
       "CfprApFirmwarePackMode": CfprApFirmwarePackMode,
       "CfprApFirmwarePackItemPresence": CfprApFirmwarePackItemPresence,
       "CfprApFirmwarePlatformPackFsmCurrentFsm": CfprApFirmwarePlatformPackFsmCurrentFsm,
       "CfprApFirmwarePlatformPackFsmStageName": CfprApFirmwarePlatformPackFsmStageName,
       "CfprApFirmwarePlatformPackFsmTaskFlags": CfprApFirmwarePlatformPackFsmTaskFlags,
       "CfprApFirmwarePlatformPackFsmTaskItem": CfprApFirmwarePlatformPackFsmTaskItem,
       "CfprApFirmwarePlatformType": CfprApFirmwarePlatformType,
       "CfprApFirmwareRunningDeployment": CfprApFirmwareRunningDeployment,
       "CfprApFirmwareSupFirmwareFsmCurrentFsm": CfprApFirmwareSupFirmwareFsmCurrentFsm,
       "CfprApFirmwareSupFirmwareFsmStageName": CfprApFirmwareSupFirmwareFsmStageName,
       "CfprApFirmwareSupFirmwareFsmTaskFlags": CfprApFirmwareSupFirmwareFsmTaskFlags,
       "CfprApFirmwareSupFirmwareFsmTaskItem": CfprApFirmwareSupFirmwareFsmTaskItem,
       "CfprApFirmwareSystemFsmCurrentFsm": CfprApFirmwareSystemFsmCurrentFsm,
       "CfprApFirmwareSystemFsmStageName": CfprApFirmwareSystemFsmStageName,
       "CfprApFirmwareSystemFsmTaskFlags": CfprApFirmwareSystemFsmTaskFlags,
       "CfprApFirmwareSystemFsmTaskItem": CfprApFirmwareSystemFsmTaskItem,
       "CfprApFirmwareTransferState": CfprApFirmwareTransferState,
       "CfprApFirmwareTransport": CfprApFirmwareTransport,
       "CfprApFirmwareTriggerState": CfprApFirmwareTriggerState,
       "CfprApFirmwareType": CfprApFirmwareType,
       "CfprApFirmwareUpdatableDeployment": CfprApFirmwareUpdatableDeployment,
       "CfprApFirmwareUpgradeCategory": CfprApFirmwareUpgradeCategory,
       "CfprApFirmwareUpgradeSeverity": CfprApFirmwareUpgradeSeverity,
       "CfprApFirmwareUpgradeState": CfprApFirmwareUpgradeState,
       "CfprApFirmwareUpgradeStatus": CfprApFirmwareUpgradeStatus,
       "CfprApFlowctrlFlowControl": CfprApFlowctrlFlowControl,
       "CfprApFlowctrlPriorityPause": CfprApFlowctrlPriorityPause,
       "CfprApFsmCompletion": CfprApFsmCompletion,
       "CfprApFsmFlags": CfprApFsmFlags,
       "CfprApFsmFsmStageStatus": CfprApFsmFsmStageStatus,
       "CfprApFsmLifecycle": CfprApFsmLifecycle,
       "CfprApGmetaCategory": CfprApGmetaCategory,
       "CfprApGmetaHolderFsmCurrentFsm": CfprApGmetaHolderFsmCurrentFsm,
       "CfprApGmetaHolderFsmStageName": CfprApGmetaHolderFsmStageName,
       "CfprApGmetaHolderFsmTaskFlags": CfprApGmetaHolderFsmTaskFlags,
       "CfprApGmetaHolderFsmTaskItem": CfprApGmetaHolderFsmTaskItem,
       "CfprApGmetaInventoryStatus": CfprApGmetaInventoryStatus,
       "CfprApGmetaPollInterval": CfprApGmetaPollInterval,
       "CfprApHostagAction": CfprApHostagAction,
       "CfprApHostagAgentType": CfprApHostagAgentType,
       "CfprApHostagEvent": CfprApHostagEvent,
       "CfprApHostimgComposition": CfprApHostimgComposition,
       "CfprApHostimgDistribution": CfprApHostimgDistribution,
       "CfprApHostimgImgType": CfprApHostimgImgType,
       "CfprApHostimgType": CfprApHostimgType,
       "CfprApIdentConsType": CfprApIdentConsType,
       "CfprApIdentIdDefinedInIdm": CfprApIdentIdDefinedInIdm,
       "CfprApIdentIdentReqIntent": CfprApIdentIdentReqIntent,
       "CfprApIdentIdentRequestFsmCurrentFsm": CfprApIdentIdentRequestFsmCurrentFsm,
       "CfprApIdentIdentRequestFsmStageName": CfprApIdentIdentRequestFsmStageName,
       "CfprApIdentIdentRequestFsmTaskItem": CfprApIdentIdentRequestFsmTaskItem,
       "CfprApIdentIdentType": CfprApIdentIdentType,
       "CfprApIdentMetaSystemFsmCurrentFsm": CfprApIdentMetaSystemFsmCurrentFsm,
       "CfprApIdentMetaSystemFsmStageName": CfprApIdentMetaSystemFsmStageName,
       "CfprApIdentMetaSystemFsmTaskItem": CfprApIdentMetaSystemFsmTaskItem,
       "CfprApIdentRetStatus": CfprApIdentRetStatus,
       "CfprApImgsecKeyType": CfprApImgsecKeyType,
       "CfprApInitiatorFcInitiatorEpProt": CfprApInitiatorFcInitiatorEpProt,
       "CfprApInitiatorGroupType": CfprApInitiatorGroupType,
       "CfprApInitiatorIScsiInitiatorEpProt": CfprApInitiatorIScsiInitiatorEpProt,
       "CfprApInitiatorInitiatorEpPref": CfprApInitiatorInitiatorEpPref,
       "CfprApIpIPv4DnsPref": CfprApIpIPv4DnsPref,
       "CfprApIpIpV4StaticAddrPref": CfprApIpIpV4StaticAddrPref,
       "CfprApIpProtocol": CfprApIpProtocol,
       "CfprApIpServiceIfPref": CfprApIpServiceIfPref,
       "CfprApIppoolDHCPMode": CfprApIppoolDHCPMode,
       "CfprApIppoolManagementMode": CfprApIppoolManagementMode,
       "CfprApIppoolNetBIOSMode": CfprApIppoolNetBIOSMode,
       "CfprApIppoolPoolAssignmentOrder": CfprApIppoolPoolAssignmentOrder,
       "CfprApIqnpoolBlockFrom": CfprApIqnpoolBlockFrom,
       "CfprApIqnpoolBlockTo": CfprApIqnpoolBlockTo,
       "CfprApIqnpoolPoolAssignmentOrder": CfprApIqnpoolPoolAssignmentOrder,
       "CfprApIqnpoolTransportBlockFrom": CfprApIqnpoolTransportBlockFrom,
       "CfprApIqnpoolTransportBlockTo": CfprApIqnpoolTransportBlockTo,
       "CfprApLicenseConfigOperation": CfprApLicenseConfigOperation,
       "CfprApLicenseDebugFlag": CfprApLicenseDebugFlag,
       "CfprApLicenseDownloadActivity": CfprApLicenseDownloadActivity,
       "CfprApLicenseDownloaderFsmCurrentFsm": CfprApLicenseDownloaderFsmCurrentFsm,
       "CfprApLicenseDownloaderFsmStageName": CfprApLicenseDownloaderFsmStageName,
       "CfprApLicenseDownloaderFsmTaskItem": CfprApLicenseDownloaderFsmTaskItem,
       "CfprApLicenseFeatureType": CfprApLicenseFeatureType,
       "CfprApLicenseFileFsmCurrentFsm": CfprApLicenseFileFsmCurrentFsm,
       "CfprApLicenseFileFsmStageName": CfprApLicenseFileFsmStageName,
       "CfprApLicenseFileFsmTaskItem": CfprApLicenseFileFsmTaskItem,
       "CfprApLicenseFileState": CfprApLicenseFileState,
       "CfprApLicenseInstanceFsmCurrentFsm": CfprApLicenseInstanceFsmCurrentFsm,
       "CfprApLicenseInstanceFsmStageName": CfprApLicenseInstanceFsmStageName,
       "CfprApLicenseInstanceFsmTaskItem": CfprApLicenseInstanceFsmTaskItem,
       "CfprApLicensePeerStatus": CfprApLicensePeerStatus,
       "CfprApLicenseScope": CfprApLicenseScope,
       "CfprApLicenseSmartConfigFsmCurrentFsm": CfprApLicenseSmartConfigFsmCurrentFsm,
       "CfprApLicenseSmartConfigFsmStageName": CfprApLicenseSmartConfigFsmStageName,
       "CfprApLicenseSmartConfigFsmTaskItem": CfprApLicenseSmartConfigFsmTaskItem,
       "CfprApLicenseState": CfprApLicenseState,
       "CfprApLicenseTransferState": CfprApLicenseTransferState,
       "CfprApLicenseTransport": CfprApLicenseTransport,
       "CfprApLicenseType": CfprApLicenseType,
       "CfprApLsAgentCapability": CfprApLsAgentCapability,
       "CfprApLsAgentMode": CfprApLsAgentMode,
       "CfprApLsApply": CfprApLsApply,
       "CfprApLsAssignment": CfprApLsAssignment,
       "CfprApLsAssocState": CfprApLsAssocState,
       "CfprApLsComputeBindingOperState": CfprApLsComputeBindingOperState,
       "CfprApLsConfigIssues": CfprApLsConfigIssues,
       "CfprApLsConfigState": CfprApLsConfigState,
       "CfprApLsConfigWarnings": CfprApLsConfigWarnings,
       "CfprApLsFcZoneGroupSwitchId": CfprApLsFcZoneGroupSwitchId,
       "CfprApLsFcZoneState": CfprApLsFcZoneState,
       "CfprApLsOperState": CfprApLsOperState,
       "CfprApLsOwner": CfprApLsOwner,
       "CfprApLsPowerState": CfprApLsPowerState,
       "CfprApLsResolveFromRemoteServer": CfprApLsResolveFromRemoteServer,
       "CfprApLsServerFsmCurrentFsm": CfprApLsServerFsmCurrentFsm,
       "CfprApLsServerFsmStageName": CfprApLsServerFsmStageName,
       "CfprApLsServerFsmTaskFlags": CfprApLsServerFsmTaskFlags,
       "CfprApLsServerFsmTaskItem": CfprApLsServerFsmTaskItem,
       "CfprApLsType": CfprApLsType,
       "CfprApLsbootADefBootMode": CfprApLsbootADefBootMode,
       "CfprApLsbootAccessType": CfprApLsbootAccessType,
       "CfprApLsbootDefaultLocalImageType": CfprApLsbootDefaultLocalImageType,
       "CfprApLsbootIScsiAccess": CfprApLsbootIScsiAccess,
       "CfprApLsbootIScsiType": CfprApLsbootIScsiType,
       "CfprApLsbootIScsiImagePathType": CfprApLsbootIScsiImagePathType,
       "CfprApLsbootLanAccess": CfprApLsbootLanAccess,
       "CfprApLsbootLanType": CfprApLsbootLanType,
       "CfprApLsbootLanBootProt": CfprApLsbootLanBootProt,
       "CfprApLsbootLanImagePathType": CfprApLsbootLanImagePathType,
       "CfprApLsbootLocalHddImageType": CfprApLsbootLocalHddImageType,
       "CfprApLsbootPurpose": CfprApLsbootPurpose,
       "CfprApLsbootSanAccess": CfprApLsbootSanAccess,
       "CfprApLsbootSanType": CfprApLsbootSanType,
       "CfprApLsbootSanCatSanImageType": CfprApLsbootSanCatSanImageType,
       "CfprApLsbootSanCatSanImagePathType": CfprApLsbootSanCatSanImagePathType,
       "CfprApLsbootSanImageType": CfprApLsbootSanImageType,
       "CfprApLsbootSanImagePathType": CfprApLsbootSanImagePathType,
       "CfprApLsbootStorageAccess": CfprApLsbootStorageAccess,
       "CfprApLsbootStorageType": CfprApLsbootStorageType,
       "CfprApLsbootUsbExternalImageType": CfprApLsbootUsbExternalImageType,
       "CfprApLsbootUsbFlashStorageImageType": CfprApLsbootUsbFlashStorageImageType,
       "CfprApLsbootUsbInternalImageType": CfprApLsbootUsbInternalImageType,
       "CfprApLsbootVirtualMediaType": CfprApLsbootVirtualMediaType,
       "CfprApLsmaintAckChangeDetails": CfprApLsmaintAckChangeDetails,
       "CfprApLsmaintAckChanges": CfprApLsmaintAckChanges,
       "CfprApLsmaintAckDisr": CfprApLsmaintAckDisr,
       "CfprApLsmaintChangeMode": CfprApLsmaintChangeMode,
       "CfprApMacpoolPoolAssignmentOrder": CfprApMacpoolPoolAssignmentOrder,
       "CfprApMemoryAdminState": CfprApMemoryAdminState,
       "CfprApMemoryArrayId": CfprApMemoryArrayId,
       "CfprApMemoryArrayEnvStatsThresholded": CfprApMemoryArrayEnvStatsThresholded,
       "CfprApMemoryArrayEnvStatsHistThresholded": CfprApMemoryArrayEnvStatsHistThresholded,
       "CfprApMemoryBufferUnitId": CfprApMemoryBufferUnitId,
       "CfprApMemoryBufferUnitEnvStatsThresholded": CfprApMemoryBufferUnitEnvStatsThresholded,
       "CfprApMemoryBufferUnitEnvStatsHistThresholded": CfprApMemoryBufferUnitEnvStatsHistThresholded,
       "CfprApMemoryErrorCorrection": CfprApMemoryErrorCorrection,
       "CfprApMemoryErrorStatsThresholded": CfprApMemoryErrorStatsThresholded,
       "CfprApMemoryFormFactor": CfprApMemoryFormFactor,
       "CfprApMemoryIssues": CfprApMemoryIssues,
       "CfprApMemoryRuntimeThresholded": CfprApMemoryRuntimeThresholded,
       "CfprApMemoryRuntimeType": CfprApMemoryRuntimeType,
       "CfprApMemoryRuntimeHistThresholded": CfprApMemoryRuntimeHistThresholded,
       "CfprApMemoryType": CfprApMemoryType,
       "CfprApMemoryUnitId": CfprApMemoryUnitId,
       "CfprApMemoryUnitOperability": CfprApMemoryUnitOperability,
       "CfprApMemoryUnitEnvStatsThresholded": CfprApMemoryUnitEnvStatsThresholded,
       "CfprApMemoryUnitEnvStatsHistThresholded": CfprApMemoryUnitEnvStatsHistThresholded,
       "CfprApMemoryVisibility": CfprApMemoryVisibility,
       "CfprApMgmtAccess": CfprApMgmtAccess,
       "CfprApMgmtAdminState": CfprApMgmtAdminState,
       "CfprApMgmtBackupPostAction": CfprApMgmtBackupPostAction,
       "CfprApMgmtBackupProto": CfprApMgmtBackupProto,
       "CfprApMgmtBackupFsmCurrentFsm": CfprApMgmtBackupFsmCurrentFsm,
       "CfprApMgmtBackupFsmStageName": CfprApMgmtBackupFsmStageName,
       "CfprApMgmtBackupFsmTaskItem": CfprApMgmtBackupFsmTaskItem,
       "CfprApMgmtBackupInterval": CfprApMgmtBackupInterval,
       "CfprApMgmtBackupIssue": CfprApMgmtBackupIssue,
       "CfprApMgmtBackupJob": CfprApMgmtBackupJob,
       "CfprApMgmtBackupPolicyFsmCurrentFsm": CfprApMgmtBackupPolicyFsmCurrentFsm,
       "CfprApMgmtBackupPolicyFsmStageName": CfprApMgmtBackupPolicyFsmStageName,
       "CfprApMgmtBackupStatus": CfprApMgmtBackupStatus,
       "CfprApMgmtBackupType": CfprApMgmtBackupType,
       "CfprApMgmtCfgExportPolicyFsmCurrentFsm": CfprApMgmtCfgExportPolicyFsmCurrentFsm,
       "CfprApMgmtCfgExportPolicyFsmStageName": CfprApMgmtCfgExportPolicyFsmStageName,
       "CfprApMgmtCimcSecureBootAdminState": CfprApMgmtCimcSecureBootAdminState,
       "CfprApMgmtConfigState": CfprApMgmtConfigState,
       "CfprApMgmtConnectionState": CfprApMgmtConnectionState,
       "CfprApMgmtControllerFsmCurrentFsm": CfprApMgmtControllerFsmCurrentFsm,
       "CfprApMgmtControllerFsmStageName": CfprApMgmtControllerFsmStageName,
       "CfprApMgmtControllerFsmTaskFlags": CfprApMgmtControllerFsmTaskFlags,
       "CfprApMgmtControllerFsmTaskItem": CfprApMgmtControllerFsmTaskItem,
       "CfprApMgmtDimmBlacklistingOperState": CfprApMgmtDimmBlacklistingOperState,
       "CfprApMgmtEntityChassisDeviceIoState1": CfprApMgmtEntityChassisDeviceIoState1,
       "CfprApMgmtEntityChassisDeviceIoState2": CfprApMgmtEntityChassisDeviceIoState2,
       "CfprApMgmtEntityChassisDeviceIoState3": CfprApMgmtEntityChassisDeviceIoState3,
       "CfprApMgmtEntityHaFailureReason": CfprApMgmtEntityHaFailureReason,
       "CfprApMgmtEntityHaReadiness": CfprApMgmtEntityHaReadiness,
       "CfprApMgmtEntityLeadership": CfprApMgmtEntityLeadership,
       "CfprApMgmtEntityMgmtServicesState": CfprApMgmtEntityMgmtServicesState,
       "CfprApMgmtEntityProblems": CfprApMgmtEntityProblems,
       "CfprApMgmtEntityState": CfprApMgmtEntityState,
       "CfprApMgmtEntityUmbilicalState": CfprApMgmtEntityUmbilicalState,
       "CfprApMgmtExportPolicyAdminState": CfprApMgmtExportPolicyAdminState,
       "CfprApMgmtExportPolicyProto": CfprApMgmtExportPolicyProto,
       "CfprApMgmtExportPolicyFsmCurrentFsm": CfprApMgmtExportPolicyFsmCurrentFsm,
       "CfprApMgmtExportPolicyFsmStageName": CfprApMgmtExportPolicyFsmStageName,
       "CfprApMgmtExportPolicyFsmTaskItem": CfprApMgmtExportPolicyFsmTaskItem,
       "CfprApMgmtIPv6IfAddrFsmCurrentFsm": CfprApMgmtIPv6IfAddrFsmCurrentFsm,
       "CfprApMgmtIPv6IfAddrFsmStageName": CfprApMgmtIPv6IfAddrFsmStageName,
       "CfprApMgmtIPv6IfAddrFsmTaskItem": CfprApMgmtIPv6IfAddrFsmTaskItem,
       "CfprApMgmtIfFsmCurrentFsm": CfprApMgmtIfFsmCurrentFsm,
       "CfprApMgmtIfFsmStageName": CfprApMgmtIfFsmStageName,
       "CfprApMgmtIfFsmTaskItem": CfprApMgmtIfFsmTaskItem,
       "CfprApMgmtImportAction": CfprApMgmtImportAction,
       "CfprApMgmtImportStatus": CfprApMgmtImportStatus,
       "CfprApMgmtImporterPostAction": CfprApMgmtImporterPostAction,
       "CfprApMgmtImporterProto": CfprApMgmtImporterProto,
       "CfprApMgmtImporterFsmCurrentFsm": CfprApMgmtImporterFsmCurrentFsm,
       "CfprApMgmtImporterFsmStageName": CfprApMgmtImporterFsmStageName,
       "CfprApMgmtImporterFsmTaskItem": CfprApMgmtImporterFsmTaskItem,
       "CfprApMgmtIntAuthPolicyMethod": CfprApMgmtIntAuthPolicyMethod,
       "CfprApMgmtMode": CfprApMgmtMode,
       "CfprApMgmtOperState": CfprApMgmtOperState,
       "CfprApMgmtPmonEntryState": CfprApMgmtPmonEntryState,
       "CfprApMgmtSecureBootOperState": CfprApMgmtSecureBootOperState,
       "CfprApMgmtSource": CfprApMgmtSource,
       "CfprApMgmtStateQual": CfprApMgmtStateQual,
       "CfprApMgmtStorageSubsystemState": CfprApMgmtStorageSubsystemState,
       "CfprApMgmtSubject": CfprApMgmtSubject,
       "CfprApMgmtUpgradeStatus": CfprApMgmtUpgradeStatus,
       "CfprApMoMoClassId": CfprApMoMoClassId,
       "CfprApNetworkConfigIssues": CfprApNetworkConfigIssues,
       "CfprApNetworkConnectionType": CfprApNetworkConnectionType,
       "CfprApNetworkElementOperability": CfprApNetworkElementOperability,
       "CfprApNetworkIfStatsType": CfprApNetworkIfStatsType,
       "CfprApNetworkIfStatsUnits": CfprApNetworkIfStatsUnits,
       "CfprApNetworkIfStatus": CfprApNetworkIfStatus,
       "CfprApNetworkInventoryStatus": CfprApNetworkInventoryStatus,
       "CfprApNetworkLocale": CfprApNetworkLocale,
       "CfprApNetworkPhysEpIfType": CfprApNetworkPhysEpIfType,
       "CfprApNetworkPortOperState": CfprApNetworkPortOperState,
       "CfprApNetworkPortRole": CfprApNetworkPortRole,
       "CfprApNetworkPortType": CfprApNetworkPortType,
       "CfprApNetworkSide": CfprApNetworkSide,
       "CfprApNetworkSwitchId": CfprApNetworkSwitchId,
       "CfprApNetworkTransport": CfprApNetworkTransport,
       "CfprApNetworkVlanCountStatus": CfprApNetworkVlanCountStatus,
       "CfprApNetworkVnetEpIfType": CfprApNetworkVnetEpIfType,
       "CfprApNfsClientConfigState": CfprApNfsClientConfigState,
       "CfprApNfsDefAdminState": CfprApNfsDefAdminState,
       "CfprApNfsMntAdminState": CfprApNfsMntAdminState,
       "CfprApNfsMntOperState": CfprApNfsMntOperState,
       "CfprApNfsMountDefFsmCurrentFsm": CfprApNfsMountDefFsmCurrentFsm,
       "CfprApNfsMountDefFsmStageName": CfprApNfsMountDefFsmStageName,
       "CfprApNfsMountDefFsmTaskItem": CfprApNfsMountDefFsmTaskItem,
       "CfprApNfsMountInstFsmCurrentFsm": CfprApNfsMountInstFsmCurrentFsm,
       "CfprApNfsMountInstFsmStageName": CfprApNfsMountInstFsmStageName,
       "CfprApNfsMountInstFsmTaskItem": CfprApNfsMountInstFsmTaskItem,
       "CfprApNfsPurpose": CfprApNfsPurpose,
       "CfprApNhConfMode": CfprApNhConfMode,
       "CfprApNhEpIdType": CfprApNhEpIdType,
       "CfprApNhEpType": CfprApNhEpType,
       "CfprApNhExecState": CfprApNhExecState,
       "CfprApNhLinkType": CfprApNhLinkType,
       "CfprApNhMacVlanType": CfprApNhMacVlanType,
       "CfprApNhPortType": CfprApNhPortType,
       "CfprApNhTableHolderFsmCurrentFsm": CfprApNhTableHolderFsmCurrentFsm,
       "CfprApNhTableHolderFsmStageName": CfprApNhTableHolderFsmStageName,
       "CfprApNhTableHolderFsmTaskItem": CfprApNhTableHolderFsmTaskItem,
       "CfprApNhTableType": CfprApNhTableType,
       "CfprApNhTpHashType": CfprApNhTpHashType,
       "CfprApNhtestTestState": CfprApNhtestTestState,
       "CfprApNwctrlAdminState": CfprApNwctrlAdminState,
       "CfprApNwctrlLinkFailAction": CfprApNwctrlLinkFailAction,
       "CfprApNwctrlRegistrationMode": CfprApNwctrlRegistrationMode,
       "CfprApObserveObservedFsmCurrentFsm": CfprApObserveObservedFsmCurrentFsm,
       "CfprApObserveObservedFsmStageName": CfprApObserveObservedFsmStageName,
       "CfprApObserveObservedFsmTaskItem": CfprApObserveObservedFsmTaskItem,
       "CfprApOrgLevel": CfprApOrgLevel,
       "CfprApOrgSrcMask": CfprApOrgSrcMask,
       "CfprApOsBootingUpType": CfprApOsBootingUpType,
       "CfprApOsControllerBootMode": CfprApOsControllerBootMode,
       "CfprApOsControllerFormatDisk": CfprApOsControllerFormatDisk,
       "CfprApOsDeployState": CfprApOsDeployState,
       "CfprApOsInitState": CfprApOsInitState,
       "CfprApOsOsMode": CfprApOsOsMode,
       "CfprApOsOsType": CfprApOsOsType,
       "CfprApOsUpgradeReturnCode": CfprApOsUpgradeReturnCode,
       "CfprApOsUpgradeState": CfprApOsUpgradeState,
       "CfprApPciEquipSlotId": CfprApPciEquipSlotId,
       "CfprApPkiCertStatus": CfprApPkiCertStatus,
       "CfprApPkiEpFsmCurrentFsm": CfprApPkiEpFsmCurrentFsm,
       "CfprApPkiEpFsmStageName": CfprApPkiEpFsmStageName,
       "CfprApPkiEpFsmTaskItem": CfprApPkiEpFsmTaskItem,
       "CfprApPkiKeyringState": CfprApPkiKeyringState,
       "CfprApPkiModulus": CfprApPkiModulus,
       "CfprApPolicyCleanupMode": CfprApPolicyCleanupMode,
       "CfprApPolicyControlSource": CfprApPolicyControlSource,
       "CfprApPolicyControlEpFsmCurrentFsm": CfprApPolicyControlEpFsmCurrentFsm,
       "CfprApPolicyControlEpFsmStageName": CfprApPolicyControlEpFsmStageName,
       "CfprApPolicyControlEpFsmTaskItem": CfprApPolicyControlEpFsmTaskItem,
       "CfprApPolicyControlEpType": CfprApPolicyControlEpType,
       "CfprApPolicyControlledTypeFsmCurrentFsm": CfprApPolicyControlledTypeFsmCurrentFsm,
       "CfprApPolicyControlledTypeFsmStageName": CfprApPolicyControlledTypeFsmStageName,
       "CfprApPolicyControlledTypeFsmTaskItem": CfprApPolicyControlledTypeFsmTaskItem,
       "CfprApPolicyIdResolvePolicyType": CfprApPolicyIdResolvePolicyType,
       "CfprApPolicyPolicyOperStatus": CfprApPolicyPolicyOperStatus,
       "CfprApPolicyPolicyOwner": CfprApPolicyPolicyOwner,
       "CfprApPolicyPolicyResolveType": CfprApPolicyPolicyResolveType,
       "CfprApPolicyPolicyScopeFsmCurrentFsm": CfprApPolicyPolicyScopeFsmCurrentFsm,
       "CfprApPolicyPolicyScopeFsmStageName": CfprApPolicyPolicyScopeFsmStageName,
       "CfprApPolicyPolicyScopeFsmTaskItem": CfprApPolicyPolicyScopeFsmTaskItem,
       "CfprApPolicyRegistrationStateType": CfprApPolicyRegistrationStateType,
       "CfprApPolicyRepairStateType": CfprApPolicyRepairStateType,
       "CfprApPolicyResumeAckState": CfprApPolicyResumeAckState,
       "CfprApPolicyState": CfprApPolicyState,
       "CfprApPolicySuspendState": CfprApPolicySuspendState,
       "CfprApPoolElementOwner": CfprApPoolElementOwner,
       "CfprApPoolPoolAssignmentOrder": CfprApPoolPoolAssignmentOrder,
       "CfprApPortDuplex": CfprApPortDuplex,
       "CfprApPortEncap": CfprApPortEncap,
       "CfprApPortEthAdminSpeed": CfprApPortEthAdminSpeed,
       "CfprApPortEthSpeed": CfprApPortEthSpeed,
       "CfprApPortGroupType": CfprApPortGroupType,
       "CfprApPortMode": CfprApPortMode,
       "CfprApPortPIoFsmCurrentFsm": CfprApPortPIoFsmCurrentFsm,
       "CfprApPortPIoFsmStageName": CfprApPortPIoFsmStageName,
       "CfprApPortPIoFsmTaskItem": CfprApPortPIoFsmTaskItem,
       "CfprApPortSpeed": CfprApPortSpeed,
       "CfprApPortSubGroupConfigState": CfprApPortSubGroupConfigState,
       "CfprApPortSubGroupSlotId": CfprApPortSubGroupSlotId,
       "CfprApPortTrust": CfprApPortTrust,
       "CfprApPowerCapAction": CfprApPowerCapAction,
       "CfprApPowerChThrAction": CfprApPowerChThrAction,
       "CfprApPowerGroupState": CfprApPowerGroupState,
       "CfprApPowerGroupStatsThresholded": CfprApPowerGroupStatsThresholded,
       "CfprApPowerGroupStatsHistThresholded": CfprApPowerGroupStatsHistThresholded,
       "CfprApPowerLockState": CfprApPowerLockState,
       "CfprApPowerMemberState": CfprApPowerMemberState,
       "CfprApPowerMgmtStyle": CfprApPowerMgmtStyle,
       "CfprApPowerOperState": CfprApPowerOperState,
       "CfprApPowerPrioritySharing": CfprApPowerPrioritySharing,
       "CfprApPowerProfilingMethod": CfprApPowerProfilingMethod,
       "CfprApPowerPsuLineMode": CfprApPowerPsuLineMode,
       "CfprApPowerPsuState": CfprApPowerPsuState,
       "CfprApPowerReallocation": CfprApPowerReallocation,
       "CfprApPowerReqConflict": CfprApPowerReqConflict,
       "CfprApProcStatAdminState": CfprApProcStatAdminState,
       "CfprApProcessorEnvStatsThresholded": CfprApProcessorEnvStatsThresholded,
       "CfprApProcessorEnvStatsHistThresholded": CfprApProcessorEnvStatsHistThresholded,
       "CfprApProcessorErrorStatsThresholded": CfprApProcessorErrorStatsThresholded,
       "CfprApProcessorQualArch": CfprApProcessorQualArch,
       "CfprApProcessorRuntimeThresholded": CfprApProcessorRuntimeThresholded,
       "CfprApProcessorRuntimeHistThresholded": CfprApProcessorRuntimeHistThresholded,
       "CfprApProcessorUnitArch": CfprApProcessorUnitArch,
       "CfprApQosHostControl": CfprApQosHostControl,
       "CfprApQosPriority": CfprApQosPriority,
       "CfprApQosclassDefinitionFsmCurrentFsm": CfprApQosclassDefinitionFsmCurrentFsm,
       "CfprApQosclassDefinitionFsmStageName": CfprApQosclassDefinitionFsmStageName,
       "CfprApQosclassDefinitionFsmTaskItem": CfprApQosclassDefinitionFsmTaskItem,
       "CfprApQosclassEthBEAdminState": CfprApQosclassEthBEAdminState,
       "CfprApQosclassEthBEDrop": CfprApQosclassEthBEDrop,
       "CfprApQosclassEthBEPriority": CfprApQosclassEthBEPriority,
       "CfprApQosclassEthClassifiedAdminState": CfprApQosclassEthClassifiedAdminState,
       "CfprApQosclassEthClassifiedDrop": CfprApQosclassEthClassifiedDrop,
       "CfprApQosclassEthClassifiedPriority": CfprApQosclassEthClassifiedPriority,
       "CfprApQosclassFcAdminState": CfprApQosclassFcAdminState,
       "CfprApQosclassFcDrop": CfprApQosclassFcDrop,
       "CfprApQosclassFcPriority": CfprApQosclassFcPriority,
       "CfprApRmetaModType": CfprApRmetaModType,
       "CfprApSdActionType": CfprApSdActionType,
       "CfprApSdAppAttributeCtrlFsmCurrentFsm": CfprApSdAppAttributeCtrlFsmCurrentFsm,
       "CfprApSdAppAttributeCtrlFsmStageName": CfprApSdAppAttributeCtrlFsmStageName,
       "CfprApSdAppAttributeCtrlFsmTaskItem": CfprApSdAppAttributeCtrlFsmTaskItem,
       "CfprApSdAppInstAdminState": CfprApSdAppInstAdminState,
       "CfprApSdAppInstState": CfprApSdAppInstState,
       "CfprApSdAppInstanceCurrentJobProgress": CfprApSdAppInstanceCurrentJobProgress,
       "CfprApSdAppInstanceFsmCurrentFsm": CfprApSdAppInstanceFsmCurrentFsm,
       "CfprApSdAppInstanceFsmStageName": CfprApSdAppInstanceFsmStageName,
       "CfprApSdAppInstanceFsmTaskFlags": CfprApSdAppInstanceFsmTaskFlags,
       "CfprApSdAppInstanceFsmTaskItem": CfprApSdAppInstanceFsmTaskItem,
       "CfprApSdAppLduLinkFsmCurrentFsm": CfprApSdAppLduLinkFsmCurrentFsm,
       "CfprApSdAppLduLinkFsmStageName": CfprApSdAppLduLinkFsmStageName,
       "CfprApSdAppResetState": CfprApSdAppResetState,
       "CfprApSdCfgPortForwardingMode": CfprApSdCfgPortForwardingMode,
       "CfprApSdClusterBootstrapChassisId": CfprApSdClusterBootstrapChassisId,
       "CfprApSdClusterBootstrapFsmCurrentFsm": CfprApSdClusterBootstrapFsmCurrentFsm,
       "CfprApSdClusterBootstrapFsmStageName": CfprApSdClusterBootstrapFsmStageName,
       "CfprApSdClusterBootstrapFsmTaskItem": CfprApSdClusterBootstrapFsmTaskItem,
       "CfprApSdClusterStatus": CfprApSdClusterStatus,
       "CfprApSdExternalLduLinkFsmCurrentFsm": CfprApSdExternalLduLinkFsmCurrentFsm,
       "CfprApSdExternalLduLinkFsmStageName": CfprApSdExternalLduLinkFsmStageName,
       "CfprApSdInterfaceType": CfprApSdInterfaceType,
       "CfprApSdJobState": CfprApSdJobState,
       "CfprApSdJobType": CfprApSdJobType,
       "CfprApSdLdOperState": CfprApSdLdOperState,
       "CfprApSdLduFsmCurrentFsm": CfprApSdLduFsmCurrentFsm,
       "CfprApSdLduFsmStageName": CfprApSdLduFsmStageName,
       "CfprApSdLduFsmTaskItem": CfprApSdLduFsmTaskItem,
       "CfprApSdLduOperState": CfprApSdLduOperState,
       "CfprApSdLinkDirection": CfprApSdLinkDirection,
       "CfprApSdLinkFsmCurrentFsm": CfprApSdLinkFsmCurrentFsm,
       "CfprApSdLinkFsmStageName": CfprApSdLinkFsmStageName,
       "CfprApSdLinkFsmTaskItem": CfprApSdLinkFsmTaskItem,
       "CfprApSdLinkOperState": CfprApSdLinkOperState,
       "CfprApSdLogicalDeviceFsmCurrentFsm": CfprApSdLogicalDeviceFsmCurrentFsm,
       "CfprApSdLogicalDeviceFsmStageName": CfprApSdLogicalDeviceFsmStageName,
       "CfprApSdLogicalDeviceFsmTaskItem": CfprApSdLogicalDeviceFsmTaskItem,
       "CfprApSdMacType": CfprApSdMacType,
       "CfprApSdMgmtInfoFsmCurrentFsm": CfprApSdMgmtInfoFsmCurrentFsm,
       "CfprApSdMgmtInfoFsmStageName": CfprApSdMgmtInfoFsmStageName,
       "CfprApSdMgmtInfoFsmTaskItem": CfprApSdMgmtInfoFsmTaskItem,
       "CfprApSdNetMgmtBootstrapFsmCurrentFsm": CfprApSdNetMgmtBootstrapFsmCurrentFsm,
       "CfprApSdNetMgmtBootstrapFsmStageName": CfprApSdNetMgmtBootstrapFsmStageName,
       "CfprApSdNetMgmtBootstrapFsmTaskItem": CfprApSdNetMgmtBootstrapFsmTaskItem,
       "CfprApSdPortBundleOpType": CfprApSdPortBundleOpType,
       "CfprApSdPortBundleStatus": CfprApSdPortBundleStatus,
       "CfprApSdPortForwardingMode": CfprApSdPortForwardingMode,
       "CfprApSdSlotFsmCurrentFsm": CfprApSdSlotFsmCurrentFsm,
       "CfprApSdSlotFsmStageName": CfprApSdSlotFsmStageName,
       "CfprApSdSlotFsmTaskItem": CfprApSdSlotFsmTaskItem,
       "CfprApSdUpgradeTaskFsmCurrentFsm": CfprApSdUpgradeTaskFsmCurrentFsm,
       "CfprApSdUpgradeTaskFsmStageName": CfprApSdUpgradeTaskFsmStageName,
       "CfprApSdUpgradeTaskFsmTaskItem": CfprApSdUpgradeTaskFsmTaskItem,
       "CfprApServerConfigIssues": CfprApServerConfigIssues,
       "CfprApSmActionStages": CfprApSmActionStages,
       "CfprApSmAppAdminState": CfprApSmAppAdminState,
       "CfprApSmAppAggregatorType": CfprApSmAppAggregatorType,
       "CfprApSmAppClusterOperState": CfprApSmAppClusterOperState,
       "CfprApSmAppCommand": CfprApSmAppCommand,
       "CfprApSmAppFsmCurrentFsm": CfprApSmAppFsmCurrentFsm,
       "CfprApSmAppFsmStageName": CfprApSmAppFsmStageName,
       "CfprApSmAppFsmTaskItem": CfprApSmAppFsmTaskItem,
       "CfprApSmAppInstanceCurrentJobProgress": CfprApSmAppInstanceCurrentJobProgress,
       "CfprApSmAppInstanceFsmCurrentFsm": CfprApSmAppInstanceFsmCurrentFsm,
       "CfprApSmAppInstanceFsmStageName": CfprApSmAppInstanceFsmStageName,
       "CfprApSmAppInstanceFsmTaskItem": CfprApSmAppInstanceFsmTaskItem,
       "CfprApSmClusterBootstrapChassisId": CfprApSmClusterBootstrapChassisId,
       "CfprApSmClusterMode": CfprApSmClusterMode,
       "CfprApSmCspType": CfprApSmCspType,
       "CfprApSmDeployType": CfprApSmDeployType,
       "CfprApSmDiskState": CfprApSmDiskState,
       "CfprApSmHeartbeatState": CfprApSmHeartbeatState,
       "CfprApSmLogLevel": CfprApSmLogLevel,
       "CfprApSmLogicalDeviceMode": CfprApSmLogicalDeviceMode,
       "CfprApSmMgmtSubType": CfprApSmMgmtSubType,
       "CfprApSmNetMgmtBootstrapScope": CfprApSmNetMgmtBootstrapScope,
       "CfprApSmNetMgmtBootstrapType": CfprApSmNetMgmtBootstrapType,
       "CfprApSmSecSvcFsmCurrentFsm": CfprApSmSecSvcFsmCurrentFsm,
       "CfprApSmSecSvcFsmStageName": CfprApSmSecSvcFsmStageName,
       "CfprApSmSecSvcFsmTaskItem": CfprApSmSecSvcFsmTaskItem,
       "CfprApSmSlotAdminState": CfprApSmSlotAdminState,
       "CfprApSmSlotOperState": CfprApSmSlotOperState,
       "CfprApSolAdminState": CfprApSolAdminState,
       "CfprApSolSpeed": CfprApSolSpeed,
       "CfprApStatsCollectionDomain": CfprApStatsCollectionDomain,
       "CfprApStatsCollectionInterval": CfprApStatsCollectionInterval,
       "CfprApStatsCollectionPolicyFsmCurrentFsm": CfprApStatsCollectionPolicyFsmCurrentFsm,
       "CfprApStatsCollectionPolicyFsmStageName": CfprApStatsCollectionPolicyFsmStageName,
       "CfprApStatsCollectionPolicyFsmTaskItem": CfprApStatsCollectionPolicyFsmTaskItem,
       "CfprApStatsReportingInterval": CfprApStatsReportingInterval,
       "CfprApStatsThr32DefinitionPropType": CfprApStatsThr32DefinitionPropType,
       "CfprApStatsThr32ValuePropType": CfprApStatsThr32ValuePropType,
       "CfprApStatsThr64DefinitionPropType": CfprApStatsThr64DefinitionPropType,
       "CfprApStatsThr64ValuePropType": CfprApStatsThr64ValuePropType,
       "CfprApStatsThrFloatDefinitionPropType": CfprApStatsThrFloatDefinitionPropType,
       "CfprApStatsThrFloatValuePropType": CfprApStatsThrFloatValuePropType,
       "CfprApStatsThresholdDirection": CfprApStatsThresholdDirection,
       "CfprApStorageAccessType": CfprApStorageAccessType,
       "CfprApStorageActualWriteType": CfprApStorageActualWriteType,
       "CfprApStorageAllocState": CfprApStorageAllocState,
       "CfprApStorageBatteryType": CfprApStorageBatteryType,
       "CfprApStorageBbuStatus": CfprApStorageBbuStatus,
       "CfprApStorageBootableType": CfprApStorageBootableType,
       "CfprApStorageCacheType": CfprApStorageCacheType,
       "CfprApStorageConfigIssues": CfprApStorageConfigIssues,
       "CfprApStorageConfiguration": CfprApStorageConfiguration,
       "CfprApStorageConfiguredWriteType": CfprApStorageConfiguredWriteType,
       "CfprApStorageConnectionProtocol": CfprApStorageConnectionProtocol,
       "CfprApStorageControllerFaultMonitoring": CfprApStorageControllerFaultMonitoring,
       "CfprApStorageControllerId": CfprApStorageControllerId,
       "CfprApStorageControllerForm": CfprApStorageControllerForm,
       "CfprApStorageControllerStatus": CfprApStorageControllerStatus,
       "CfprApStorageControllerType": CfprApStorageControllerType,
       "CfprApStorageDisklessAction": CfprApStorageDisklessAction,
       "CfprApStorageEpAccess": CfprApStorageEpAccess,
       "CfprApStorageEtherIfVlanType": CfprApStorageEtherIfVlanType,
       "CfprApStorageFFCardHealth": CfprApStorageFFCardHealth,
       "CfprApStorageFFCardMode": CfprApStorageFFCardMode,
       "CfprApStorageFFCardSizeMismatch": CfprApStorageFFCardSizeMismatch,
       "CfprApStorageFFCardState": CfprApStorageFFCardState,
       "CfprApStorageFFCardSync": CfprApStorageFFCardSync,
       "CfprApStorageFFCardWriteEnable": CfprApStorageFFCardWriteEnable,
       "CfprApStorageFFControllerHealth": CfprApStorageFFControllerHealth,
       "CfprApStorageFFControllerState": CfprApStorageFFControllerState,
       "CfprApStorageFFDriveRemovable": CfprApStorageFFDriveRemovable,
       "CfprApStorageFFDriveState": CfprApStorageFFDriveState,
       "CfprApStorageFFDriveType": CfprApStorageFFDriveType,
       "CfprApStorageFFDriveVisible": CfprApStorageFFDriveVisible,
       "CfprApStorageFFFormatRunning": CfprApStorageFFFormatRunning,
       "CfprApStorageFFHasError": CfprApStorageFFHasError,
       "CfprApStorageFFRAIDHealth": CfprApStorageFFRAIDHealth,
       "CfprApStorageFFRAIDState": CfprApStorageFFRAIDState,
       "CfprApStorageFFRWType": CfprApStorageFFRWType,
       "CfprApStorageFFRaidSyncSupport": CfprApStorageFFRaidSyncSupport,
       "CfprApStorageFFSlotENUM": CfprApStorageFFSlotENUM,
       "CfprApStorageFFType": CfprApStorageFFType,
       "CfprApStorageFcZoningType": CfprApStorageFcZoningType,
       "CfprApStorageFileSystemStatus": CfprApStorageFileSystemStatus,
       "CfprApStorageFlexFlashControllerId": CfprApStorageFlexFlashControllerId,
       "CfprApStorageIOType": CfprApStorageIOType,
       "CfprApStorageIniGroupOperProtocol": CfprApStorageIniGroupOperProtocol,
       "CfprApStorageIniGroupOwner": CfprApStorageIniGroupOwner,
       "CfprApStorageIniGroupProtocol": CfprApStorageIniGroupProtocol,
       "CfprApStorageKeyType": CfprApStorageKeyType,
       "CfprApStorageLearnCycleRequested": CfprApStorageLearnCycleRequested,
       "CfprApStorageLearnMode": CfprApStorageLearnMode,
       "CfprApStorageLinkSpeed": CfprApStorageLinkSpeed,
       "CfprApStorageLocalDiskConfigFlexFlashRAIDReportingState": CfprApStorageLocalDiskConfigFlexFlashRAIDReportingState,
       "CfprApStorageLocalDiskConfigFlexFlashState": CfprApStorageLocalDiskConfigFlexFlashState,
       "CfprApStorageLocalDiskMode": CfprApStorageLocalDiskMode,
       "CfprApStorageLocalDiskPartitionType": CfprApStorageLocalDiskPartitionType,
       "CfprApStorageLunType": CfprApStorageLunType,
       "CfprApStorageOperState": CfprApStorageOperState,
       "CfprApStorageOperatingModeType": CfprApStorageOperatingModeType,
       "CfprApStorageOperationRequestType": CfprApStorageOperationRequestType,
       "CfprApStorageOperationState": CfprApStorageOperationState,
       "CfprApStorageOperationStateType": CfprApStorageOperationStateType,
       "CfprApStorageOperationType": CfprApStorageOperationType,
       "CfprApStoragePDriveStatus": CfprApStoragePDriveStatus,
       "CfprApStoragePathHA": CfprApStoragePathHA,
       "CfprApStoragePowerState": CfprApStoragePowerState,
       "CfprApStorageProtocol": CfprApStorageProtocol,
       "CfprApStorageRaidBatteryOperabilityQualifier": CfprApStorageRaidBatteryOperabilityQualifier,
       "CfprApStorageReadType": CfprApStorageReadType,
       "CfprApStorageSystemFsmCurrentFsm": CfprApStorageSystemFsmCurrentFsm,
       "CfprApStorageSystemFsmStageName": CfprApStorageSystemFsmStageName,
       "CfprApStorageSystemFsmTaskItem": CfprApStorageSystemFsmTaskItem,
       "CfprApStorageTargetPath": CfprApStorageTargetPath,
       "CfprApStorageTechnology": CfprApStorageTechnology,
       "CfprApStorageVDriveState": CfprApStorageVDriveState,
       "CfprApStorageVsanRefSwitchId": CfprApStorageVsanRefSwitchId,
       "CfprApSwAccessDomainLocale": CfprApSwAccessDomainLocale,
       "CfprApSwAccessDomainType": CfprApSwAccessDomainType,
       "CfprApSwAccessDomainFsmCurrentFsm": CfprApSwAccessDomainFsmCurrentFsm,
       "CfprApSwAccessDomainFsmStageName": CfprApSwAccessDomainFsmStageName,
       "CfprApSwAccessDomainFsmTaskItem": CfprApSwAccessDomainFsmTaskItem,
       "CfprApSwAccessEpLocale": CfprApSwAccessEpLocale,
       "CfprApSwAccessEpTransport": CfprApSwAccessEpTransport,
       "CfprApSwAdminState": CfprApSwAdminState,
       "CfprApSwBorderDomainLocale": CfprApSwBorderDomainLocale,
       "CfprApSwBorderEpLocale": CfprApSwBorderEpLocale,
       "CfprApSwBorderPcLocale": CfprApSwBorderPcLocale,
       "CfprApSwBreakoutType": CfprApSwBreakoutType,
       "CfprApSwCIoEpIfType": CfprApSwCIoEpIfType,
       "CfprApSwCardEnvStatsThresholded": CfprApSwCardEnvStatsThresholded,
       "CfprApSwCardEnvStatsHistThresholded": CfprApSwCardEnvStatsHistThresholded,
       "CfprApSwCimcId": CfprApSwCimcId,
       "CfprApSwConfMode": CfprApSwConfMode,
       "CfprApSwConfigStatus": CfprApSwConfigStatus,
       "CfprApSwEnvStatsThresholded": CfprApSwEnvStatsThresholded,
       "CfprApSwEnvStatsHistThresholded": CfprApSwEnvStatsHistThresholded,
       "CfprApSwEstcEpLocale": CfprApSwEstcEpLocale,
       "CfprApSwEthEstcEpTransport": CfprApSwEthEstcEpTransport,
       "CfprApSwEthEstcPcTransport": CfprApSwEthEstcPcTransport,
       "CfprApSwEthFlowMonSessionTransport": CfprApSwEthFlowMonSessionTransport,
       "CfprApSwEthFlowMonSessionType": CfprApSwEthFlowMonSessionType,
       "CfprApSwEthLanBorderTransport": CfprApSwEthLanBorderTransport,
       "CfprApSwEthLanBorderFsmCurrentFsm": CfprApSwEthLanBorderFsmCurrentFsm,
       "CfprApSwEthLanBorderFsmStageName": CfprApSwEthLanBorderFsmStageName,
       "CfprApSwEthLanBorderFsmTaskFlags": CfprApSwEthLanBorderFsmTaskFlags,
       "CfprApSwEthLanBorderFsmTaskItem": CfprApSwEthLanBorderFsmTaskItem,
       "CfprApSwEthLanEpTransport": CfprApSwEthLanEpTransport,
       "CfprApSwEthLanEpUdldAdminState": CfprApSwEthLanEpUdldAdminState,
       "CfprApSwEthLanEpUdldMode": CfprApSwEthLanEpUdldMode,
       "CfprApSwEthLanFlowMonTransport": CfprApSwEthLanFlowMonTransport,
       "CfprApSwEthLanFlowMonExporterTransport": CfprApSwEthLanFlowMonExporterTransport,
       "CfprApSwEthLanFlowMonExporterType": CfprApSwEthLanFlowMonExporterType,
       "CfprApSwEthLanFlowMonFsmCurrentFsm": CfprApSwEthLanFlowMonFsmCurrentFsm,
       "CfprApSwEthLanFlowMonFsmStageName": CfprApSwEthLanFlowMonFsmStageName,
       "CfprApSwEthLanFlowMonFsmTaskItem": CfprApSwEthLanFlowMonFsmTaskItem,
       "CfprApSwEthLanFlowMonitorTransport": CfprApSwEthLanFlowMonitorTransport,
       "CfprApSwEthLanFlowMonitorType": CfprApSwEthLanFlowMonitorType,
       "CfprApSwEthLanFlowRecordDefTransport": CfprApSwEthLanFlowRecordDefTransport,
       "CfprApSwEthLanFlowRecordDefType": CfprApSwEthLanFlowRecordDefType,
       "CfprApSwEthLanMonTransport": CfprApSwEthLanMonTransport,
       "CfprApSwEthLanPcTransport": CfprApSwEthLanPcTransport,
       "CfprApSwEthMonTransport": CfprApSwEthMonTransport,
       "CfprApSwEthMonType": CfprApSwEthMonType,
       "CfprApSwEthMonDestEpTransport": CfprApSwEthMonDestEpTransport,
       "CfprApSwEthMonFsmCurrentFsm": CfprApSwEthMonFsmCurrentFsm,
       "CfprApSwEthMonFsmStageName": CfprApSwEthMonFsmStageName,
       "CfprApSwEthMonFsmTaskItem": CfprApSwEthMonFsmTaskItem,
       "CfprApSwEthMonSrcEpTransport": CfprApSwEthMonSrcEpTransport,
       "CfprApSwEthTargetEpAdminState": CfprApSwEthTargetEpAdminState,
       "CfprApSwEthTargetEpTransport": CfprApSwEthTargetEpTransport,
       "CfprApSwExtUtilityFsmCurrentFsm": CfprApSwExtUtilityFsmCurrentFsm,
       "CfprApSwExtUtilityFsmStageName": CfprApSwExtUtilityFsmStageName,
       "CfprApSwExtUtilityFsmTaskItem": CfprApSwExtUtilityFsmTaskItem,
       "CfprApSwFabricRole": CfprApSwFabricRole,
       "CfprApSwFabricZoneNsAllocStatus": CfprApSwFabricZoneNsAllocStatus,
       "CfprApSwFcEstcEpTransport": CfprApSwFcEstcEpTransport,
       "CfprApSwFcMonTransport": CfprApSwFcMonTransport,
       "CfprApSwFcMonType": CfprApSwFcMonType,
       "CfprApSwFcMonDestEpTransport": CfprApSwFcMonDestEpTransport,
       "CfprApSwFcMonFsmCurrentFsm": CfprApSwFcMonFsmCurrentFsm,
       "CfprApSwFcMonFsmStageName": CfprApSwFcMonFsmStageName,
       "CfprApSwFcMonFsmTaskItem": CfprApSwFcMonFsmTaskItem,
       "CfprApSwFcMonSrcEpTransport": CfprApSwFcMonSrcEpTransport,
       "CfprApSwFcSanBorderTransport": CfprApSwFcSanBorderTransport,
       "CfprApSwFcSanBorderUplinkTrunking": CfprApSwFcSanBorderUplinkTrunking,
       "CfprApSwFcSanBorderFsmCurrentFsm": CfprApSwFcSanBorderFsmCurrentFsm,
       "CfprApSwFcSanBorderFsmStageName": CfprApSwFcSanBorderFsmStageName,
       "CfprApSwFcSanBorderFsmTaskItem": CfprApSwFcSanBorderFsmTaskItem,
       "CfprApSwFcSanEpTransport": CfprApSwFcSanEpTransport,
       "CfprApSwFcSanMonTransport": CfprApSwFcSanMonTransport,
       "CfprApSwFcSanPcTransport": CfprApSwFcSanPcTransport,
       "CfprApSwFcServerZoneGroupLc": CfprApSwFcServerZoneGroupLc,
       "CfprApSwFcZoneLc": CfprApSwFcZoneLc,
       "CfprApSwFcZoneMemberLc": CfprApSwFcZoneMemberLc,
       "CfprApSwFcZoneSetLc": CfprApSwFcZoneSetLc,
       "CfprApSwFcoeEstcEpTransport": CfprApSwFcoeEstcEpTransport,
       "CfprApSwFcoeSanEpTransport": CfprApSwFcoeSanEpTransport,
       "CfprApSwFcoeSanEpUdldAdminState": CfprApSwFcoeSanEpUdldAdminState,
       "CfprApSwFcoeSanEpUdldMode": CfprApSwFcoeSanEpUdldMode,
       "CfprApSwFcoeSanPcTransport": CfprApSwFcoeSanPcTransport,
       "CfprApSwFlowMonitorAdminState": CfprApSwFlowMonitorAdminState,
       "CfprApSwLanBorderType": CfprApSwLanBorderType,
       "CfprApSwLanEpIfRole": CfprApSwLanEpIfRole,
       "CfprApSwLanEpType": CfprApSwLanEpType,
       "CfprApSwLanMonType": CfprApSwLanMonType,
       "CfprApSwLanPcIfRole": CfprApSwLanPcIfRole,
       "CfprApSwLanPcType": CfprApSwLanPcType,
       "CfprApSwMonAdminState": CfprApSwMonAdminState,
       "CfprApSwMonDomainLocale": CfprApSwMonDomainLocale,
       "CfprApSwMonLifeCycle": CfprApSwMonLifeCycle,
       "CfprApSwMonSrcEpLocale": CfprApSwMonSrcEpLocale,
       "CfprApSwNFConfigStatus": CfprApSwNFConfigStatus,
       "CfprApSwNetflowExporterProtocol": CfprApSwNetflowExporterProtocol,
       "CfprApSwNetflowMonSessionProtocol": CfprApSwNetflowMonSessionProtocol,
       "CfprApSwNetflowMonitorProtocol": CfprApSwNetflowMonitorProtocol,
       "CfprApSwNetflowRecordDefProtocol": CfprApSwNetflowRecordDefProtocol,
       "CfprApSwPIoEpIfType": CfprApSwPIoEpIfType,
       "CfprApSwPIoEpLc": CfprApSwPIoEpLc,
       "CfprApSwPeerStatus": CfprApSwPeerStatus,
       "CfprApSwPhysFsmCurrentFsm": CfprApSwPhysFsmCurrentFsm,
       "CfprApSwPhysFsmStageName": CfprApSwPhysFsmStageName,
       "CfprApSwPhysFsmTaskItem": CfprApSwPhysFsmTaskItem,
       "CfprApSwPktCaptureLifeCycle": CfprApSwPktCaptureLifeCycle,
       "CfprApSwPortBreakoutPortId": CfprApSwPortBreakoutPortId,
       "CfprApSwPortBreakoutSlotId": CfprApSwPortBreakoutSlotId,
       "CfprApSwSanBorderType": CfprApSwSanBorderType,
       "CfprApSwSanEpIfRole": CfprApSwSanEpIfRole,
       "CfprApSwSanEpType": CfprApSwSanEpType,
       "CfprApSwSanMonType": CfprApSwSanMonType,
       "CfprApSwSanPcIfRole": CfprApSwSanPcIfRole,
       "CfprApSwSanPcType": CfprApSwSanPcType,
       "CfprApSwSspEthLanMonTransport": CfprApSwSspEthLanMonTransport,
       "CfprApSwSspEthMonTransport": CfprApSwSspEthMonTransport,
       "CfprApSwSspEthMonType": CfprApSwSspEthMonType,
       "CfprApSwSspEthMonFsmCurrentFsm": CfprApSwSspEthMonFsmCurrentFsm,
       "CfprApSwSspEthMonFsmStageName": CfprApSwSspEthMonFsmStageName,
       "CfprApSwSspEthMonFsmTaskItem": CfprApSwSspEthMonFsmTaskItem,
       "CfprApSwSspEthMonSrcPhyEpFsmCurrentFsm": CfprApSwSspEthMonSrcPhyEpFsmCurrentFsm,
       "CfprApSwSspEthMonSrcPhyEpFsmStageName": CfprApSwSspEthMonSrcPhyEpFsmStageName,
       "CfprApSwSspEthMonSrcPhyEpFsmTaskItem": CfprApSwSspEthMonSrcPhyEpFsmTaskItem,
       "CfprApSwSspLanMonType": CfprApSwSspLanMonType,
       "CfprApSwSspMonAdminState": CfprApSwSspMonAdminState,
       "CfprApSwSspMonDelPcap": CfprApSwSspMonDelPcap,
       "CfprApSwSspMonDomainLocale": CfprApSwSspMonDomainLocale,
       "CfprApSwSubGroupAggrPortId": CfprApSwSubGroupAggrPortId,
       "CfprApSwSubGroupSlotId": CfprApSwSubGroupSlotId,
       "CfprApSwSystemStatsThresholded": CfprApSwSystemStatsThresholded,
       "CfprApSwSystemStatsHistThresholded": CfprApSwSystemStatsHistThresholded,
       "CfprApSwTargetEpType": CfprApSwTargetEpType,
       "CfprApSwUlanPurpose": CfprApSwUlanPurpose,
       "CfprApSwUtilityDomainLocale": CfprApSwUtilityDomainLocale,
       "CfprApSwUtilityDomainType": CfprApSwUtilityDomainType,
       "CfprApSwUtilityDomainFsmCurrentFsm": CfprApSwUtilityDomainFsmCurrentFsm,
       "CfprApSwUtilityDomainFsmStageName": CfprApSwUtilityDomainFsmStageName,
       "CfprApSwUtilityDomainFsmTaskItem": CfprApSwUtilityDomainFsmTaskItem,
       "CfprApSwVlanLc": CfprApSwVlanLc,
       "CfprApSwVlanCompType": CfprApSwVlanCompType,
       "CfprApSwVlanConfigStatusType": CfprApSwVlanConfigStatusType,
       "CfprApSwVlanGroupType": CfprApSwVlanGroupType,
       "CfprApSwVlanPortNsAllocStatus": CfprApSwVlanPortNsAllocStatus,
       "CfprApSysdebugAutoCoreFileExportTargetProto": CfprApSysdebugAutoCoreFileExportTargetProto,
       "CfprApSysdebugAutoCoreFileExportTargetFsmCurrentFsm": CfprApSysdebugAutoCoreFileExportTargetFsmCurrentFsm,
       "CfprApSysdebugAutoCoreFileExportTargetFsmStageName": CfprApSysdebugAutoCoreFileExportTargetFsmStageName,
       "CfprApSysdebugAutoCoreFileExportTargetFsmTaskItem": CfprApSysdebugAutoCoreFileExportTargetFsmTaskItem,
       "CfprApSysdebugBackupBehaviorInterval": CfprApSysdebugBackupBehaviorInterval,
       "CfprApSysdebugBackupBehaviorProto": CfprApSysdebugBackupBehaviorProto,
       "CfprApSysdebugBackupFormat": CfprApSysdebugBackupFormat,
       "CfprApSysdebugCoreExportStatus": CfprApSysdebugCoreExportStatus,
       "CfprApSysdebugCoreFileAdminState": CfprApSysdebugCoreFileAdminState,
       "CfprApSysdebugCoreFileOperState": CfprApSysdebugCoreFileOperState,
       "CfprApSysdebugCoreFsmCurrentFsm": CfprApSysdebugCoreFsmCurrentFsm,
       "CfprApSysdebugCoreFsmStageName": CfprApSysdebugCoreFsmStageName,
       "CfprApSysdebugCoreFsmTaskItem": CfprApSysdebugCoreFsmTaskItem,
       "CfprApSysdebugEpLogAdminState": CfprApSysdebugEpLogAdminState,
       "CfprApSysdebugEpLogBackupAction": CfprApSysdebugEpLogBackupAction,
       "CfprApSysdebugEpLogCapacity": CfprApSysdebugEpLogCapacity,
       "CfprApSysdebugEpLogType": CfprApSysdebugEpLogType,
       "CfprApSysdebugExportStatus": CfprApSysdebugExportStatus,
       "CfprApSysdebugLogControlDomainEnum": CfprApSysdebugLogControlDomainEnum,
       "CfprApSysdebugLogControlEpFsmCurrentFsm": CfprApSysdebugLogControlEpFsmCurrentFsm,
       "CfprApSysdebugLogControlEpFsmStageName": CfprApSysdebugLogControlEpFsmStageName,
       "CfprApSysdebugLogControlEpFsmTaskItem": CfprApSysdebugLogControlEpFsmTaskItem,
       "CfprApSysdebugLogControlLevel": CfprApSysdebugLogControlLevel,
       "CfprApSysdebugLogExportPolicyProto": CfprApSysdebugLogExportPolicyProto,
       "CfprApSysdebugLogExportPolicyFsmCurrentFsm": CfprApSysdebugLogExportPolicyFsmCurrentFsm,
       "CfprApSysdebugLogExportPolicyFsmStageName": CfprApSysdebugLogExportPolicyFsmStageName,
       "CfprApSysdebugLogExportPolicyFsmTaskItem": CfprApSysdebugLogExportPolicyFsmTaskItem,
       "CfprApSysdebugMEpLogOperState": CfprApSysdebugMEpLogOperState,
       "CfprApSysdebugManualCoreFileExportTargetAdminState": CfprApSysdebugManualCoreFileExportTargetAdminState,
       "CfprApSysdebugManualCoreFileExportTargetProto": CfprApSysdebugManualCoreFileExportTargetProto,
       "CfprApSysdebugManualCoreFileExportTargetFsmCurrentFsm": CfprApSysdebugManualCoreFileExportTargetFsmCurrentFsm,
       "CfprApSysdebugManualCoreFileExportTargetFsmStageName": CfprApSysdebugManualCoreFileExportTargetFsmStageName,
       "CfprApSysdebugManualCoreFileExportTargetFsmTaskItem": CfprApSysdebugManualCoreFileExportTargetFsmTaskItem,
       "CfprApSysdebugTSCmdOptMajorType": CfprApSysdebugTSCmdOptMajorType,
       "CfprApSysdebugTechSupportAdminState": CfprApSysdebugTechSupportAdminState,
       "CfprApSysdebugTechSupportFsmCurrentFsm": CfprApSysdebugTechSupportFsmCurrentFsm,
       "CfprApSysdebugTechSupportFsmStageName": CfprApSysdebugTechSupportFsmStageName,
       "CfprApSysdebugTechSupportFsmTaskItem": CfprApSysdebugTechSupportFsmTaskItem,
       "CfprApSysdebugTechSupportOperState": CfprApSysdebugTechSupportOperState,
       "CfprApSysfileExporterPostAction": CfprApSysfileExporterPostAction,
       "CfprApSysfileMutationAction": CfprApSysfileMutationAction,
       "CfprApSysfileMutationFsmCurrentFsm": CfprApSysfileMutationFsmCurrentFsm,
       "CfprApSysfileMutationFsmStageName": CfprApSysfileMutationFsmStageName,
       "CfprApSysfileMutationFsmTaskItem": CfprApSysfileMutationFsmTaskItem,
       "CfprApTopInfoPolicyState": CfprApTopInfoPolicyState,
       "CfprApTopMode": CfprApTopMode,
       "CfprApTrigAckOperState": CfprApTrigAckOperState,
       "CfprApTrigAckPrevOperState": CfprApTrigAckPrevOperState,
       "CfprApTrigAckChangeDetails": CfprApTrigAckChangeDetails,
       "CfprApTrigAckChanges": CfprApTrigAckChanges,
       "CfprApTrigAckDisr": CfprApTrigAckDisr,
       "CfprApTrigAckMode": CfprApTrigAckMode,
       "CfprApTrigAdminState": CfprApTrigAdminState,
       "CfprApTrigDay": CfprApTrigDay,
       "CfprApTrigOperState": CfprApTrigOperState,
       "CfprApTrigTokenOperState": CfprApTrigTokenOperState,
       "CfprApTrigTrigOperState": CfprApTrigTrigOperState,
       "CfprApTrigTriggeredState": CfprApTrigTriggeredState,
       "CfprApUuidpoolPoolAssignmentOrder": CfprApUuidpoolPoolAssignmentOrder,
       "CfprApVmAdaptorOwner": CfprApVmAdaptorOwner,
       "CfprApVmComputeEpClInstType": CfprApVmComputeEpClInstType,
       "CfprApVmHbaType": CfprApVmHbaType,
       "CfprApVmHvClInstType": CfprApVmHvClInstType,
       "CfprApVmHvType": CfprApVmHvType,
       "CfprApVmInstType": CfprApVmInstType,
       "CfprApVmMgmtPlane": CfprApVmMgmtPlane,
       "CfprApVmNicType": CfprApVmNicType,
       "CfprApVmOsHvVendor": CfprApVmOsHvVendor,
       "CfprApVmStatus": CfprApVmStatus,
       "CfprApVmSwitchAdminState": CfprApVmSwitchAdminState,
       "CfprApVmSwitchVendor": CfprApVmSwitchVendor,
       "CfprApVnicAEtherIfType": CfprApVnicAEtherIfType,
       "CfprApVnicAFcIfType": CfprApVnicAFcIfType,
       "CfprApVnicAIpcIfType": CfprApVnicAIpcIfType,
       "CfprApVnicAScsiIfType": CfprApVnicAScsiIfType,
       "CfprApVnicAppRole": CfprApVnicAppRole,
       "CfprApVnicConfigIssues": CfprApVnicConfigIssues,
       "CfprApVnicConnectionOwner": CfprApVnicConnectionOwner,
       "CfprApVnicConnectionType": CfprApVnicConnectionType,
       "CfprApVnicDefBehType": CfprApVnicDefBehType,
       "CfprApVnicDefaultAction": CfprApVnicDefaultAction,
       "CfprApVnicDynamicConReqProtection": CfprApVnicDynamicConReqProtection,
       "CfprApVnicEtherType": CfprApVnicEtherType,
       "CfprApVnicEtherBaseSwitchId": CfprApVnicEtherBaseSwitchId,
       "CfprApVnicExternalMgmtIPMode": CfprApVnicExternalMgmtIPMode,
       "CfprApVnicFcBasePersBind": CfprApVnicFcBasePersBind,
       "CfprApVnicFcBaseType": CfprApVnicFcBaseType,
       "CfprApVnicFcNodeOwner": CfprApVnicFcNodeOwner,
       "CfprApVnicHostNwIOPerfPref": CfprApVnicHostNwIOPerfPref,
       "CfprApVnicIPv4DnsPref": CfprApVnicIPv4DnsPref,
       "CfprApVnicIScsiConfigIssues": CfprApVnicIScsiConfigIssues,
       "CfprApVnicIScsiIfDefType": CfprApVnicIScsiIfDefType,
       "CfprApVnicIScsiNodeOwner": CfprApVnicIScsiNodeOwner,
       "CfprApVnicIfOperState": CfprApVnicIfOperState,
       "CfprApVnicInstantiation": CfprApVnicInstantiation,
       "CfprApVnicIpcType": CfprApVnicIpcType,
       "CfprApVnicL2IfSwitchId": CfprApVnicL2IfSwitchId,
       "CfprApVnicLanConnTemplSwitchId": CfprApVnicLanConnTemplSwitchId,
       "CfprApVnicLunId": CfprApVnicLunId,
       "CfprApVnicMezzMappingScheme": CfprApVnicMezzMappingScheme,
       "CfprApVnicOrderScheme": CfprApVnicOrderScheme,
       "CfprApVnicPlacement": CfprApVnicPlacement,
       "CfprApVnicProfileConfigQualifier": CfprApVnicProfileConfigQualifier,
       "CfprApVnicSanConnTemplTarget": CfprApVnicSanConnTemplTarget,
       "CfprApVnicScsiType": CfprApVnicScsiType,
       "CfprApVnicTemplateTarget": CfprApVnicTemplateTarget,
       "CfprApVnicTemplateType": CfprApVnicTemplateType,
       "CfprApVnicVhbaBehPolicyType": CfprApVnicVhbaBehPolicyType,
       "CfprApVnicVirtualizationPreferenceType": CfprApVnicVirtualizationPreferenceType,
       "CfprApVnicVnicBootDev": CfprApVnicVnicBootDev,
       "CfprApVnicVnicOperHostPort": CfprApVnicVnicOperHostPort,
       "CfprApVnicVnicBehPolicyType": CfprApVnicVnicBehPolicyType,
       "CfprApVnicPortProfileType": CfprApVnicPortProfileType,
       "cfprApTextualConventionsObjects": cfprApTextualConventionsObjects}
)
