# SNMP MIB module (ZYXEL-IES5000-MIB) expressed in pysnmp data model.
#
# This Python module is designed to be imported and executed by the
# pysnmp library.
#
# See https://www.pysnmp.com/pysnmp for further information.
#
# Notes
# -----
# ASN.1 source file:///Users/rob/MIBs/zyxel_890/ZYXEL-IES5000-MIB.mib
# Produced by pysmi-1.6.1 at Sun Jun  8 10:07:44 2025
# On host e-ws1-mac.muc.elastiflow.net platform Darwin version 24.3.0 by user rob
# Using Python version 3.13.3 (main, Apr  8 2025, 13:54:08) [Clang 16.0.0 (clang-1600.0.26.6)]

if 'mibBuilder' not in globals():
    import sys

    sys.stderr.write(__doc__)
    sys.exit(1)

# Import base ASN.1 objects even if this MIB does not use it

(Integer,
 OctetString,
 ObjectIdentifier) = mibBuilder.importSymbols(
    "ASN1",
    "Integer",
    "OctetString",
    "ObjectIdentifier")

(NamedValues,) = mibBuilder.importSymbols(
    "ASN1-ENUMERATION",
    "NamedValues")
(ConstraintsIntersection,
 ConstraintsUnion,
 SingleValueConstraint,
 ValueRangeConstraint,
 ValueSizeConstraint) = mibBuilder.importSymbols(
    "ASN1-REFINEMENT",
    "ConstraintsIntersection",
    "ConstraintsUnion",
    "SingleValueConstraint",
    "ValueRangeConstraint",
    "ValueSizeConstraint")

# Import SMI symbols from the MIBs this MIB depends on

(BridgeId,
 MacAddress,
 Timeout,
 dot1dBasePort) = mibBuilder.importSymbols(
    "BRIDGE-MIB",
    "BridgeId",
    "MacAddress",
    "Timeout",
    "dot1dBasePort")

(dot1agCfmMaIndex,
 dot1agCfmMdIndex,
 dot1agCfmMdMdLevel,
 dot1agCfmMepIdentifier,
 dot1agCfmVlanPrimaryVid) = mibBuilder.importSymbols(
    "IEEE8021-CFM-MIB",
    "dot1agCfmMaIndex",
    "dot1agCfmMdIndex",
    "dot1agCfmMdMdLevel",
    "dot1agCfmMepIdentifier",
    "dot1agCfmVlanPrimaryVid")

(InterfaceIndex,
 ifIndex) = mibBuilder.importSymbols(
    "IF-MIB",
    "InterfaceIndex",
    "ifIndex")

(InetAddress,
 InetAddressType) = mibBuilder.importSymbols(
    "INET-ADDRESS-MIB",
    "InetAddress",
    "InetAddressType")

(EnabledStatus,
 dot1dTrafficClass) = mibBuilder.importSymbols(
    "P-BRIDGE-MIB",
    "EnabledStatus",
    "dot1dTrafficClass")

(PortList,
 VlanIndex,
 dot1qVlanIndex) = mibBuilder.importSymbols(
    "Q-BRIDGE-MIB",
    "PortList",
    "VlanIndex",
    "dot1qVlanIndex")

(ModuleCompliance,
 NotificationGroup) = mibBuilder.importSymbols(
    "SNMPv2-CONF",
    "ModuleCompliance",
    "NotificationGroup")

(Bits,
 Counter32,
 Counter64,
 Gauge32,
 Integer32,
 IpAddress,
 ModuleIdentity,
 MibIdentifier,
 NotificationType,
 ObjectIdentity,
 MibScalar,
 MibTable,
 MibTableRow,
 MibTableColumn,
 TimeTicks,
 Unsigned32,
 enterprises,
 iso) = mibBuilder.importSymbols(
    "SNMPv2-SMI",
    "Bits",
    "Counter32",
    "Counter64",
    "Gauge32",
    "Integer32",
    "IpAddress",
    "ModuleIdentity",
    "MibIdentifier",
    "NotificationType",
    "ObjectIdentity",
    "MibScalar",
    "MibTable",
    "MibTableRow",
    "MibTableColumn",
    "TimeTicks",
    "Unsigned32",
    "enterprises",
    "iso")

(DisplayString,
 PhysAddress,
 RowStatus,
 TextualConvention) = mibBuilder.importSymbols(
    "SNMPv2-TC",
    "DisplayString",
    "PhysAddress",
    "RowStatus",
    "TextualConvention")

(vdslChanCurrTxRate,
 vdslLineAlarmConfProfileName,
 vdslLineConfProfileName,
 vdslPhysSide) = mibBuilder.importSymbols(
    "VDSL-LINE-MIB",
    "vdslChanCurrTxRate",
    "vdslLineAlarmConfProfileName",
    "vdslLineConfProfileName",
    "vdslPhysSide")

(xdsl2ChAlarmConfProfileName,
 xdsl2ChConfProfProfileName,
 xdsl2LAlarmConfTempTemplateName,
 xdsl2LConfProfProfileName,
 xdsl2LConfTempTemplateName,
 xdsl2LineAlarmConfProfileName,
 xdsl2LineBand,
 xdsl2PMChHist15MInterval,
 xdsl2PMChHist15MUnit,
 xdsl2PMChHist1DInterval,
 xdsl2PMChHist1DUnit,
 xdsl2PMLCurrUnit,
 xdsl2PMLHist15MInterval,
 xdsl2PMLHist15MUnit,
 xdsl2PMLHist1DInterval,
 xdsl2PMLHist1DUnit,
 xdsl2SCStatusBand,
 xdsl2SCStatusDirection) = mibBuilder.importSymbols(
    "VDSL2-LINE-MIB",
    "xdsl2ChAlarmConfProfileName",
    "xdsl2ChConfProfProfileName",
    "xdsl2LAlarmConfTempTemplateName",
    "xdsl2LConfProfProfileName",
    "xdsl2LConfTempTemplateName",
    "xdsl2LineAlarmConfProfileName",
    "xdsl2LineBand",
    "xdsl2PMChHist15MInterval",
    "xdsl2PMChHist15MUnit",
    "xdsl2PMChHist1DInterval",
    "xdsl2PMChHist1DUnit",
    "xdsl2PMLCurrUnit",
    "xdsl2PMLHist15MInterval",
    "xdsl2PMLHist15MUnit",
    "xdsl2PMLHist1DInterval",
    "xdsl2PMLHist1DUnit",
    "xdsl2SCStatusBand",
    "xdsl2SCStatusDirection")


# MODULE-IDENTITY

ies5000 = ModuleIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5)
)


# Types definitions


# TEXTUAL-CONVENTIONS



class Xdsl2ConfigRtxMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("forbidden", 0),
          ("preferred", 1),
          ("forced", 2),
          ("test", 3))
    )



class Xdsl2StatusActualRaMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("fixedRateMode", 1),
          ("raInit", 2),
          ("dynamicRa", 3),
          ("sosEnabled", 4))
    )



class Xdsl2StatusRtxMode(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("rtxInUse", 1),
          ("rtxForbidden", 2),
          ("rtxNotSupportedXtuC", 3),
          ("rtxNotSupportedXtuR", 4),
          ("rtxNotSupportedBoth", 5))
    )



class Unsigned64(TextualConvention, Counter64):
    status = "current"


# MIB Managed Objects in the order of their OIDs

_Zyxel_ObjectIdentity = ObjectIdentity
zyxel = _Zyxel_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890)
)
_Products_ObjectIdentity = ObjectIdentity
products = _Products_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1)
)
_AccessSwitch_ObjectIdentity = ObjectIdentity
accessSwitch = _AccessSwitch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5)
)
_IesSeries_ObjectIdentity = ObjectIdentity
iesSeries = _IesSeries_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13)
)
_Acl_ObjectIdentity = ObjectIdentity
acl = _Acl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1)
)
_Dhcp_ObjectIdentity = ObjectIdentity
dhcp = _Dhcp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 1)
)


class _DhcpRelayEnable_Type(Integer32):
    """Custom type dhcpRelayEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("both", 2),
          ("disable", 3))
    )


_DhcpRelayEnable_Type.__name__ = "Integer32"
_DhcpRelayEnable_Object = MibScalar
dhcpRelayEnable = _DhcpRelayEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 1, 1),
    _DhcpRelayEnable_Type()
)
dhcpRelayEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpRelayEnable.setStatus("current")
_DhcpRelay82Table_Object = MibTable
dhcpRelay82Table = _DhcpRelay82Table_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 1, 2)
)
if mibBuilder.loadTexts:
    dhcpRelay82Table.setStatus("current")
_DhcpRelay82Entry_Object = MibTableRow
dhcpRelay82Entry = _DhcpRelay82Entry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 1, 2, 1)
)
dhcpRelay82Entry.setIndexNames(
    (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"),
)
if mibBuilder.loadTexts:
    dhcpRelay82Entry.setStatus("current")
_DhcpRelay82PrimaryServer_Type = IpAddress
_DhcpRelay82PrimaryServer_Object = MibTableColumn
dhcpRelay82PrimaryServer = _DhcpRelay82PrimaryServer_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 1, 2, 1, 1),
    _DhcpRelay82PrimaryServer_Type()
)
dhcpRelay82PrimaryServer.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpRelay82PrimaryServer.setStatus("current")
_DhcpRelay82SecondaryServer_Type = IpAddress
_DhcpRelay82SecondaryServer_Object = MibTableColumn
dhcpRelay82SecondaryServer = _DhcpRelay82SecondaryServer_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 1, 2, 1, 2),
    _DhcpRelay82SecondaryServer_Type()
)
dhcpRelay82SecondaryServer.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpRelay82SecondaryServer.setStatus("current")


class _DhcpRelay82ActiveServer_Type(Integer32):
    """Custom type dhcpRelay82ActiveServer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("primary", 1),
          ("secondary", 2))
    )


_DhcpRelay82ActiveServer_Type.__name__ = "Integer32"
_DhcpRelay82ActiveServer_Object = MibTableColumn
dhcpRelay82ActiveServer = _DhcpRelay82ActiveServer_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 1, 2, 1, 3),
    _DhcpRelay82ActiveServer_Type()
)
dhcpRelay82ActiveServer.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpRelay82ActiveServer.setStatus("current")


class _DhcpRelay82Enable_Type(Integer32):
    """Custom type dhcpRelay82Enable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("relayEnable-option82Enable", 1),
          ("relayDisable-option82Enable", 2),
          ("disable", 3))
    )


_DhcpRelay82Enable_Type.__name__ = "Integer32"
_DhcpRelay82Enable_Object = MibTableColumn
dhcpRelay82Enable = _DhcpRelay82Enable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 1, 2, 1, 4),
    _DhcpRelay82Enable_Type()
)
dhcpRelay82Enable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpRelay82Enable.setStatus("current")


class _DhcpRelay82Info_Type(DisplayString):
    """Custom type dhcpRelay82Info based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 23),
    )


_DhcpRelay82Info_Type.__name__ = "DisplayString"
_DhcpRelay82Info_Object = MibTableColumn
dhcpRelay82Info = _DhcpRelay82Info_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 1, 2, 1, 5),
    _DhcpRelay82Info_Type()
)
dhcpRelay82Info.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpRelay82Info.setStatus("current")


class _DhcpRelay82RelayMode_Type(Integer32):
    """Custom type dhcpRelay82RelayMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("both", 2))
    )


_DhcpRelay82RelayMode_Type.__name__ = "Integer32"
_DhcpRelay82RelayMode_Object = MibTableColumn
dhcpRelay82RelayMode = _DhcpRelay82RelayMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 1, 2, 1, 6),
    _DhcpRelay82RelayMode_Type()
)
dhcpRelay82RelayMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpRelay82RelayMode.setStatus("current")
_DhcpRelay82RowStatus_Type = RowStatus
_DhcpRelay82RowStatus_Object = MibTableColumn
dhcpRelay82RowStatus = _DhcpRelay82RowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 1, 2, 1, 7),
    _DhcpRelay82RowStatus_Type()
)
dhcpRelay82RowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpRelay82RowStatus.setStatus("current")


class _DhcpRelay82Suboption2Enable_Type(Integer32):
    """Custom type dhcpRelay82Suboption2Enable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_DhcpRelay82Suboption2Enable_Type.__name__ = "Integer32"
_DhcpRelay82Suboption2Enable_Object = MibTableColumn
dhcpRelay82Suboption2Enable = _DhcpRelay82Suboption2Enable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 1, 2, 1, 8),
    _DhcpRelay82Suboption2Enable_Type()
)
dhcpRelay82Suboption2Enable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpRelay82Suboption2Enable.setStatus("current")
_DhcpRelay82Suboption2Info_Type = DisplayString
_DhcpRelay82Suboption2Info_Object = MibTableColumn
dhcpRelay82Suboption2Info = _DhcpRelay82Suboption2Info_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 1, 2, 1, 9),
    _DhcpRelay82Suboption2Info_Type()
)
dhcpRelay82Suboption2Info.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpRelay82Suboption2Info.setStatus("current")


class _DhcpRelay82Option82Mode_Type(Integer32):
    """Custom type dhcpRelay82Option82Mode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("private", 1),
          ("tr101", 2),
          ("tr101PlusVlanInfo", 3))
    )


_DhcpRelay82Option82Mode_Type.__name__ = "Integer32"
_DhcpRelay82Option82Mode_Object = MibTableColumn
dhcpRelay82Option82Mode = _DhcpRelay82Option82Mode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 1, 2, 1, 10),
    _DhcpRelay82Option82Mode_Type()
)
dhcpRelay82Option82Mode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpRelay82Option82Mode.setStatus("current")


class _DhcpRelayInfo_Type(DisplayString):
    """Custom type dhcpRelayInfo based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 23),
    )


_DhcpRelayInfo_Type.__name__ = "DisplayString"
_DhcpRelayInfo_Object = MibScalar
dhcpRelayInfo = _DhcpRelayInfo_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 1, 3),
    _DhcpRelayInfo_Type()
)
dhcpRelayInfo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpRelayInfo.setStatus("current")
_MaxNumOfDhcpRelay82Conf_Type = Integer32
_MaxNumOfDhcpRelay82Conf_Object = MibScalar
maxNumOfDhcpRelay82Conf = _MaxNumOfDhcpRelay82Conf_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 1, 4),
    _MaxNumOfDhcpRelay82Conf_Type()
)
maxNumOfDhcpRelay82Conf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfDhcpRelay82Conf.setStatus("current")
_DhcpRelay82Delimiter_Type = Integer32
_DhcpRelay82Delimiter_Object = MibScalar
dhcpRelay82Delimiter = _DhcpRelay82Delimiter_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 1, 5),
    _DhcpRelay82Delimiter_Type()
)
dhcpRelay82Delimiter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpRelay82Delimiter.setStatus("current")


class _DhcpRelayOption82CheckEnable_Type(Integer32):
    """Custom type dhcpRelayOption82CheckEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_DhcpRelayOption82CheckEnable_Type.__name__ = "Integer32"
_DhcpRelayOption82CheckEnable_Object = MibScalar
dhcpRelayOption82CheckEnable = _DhcpRelayOption82CheckEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 1, 6),
    _DhcpRelayOption82CheckEnable_Type()
)
dhcpRelayOption82CheckEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpRelayOption82CheckEnable.setStatus("current")
_Dot1x_ObjectIdentity = ObjectIdentity
dot1x = _Dot1x_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 2)
)


class _Dot1xEnable_Type(Integer32):
    """Custom type dot1xEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_Dot1xEnable_Type.__name__ = "Integer32"
_Dot1xEnable_Object = MibScalar
dot1xEnable = _Dot1xEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 2, 1),
    _Dot1xEnable_Type()
)
dot1xEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dot1xEnable.setStatus("current")
_RadiusServerTable_Object = MibTable
radiusServerTable = _RadiusServerTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 2, 2)
)
if mibBuilder.loadTexts:
    radiusServerTable.setStatus("current")
_RadiusServerEntry_Object = MibTableRow
radiusServerEntry = _RadiusServerEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 2, 2, 1)
)
radiusServerEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "radiusServerIndex"),
)
if mibBuilder.loadTexts:
    radiusServerEntry.setStatus("current")
_RadiusServerIndex_Type = Integer32
_RadiusServerIndex_Object = MibTableColumn
radiusServerIndex = _RadiusServerIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 2, 2, 1, 1),
    _RadiusServerIndex_Type()
)
radiusServerIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radiusServerIndex.setStatus("current")
_RadiusServerIp_Type = IpAddress
_RadiusServerIp_Object = MibTableColumn
radiusServerIp = _RadiusServerIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 2, 2, 1, 2),
    _RadiusServerIp_Type()
)
radiusServerIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusServerIp.setStatus("current")
_RadiusServerPort_Type = Integer32
_RadiusServerPort_Object = MibTableColumn
radiusServerPort = _RadiusServerPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 2, 2, 1, 3),
    _RadiusServerPort_Type()
)
radiusServerPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusServerPort.setStatus("current")


class _RadiusServerSecret_Type(DisplayString):
    """Custom type radiusServerSecret based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_RadiusServerSecret_Type.__name__ = "DisplayString"
_RadiusServerSecret_Object = MibTableColumn
radiusServerSecret = _RadiusServerSecret_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 2, 2, 1, 4),
    _RadiusServerSecret_Type()
)
radiusServerSecret.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusServerSecret.setStatus("current")
_Dot1xPortTable_Object = MibTable
dot1xPortTable = _Dot1xPortTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 2, 3)
)
if mibBuilder.loadTexts:
    dot1xPortTable.setStatus("current")
_Dot1xPortEntry_Object = MibTableRow
dot1xPortEntry = _Dot1xPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 2, 3, 1)
)
dot1xPortEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    dot1xPortEntry.setStatus("current")


class _Dot1xPortEnable_Type(Integer32):
    """Custom type dot1xPortEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_Dot1xPortEnable_Type.__name__ = "Integer32"
_Dot1xPortEnable_Object = MibTableColumn
dot1xPortEnable = _Dot1xPortEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 2, 3, 1, 1),
    _Dot1xPortEnable_Type()
)
dot1xPortEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dot1xPortEnable.setStatus("current")


class _Dot1xPortControl_Type(Integer32):
    """Custom type dot1xPortControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("forceAuth", 2),
          ("forceUnAuth", 3))
    )


_Dot1xPortControl_Type.__name__ = "Integer32"
_Dot1xPortControl_Object = MibTableColumn
dot1xPortControl = _Dot1xPortControl_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 2, 3, 1, 2),
    _Dot1xPortControl_Type()
)
dot1xPortControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dot1xPortControl.setStatus("current")


class _Dot1xPortReAuthEnable_Type(Integer32):
    """Custom type dot1xPortReAuthEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_Dot1xPortReAuthEnable_Type.__name__ = "Integer32"
_Dot1xPortReAuthEnable_Object = MibTableColumn
dot1xPortReAuthEnable = _Dot1xPortReAuthEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 2, 3, 1, 3),
    _Dot1xPortReAuthEnable_Type()
)
dot1xPortReAuthEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dot1xPortReAuthEnable.setStatus("current")


class _Dot1xPortReAuthPeriod_Type(Integer32):
    """Custom type dot1xPortReAuthPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(60, 65535),
    )


_Dot1xPortReAuthPeriod_Type.__name__ = "Integer32"
_Dot1xPortReAuthPeriod_Object = MibTableColumn
dot1xPortReAuthPeriod = _Dot1xPortReAuthPeriod_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 2, 3, 1, 4),
    _Dot1xPortReAuthPeriod_Type()
)
dot1xPortReAuthPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dot1xPortReAuthPeriod.setStatus("current")
if mibBuilder.loadTexts:
    dot1xPortReAuthPeriod.setUnits("second")
_Dot1xBatchSet_ObjectIdentity = ObjectIdentity
dot1xBatchSet = _Dot1xBatchSet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 2, 4)
)
_Dot1xTarget_Type = OctetString
_Dot1xTarget_Object = MibScalar
dot1xTarget = _Dot1xTarget_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 2, 4, 1),
    _Dot1xTarget_Type()
)
dot1xTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dot1xTarget.setStatus("current")
_Dot1xOps_Type = Integer32
_Dot1xOps_Object = MibScalar
dot1xOps = _Dot1xOps_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 2, 4, 2),
    _Dot1xOps_Type()
)
dot1xOps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dot1xOps.setStatus("current")


class _Dot1xReAuthPeriodForBatchSet_Type(Integer32):
    """Custom type dot1xReAuthPeriodForBatchSet based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(60, 65535),
    )


_Dot1xReAuthPeriodForBatchSet_Type.__name__ = "Integer32"
_Dot1xReAuthPeriodForBatchSet_Object = MibScalar
dot1xReAuthPeriodForBatchSet = _Dot1xReAuthPeriodForBatchSet_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 2, 4, 3),
    _Dot1xReAuthPeriodForBatchSet_Type()
)
dot1xReAuthPeriodForBatchSet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dot1xReAuthPeriodForBatchSet.setStatus("current")
if mibBuilder.loadTexts:
    dot1xReAuthPeriodForBatchSet.setUnits("second")
_Macfilter_ObjectIdentity = ObjectIdentity
macfilter = _Macfilter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3)
)
_MacFilterPortTable_Object = MibTable
macFilterPortTable = _MacFilterPortTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 1)
)
if mibBuilder.loadTexts:
    macFilterPortTable.setStatus("current")
_MacFilterPortEntry_Object = MibTableRow
macFilterPortEntry = _MacFilterPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 1, 1)
)
macFilterPortEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    macFilterPortEntry.setStatus("current")


class _MacFilterPortEnable_Type(Integer32):
    """Custom type macFilterPortEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("enableMacFilter", 1),
          ("enableMacCount", 2),
          ("enableOuiFilter", 3),
          ("disable", 4))
    )


_MacFilterPortEnable_Type.__name__ = "Integer32"
_MacFilterPortEnable_Object = MibTableColumn
macFilterPortEnable = _MacFilterPortEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 1, 1, 1),
    _MacFilterPortEnable_Type()
)
macFilterPortEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macFilterPortEnable.setStatus("current")
_MacFilterPortMacCount_Type = Integer32
_MacFilterPortMacCount_Object = MibTableColumn
macFilterPortMacCount = _MacFilterPortMacCount_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 1, 1, 2),
    _MacFilterPortMacCount_Type()
)
macFilterPortMacCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macFilterPortMacCount.setStatus("current")


class _MacFilterPortFilterMode_Type(Integer32):
    """Custom type macFilterPortFilterMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("accept", 1),
          ("deny", 2))
    )


_MacFilterPortFilterMode_Type.__name__ = "Integer32"
_MacFilterPortFilterMode_Object = MibTableColumn
macFilterPortFilterMode = _MacFilterPortFilterMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 1, 1, 3),
    _MacFilterPortFilterMode_Type()
)
macFilterPortFilterMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macFilterPortFilterMode.setStatus("current")
_MaxNumOfMacFiltersInSystem_Type = Integer32
_MaxNumOfMacFiltersInSystem_Object = MibScalar
maxNumOfMacFiltersInSystem = _MaxNumOfMacFiltersInSystem_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 2),
    _MaxNumOfMacFiltersInSystem_Type()
)
maxNumOfMacFiltersInSystem.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfMacFiltersInSystem.setStatus("current")
_MaxNumOfMacFiltersPerPort_Type = Integer32
_MaxNumOfMacFiltersPerPort_Object = MibScalar
maxNumOfMacFiltersPerPort = _MaxNumOfMacFiltersPerPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 3),
    _MaxNumOfMacFiltersPerPort_Type()
)
maxNumOfMacFiltersPerPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfMacFiltersPerPort.setStatus("current")
_CurrNumOfMacFiltersInSystem_Type = Integer32
_CurrNumOfMacFiltersInSystem_Object = MibScalar
currNumOfMacFiltersInSystem = _CurrNumOfMacFiltersInSystem_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 4),
    _CurrNumOfMacFiltersInSystem_Type()
)
currNumOfMacFiltersInSystem.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    currNumOfMacFiltersInSystem.setStatus("current")
_MacFilterTable_Object = MibTable
macFilterTable = _MacFilterTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 5)
)
if mibBuilder.loadTexts:
    macFilterTable.setStatus("current")
_MacFilterEntry_Object = MibTableRow
macFilterEntry = _MacFilterEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 5, 1)
)
macFilterEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "macFilterAddr"),
)
if mibBuilder.loadTexts:
    macFilterEntry.setStatus("current")
_MacFilterAddr_Type = PhysAddress
_MacFilterAddr_Object = MibTableColumn
macFilterAddr = _MacFilterAddr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 5, 1, 1),
    _MacFilterAddr_Type()
)
macFilterAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFilterAddr.setStatus("current")
_MacFilterRowStatus_Type = RowStatus
_MacFilterRowStatus_Object = MibTableColumn
macFilterRowStatus = _MacFilterRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 5, 1, 2),
    _MacFilterRowStatus_Type()
)
macFilterRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    macFilterRowStatus.setStatus("current")
_MacfilterBatchSet_ObjectIdentity = ObjectIdentity
macfilterBatchSet = _MacfilterBatchSet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 6)
)
_MacfilterTarget_Type = OctetString
_MacfilterTarget_Object = MibScalar
macfilterTarget = _MacfilterTarget_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 6, 1),
    _MacfilterTarget_Type()
)
macfilterTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macfilterTarget.setStatus("current")
_MacfilterOps_Type = Integer32
_MacfilterOps_Object = MibScalar
macfilterOps = _MacfilterOps_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 6, 2),
    _MacfilterOps_Type()
)
macfilterOps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macfilterOps.setStatus("current")


class _MacFilterMacCountForBatchSet_Type(Integer32):
    """Custom type macFilterMacCountForBatchSet based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_MacFilterMacCountForBatchSet_Type.__name__ = "Integer32"
_MacFilterMacCountForBatchSet_Object = MibScalar
macFilterMacCountForBatchSet = _MacFilterMacCountForBatchSet_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 6, 3),
    _MacFilterMacCountForBatchSet_Type()
)
macFilterMacCountForBatchSet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macFilterMacCountForBatchSet.setStatus("current")
_OuiFilterTable_Object = MibTable
ouiFilterTable = _OuiFilterTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 7)
)
if mibBuilder.loadTexts:
    ouiFilterTable.setStatus("current")
_OuiFilterEntry_Object = MibTableRow
ouiFilterEntry = _OuiFilterEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 7, 1)
)
ouiFilterEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "ouiFilterAddr"),
)
if mibBuilder.loadTexts:
    ouiFilterEntry.setStatus("current")
_OuiFilterAddr_Type = OctetString
_OuiFilterAddr_Object = MibTableColumn
ouiFilterAddr = _OuiFilterAddr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 7, 1, 1),
    _OuiFilterAddr_Type()
)
ouiFilterAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ouiFilterAddr.setStatus("current")
_OuiFilterRowStatus_Type = RowStatus
_OuiFilterRowStatus_Object = MibTableColumn
ouiFilterRowStatus = _OuiFilterRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 7, 1, 2),
    _OuiFilterRowStatus_Type()
)
ouiFilterRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ouiFilterRowStatus.setStatus("current")
_MaxNumOfOuiFiltersPerPort_Type = Integer32
_MaxNumOfOuiFiltersPerPort_Object = MibScalar
maxNumOfOuiFiltersPerPort = _MaxNumOfOuiFiltersPerPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 8),
    _MaxNumOfOuiFiltersPerPort_Type()
)
maxNumOfOuiFiltersPerPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfOuiFiltersPerPort.setStatus("current")
_MacFilterStatusTable_Object = MibTable
macFilterStatusTable = _MacFilterStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 9)
)
if mibBuilder.loadTexts:
    macFilterStatusTable.setStatus("current")
_MacFilterStatusEntry_Object = MibTableRow
macFilterStatusEntry = _MacFilterStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 9, 1)
)
macFilterStatusEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "macFilterStatusId"),
)
if mibBuilder.loadTexts:
    macFilterStatusEntry.setStatus("current")
_MacFilterStatusId_Type = Integer32
_MacFilterStatusId_Object = MibTableColumn
macFilterStatusId = _MacFilterStatusId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 9, 1, 1),
    _MacFilterStatusId_Type()
)
macFilterStatusId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFilterStatusId.setStatus("current")
_MacFilterStatusAddr_Type = PhysAddress
_MacFilterStatusAddr_Object = MibTableColumn
macFilterStatusAddr = _MacFilterStatusAddr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 9, 1, 2),
    _MacFilterStatusAddr_Type()
)
macFilterStatusAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFilterStatusAddr.setStatus("current")
_MacFilterPerPVCTable_Object = MibTable
macFilterPerPVCTable = _MacFilterPerPVCTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 10)
)
if mibBuilder.loadTexts:
    macFilterPerPVCTable.setStatus("current")
_MacFilterPerPVCEntry_Object = MibTableRow
macFilterPerPVCEntry = _MacFilterPerPVCEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 10, 1)
)
macFilterPerPVCEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "macFilterPerPVCVpi"),
    (0, "ZYXEL-IES5000-MIB", "macFilterPerPVCVci"),
)
if mibBuilder.loadTexts:
    macFilterPerPVCEntry.setStatus("current")


class _MacFilterPerPVCVpi_Type(Integer32):
    """Custom type macFilterPerPVCVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_MacFilterPerPVCVpi_Type.__name__ = "Integer32"
_MacFilterPerPVCVpi_Object = MibTableColumn
macFilterPerPVCVpi = _MacFilterPerPVCVpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 10, 1, 1),
    _MacFilterPerPVCVpi_Type()
)
macFilterPerPVCVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFilterPerPVCVpi.setStatus("current")


class _MacFilterPerPVCVci_Type(Integer32):
    """Custom type macFilterPerPVCVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_MacFilterPerPVCVci_Type.__name__ = "Integer32"
_MacFilterPerPVCVci_Object = MibTableColumn
macFilterPerPVCVci = _MacFilterPerPVCVci_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 10, 1, 2),
    _MacFilterPerPVCVci_Type()
)
macFilterPerPVCVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFilterPerPVCVci.setStatus("current")


class _MacFilterPerPVCEnable_Type(Integer32):
    """Custom type macFilterPerPVCEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enablePvcMacFilter", 1),
          ("enablePvcMacCount", 2),
          ("disable", 3))
    )


_MacFilterPerPVCEnable_Type.__name__ = "Integer32"
_MacFilterPerPVCEnable_Object = MibTableColumn
macFilterPerPVCEnable = _MacFilterPerPVCEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 10, 1, 3),
    _MacFilterPerPVCEnable_Type()
)
macFilterPerPVCEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macFilterPerPVCEnable.setStatus("current")


class _MacFilterPerPVCMode_Type(Integer32):
    """Custom type macFilterPerPVCMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("accept", 1),
          ("deny", 2))
    )


_MacFilterPerPVCMode_Type.__name__ = "Integer32"
_MacFilterPerPVCMode_Object = MibTableColumn
macFilterPerPVCMode = _MacFilterPerPVCMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 10, 1, 4),
    _MacFilterPerPVCMode_Type()
)
macFilterPerPVCMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macFilterPerPVCMode.setStatus("current")
_MacFilterPerPVCMacCount_Type = Integer32
_MacFilterPerPVCMacCount_Object = MibTableColumn
macFilterPerPVCMacCount = _MacFilterPerPVCMacCount_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 10, 1, 5),
    _MacFilterPerPVCMacCount_Type()
)
macFilterPerPVCMacCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macFilterPerPVCMacCount.setStatus("current")
_MacFilterPerPVCMACTable_Object = MibTable
macFilterPerPVCMACTable = _MacFilterPerPVCMACTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 11)
)
if mibBuilder.loadTexts:
    macFilterPerPVCMACTable.setStatus("current")
_MacFilterPerPVCMACEntry_Object = MibTableRow
macFilterPerPVCMACEntry = _MacFilterPerPVCMACEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 11, 1)
)
macFilterPerPVCMACEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "macFilterPerPVCMACVpi"),
    (0, "ZYXEL-IES5000-MIB", "macFilterPerPVCMACVci"),
    (0, "ZYXEL-IES5000-MIB", "macFilterPerPVCMACAddr"),
)
if mibBuilder.loadTexts:
    macFilterPerPVCMACEntry.setStatus("current")


class _MacFilterPerPVCMACVpi_Type(Integer32):
    """Custom type macFilterPerPVCMACVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_MacFilterPerPVCMACVpi_Type.__name__ = "Integer32"
_MacFilterPerPVCMACVpi_Object = MibTableColumn
macFilterPerPVCMACVpi = _MacFilterPerPVCMACVpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 11, 1, 1),
    _MacFilterPerPVCMACVpi_Type()
)
macFilterPerPVCMACVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFilterPerPVCMACVpi.setStatus("current")


class _MacFilterPerPVCMACVci_Type(Integer32):
    """Custom type macFilterPerPVCMACVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_MacFilterPerPVCMACVci_Type.__name__ = "Integer32"
_MacFilterPerPVCMACVci_Object = MibTableColumn
macFilterPerPVCMACVci = _MacFilterPerPVCMACVci_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 11, 1, 2),
    _MacFilterPerPVCMACVci_Type()
)
macFilterPerPVCMACVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFilterPerPVCMACVci.setStatus("current")
_MacFilterPerPVCMACAddr_Type = PhysAddress
_MacFilterPerPVCMACAddr_Object = MibTableColumn
macFilterPerPVCMACAddr = _MacFilterPerPVCMACAddr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 11, 1, 3),
    _MacFilterPerPVCMACAddr_Type()
)
macFilterPerPVCMACAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFilterPerPVCMACAddr.setStatus("current")
_MacFilterPerPVCMACRowStatus_Type = RowStatus
_MacFilterPerPVCMACRowStatus_Object = MibTableColumn
macFilterPerPVCMACRowStatus = _MacFilterPerPVCMACRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 3, 11, 1, 4),
    _MacFilterPerPVCMACRowStatus_Type()
)
macFilterPerPVCMACRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macFilterPerPVCMACRowStatus.setStatus("current")
_Pktfilter_ObjectIdentity = ObjectIdentity
pktfilter = _Pktfilter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 4)
)
_PktFilterPortTable_Object = MibTable
pktFilterPortTable = _PktFilterPortTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 4, 1)
)
if mibBuilder.loadTexts:
    pktFilterPortTable.setStatus("current")
_PktFilterPortEntry_Object = MibTableRow
pktFilterPortEntry = _PktFilterPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 4, 1, 1)
)
pktFilterPortEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    pktFilterPortEntry.setStatus("current")
_PktFilter_Type = Integer32
_PktFilter_Object = MibTableColumn
pktFilter = _PktFilter_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 4, 1, 1, 1),
    _PktFilter_Type()
)
pktFilter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pktFilter.setStatus("current")
_PktfilterBatchSet_ObjectIdentity = ObjectIdentity
pktfilterBatchSet = _PktfilterBatchSet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 4, 2)
)
_PktfilterTarget_Type = OctetString
_PktfilterTarget_Object = MibScalar
pktfilterTarget = _PktfilterTarget_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 4, 2, 1),
    _PktfilterTarget_Type()
)
pktfilterTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pktfilterTarget.setStatus("current")
_PktfilterOps_Type = Integer32
_PktfilterOps_Object = MibScalar
pktfilterOps = _PktfilterOps_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 4, 2, 2),
    _PktfilterOps_Type()
)
pktfilterOps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pktfilterOps.setStatus("current")
_PktfilterForBatchSet_Type = Integer32
_PktfilterForBatchSet_Object = MibScalar
pktfilterForBatchSet = _PktfilterForBatchSet_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 4, 2, 3),
    _PktfilterForBatchSet_Type()
)
pktfilterForBatchSet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pktfilterForBatchSet.setStatus("current")
_PktFilterPerPVCTable_Object = MibTable
pktFilterPerPVCTable = _PktFilterPerPVCTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 4, 3)
)
if mibBuilder.loadTexts:
    pktFilterPerPVCTable.setStatus("current")
_PktFilterPerPVCEntry_Object = MibTableRow
pktFilterPerPVCEntry = _PktFilterPerPVCEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 4, 3, 1)
)
pktFilterPerPVCEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "pktFilterPerPVCVpi"),
    (0, "ZYXEL-IES5000-MIB", "pktFilterPerPVCVci"),
)
if mibBuilder.loadTexts:
    pktFilterPerPVCEntry.setStatus("current")


class _PktFilterPerPVCVpi_Type(Integer32):
    """Custom type pktFilterPerPVCVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_PktFilterPerPVCVpi_Type.__name__ = "Integer32"
_PktFilterPerPVCVpi_Object = MibTableColumn
pktFilterPerPVCVpi = _PktFilterPerPVCVpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 4, 3, 1, 1),
    _PktFilterPerPVCVpi_Type()
)
pktFilterPerPVCVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pktFilterPerPVCVpi.setStatus("current")


class _PktFilterPerPVCVci_Type(Integer32):
    """Custom type pktFilterPerPVCVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_PktFilterPerPVCVci_Type.__name__ = "Integer32"
_PktFilterPerPVCVci_Object = MibTableColumn
pktFilterPerPVCVci = _PktFilterPerPVCVci_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 4, 3, 1, 2),
    _PktFilterPerPVCVci_Type()
)
pktFilterPerPVCVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pktFilterPerPVCVci.setStatus("current")
_PktFilterPerPVCpktFilter_Type = Integer32
_PktFilterPerPVCpktFilter_Object = MibTableColumn
pktFilterPerPVCpktFilter = _PktFilterPerPVCpktFilter_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 4, 3, 1, 3),
    _PktFilterPerPVCpktFilter_Type()
)
pktFilterPerPVCpktFilter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pktFilterPerPVCpktFilter.setStatus("current")
_DhcpSnoop_ObjectIdentity = ObjectIdentity
dhcpSnoop = _DhcpSnoop_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 5)
)
_DhcpSnoopPortTable_Object = MibTable
dhcpSnoopPortTable = _DhcpSnoopPortTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 5, 1)
)
if mibBuilder.loadTexts:
    dhcpSnoopPortTable.setStatus("current")
_DhcpSnoopPortEntry_Object = MibTableRow
dhcpSnoopPortEntry = _DhcpSnoopPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 5, 1, 1)
)
dhcpSnoopPortEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    dhcpSnoopPortEntry.setStatus("current")


class _DhcpSnoopEnable_Type(Integer32):
    """Custom type dhcpSnoopEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_DhcpSnoopEnable_Type.__name__ = "Integer32"
_DhcpSnoopEnable_Object = MibTableColumn
dhcpSnoopEnable = _DhcpSnoopEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 5, 1, 1, 1),
    _DhcpSnoopEnable_Type()
)
dhcpSnoopEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpSnoopEnable.setStatus("current")
_DhcpSnoopTarget_Type = OctetString
_DhcpSnoopTarget_Object = MibScalar
dhcpSnoopTarget = _DhcpSnoopTarget_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 5, 2),
    _DhcpSnoopTarget_Type()
)
dhcpSnoopTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpSnoopTarget.setStatus("current")
_DhcpSnoopOps_Type = Integer32
_DhcpSnoopOps_Object = MibScalar
dhcpSnoopOps = _DhcpSnoopOps_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 5, 3),
    _DhcpSnoopOps_Type()
)
dhcpSnoopOps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpSnoopOps.setStatus("current")
_DhcpStaticTable_Object = MibTable
dhcpStaticTable = _DhcpStaticTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 5, 4)
)
if mibBuilder.loadTexts:
    dhcpStaticTable.setStatus("current")
_DhcpStaticEntry_Object = MibTableRow
dhcpStaticEntry = _DhcpStaticEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 5, 4, 1)
)
dhcpStaticEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "dhcpStaticIpAddr"),
)
if mibBuilder.loadTexts:
    dhcpStaticEntry.setStatus("current")
_DhcpStaticIpAddr_Type = IpAddress
_DhcpStaticIpAddr_Object = MibTableColumn
dhcpStaticIpAddr = _DhcpStaticIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 5, 4, 1, 1),
    _DhcpStaticIpAddr_Type()
)
dhcpStaticIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpStaticIpAddr.setStatus("current")
_DhcpStaticRowStatus_Type = RowStatus
_DhcpStaticRowStatus_Object = MibTableColumn
dhcpStaticRowStatus = _DhcpStaticRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 5, 4, 1, 2),
    _DhcpStaticRowStatus_Type()
)
dhcpStaticRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpStaticRowStatus.setStatus("current")
_MaxNumOfDhcpStaticIp_Type = Integer32
_MaxNumOfDhcpStaticIp_Object = MibScalar
maxNumOfDhcpStaticIp = _MaxNumOfDhcpStaticIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 5, 5),
    _MaxNumOfDhcpStaticIp_Type()
)
maxNumOfDhcpStaticIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfDhcpStaticIp.setStatus("current")
_DhcpSnoopLan2lanTable_Object = MibTable
dhcpSnoopLan2lanTable = _DhcpSnoopLan2lanTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 5, 6)
)
if mibBuilder.loadTexts:
    dhcpSnoopLan2lanTable.setStatus("current")
_DhcpSnoopLan2lanEntry_Object = MibTableRow
dhcpSnoopLan2lanEntry = _DhcpSnoopLan2lanEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 5, 6, 1)
)
dhcpSnoopLan2lanEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    dhcpSnoopLan2lanEntry.setStatus("current")


class _DhcpSnoopLan2lanEnable_Type(Integer32):
    """Custom type dhcpSnoopLan2lanEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_DhcpSnoopLan2lanEnable_Type.__name__ = "Integer32"
_DhcpSnoopLan2lanEnable_Object = MibTableColumn
dhcpSnoopLan2lanEnable = _DhcpSnoopLan2lanEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 5, 6, 1, 1),
    _DhcpSnoopLan2lanEnable_Type()
)
dhcpSnoopLan2lanEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpSnoopLan2lanEnable.setStatus("current")
_AclRule_ObjectIdentity = ObjectIdentity
aclRule = _AclRule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 6)
)
_AclSetTable_Object = MibTable
aclSetTable = _AclSetTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 6, 1)
)
if mibBuilder.loadTexts:
    aclSetTable.setStatus("current")
_AclSetEntry_Object = MibTableRow
aclSetEntry = _AclSetEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 6, 1, 1)
)
aclSetEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "aclSetVpi"),
    (0, "ZYXEL-IES5000-MIB", "aclSetVci"),
    (1, "ZYXEL-IES5000-MIB", "aclSetProfileName"),
)
if mibBuilder.loadTexts:
    aclSetEntry.setStatus("current")
_AclSetVpi_Type = Integer32
_AclSetVpi_Object = MibTableColumn
aclSetVpi = _AclSetVpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 6, 1, 1, 1),
    _AclSetVpi_Type()
)
aclSetVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclSetVpi.setStatus("current")
_AclSetVci_Type = Integer32
_AclSetVci_Object = MibTableColumn
aclSetVci = _AclSetVci_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 6, 1, 1, 2),
    _AclSetVci_Type()
)
aclSetVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclSetVci.setStatus("current")
_AclSetProfileName_Type = DisplayString
_AclSetProfileName_Object = MibTableColumn
aclSetProfileName = _AclSetProfileName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 6, 1, 1, 3),
    _AclSetProfileName_Type()
)
aclSetProfileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclSetProfileName.setStatus("current")
_AclSetRowStatus_Type = RowStatus
_AclSetRowStatus_Object = MibTableColumn
aclSetRowStatus = _AclSetRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 6, 1, 1, 4),
    _AclSetRowStatus_Type()
)
aclSetRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclSetRowStatus.setStatus("current")
_AclNoMatchTable_Object = MibTable
aclNoMatchTable = _AclNoMatchTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 6, 2)
)
if mibBuilder.loadTexts:
    aclNoMatchTable.setStatus("current")
_AclNoMatchEntry_Object = MibTableRow
aclNoMatchEntry = _AclNoMatchEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 6, 2, 1)
)
aclNoMatchEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    aclNoMatchEntry.setStatus("current")


class _AclNoMatchAction_Type(Integer32):
    """Custom type aclNoMatchAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("accept", 1),
          ("deny", 2))
    )


_AclNoMatchAction_Type.__name__ = "Integer32"
_AclNoMatchAction_Object = MibTableColumn
aclNoMatchAction = _AclNoMatchAction_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 6, 2, 1, 1),
    _AclNoMatchAction_Type()
)
aclNoMatchAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNoMatchAction.setStatus("current")
_PppoeAgent_ObjectIdentity = ObjectIdentity
pppoeAgent = _PppoeAgent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 7)
)
_PppoeAgentTable_Object = MibTable
pppoeAgentTable = _PppoeAgentTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 7, 1)
)
if mibBuilder.loadTexts:
    pppoeAgentTable.setStatus("current")
_PppoeAgentEntry_Object = MibTableRow
pppoeAgentEntry = _PppoeAgentEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 7, 1, 1)
)
pppoeAgentEntry.setIndexNames(
    (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"),
)
if mibBuilder.loadTexts:
    pppoeAgentEntry.setStatus("current")


class _PppoeAgentEnable_Type(Integer32):
    """Custom type pppoeAgentEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_PppoeAgentEnable_Type.__name__ = "Integer32"
_PppoeAgentEnable_Object = MibTableColumn
pppoeAgentEnable = _PppoeAgentEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 7, 1, 1, 1),
    _PppoeAgentEnable_Type()
)
pppoeAgentEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pppoeAgentEnable.setStatus("current")


class _PppoeAgentInfo_Type(DisplayString):
    """Custom type pppoeAgentInfo based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 23),
    )


_PppoeAgentInfo_Type.__name__ = "DisplayString"
_PppoeAgentInfo_Object = MibTableColumn
pppoeAgentInfo = _PppoeAgentInfo_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 7, 1, 1, 2),
    _PppoeAgentInfo_Type()
)
pppoeAgentInfo.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pppoeAgentInfo.setStatus("current")
_PppoeAgentRowStatus_Type = RowStatus
_PppoeAgentRowStatus_Object = MibTableColumn
pppoeAgentRowStatus = _PppoeAgentRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 7, 1, 1, 3),
    _PppoeAgentRowStatus_Type()
)
pppoeAgentRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pppoeAgentRowStatus.setStatus("current")


class _PppoeAgentOptionMode_Type(Integer32):
    """Custom type pppoeAgentOptionMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("private", 1),
          ("tr101", 2),
          ("tr101PlusVlanInfo", 3))
    )


_PppoeAgentOptionMode_Type.__name__ = "Integer32"
_PppoeAgentOptionMode_Object = MibTableColumn
pppoeAgentOptionMode = _PppoeAgentOptionMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 7, 1, 1, 4),
    _PppoeAgentOptionMode_Type()
)
pppoeAgentOptionMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pppoeAgentOptionMode.setStatus("current")
_MaxNumOfPppoeDhcpRelay82Conf_Type = Integer32
_MaxNumOfPppoeDhcpRelay82Conf_Object = MibScalar
maxNumOfPppoeDhcpRelay82Conf = _MaxNumOfPppoeDhcpRelay82Conf_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 7, 2),
    _MaxNumOfPppoeDhcpRelay82Conf_Type()
)
maxNumOfPppoeDhcpRelay82Conf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfPppoeDhcpRelay82Conf.setStatus("current")
_PppoeAgentDelimiter_Type = Integer32
_PppoeAgentDelimiter_Object = MibScalar
pppoeAgentDelimiter = _PppoeAgentDelimiter_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 7, 3),
    _PppoeAgentDelimiter_Type()
)
pppoeAgentDelimiter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pppoeAgentDelimiter.setStatus("current")
_DsBcast_ObjectIdentity = ObjectIdentity
dsBcast = _DsBcast_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 8)
)
_DsBcastTable_Object = MibTable
dsBcastTable = _DsBcastTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 8, 1)
)
if mibBuilder.loadTexts:
    dsBcastTable.setStatus("current")
_DsBcastEntry_Object = MibTableRow
dsBcastEntry = _DsBcastEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 8, 1, 1)
)
dsBcastEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"),
)
if mibBuilder.loadTexts:
    dsBcastEntry.setStatus("current")
_DsBcastRowStatus_Type = RowStatus
_DsBcastRowStatus_Object = MibTableColumn
dsBcastRowStatus = _DsBcastRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 8, 1, 1, 1),
    _DsBcastRowStatus_Type()
)
dsBcastRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dsBcastRowStatus.setStatus("current")
_UsBcast_ObjectIdentity = ObjectIdentity
usBcast = _UsBcast_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 9)
)


class _UsBcastCtrlEnable_Type(Integer32):
    """Custom type usBcastCtrlEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_UsBcastCtrlEnable_Type.__name__ = "Integer32"
_UsBcastCtrlEnable_Object = MibScalar
usBcastCtrlEnable = _UsBcastCtrlEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 9, 1),
    _UsBcastCtrlEnable_Type()
)
usBcastCtrlEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    usBcastCtrlEnable.setStatus("current")
_UsBcastCtrlRate_Type = Integer32
_UsBcastCtrlRate_Object = MibScalar
usBcastCtrlRate = _UsBcastCtrlRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 9, 2),
    _UsBcastCtrlRate_Type()
)
usBcastCtrlRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    usBcastCtrlRate.setStatus("current")
if mibBuilder.loadTexts:
    usBcastCtrlRate.setUnits("Kbps")
_DscpMapping_ObjectIdentity = ObjectIdentity
dscpMapping = _DscpMapping_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 10)
)
_DscpMappingTable_Object = MibTable
dscpMappingTable = _DscpMappingTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 10, 1)
)
if mibBuilder.loadTexts:
    dscpMappingTable.setStatus("current")
_DscpMappingEntry_Object = MibTableRow
dscpMappingEntry = _DscpMappingEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 10, 1, 1)
)
dscpMappingEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "dscpMappingSrcCodePoint"),
)
if mibBuilder.loadTexts:
    dscpMappingEntry.setStatus("current")
_DscpMappingSrcCodePoint_Type = Integer32
_DscpMappingSrcCodePoint_Object = MibTableColumn
dscpMappingSrcCodePoint = _DscpMappingSrcCodePoint_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 10, 1, 1, 1),
    _DscpMappingSrcCodePoint_Type()
)
dscpMappingSrcCodePoint.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dscpMappingSrcCodePoint.setStatus("current")


class _DscpMappingMapPriority_Type(Integer32):
    """Custom type dscpMappingMapPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_DscpMappingMapPriority_Type.__name__ = "Integer32"
_DscpMappingMapPriority_Object = MibTableColumn
dscpMappingMapPriority = _DscpMappingMapPriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 10, 1, 1, 2),
    _DscpMappingMapPriority_Type()
)
dscpMappingMapPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dscpMappingMapPriority.setStatus("current")
_DscpPortTable_Object = MibTable
dscpPortTable = _DscpPortTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 10, 2)
)
if mibBuilder.loadTexts:
    dscpPortTable.setStatus("current")
_DscpPortEntry_Object = MibTableRow
dscpPortEntry = _DscpPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 10, 2, 1)
)
dscpPortEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    dscpPortEntry.setStatus("current")


class _DscpPortEnable_Type(Integer32):
    """Custom type dscpPortEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_DscpPortEnable_Type.__name__ = "Integer32"
_DscpPortEnable_Object = MibTableColumn
dscpPortEnable = _DscpPortEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 10, 2, 1, 1),
    _DscpPortEnable_Type()
)
dscpPortEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dscpPortEnable.setStatus("current")


class _MacAntiSpoofEnable_Type(Integer32):
    """Custom type macAntiSpoofEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_MacAntiSpoofEnable_Type.__name__ = "Integer32"
_MacAntiSpoofEnable_Object = MibScalar
macAntiSpoofEnable = _MacAntiSpoofEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 13),
    _MacAntiSpoofEnable_Type()
)
macAntiSpoofEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macAntiSpoofEnable.setStatus("current")
_Subnetvlan_ObjectIdentity = ObjectIdentity
subnetvlan = _Subnetvlan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 14)
)


class _SubnetvlanStatus_Type(Integer32):
    """Custom type subnetvlanStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SubnetvlanStatus_Type.__name__ = "Integer32"
_SubnetvlanStatus_Object = MibScalar
subnetvlanStatus = _SubnetvlanStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 14, 1),
    _SubnetvlanStatus_Type()
)
subnetvlanStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    subnetvlanStatus.setStatus("current")
_SubnetvlanTable_Object = MibTable
subnetvlanTable = _SubnetvlanTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 14, 2)
)
if mibBuilder.loadTexts:
    subnetvlanTable.setStatus("current")
_SubnetvlanEntry_Object = MibTableRow
subnetvlanEntry = _SubnetvlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 14, 2, 1)
)
subnetvlanEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "subnetvlanIp"),
    (0, "ZYXEL-IES5000-MIB", "subnetvlanMask"),
    (0, "ZYXEL-IES5000-MIB", "subnetvlanVid"),
    (0, "ZYXEL-IES5000-MIB", "subnetvlanPriority"),
)
if mibBuilder.loadTexts:
    subnetvlanEntry.setStatus("current")
_SubnetvlanIp_Type = IpAddress
_SubnetvlanIp_Object = MibTableColumn
subnetvlanIp = _SubnetvlanIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 14, 2, 1, 1),
    _SubnetvlanIp_Type()
)
subnetvlanIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    subnetvlanIp.setStatus("current")
_SubnetvlanMask_Type = Integer32
_SubnetvlanMask_Object = MibTableColumn
subnetvlanMask = _SubnetvlanMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 14, 2, 1, 2),
    _SubnetvlanMask_Type()
)
subnetvlanMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    subnetvlanMask.setStatus("current")


class _SubnetvlanVid_Type(Integer32):
    """Custom type subnetvlanVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SubnetvlanVid_Type.__name__ = "Integer32"
_SubnetvlanVid_Object = MibTableColumn
subnetvlanVid = _SubnetvlanVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 14, 2, 1, 3),
    _SubnetvlanVid_Type()
)
subnetvlanVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    subnetvlanVid.setStatus("current")


class _SubnetvlanPriority_Type(Integer32):
    """Custom type subnetvlanPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_SubnetvlanPriority_Type.__name__ = "Integer32"
_SubnetvlanPriority_Object = MibTableColumn
subnetvlanPriority = _SubnetvlanPriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 14, 2, 1, 4),
    _SubnetvlanPriority_Type()
)
subnetvlanPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    subnetvlanPriority.setStatus("current")


class _SubnetvlanName_Type(DisplayString):
    """Custom type subnetvlanName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 31),
    )


_SubnetvlanName_Type.__name__ = "DisplayString"
_SubnetvlanName_Object = MibTableColumn
subnetvlanName = _SubnetvlanName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 14, 2, 1, 5),
    _SubnetvlanName_Type()
)
subnetvlanName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    subnetvlanName.setStatus("current")
_SubnetvlanRowStatus_Type = RowStatus
_SubnetvlanRowStatus_Object = MibTableColumn
subnetvlanRowStatus = _SubnetvlanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 14, 2, 1, 6),
    _SubnetvlanRowStatus_Type()
)
subnetvlanRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    subnetvlanRowStatus.setStatus("current")
_SubnetvlanInetTable_Object = MibTable
subnetvlanInetTable = _SubnetvlanInetTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 14, 3)
)
if mibBuilder.loadTexts:
    subnetvlanInetTable.setStatus("current")
_SubnetvlanInetEntry_Object = MibTableRow
subnetvlanInetEntry = _SubnetvlanInetEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 14, 3, 1)
)
subnetvlanInetEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "subnetvlanInetAddrType"),
    (0, "ZYXEL-IES5000-MIB", "subnetvlanInetAddr"),
    (0, "ZYXEL-IES5000-MIB", "subnetvlanInetMask"),
    (0, "ZYXEL-IES5000-MIB", "subnetvlanInetVid"),
    (0, "ZYXEL-IES5000-MIB", "subnetvlanInetPriority"),
)
if mibBuilder.loadTexts:
    subnetvlanInetEntry.setStatus("current")
_SubnetvlanInetAddrType_Type = InetAddressType
_SubnetvlanInetAddrType_Object = MibTableColumn
subnetvlanInetAddrType = _SubnetvlanInetAddrType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 14, 3, 1, 1),
    _SubnetvlanInetAddrType_Type()
)
subnetvlanInetAddrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    subnetvlanInetAddrType.setStatus("current")
_SubnetvlanInetAddr_Type = InetAddress
_SubnetvlanInetAddr_Object = MibTableColumn
subnetvlanInetAddr = _SubnetvlanInetAddr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 14, 3, 1, 2),
    _SubnetvlanInetAddr_Type()
)
subnetvlanInetAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    subnetvlanInetAddr.setStatus("current")
_SubnetvlanInetMask_Type = Integer32
_SubnetvlanInetMask_Object = MibTableColumn
subnetvlanInetMask = _SubnetvlanInetMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 14, 3, 1, 3),
    _SubnetvlanInetMask_Type()
)
subnetvlanInetMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    subnetvlanInetMask.setStatus("current")


class _SubnetvlanInetVid_Type(Integer32):
    """Custom type subnetvlanInetVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SubnetvlanInetVid_Type.__name__ = "Integer32"
_SubnetvlanInetVid_Object = MibTableColumn
subnetvlanInetVid = _SubnetvlanInetVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 14, 3, 1, 4),
    _SubnetvlanInetVid_Type()
)
subnetvlanInetVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    subnetvlanInetVid.setStatus("current")


class _SubnetvlanInetPriority_Type(Integer32):
    """Custom type subnetvlanInetPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_SubnetvlanInetPriority_Type.__name__ = "Integer32"
_SubnetvlanInetPriority_Object = MibTableColumn
subnetvlanInetPriority = _SubnetvlanInetPriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 14, 3, 1, 5),
    _SubnetvlanInetPriority_Type()
)
subnetvlanInetPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    subnetvlanInetPriority.setStatus("current")


class _SubnetvlanInetName_Type(DisplayString):
    """Custom type subnetvlanInetName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 31),
    )


_SubnetvlanInetName_Type.__name__ = "DisplayString"
_SubnetvlanInetName_Object = MibTableColumn
subnetvlanInetName = _SubnetvlanInetName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 14, 3, 1, 6),
    _SubnetvlanInetName_Type()
)
subnetvlanInetName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    subnetvlanInetName.setStatus("current")
_SubnetvlanInetRowStatus_Type = RowStatus
_SubnetvlanInetRowStatus_Object = MibTableColumn
subnetvlanInetRowStatus = _SubnetvlanInetRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 14, 3, 1, 7),
    _SubnetvlanInetRowStatus_Type()
)
subnetvlanInetRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    subnetvlanInetRowStatus.setStatus("current")
_Loopguard_ObjectIdentity = ObjectIdentity
loopguard = _Loopguard_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 15)
)
_LoopguardTable_Object = MibTable
loopguardTable = _LoopguardTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 15, 1)
)
if mibBuilder.loadTexts:
    loopguardTable.setStatus("current")
_LoopguardEntry_Object = MibTableRow
loopguardEntry = _LoopguardEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 15, 1, 1)
)
loopguardEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    loopguardEntry.setStatus("current")


class _LoopguardStatus_Type(Integer32):
    """Custom type loopguardStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_LoopguardStatus_Type.__name__ = "Integer32"
_LoopguardStatus_Object = MibTableColumn
loopguardStatus = _LoopguardStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 15, 1, 1, 1),
    _LoopguardStatus_Type()
)
loopguardStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    loopguardStatus.setStatus("current")


class _LoopguardMode_Type(Integer32):
    """Custom type loopguardMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("fix", 0),
          ("dynamic", 1))
    )


_LoopguardMode_Type.__name__ = "Integer32"
_LoopguardMode_Object = MibTableColumn
loopguardMode = _LoopguardMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 15, 1, 1, 2),
    _LoopguardMode_Type()
)
loopguardMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    loopguardMode.setStatus("current")


class _LoopguardRecoverTime_Type(Integer32):
    """Custom type loopguardRecoverTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(60, 600),
    )


_LoopguardRecoverTime_Type.__name__ = "Integer32"
_LoopguardRecoverTime_Object = MibTableColumn
loopguardRecoverTime = _LoopguardRecoverTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 15, 1, 1, 3),
    _LoopguardRecoverTime_Type()
)
loopguardRecoverTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    loopguardRecoverTime.setStatus("current")
_UsStorm_ObjectIdentity = ObjectIdentity
usStorm = _UsStorm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 16)
)
_UsStormTable_Object = MibTable
usStormTable = _UsStormTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 16, 1)
)
if mibBuilder.loadTexts:
    usStormTable.setStatus("current")
_UsStormEntry_Object = MibTableRow
usStormEntry = _UsStormEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 16, 1, 1)
)
usStormEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    usStormEntry.setStatus("current")
_UsStormBcastThresh_Type = Integer32
_UsStormBcastThresh_Object = MibTableColumn
usStormBcastThresh = _UsStormBcastThresh_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 16, 1, 1, 1),
    _UsStormBcastThresh_Type()
)
usStormBcastThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    usStormBcastThresh.setStatus("current")
_UsStormMcastThresh_Type = Integer32
_UsStormMcastThresh_Object = MibTableColumn
usStormMcastThresh = _UsStormMcastThresh_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 16, 1, 1, 2),
    _UsStormMcastThresh_Type()
)
usStormMcastThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    usStormMcastThresh.setStatus("current")
_UsStormUcastThresh_Type = Integer32
_UsStormUcastThresh_Object = MibTableColumn
usStormUcastThresh = _UsStormUcastThresh_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 16, 1, 1, 3),
    _UsStormUcastThresh_Type()
)
usStormUcastThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    usStormUcastThresh.setStatus("current")
_ArpInspection_ObjectIdentity = ObjectIdentity
arpInspection = _ArpInspection_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 17)
)
_ArpInspectionTable_Object = MibTable
arpInspectionTable = _ArpInspectionTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 17, 1)
)
if mibBuilder.loadTexts:
    arpInspectionTable.setStatus("current")
_ArpInspectionEntry_Object = MibTableRow
arpInspectionEntry = _ArpInspectionEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 17, 1, 1)
)
arpInspectionEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    arpInspectionEntry.setStatus("current")


class _ArpInspectionEnable_Type(Integer32):
    """Custom type arpInspectionEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_ArpInspectionEnable_Type.__name__ = "Integer32"
_ArpInspectionEnable_Object = MibTableColumn
arpInspectionEnable = _ArpInspectionEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 17, 1, 1, 1),
    _ArpInspectionEnable_Type()
)
arpInspectionEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    arpInspectionEnable.setStatus("current")
_MacFF_ObjectIdentity = ObjectIdentity
macFF = _MacFF_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 18)
)
_MacFFStaticTable_Object = MibTable
macFFStaticTable = _MacFFStaticTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 18, 1)
)
if mibBuilder.loadTexts:
    macFFStaticTable.setStatus("current")
_MacFFStaticEntry_Object = MibTableRow
macFFStaticEntry = _MacFFStaticEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 18, 1, 1)
)
macFFStaticEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "slotId"),
    (0, "ZYXEL-IES5000-MIB", "macFFStaticIndex"),
)
if mibBuilder.loadTexts:
    macFFStaticEntry.setStatus("current")
_MacFFStaticIndex_Type = Integer32
_MacFFStaticIndex_Object = MibTableColumn
macFFStaticIndex = _MacFFStaticIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 18, 1, 1, 1),
    _MacFFStaticIndex_Type()
)
macFFStaticIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFFStaticIndex.setStatus("current")
_MacFFStaticSrcIP_Type = IpAddress
_MacFFStaticSrcIP_Object = MibTableColumn
macFFStaticSrcIP = _MacFFStaticSrcIP_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 18, 1, 1, 2),
    _MacFFStaticSrcIP_Type()
)
macFFStaticSrcIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macFFStaticSrcIP.setStatus("current")
_MacFFStaticMask_Type = Integer32
_MacFFStaticMask_Object = MibTableColumn
macFFStaticMask = _MacFFStaticMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 18, 1, 1, 3),
    _MacFFStaticMask_Type()
)
macFFStaticMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macFFStaticMask.setStatus("current")
_MacFFStaticArasIP_Type = IpAddress
_MacFFStaticArasIP_Object = MibTableColumn
macFFStaticArasIP = _MacFFStaticArasIP_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 18, 1, 1, 4),
    _MacFFStaticArasIP_Type()
)
macFFStaticArasIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macFFStaticArasIP.setStatus("current")


class _MacFFStaticVid_Type(Integer32):
    """Custom type macFFStaticVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_MacFFStaticVid_Type.__name__ = "Integer32"
_MacFFStaticVid_Object = MibTableColumn
macFFStaticVid = _MacFFStaticVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 18, 1, 1, 5),
    _MacFFStaticVid_Type()
)
macFFStaticVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macFFStaticVid.setStatus("current")
_MacFFStaticRowStatus_Type = RowStatus
_MacFFStaticRowStatus_Object = MibTableColumn
macFFStaticRowStatus = _MacFFStaticRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 18, 1, 1, 6),
    _MacFFStaticRowStatus_Type()
)
macFFStaticRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    macFFStaticRowStatus.setStatus("current")
_MacFFDynamicTable_Object = MibTable
macFFDynamicTable = _MacFFDynamicTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 18, 2)
)
if mibBuilder.loadTexts:
    macFFDynamicTable.setStatus("current")
_MacFFDynamicEntry_Object = MibTableRow
macFFDynamicEntry = _MacFFDynamicEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 18, 2, 1)
)
macFFDynamicEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "slotId"),
    (0, "ZYXEL-IES5000-MIB", "macFFDynamicIndex"),
)
if mibBuilder.loadTexts:
    macFFDynamicEntry.setStatus("current")
_MacFFDynamicIndex_Type = Integer32
_MacFFDynamicIndex_Object = MibTableColumn
macFFDynamicIndex = _MacFFDynamicIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 18, 2, 1, 1),
    _MacFFDynamicIndex_Type()
)
macFFDynamicIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFFDynamicIndex.setStatus("current")
_MacFFDynamicSrcIP_Type = IpAddress
_MacFFDynamicSrcIP_Object = MibTableColumn
macFFDynamicSrcIP = _MacFFDynamicSrcIP_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 18, 2, 1, 2),
    _MacFFDynamicSrcIP_Type()
)
macFFDynamicSrcIP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFFDynamicSrcIP.setStatus("current")
_MacFFDynamicMask_Type = Integer32
_MacFFDynamicMask_Object = MibTableColumn
macFFDynamicMask = _MacFFDynamicMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 18, 2, 1, 3),
    _MacFFDynamicMask_Type()
)
macFFDynamicMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFFDynamicMask.setStatus("current")
_MacFFDynamicArasIP_Type = IpAddress
_MacFFDynamicArasIP_Object = MibTableColumn
macFFDynamicArasIP = _MacFFDynamicArasIP_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 18, 2, 1, 4),
    _MacFFDynamicArasIP_Type()
)
macFFDynamicArasIP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFFDynamicArasIP.setStatus("current")


class _MacFFDynamicVid_Type(Integer32):
    """Custom type macFFDynamicVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_MacFFDynamicVid_Type.__name__ = "Integer32"
_MacFFDynamicVid_Object = MibTableColumn
macFFDynamicVid = _MacFFDynamicVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 18, 2, 1, 5),
    _MacFFDynamicVid_Type()
)
macFFDynamicVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFFDynamicVid.setStatus("current")
_MacFFVlanTable_Object = MibTable
macFFVlanTable = _MacFFVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 18, 3)
)
if mibBuilder.loadTexts:
    macFFVlanTable.setStatus("current")
_MacFFVlanEntry_Object = MibTableRow
macFFVlanEntry = _MacFFVlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 18, 3, 1)
)
macFFVlanEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "slotId"),
    (0, "ZYXEL-IES5000-MIB", "macFFVlanVid"),
)
if mibBuilder.loadTexts:
    macFFVlanEntry.setStatus("current")


class _MacFFVlanVid_Type(Integer32):
    """Custom type macFFVlanVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_MacFFVlanVid_Type.__name__ = "Integer32"
_MacFFVlanVid_Object = MibTableColumn
macFFVlanVid = _MacFFVlanVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 18, 3, 1, 1),
    _MacFFVlanVid_Type()
)
macFFVlanVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFFVlanVid.setStatus("current")
_MacFFVlanRowStatus_Type = RowStatus
_MacFFVlanRowStatus_Object = MibTableColumn
macFFVlanRowStatus = _MacFFVlanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 18, 3, 1, 2),
    _MacFFVlanRowStatus_Type()
)
macFFVlanRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    macFFVlanRowStatus.setStatus("current")
_MacFFFlush_Type = Integer32
_MacFFFlush_Object = MibScalar
macFFFlush = _MacFFFlush_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 18, 4),
    _MacFFFlush_Type()
)
macFFFlush.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macFFFlush.setStatus("current")
_Dhcpv6_ObjectIdentity = ObjectIdentity
dhcpv6 = _Dhcpv6_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 19)
)
_Dhcpv6RelayTable_Object = MibTable
dhcpv6RelayTable = _Dhcpv6RelayTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 19, 1)
)
if mibBuilder.loadTexts:
    dhcpv6RelayTable.setStatus("current")
_Dhcpv6RelayEntry_Object = MibTableRow
dhcpv6RelayEntry = _Dhcpv6RelayEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 19, 1, 1)
)
dhcpv6RelayEntry.setIndexNames(
    (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"),
)
if mibBuilder.loadTexts:
    dhcpv6RelayEntry.setStatus("current")


class _Dhcpv6RelayLdraState_Type(Integer32):
    """Custom type dhcpv6RelayLdraState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_Dhcpv6RelayLdraState_Type.__name__ = "Integer32"
_Dhcpv6RelayLdraState_Object = MibTableColumn
dhcpv6RelayLdraState = _Dhcpv6RelayLdraState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 19, 1, 1, 1),
    _Dhcpv6RelayLdraState_Type()
)
dhcpv6RelayLdraState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpv6RelayLdraState.setStatus("current")
_Dhcpv6RelayRowStatus_Type = RowStatus
_Dhcpv6RelayRowStatus_Object = MibTableColumn
dhcpv6RelayRowStatus = _Dhcpv6RelayRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 19, 1, 1, 2),
    _Dhcpv6RelayRowStatus_Type()
)
dhcpv6RelayRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpv6RelayRowStatus.setStatus("current")
_Dhcpv6RelayOptionTable_Object = MibTable
dhcpv6RelayOptionTable = _Dhcpv6RelayOptionTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 19, 2)
)
if mibBuilder.loadTexts:
    dhcpv6RelayOptionTable.setStatus("current")
_Dhcpv6RelayOptionEntry_Object = MibTableRow
dhcpv6RelayOptionEntry = _Dhcpv6RelayOptionEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 19, 2, 1)
)
dhcpv6RelayOptionEntry.setIndexNames(
    (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"),
    (0, "ZYXEL-IES5000-MIB", "dhcpv6RelayOptionId"),
)
if mibBuilder.loadTexts:
    dhcpv6RelayOptionEntry.setStatus("current")


class _Dhcpv6RelayOptionId_Type(Integer32):
    """Custom type dhcpv6RelayOptionId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(18,
              37)
        )
    )
    namedValues = NamedValues(
        *(("interfaceId", 18),
          ("remoteId", 37))
    )


_Dhcpv6RelayOptionId_Type.__name__ = "Integer32"
_Dhcpv6RelayOptionId_Object = MibTableColumn
dhcpv6RelayOptionId = _Dhcpv6RelayOptionId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 19, 2, 1, 1),
    _Dhcpv6RelayOptionId_Type()
)
dhcpv6RelayOptionId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpv6RelayOptionId.setStatus("current")


class _Dhcpv6RelayOptionState_Type(Integer32):
    """Custom type dhcpv6RelayOptionState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_Dhcpv6RelayOptionState_Type.__name__ = "Integer32"
_Dhcpv6RelayOptionState_Object = MibTableColumn
dhcpv6RelayOptionState = _Dhcpv6RelayOptionState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 19, 2, 1, 2),
    _Dhcpv6RelayOptionState_Type()
)
dhcpv6RelayOptionState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpv6RelayOptionState.setStatus("current")
_Dhcpv6RelayOptionFormat_Type = OctetString
_Dhcpv6RelayOptionFormat_Object = MibTableColumn
dhcpv6RelayOptionFormat = _Dhcpv6RelayOptionFormat_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 1, 19, 2, 1, 3),
    _Dhcpv6RelayOptionFormat_Type()
)
dhcpv6RelayOptionFormat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpv6RelayOptionFormat.setStatus("current")
_Alarmconf_ObjectIdentity = ObjectIdentity
alarmconf = _Alarmconf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2)
)
_AlarmOps_Type = Integer32
_AlarmOps_Object = MibScalar
alarmOps = _AlarmOps_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 1),
    _AlarmOps_Type()
)
alarmOps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    alarmOps.setStatus("current")
_AlarmConfTable_Object = MibTable
alarmConfTable = _AlarmConfTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 2)
)
if mibBuilder.loadTexts:
    alarmConfTable.setStatus("current")
_AlarmConfEntry_Object = MibTableRow
alarmConfEntry = _AlarmConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 2, 1)
)
alarmConfEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "alarmConfId"),
)
if mibBuilder.loadTexts:
    alarmConfEntry.setStatus("current")
_AlarmConfId_Type = Integer32
_AlarmConfId_Object = MibTableColumn
alarmConfId = _AlarmConfId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 2, 1, 1),
    _AlarmConfId_Type()
)
alarmConfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmConfId.setStatus("current")


class _AlarmConfFacility_Type(Integer32):
    """Custom type alarmConfFacility based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("local1", 1),
          ("local2", 2),
          ("local3", 3),
          ("local4", 4),
          ("local5", 5),
          ("local6", 6),
          ("local7", 7))
    )


_AlarmConfFacility_Type.__name__ = "Integer32"
_AlarmConfFacility_Object = MibTableColumn
alarmConfFacility = _AlarmConfFacility_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 2, 1, 2),
    _AlarmConfFacility_Type()
)
alarmConfFacility.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    alarmConfFacility.setStatus("current")
_AlarmConfTarget_Type = Integer32
_AlarmConfTarget_Object = MibTableColumn
alarmConfTarget = _AlarmConfTarget_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 2, 1, 3),
    _AlarmConfTarget_Type()
)
alarmConfTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    alarmConfTarget.setStatus("current")


class _AlarmConfSeverity_Type(Integer32):
    """Custom type alarmConfSeverity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("critical", 1),
          ("major", 2),
          ("minor", 3),
          ("info", 4))
    )


_AlarmConfSeverity_Type.__name__ = "Integer32"
_AlarmConfSeverity_Object = MibTableColumn
alarmConfSeverity = _AlarmConfSeverity_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 2, 1, 4),
    _AlarmConfSeverity_Type()
)
alarmConfSeverity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    alarmConfSeverity.setStatus("current")


class _AlarmConfClearable_Type(Integer32):
    """Custom type alarmConfClearable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clearable", 1),
          ("unclearable", 2))
    )


_AlarmConfClearable_Type.__name__ = "Integer32"
_AlarmConfClearable_Object = MibTableColumn
alarmConfClearable = _AlarmConfClearable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 2, 1, 5),
    _AlarmConfClearable_Type()
)
alarmConfClearable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    alarmConfClearable.setStatus("current")
_AlarmCurrTable_Object = MibTable
alarmCurrTable = _AlarmCurrTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 3)
)
if mibBuilder.loadTexts:
    alarmCurrTable.setStatus("current")
_AlarmCurrEntry_Object = MibTableRow
alarmCurrEntry = _AlarmCurrEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 3, 1)
)
alarmCurrEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "alarmCurrIndex"),
)
if mibBuilder.loadTexts:
    alarmCurrEntry.setStatus("current")
_AlarmCurrIndex_Type = Integer32
_AlarmCurrIndex_Object = MibTableColumn
alarmCurrIndex = _AlarmCurrIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 3, 1, 1),
    _AlarmCurrIndex_Type()
)
alarmCurrIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmCurrIndex.setStatus("current")
_AlarmCurrOccurTime_Type = TimeTicks
_AlarmCurrOccurTime_Object = MibTableColumn
alarmCurrOccurTime = _AlarmCurrOccurTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 3, 1, 2),
    _AlarmCurrOccurTime_Type()
)
alarmCurrOccurTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmCurrOccurTime.setStatus("current")
_AlarmCurrTrapOid_Type = ObjectIdentifier
_AlarmCurrTrapOid_Object = MibTableColumn
alarmCurrTrapOid = _AlarmCurrTrapOid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 3, 1, 3),
    _AlarmCurrTrapOid_Type()
)
alarmCurrTrapOid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmCurrTrapOid.setStatus("current")
_AlarmCurrParam1_Type = Integer32
_AlarmCurrParam1_Object = MibTableColumn
alarmCurrParam1 = _AlarmCurrParam1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 3, 1, 4),
    _AlarmCurrParam1_Type()
)
alarmCurrParam1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmCurrParam1.setStatus("current")
_AlarmCurrParam2_Type = Integer32
_AlarmCurrParam2_Object = MibTableColumn
alarmCurrParam2 = _AlarmCurrParam2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 3, 1, 5),
    _AlarmCurrParam2_Type()
)
alarmCurrParam2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmCurrParam2.setStatus("current")
_AlarmCurrParam3_Type = Integer32
_AlarmCurrParam3_Object = MibTableColumn
alarmCurrParam3 = _AlarmCurrParam3_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 3, 1, 6),
    _AlarmCurrParam3_Type()
)
alarmCurrParam3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmCurrParam3.setStatus("current")
_AlarmCurrParam4_Type = Integer32
_AlarmCurrParam4_Object = MibTableColumn
alarmCurrParam4 = _AlarmCurrParam4_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 3, 1, 7),
    _AlarmCurrParam4_Type()
)
alarmCurrParam4.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmCurrParam4.setStatus("current")
_AlarmCurrParam5_Type = Integer32
_AlarmCurrParam5_Object = MibTableColumn
alarmCurrParam5 = _AlarmCurrParam5_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 3, 1, 8),
    _AlarmCurrParam5_Type()
)
alarmCurrParam5.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmCurrParam5.setStatus("current")
_AlarmCurrParam6_Type = Integer32
_AlarmCurrParam6_Object = MibTableColumn
alarmCurrParam6 = _AlarmCurrParam6_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 3, 1, 9),
    _AlarmCurrParam6_Type()
)
alarmCurrParam6.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmCurrParam6.setStatus("current")
_AlarmCurrParam7_Type = Integer32
_AlarmCurrParam7_Object = MibTableColumn
alarmCurrParam7 = _AlarmCurrParam7_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 3, 1, 10),
    _AlarmCurrParam7_Type()
)
alarmCurrParam7.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmCurrParam7.setStatus("current")
_AlarmCurrParam8_Type = Integer32
_AlarmCurrParam8_Object = MibTableColumn
alarmCurrParam8 = _AlarmCurrParam8_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 3, 1, 11),
    _AlarmCurrParam8_Type()
)
alarmCurrParam8.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmCurrParam8.setStatus("current")
_AlarmCurrTimeDescr_Type = DisplayString
_AlarmCurrTimeDescr_Object = MibTableColumn
alarmCurrTimeDescr = _AlarmCurrTimeDescr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 3, 1, 12),
    _AlarmCurrTimeDescr_Type()
)
alarmCurrTimeDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmCurrTimeDescr.setStatus("current")


class _AlarmCurrSeverity_Type(Integer32):
    """Custom type alarmCurrSeverity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("critical", 1),
          ("major", 2),
          ("minor", 3),
          ("info", 4))
    )


_AlarmCurrSeverity_Type.__name__ = "Integer32"
_AlarmCurrSeverity_Object = MibTableColumn
alarmCurrSeverity = _AlarmCurrSeverity_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 3, 1, 13),
    _AlarmCurrSeverity_Type()
)
alarmCurrSeverity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmCurrSeverity.setStatus("current")
_AlarmCurrDescr_Type = DisplayString
_AlarmCurrDescr_Object = MibTableColumn
alarmCurrDescr = _AlarmCurrDescr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 3, 1, 14),
    _AlarmCurrDescr_Type()
)
alarmCurrDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmCurrDescr.setStatus("current")
_AlarmSeverityPortTable_Object = MibTable
alarmSeverityPortTable = _AlarmSeverityPortTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 4)
)
if mibBuilder.loadTexts:
    alarmSeverityPortTable.setStatus("current")
_AlarmSeverityPortEntry_Object = MibTableRow
alarmSeverityPortEntry = _AlarmSeverityPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 4, 1)
)
alarmSeverityPortEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    alarmSeverityPortEntry.setStatus("current")


class _SeverityThresh_Type(Integer32):
    """Custom type severityThresh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("critical", 1),
          ("major", 2),
          ("minor", 3),
          ("info", 4))
    )


_SeverityThresh_Type.__name__ = "Integer32"
_SeverityThresh_Object = MibTableColumn
severityThresh = _SeverityThresh_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 4, 1, 1),
    _SeverityThresh_Type()
)
severityThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    severityThresh.setStatus("current")
_ExternalAlarmTable_Object = MibTable
externalAlarmTable = _ExternalAlarmTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 5)
)
if mibBuilder.loadTexts:
    externalAlarmTable.setStatus("current")
_ExternalAlarmEntry_Object = MibTableRow
externalAlarmEntry = _ExternalAlarmEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 5, 1)
)
externalAlarmEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "externalAlarmIndex"),
)
if mibBuilder.loadTexts:
    externalAlarmEntry.setStatus("current")
_ExternalAlarmIndex_Type = Integer32
_ExternalAlarmIndex_Object = MibTableColumn
externalAlarmIndex = _ExternalAlarmIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 5, 1, 1),
    _ExternalAlarmIndex_Type()
)
externalAlarmIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    externalAlarmIndex.setStatus("current")
_ExternalAlarmName_Type = DisplayString
_ExternalAlarmName_Object = MibTableColumn
externalAlarmName = _ExternalAlarmName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 5, 1, 2),
    _ExternalAlarmName_Type()
)
externalAlarmName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    externalAlarmName.setStatus("current")
_AlarmTarget_Type = Integer32
_AlarmTarget_Object = MibScalar
alarmTarget = _AlarmTarget_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 6),
    _AlarmTarget_Type()
)
alarmTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    alarmTarget.setStatus("current")
_AlarmHisTable_Object = MibTable
alarmHisTable = _AlarmHisTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 7)
)
if mibBuilder.loadTexts:
    alarmHisTable.setStatus("current")
_AlarmHisEntry_Object = MibTableRow
alarmHisEntry = _AlarmHisEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 7, 1)
)
alarmHisEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "alarmHisIndex"),
)
if mibBuilder.loadTexts:
    alarmHisEntry.setStatus("current")
_AlarmHisIndex_Type = Integer32
_AlarmHisIndex_Object = MibTableColumn
alarmHisIndex = _AlarmHisIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 7, 1, 1),
    _AlarmHisIndex_Type()
)
alarmHisIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmHisIndex.setStatus("current")
_AlarmHisOccurTime_Type = TimeTicks
_AlarmHisOccurTime_Object = MibTableColumn
alarmHisOccurTime = _AlarmHisOccurTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 7, 1, 2),
    _AlarmHisOccurTime_Type()
)
alarmHisOccurTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmHisOccurTime.setStatus("current")
_AlarmHisTrapOid_Type = ObjectIdentifier
_AlarmHisTrapOid_Object = MibTableColumn
alarmHisTrapOid = _AlarmHisTrapOid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 7, 1, 3),
    _AlarmHisTrapOid_Type()
)
alarmHisTrapOid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmHisTrapOid.setStatus("current")
_AlarmHisParam1_Type = Integer32
_AlarmHisParam1_Object = MibTableColumn
alarmHisParam1 = _AlarmHisParam1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 7, 1, 4),
    _AlarmHisParam1_Type()
)
alarmHisParam1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmHisParam1.setStatus("current")
_AlarmHisParam2_Type = Integer32
_AlarmHisParam2_Object = MibTableColumn
alarmHisParam2 = _AlarmHisParam2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 7, 1, 5),
    _AlarmHisParam2_Type()
)
alarmHisParam2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmHisParam2.setStatus("current")
_AlarmHisParam3_Type = Integer32
_AlarmHisParam3_Object = MibTableColumn
alarmHisParam3 = _AlarmHisParam3_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 7, 1, 6),
    _AlarmHisParam3_Type()
)
alarmHisParam3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmHisParam3.setStatus("current")
_AlarmHisParam4_Type = Integer32
_AlarmHisParam4_Object = MibTableColumn
alarmHisParam4 = _AlarmHisParam4_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 7, 1, 7),
    _AlarmHisParam4_Type()
)
alarmHisParam4.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmHisParam4.setStatus("current")
_AlarmHisParam5_Type = Integer32
_AlarmHisParam5_Object = MibTableColumn
alarmHisParam5 = _AlarmHisParam5_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 7, 1, 8),
    _AlarmHisParam5_Type()
)
alarmHisParam5.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmHisParam5.setStatus("current")
_AlarmHisParam6_Type = Integer32
_AlarmHisParam6_Object = MibTableColumn
alarmHisParam6 = _AlarmHisParam6_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 7, 1, 9),
    _AlarmHisParam6_Type()
)
alarmHisParam6.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmHisParam6.setStatus("current")
_AlarmHisParam7_Type = Integer32
_AlarmHisParam7_Object = MibTableColumn
alarmHisParam7 = _AlarmHisParam7_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 7, 1, 10),
    _AlarmHisParam7_Type()
)
alarmHisParam7.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmHisParam7.setStatus("current")
_AlarmHisParam8_Type = Integer32
_AlarmHisParam8_Object = MibTableColumn
alarmHisParam8 = _AlarmHisParam8_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 7, 1, 11),
    _AlarmHisParam8_Type()
)
alarmHisParam8.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmHisParam8.setStatus("current")
_AlarmHisTimeDescr_Type = DisplayString
_AlarmHisTimeDescr_Object = MibTableColumn
alarmHisTimeDescr = _AlarmHisTimeDescr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 7, 1, 12),
    _AlarmHisTimeDescr_Type()
)
alarmHisTimeDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmHisTimeDescr.setStatus("current")


class _AlarmHisSeverity_Type(Integer32):
    """Custom type alarmHisSeverity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("critical", 1),
          ("major", 2),
          ("minor", 3),
          ("info", 4))
    )


_AlarmHisSeverity_Type.__name__ = "Integer32"
_AlarmHisSeverity_Object = MibTableColumn
alarmHisSeverity = _AlarmHisSeverity_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 7, 1, 13),
    _AlarmHisSeverity_Type()
)
alarmHisSeverity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmHisSeverity.setStatus("current")
_AlarmHisDescr_Type = DisplayString
_AlarmHisDescr_Object = MibTableColumn
alarmHisDescr = _AlarmHisDescr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 7, 1, 14),
    _AlarmHisDescr_Type()
)
alarmHisDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmHisDescr.setStatus("current")
_AlarmHisFilter_ObjectIdentity = ObjectIdentity
alarmHisFilter = _AlarmHisFilter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 8)
)
_AlarmHisFilterByIfIndex_Type = Integer32
_AlarmHisFilterByIfIndex_Object = MibScalar
alarmHisFilterByIfIndex = _AlarmHisFilterByIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 2, 8, 1),
    _AlarmHisFilterByIfIndex_Type()
)
alarmHisFilterByIfIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    alarmHisFilterByIfIndex.setStatus("current")
_Config_ObjectIdentity = ObjectIdentity
config = _Config_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 3)
)
_ConfigOps_Type = Integer32
_ConfigOps_Object = MibScalar
configOps = _ConfigOps_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 3, 1),
    _ConfigOps_Type()
)
configOps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    configOps.setStatus("current")
_Diagnostic_ObjectIdentity = ObjectIdentity
diagnostic = _Diagnostic_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4)
)
_Loopback_ObjectIdentity = ObjectIdentity
loopback = _Loopback_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 1)
)
_LoopbackTarget_Type = Integer32
_LoopbackTarget_Object = MibScalar
loopbackTarget = _LoopbackTarget_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 1, 1),
    _LoopbackTarget_Type()
)
loopbackTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    loopbackTarget.setStatus("current")
_LoopbackOps_Type = Integer32
_LoopbackOps_Object = MibScalar
loopbackOps = _LoopbackOps_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 1, 2),
    _LoopbackOps_Type()
)
loopbackOps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    loopbackOps.setStatus("current")
_LoopbackVpi_Type = Integer32
_LoopbackVpi_Object = MibScalar
loopbackVpi = _LoopbackVpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 1, 3),
    _LoopbackVpi_Type()
)
loopbackVpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    loopbackVpi.setStatus("current")
_LoopbackVci_Type = Integer32
_LoopbackVci_Object = MibScalar
loopbackVci = _LoopbackVci_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 1, 4),
    _LoopbackVci_Type()
)
loopbackVci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    loopbackVci.setStatus("current")
_LoopbackStatus_Type = DisplayString
_LoopbackStatus_Object = MibScalar
loopbackStatus = _LoopbackStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 1, 5),
    _LoopbackStatus_Type()
)
loopbackStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    loopbackStatus.setStatus("current")
_Ldm_ObjectIdentity = ObjectIdentity
ldm = _Ldm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2)
)
_LdmTarget_Type = Integer32
_LdmTarget_Object = MibScalar
ldmTarget = _LdmTarget_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 1),
    _LdmTarget_Type()
)
ldmTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldmTarget.setStatus("current")
_LdmOps_Type = Integer32
_LdmOps_Object = MibScalar
ldmOps = _LdmOps_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 2),
    _LdmOps_Type()
)
ldmOps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldmOps.setStatus("current")
_LdmStatus_Type = DisplayString
_LdmStatus_Object = MibScalar
ldmStatus = _LdmStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 3),
    _LdmStatus_Type()
)
ldmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmStatus.setStatus("current")
_LdmAtucLoopAttenuation_Type = Integer32
_LdmAtucLoopAttenuation_Object = MibScalar
ldmAtucLoopAttenuation = _LdmAtucLoopAttenuation_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 4),
    _LdmAtucLoopAttenuation_Type()
)
ldmAtucLoopAttenuation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAtucLoopAttenuation.setStatus("current")
if mibBuilder.loadTexts:
    ldmAtucLoopAttenuation.setUnits("tenth dB")
_LdmAtucSignalAttenuation_Type = Integer32
_LdmAtucSignalAttenuation_Object = MibScalar
ldmAtucSignalAttenuation = _LdmAtucSignalAttenuation_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 5),
    _LdmAtucSignalAttenuation_Type()
)
ldmAtucSignalAttenuation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAtucSignalAttenuation.setStatus("current")
if mibBuilder.loadTexts:
    ldmAtucSignalAttenuation.setUnits("tenth dB")
_LdmAtucSignalMargin_Type = Integer32
_LdmAtucSignalMargin_Object = MibScalar
ldmAtucSignalMargin = _LdmAtucSignalMargin_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 6),
    _LdmAtucSignalMargin_Type()
)
ldmAtucSignalMargin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAtucSignalMargin.setStatus("current")
if mibBuilder.loadTexts:
    ldmAtucSignalMargin.setUnits("tenth dB")
_LdmAtucAggregateTxPower_Type = Integer32
_LdmAtucAggregateTxPower_Object = MibScalar
ldmAtucAggregateTxPower = _LdmAtucAggregateTxPower_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 7),
    _LdmAtucAggregateTxPower_Type()
)
ldmAtucAggregateTxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAtucAggregateTxPower.setStatus("current")
if mibBuilder.loadTexts:
    ldmAtucAggregateTxPower.setUnits("tenth dB")
_LdmAtucAttainableBitRate_Type = Unsigned32
_LdmAtucAttainableBitRate_Object = MibScalar
ldmAtucAttainableBitRate = _LdmAtucAttainableBitRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 8),
    _LdmAtucAttainableBitRate_Type()
)
ldmAtucAttainableBitRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAtucAttainableBitRate.setStatus("current")
if mibBuilder.loadTexts:
    ldmAtucAttainableBitRate.setUnits("bits per second")
_LdmAturLoopAttenuation_Type = Integer32
_LdmAturLoopAttenuation_Object = MibScalar
ldmAturLoopAttenuation = _LdmAturLoopAttenuation_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 9),
    _LdmAturLoopAttenuation_Type()
)
ldmAturLoopAttenuation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAturLoopAttenuation.setStatus("current")
if mibBuilder.loadTexts:
    ldmAturLoopAttenuation.setUnits("tenth dB")
_LdmAturSignalAttenuation_Type = Integer32
_LdmAturSignalAttenuation_Object = MibScalar
ldmAturSignalAttenuation = _LdmAturSignalAttenuation_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 10),
    _LdmAturSignalAttenuation_Type()
)
ldmAturSignalAttenuation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAturSignalAttenuation.setStatus("current")
if mibBuilder.loadTexts:
    ldmAturSignalAttenuation.setUnits("tenth dB")
_LdmAturSignalMargin_Type = Integer32
_LdmAturSignalMargin_Object = MibScalar
ldmAturSignalMargin = _LdmAturSignalMargin_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 11),
    _LdmAturSignalMargin_Type()
)
ldmAturSignalMargin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAturSignalMargin.setStatus("current")
if mibBuilder.loadTexts:
    ldmAturSignalMargin.setUnits("tenth dB")
_LdmAturAggregateTxPower_Type = Integer32
_LdmAturAggregateTxPower_Object = MibScalar
ldmAturAggregateTxPower = _LdmAturAggregateTxPower_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 12),
    _LdmAturAggregateTxPower_Type()
)
ldmAturAggregateTxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAturAggregateTxPower.setStatus("current")
if mibBuilder.loadTexts:
    ldmAturAggregateTxPower.setUnits("tenth dB")
_LdmAturAttainableBitRate_Type = Unsigned32
_LdmAturAttainableBitRate_Object = MibScalar
ldmAturAttainableBitRate = _LdmAturAttainableBitRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 13),
    _LdmAturAttainableBitRate_Type()
)
ldmAturAttainableBitRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAturAttainableBitRate.setStatus("current")
if mibBuilder.loadTexts:
    ldmAturAttainableBitRate.setUnits("bits per second")
_LdmAtucNumOfSubcarriersPerPort_Type = Integer32
_LdmAtucNumOfSubcarriersPerPort_Object = MibScalar
ldmAtucNumOfSubcarriersPerPort = _LdmAtucNumOfSubcarriersPerPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 14),
    _LdmAtucNumOfSubcarriersPerPort_Type()
)
ldmAtucNumOfSubcarriersPerPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAtucNumOfSubcarriersPerPort.setStatus("current")
_LdmAturNumOfSubcarriersPerPort_Type = Integer32
_LdmAturNumOfSubcarriersPerPort_Object = MibScalar
ldmAturNumOfSubcarriersPerPort = _LdmAturNumOfSubcarriersPerPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 15),
    _LdmAturNumOfSubcarriersPerPort_Type()
)
ldmAturNumOfSubcarriersPerPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAturNumOfSubcarriersPerPort.setStatus("current")
_LdmAtucHlinScale_Type = Integer32
_LdmAtucHlinScale_Object = MibScalar
ldmAtucHlinScale = _LdmAtucHlinScale_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 16),
    _LdmAtucHlinScale_Type()
)
ldmAtucHlinScale.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAtucHlinScale.setStatus("current")
_LdmAtucHlinReal1_Type = OctetString
_LdmAtucHlinReal1_Object = MibScalar
ldmAtucHlinReal1 = _LdmAtucHlinReal1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 17),
    _LdmAtucHlinReal1_Type()
)
ldmAtucHlinReal1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAtucHlinReal1.setStatus("current")
_LdmAtucHlinReal2_Type = OctetString
_LdmAtucHlinReal2_Object = MibScalar
ldmAtucHlinReal2 = _LdmAtucHlinReal2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 18),
    _LdmAtucHlinReal2_Type()
)
ldmAtucHlinReal2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAtucHlinReal2.setStatus("current")
_LdmAtucHlinImage1_Type = OctetString
_LdmAtucHlinImage1_Object = MibScalar
ldmAtucHlinImage1 = _LdmAtucHlinImage1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 19),
    _LdmAtucHlinImage1_Type()
)
ldmAtucHlinImage1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAtucHlinImage1.setStatus("current")
_LdmAtucHlinImage2_Type = OctetString
_LdmAtucHlinImage2_Object = MibScalar
ldmAtucHlinImage2 = _LdmAtucHlinImage2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 20),
    _LdmAtucHlinImage2_Type()
)
ldmAtucHlinImage2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAtucHlinImage2.setStatus("current")
_LdmAtucHlog1_Type = OctetString
_LdmAtucHlog1_Object = MibScalar
ldmAtucHlog1 = _LdmAtucHlog1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 21),
    _LdmAtucHlog1_Type()
)
ldmAtucHlog1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAtucHlog1.setStatus("current")
_LdmAtucHlog2_Type = OctetString
_LdmAtucHlog2_Object = MibScalar
ldmAtucHlog2 = _LdmAtucHlog2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 22),
    _LdmAtucHlog2_Type()
)
ldmAtucHlog2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAtucHlog2.setStatus("current")
_LdmAtucQln1_Type = OctetString
_LdmAtucQln1_Object = MibScalar
ldmAtucQln1 = _LdmAtucQln1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 23),
    _LdmAtucQln1_Type()
)
ldmAtucQln1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAtucQln1.setStatus("current")
_LdmAtucQln2_Type = OctetString
_LdmAtucQln2_Object = MibScalar
ldmAtucQln2 = _LdmAtucQln2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 24),
    _LdmAtucQln2_Type()
)
ldmAtucQln2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAtucQln2.setStatus("current")
_LdmAtucSnr1_Type = OctetString
_LdmAtucSnr1_Object = MibScalar
ldmAtucSnr1 = _LdmAtucSnr1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 25),
    _LdmAtucSnr1_Type()
)
ldmAtucSnr1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAtucSnr1.setStatus("current")
_LdmAtucSnr2_Type = OctetString
_LdmAtucSnr2_Object = MibScalar
ldmAtucSnr2 = _LdmAtucSnr2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 26),
    _LdmAtucSnr2_Type()
)
ldmAtucSnr2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAtucSnr2.setStatus("current")
_LdmAturHlinScale_Type = Integer32
_LdmAturHlinScale_Object = MibScalar
ldmAturHlinScale = _LdmAturHlinScale_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 27),
    _LdmAturHlinScale_Type()
)
ldmAturHlinScale.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAturHlinScale.setStatus("current")
_LdmAturHlinReal_Type = OctetString
_LdmAturHlinReal_Object = MibScalar
ldmAturHlinReal = _LdmAturHlinReal_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 28),
    _LdmAturHlinReal_Type()
)
ldmAturHlinReal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAturHlinReal.setStatus("current")
_LdmAturHlinImage_Type = OctetString
_LdmAturHlinImage_Object = MibScalar
ldmAturHlinImage = _LdmAturHlinImage_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 29),
    _LdmAturHlinImage_Type()
)
ldmAturHlinImage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAturHlinImage.setStatus("current")
_LdmAturHlog_Type = OctetString
_LdmAturHlog_Object = MibScalar
ldmAturHlog = _LdmAturHlog_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 30),
    _LdmAturHlog_Type()
)
ldmAturHlog.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAturHlog.setStatus("current")
_LdmAturQln_Type = OctetString
_LdmAturQln_Object = MibScalar
ldmAturQln = _LdmAturQln_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 31),
    _LdmAturQln_Type()
)
ldmAturQln.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAturQln.setStatus("current")
_LdmAturSnr_Type = OctetString
_LdmAturSnr_Object = MibScalar
ldmAturSnr = _LdmAturSnr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 2, 32),
    _LdmAturSnr_Type()
)
ldmAturSnr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmAturSnr.setStatus("current")
_Selt_ObjectIdentity = ObjectIdentity
selt = _Selt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 3)
)
_SeltTarget_Type = Integer32
_SeltTarget_Object = MibScalar
seltTarget = _SeltTarget_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 3, 1),
    _SeltTarget_Type()
)
seltTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    seltTarget.setStatus("current")
_SeltOps_Type = Integer32
_SeltOps_Object = MibScalar
seltOps = _SeltOps_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 3, 2),
    _SeltOps_Type()
)
seltOps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    seltOps.setStatus("current")
_SeltStatus_Type = DisplayString
_SeltStatus_Object = MibScalar
seltStatus = _SeltStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 3, 3),
    _SeltStatus_Type()
)
seltStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    seltStatus.setStatus("current")


class _SeltCableType_Type(Integer32):
    """Custom type seltCableType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("awg24", 1),
          ("awg26", 2))
    )


_SeltCableType_Type.__name__ = "Integer32"
_SeltCableType_Object = MibScalar
seltCableType = _SeltCableType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 3, 4),
    _SeltCableType_Type()
)
seltCableType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    seltCableType.setStatus("current")
_SeltLoopEstimateLengthFt_Type = Integer32
_SeltLoopEstimateLengthFt_Object = MibScalar
seltLoopEstimateLengthFt = _SeltLoopEstimateLengthFt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 3, 5),
    _SeltLoopEstimateLengthFt_Type()
)
seltLoopEstimateLengthFt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    seltLoopEstimateLengthFt.setStatus("current")
if mibBuilder.loadTexts:
    seltLoopEstimateLengthFt.setUnits("feet")
_SeltLoopEstimateLengthMeter_Type = Integer32
_SeltLoopEstimateLengthMeter_Object = MibScalar
seltLoopEstimateLengthMeter = _SeltLoopEstimateLengthMeter_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 3, 6),
    _SeltLoopEstimateLengthMeter_Type()
)
seltLoopEstimateLengthMeter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    seltLoopEstimateLengthMeter.setStatus("current")
if mibBuilder.loadTexts:
    seltLoopEstimateLengthMeter.setUnits("meter")
_Mlt_ObjectIdentity = ObjectIdentity
mlt = _Mlt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4)
)
_MltTarget_Type = Integer32
_MltTarget_Object = MibScalar
mltTarget = _MltTarget_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 1),
    _MltTarget_Type()
)
mltTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mltTarget.setStatus("current")
_MltOps_Type = Integer32
_MltOps_Object = MibScalar
mltOps = _MltOps_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 2),
    _MltOps_Type()
)
mltOps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mltOps.setStatus("current")


class _MltOption_Type(Integer32):
    """Custom type mltOption based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("all", 1),
          ("vac", 2),
          ("vdc", 3),
          ("rload", 4),
          ("riso", 5),
          ("cap", 6),
          ("ren", 7),
          ("ring", 8),
          ("metering", 9),
          ("dialtone", 10),
          ("digit", 11),
          ("roh", 12))
    )


_MltOption_Type.__name__ = "Integer32"
_MltOption_Object = MibScalar
mltOption = _MltOption_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 3),
    _MltOption_Type()
)
mltOption.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mltOption.setStatus("current")


class _MltForce_Type(Integer32):
    """Custom type mltForce based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("force", 1),
          ("not-force", 2))
    )


_MltForce_Type.__name__ = "Integer32"
_MltForce_Object = MibScalar
mltForce = _MltForce_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 4),
    _MltForce_Type()
)
mltForce.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mltForce.setStatus("current")
_MltResult_ObjectIdentity = ObjectIdentity
mltResult = _MltResult_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 5)
)
_MltVacTip_Type = Integer32
_MltVacTip_Object = MibScalar
mltVacTip = _MltVacTip_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 5, 1),
    _MltVacTip_Type()
)
mltVacTip.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mltVacTip.setStatus("current")
if mibBuilder.loadTexts:
    mltVacTip.setUnits("0.1 rms")
_MltVacRing_Type = Integer32
_MltVacRing_Object = MibScalar
mltVacRing = _MltVacRing_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 5, 2),
    _MltVacRing_Type()
)
mltVacRing.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mltVacRing.setStatus("current")
if mibBuilder.loadTexts:
    mltVacRing.setUnits("0.1 rms")
_MltVacDiff_Type = Integer32
_MltVacDiff_Object = MibScalar
mltVacDiff = _MltVacDiff_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 5, 3),
    _MltVacDiff_Type()
)
mltVacDiff.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mltVacDiff.setStatus("current")
if mibBuilder.loadTexts:
    mltVacDiff.setUnits("0.1 rms")
_MltVdcTip_Type = Integer32
_MltVdcTip_Object = MibScalar
mltVdcTip = _MltVdcTip_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 5, 4),
    _MltVdcTip_Type()
)
mltVdcTip.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mltVdcTip.setStatus("current")
if mibBuilder.loadTexts:
    mltVdcTip.setUnits("0.1 volt")
_MltVdcRing_Type = Integer32
_MltVdcRing_Object = MibScalar
mltVdcRing = _MltVdcRing_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 5, 5),
    _MltVdcRing_Type()
)
mltVdcRing.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mltVdcRing.setStatus("current")
if mibBuilder.loadTexts:
    mltVdcRing.setUnits("0.1 volt")
_MltVdcDiff_Type = Integer32
_MltVdcDiff_Object = MibScalar
mltVdcDiff = _MltVdcDiff_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 5, 6),
    _MltVdcDiff_Type()
)
mltVdcDiff.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mltVdcDiff.setStatus("current")
if mibBuilder.loadTexts:
    mltVdcDiff.setUnits("0.1 volt")
_MltRLoop_Type = Integer32
_MltRLoop_Object = MibScalar
mltRLoop = _MltRLoop_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 5, 7),
    _MltRLoop_Type()
)
mltRLoop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mltRLoop.setStatus("current")
if mibBuilder.loadTexts:
    mltRLoop.setUnits("0.1 ohm")
_MltRtg_Type = Integer32
_MltRtg_Object = MibScalar
mltRtg = _MltRtg_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 5, 8),
    _MltRtg_Type()
)
mltRtg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mltRtg.setStatus("current")
if mibBuilder.loadTexts:
    mltRtg.setUnits("0.1 ohm")
_MltRrg_Type = Integer32
_MltRrg_Object = MibScalar
mltRrg = _MltRrg_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 5, 9),
    _MltRrg_Type()
)
mltRrg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mltRrg.setStatus("current")
if mibBuilder.loadTexts:
    mltRrg.setUnits("0.1 ohm")
_MltRtr_Type = Integer32
_MltRtr_Object = MibScalar
mltRtr = _MltRtr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 5, 10),
    _MltRtr_Type()
)
mltRtr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mltRtr.setStatus("current")
if mibBuilder.loadTexts:
    mltRtr.setUnits("0.1 ohm")
_MltCtg_Type = Integer32
_MltCtg_Object = MibScalar
mltCtg = _MltCtg_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 5, 11),
    _MltCtg_Type()
)
mltCtg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mltCtg.setStatus("current")
if mibBuilder.loadTexts:
    mltCtg.setUnits("10^-10 F")
_MltCrg_Type = Integer32
_MltCrg_Object = MibScalar
mltCrg = _MltCrg_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 5, 12),
    _MltCrg_Type()
)
mltCrg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mltCrg.setStatus("current")
if mibBuilder.loadTexts:
    mltCrg.setUnits("10^-10 F")
_MltCtr_Type = Integer32
_MltCtr_Object = MibScalar
mltCtr = _MltCtr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 5, 13),
    _MltCtr_Type()
)
mltCtr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mltCtr.setStatus("current")
if mibBuilder.loadTexts:
    mltCtr.setUnits("10^-10 F")
_MltRen_Type = Integer32
_MltRen_Object = MibScalar
mltRen = _MltRen_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 5, 14),
    _MltRen_Type()
)
mltRen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mltRen.setStatus("current")
if mibBuilder.loadTexts:
    mltRen.setUnits("0.1 ren")
_MltVRing_Type = Integer32
_MltVRing_Object = MibScalar
mltVRing = _MltVRing_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 5, 15),
    _MltVRing_Type()
)
mltVRing.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mltVRing.setStatus("current")
if mibBuilder.loadTexts:
    mltVRing.setUnits("0.1 volt")
_MltVMetering_Type = Integer32
_MltVMetering_Object = MibScalar
mltVMetering = _MltVMetering_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 5, 16),
    _MltVMetering_Type()
)
mltVMetering.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mltVMetering.setStatus("current")
if mibBuilder.loadTexts:
    mltVMetering.setUnits("0.1 vpeak")


class _MltDialToneDetected_Type(Integer32):
    """Custom type mltDialToneDetected based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("yes", 1),
          ("no", 2),
          ("test-failed", 3),
          ("no-result", 4))
    )


_MltDialToneDetected_Type.__name__ = "Integer32"
_MltDialToneDetected_Object = MibScalar
mltDialToneDetected = _MltDialToneDetected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 5, 17),
    _MltDialToneDetected_Type()
)
mltDialToneDetected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mltDialToneDetected.setStatus("current")
_MltDetectedDtmfCount_Type = Integer32
_MltDetectedDtmfCount_Object = MibScalar
mltDetectedDtmfCount = _MltDetectedDtmfCount_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 5, 18),
    _MltDetectedDtmfCount_Type()
)
mltDetectedDtmfCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mltDetectedDtmfCount.setStatus("current")
_MltDialToneDelay_Type = Integer32
_MltDialToneDelay_Object = MibScalar
mltDialToneDelay = _MltDialToneDelay_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 5, 19),
    _MltDialToneDelay_Type()
)
mltDialToneDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mltDialToneDelay.setStatus("current")
if mibBuilder.loadTexts:
    mltDialToneDelay.setUnits("0.001 sec")


class _MltReceiverState_Type(Integer32):
    """Custom type mltReceiverState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("on-hook", 1),
          ("off-hook", 2),
          ("short", 3),
          ("open", 4),
          ("not-measured", 5))
    )


_MltReceiverState_Type.__name__ = "Integer32"
_MltReceiverState_Object = MibScalar
mltReceiverState = _MltReceiverState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 5, 20),
    _MltReceiverState_Type()
)
mltReceiverState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mltReceiverState.setStatus("current")


class _MltDetectedDtmfDigit_Type(DisplayString):
    """Custom type mltDetectedDtmfDigit based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 63),
    )


_MltDetectedDtmfDigit_Type.__name__ = "DisplayString"
_MltDetectedDtmfDigit_Object = MibScalar
mltDetectedDtmfDigit = _MltDetectedDtmfDigit_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 5, 21),
    _MltDetectedDtmfDigit_Type()
)
mltDetectedDtmfDigit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mltDetectedDtmfDigit.setStatus("current")


class _MltErrorMsg_Type(DisplayString):
    """Custom type mltErrorMsg based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 128),
    )


_MltErrorMsg_Type.__name__ = "DisplayString"
_MltErrorMsg_Object = MibScalar
mltErrorMsg = _MltErrorMsg_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 5, 22),
    _MltErrorMsg_Type()
)
mltErrorMsg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mltErrorMsg.setStatus("current")
_MltRelayTable_Object = MibTable
mltRelayTable = _MltRelayTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 6)
)
if mibBuilder.loadTexts:
    mltRelayTable.setStatus("current")
_MltRelayEntry_Object = MibTableRow
mltRelayEntry = _MltRelayEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 6, 1)
)
mltRelayEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    mltRelayEntry.setStatus("current")


class _MltRelaySet_Type(Integer32):
    """Custom type mltRelaySet based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("in", 1),
          ("out", 2),
          ("both", 3),
          ("off", 4))
    )


_MltRelaySet_Type.__name__ = "Integer32"
_MltRelaySet_Object = MibTableColumn
mltRelaySet = _MltRelaySet_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 6, 1, 1),
    _MltRelaySet_Type()
)
mltRelaySet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mltRelaySet.setStatus("current")


class _MltRelayTimeout_Type(Integer32):
    """Custom type mltRelayTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_MltRelayTimeout_Type.__name__ = "Integer32"
_MltRelayTimeout_Object = MibTableColumn
mltRelayTimeout = _MltRelayTimeout_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 6, 1, 2),
    _MltRelayTimeout_Type()
)
mltRelayTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mltRelayTimeout.setStatus("current")
if mibBuilder.loadTexts:
    mltRelayTimeout.setUnits("minute")
_MltRelayForce_Type = Integer32
_MltRelayForce_Object = MibTableColumn
mltRelayForce = _MltRelayForce_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 6, 1, 3),
    _MltRelayForce_Type()
)
mltRelayForce.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mltRelayForce.setStatus("current")
_MltType_Type = Integer32
_MltType_Object = MibScalar
mltType = _MltType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 7),
    _MltType_Type()
)
mltType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mltType.setStatus("current")
_MltCount_Type = Integer32
_MltCount_Object = MibScalar
mltCount = _MltCount_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 8),
    _MltCount_Type()
)
mltCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mltCount.setStatus("current")
_MltAbort_Type = Integer32
_MltAbort_Object = MibScalar
mltAbort = _MltAbort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 4, 9),
    _MltAbort_Type()
)
mltAbort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mltAbort.setStatus("current")
_Oamloopback_ObjectIdentity = ObjectIdentity
oamloopback = _Oamloopback_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 5)
)
_OamloopbackTarget_Type = Integer32
_OamloopbackTarget_Object = MibScalar
oamloopbackTarget = _OamloopbackTarget_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 5, 1),
    _OamloopbackTarget_Type()
)
oamloopbackTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamloopbackTarget.setStatus("current")
_OamloopbackOps_Type = Integer32
_OamloopbackOps_Object = MibScalar
oamloopbackOps = _OamloopbackOps_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 5, 2),
    _OamloopbackOps_Type()
)
oamloopbackOps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamloopbackOps.setStatus("current")
_OamloopbackPacketNumber_Type = Integer32
_OamloopbackPacketNumber_Object = MibScalar
oamloopbackPacketNumber = _OamloopbackPacketNumber_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 5, 3),
    _OamloopbackPacketNumber_Type()
)
oamloopbackPacketNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamloopbackPacketNumber.setStatus("current")
_OamloopbackPacketSize_Type = Integer32
_OamloopbackPacketSize_Object = MibScalar
oamloopbackPacketSize = _OamloopbackPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 5, 4),
    _OamloopbackPacketSize_Type()
)
oamloopbackPacketSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamloopbackPacketSize.setStatus("current")
_OamloopbackResult_ObjectIdentity = ObjectIdentity
oamloopbackResult = _OamloopbackResult_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 5, 5)
)
_OamloopbackRecvCnt_Type = Integer32
_OamloopbackRecvCnt_Object = MibScalar
oamloopbackRecvCnt = _OamloopbackRecvCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 5, 5, 1),
    _OamloopbackRecvCnt_Type()
)
oamloopbackRecvCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamloopbackRecvCnt.setStatus("current")
_OamloopbackElapseTime_Type = Integer32
_OamloopbackElapseTime_Object = MibScalar
oamloopbackElapseTime = _OamloopbackElapseTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 5, 5, 2),
    _OamloopbackElapseTime_Type()
)
oamloopbackElapseTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamloopbackElapseTime.setStatus("current")


class _OamloopbackErrorStatus_Type(Integer32):
    """Custom type oamloopbackErrorStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("ok", 0),
          ("alloc-fail", 1),
          ("loopback-command-timeout", 2),
          ("receive-packet-timeout", 3),
          ("receive-packet-error", 4),
          ("remote-state-error", 5),
          ("unknown-result", 6))
    )


_OamloopbackErrorStatus_Type.__name__ = "Integer32"
_OamloopbackErrorStatus_Object = MibScalar
oamloopbackErrorStatus = _OamloopbackErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 5, 5, 3),
    _OamloopbackErrorStatus_Type()
)
oamloopbackErrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamloopbackErrorStatus.setStatus("current")
_Vdslldm_ObjectIdentity = ObjectIdentity
vdslldm = _Vdslldm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6)
)
_VdslldmTarget_Type = Integer32
_VdslldmTarget_Object = MibScalar
vdslldmTarget = _VdslldmTarget_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 1),
    _VdslldmTarget_Type()
)
vdslldmTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslldmTarget.setStatus("current")
_VdslldmOps_Type = Integer32
_VdslldmOps_Object = MibScalar
vdslldmOps = _VdslldmOps_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 2),
    _VdslldmOps_Type()
)
vdslldmOps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslldmOps.setStatus("current")
_VdslldmStatus_Type = DisplayString
_VdslldmStatus_Object = MibScalar
vdslldmStatus = _VdslldmStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 3),
    _VdslldmStatus_Type()
)
vdslldmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslldmStatus.setStatus("current")
_LdmVtuNeLoopAttenuationUS0_Type = Integer32
_LdmVtuNeLoopAttenuationUS0_Object = MibScalar
ldmVtuNeLoopAttenuationUS0 = _LdmVtuNeLoopAttenuationUS0_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 4),
    _LdmVtuNeLoopAttenuationUS0_Type()
)
ldmVtuNeLoopAttenuationUS0.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuNeLoopAttenuationUS0.setStatus("current")
if mibBuilder.loadTexts:
    ldmVtuNeLoopAttenuationUS0.setUnits("tenth dB")
_LdmVtuNeLoopAttenuationUS1_Type = Integer32
_LdmVtuNeLoopAttenuationUS1_Object = MibScalar
ldmVtuNeLoopAttenuationUS1 = _LdmVtuNeLoopAttenuationUS1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 5),
    _LdmVtuNeLoopAttenuationUS1_Type()
)
ldmVtuNeLoopAttenuationUS1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuNeLoopAttenuationUS1.setStatus("current")
if mibBuilder.loadTexts:
    ldmVtuNeLoopAttenuationUS1.setUnits("tenth dB")
_LdmVtuNeLoopAttenuationUS2_Type = Integer32
_LdmVtuNeLoopAttenuationUS2_Object = MibScalar
ldmVtuNeLoopAttenuationUS2 = _LdmVtuNeLoopAttenuationUS2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 6),
    _LdmVtuNeLoopAttenuationUS2_Type()
)
ldmVtuNeLoopAttenuationUS2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuNeLoopAttenuationUS2.setStatus("current")
if mibBuilder.loadTexts:
    ldmVtuNeLoopAttenuationUS2.setUnits("tenth dB")
_LdmVtuNeLoopAttenuationUS3_Type = Integer32
_LdmVtuNeLoopAttenuationUS3_Object = MibScalar
ldmVtuNeLoopAttenuationUS3 = _LdmVtuNeLoopAttenuationUS3_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 7),
    _LdmVtuNeLoopAttenuationUS3_Type()
)
ldmVtuNeLoopAttenuationUS3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuNeLoopAttenuationUS3.setStatus("current")
if mibBuilder.loadTexts:
    ldmVtuNeLoopAttenuationUS3.setUnits("tenth dB")
_LdmVtuNeSignalAttenuationUS0_Type = Integer32
_LdmVtuNeSignalAttenuationUS0_Object = MibScalar
ldmVtuNeSignalAttenuationUS0 = _LdmVtuNeSignalAttenuationUS0_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 8),
    _LdmVtuNeSignalAttenuationUS0_Type()
)
ldmVtuNeSignalAttenuationUS0.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuNeSignalAttenuationUS0.setStatus("current")
if mibBuilder.loadTexts:
    ldmVtuNeSignalAttenuationUS0.setUnits("tenth dB")
_LdmVtuNeSignalAttenuationUS1_Type = Integer32
_LdmVtuNeSignalAttenuationUS1_Object = MibScalar
ldmVtuNeSignalAttenuationUS1 = _LdmVtuNeSignalAttenuationUS1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 9),
    _LdmVtuNeSignalAttenuationUS1_Type()
)
ldmVtuNeSignalAttenuationUS1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuNeSignalAttenuationUS1.setStatus("current")
if mibBuilder.loadTexts:
    ldmVtuNeSignalAttenuationUS1.setUnits("tenth dB")
_LdmVtuNeSignalAttenuationUS2_Type = Integer32
_LdmVtuNeSignalAttenuationUS2_Object = MibScalar
ldmVtuNeSignalAttenuationUS2 = _LdmVtuNeSignalAttenuationUS2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 10),
    _LdmVtuNeSignalAttenuationUS2_Type()
)
ldmVtuNeSignalAttenuationUS2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuNeSignalAttenuationUS2.setStatus("current")
if mibBuilder.loadTexts:
    ldmVtuNeSignalAttenuationUS2.setUnits("tenth dB")
_LdmVtuNeSignalAttenuationUS3_Type = Integer32
_LdmVtuNeSignalAttenuationUS3_Object = MibScalar
ldmVtuNeSignalAttenuationUS3 = _LdmVtuNeSignalAttenuationUS3_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 11),
    _LdmVtuNeSignalAttenuationUS3_Type()
)
ldmVtuNeSignalAttenuationUS3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuNeSignalAttenuationUS3.setStatus("current")
if mibBuilder.loadTexts:
    ldmVtuNeSignalAttenuationUS3.setUnits("tenth dB")
_LdmVtuNeSignalMarginUS0_Type = Integer32
_LdmVtuNeSignalMarginUS0_Object = MibScalar
ldmVtuNeSignalMarginUS0 = _LdmVtuNeSignalMarginUS0_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 12),
    _LdmVtuNeSignalMarginUS0_Type()
)
ldmVtuNeSignalMarginUS0.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuNeSignalMarginUS0.setStatus("current")
if mibBuilder.loadTexts:
    ldmVtuNeSignalMarginUS0.setUnits("tenth dB")
_LdmVtuNeSignalMarginUS1_Type = Integer32
_LdmVtuNeSignalMarginUS1_Object = MibScalar
ldmVtuNeSignalMarginUS1 = _LdmVtuNeSignalMarginUS1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 13),
    _LdmVtuNeSignalMarginUS1_Type()
)
ldmVtuNeSignalMarginUS1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuNeSignalMarginUS1.setStatus("current")
if mibBuilder.loadTexts:
    ldmVtuNeSignalMarginUS1.setUnits("tenth dB")
_LdmVtuNeSignalMarginUS2_Type = Integer32
_LdmVtuNeSignalMarginUS2_Object = MibScalar
ldmVtuNeSignalMarginUS2 = _LdmVtuNeSignalMarginUS2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 14),
    _LdmVtuNeSignalMarginUS2_Type()
)
ldmVtuNeSignalMarginUS2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuNeSignalMarginUS2.setStatus("current")
if mibBuilder.loadTexts:
    ldmVtuNeSignalMarginUS2.setUnits("tenth dB")
_LdmVtuNeSignalMarginUS3_Type = Integer32
_LdmVtuNeSignalMarginUS3_Object = MibScalar
ldmVtuNeSignalMarginUS3 = _LdmVtuNeSignalMarginUS3_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 15),
    _LdmVtuNeSignalMarginUS3_Type()
)
ldmVtuNeSignalMarginUS3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuNeSignalMarginUS3.setStatus("current")
if mibBuilder.loadTexts:
    ldmVtuNeSignalMarginUS3.setUnits("tenth dB")
_LdmVtuNeAggregateTxPower_Type = Integer32
_LdmVtuNeAggregateTxPower_Object = MibScalar
ldmVtuNeAggregateTxPower = _LdmVtuNeAggregateTxPower_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 16),
    _LdmVtuNeAggregateTxPower_Type()
)
ldmVtuNeAggregateTxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuNeAggregateTxPower.setStatus("current")
if mibBuilder.loadTexts:
    ldmVtuNeAggregateTxPower.setUnits("tenth dB")
_LdmVtuNeAttainableBitRate_Type = Unsigned32
_LdmVtuNeAttainableBitRate_Object = MibScalar
ldmVtuNeAttainableBitRate = _LdmVtuNeAttainableBitRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 17),
    _LdmVtuNeAttainableBitRate_Type()
)
ldmVtuNeAttainableBitRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuNeAttainableBitRate.setStatus("current")
if mibBuilder.loadTexts:
    ldmVtuNeAttainableBitRate.setUnits("bits per second")
_LdmVtuFeLoopAttenuationDS1_Type = Integer32
_LdmVtuFeLoopAttenuationDS1_Object = MibScalar
ldmVtuFeLoopAttenuationDS1 = _LdmVtuFeLoopAttenuationDS1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 18),
    _LdmVtuFeLoopAttenuationDS1_Type()
)
ldmVtuFeLoopAttenuationDS1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuFeLoopAttenuationDS1.setStatus("current")
if mibBuilder.loadTexts:
    ldmVtuFeLoopAttenuationDS1.setUnits("tenth dB")
_LdmVtuFeLoopAttenuationDS2_Type = Integer32
_LdmVtuFeLoopAttenuationDS2_Object = MibScalar
ldmVtuFeLoopAttenuationDS2 = _LdmVtuFeLoopAttenuationDS2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 19),
    _LdmVtuFeLoopAttenuationDS2_Type()
)
ldmVtuFeLoopAttenuationDS2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuFeLoopAttenuationDS2.setStatus("current")
if mibBuilder.loadTexts:
    ldmVtuFeLoopAttenuationDS2.setUnits("tenth dB")
_LdmVtuFeLoopAttenuationDS3_Type = Integer32
_LdmVtuFeLoopAttenuationDS3_Object = MibScalar
ldmVtuFeLoopAttenuationDS3 = _LdmVtuFeLoopAttenuationDS3_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 20),
    _LdmVtuFeLoopAttenuationDS3_Type()
)
ldmVtuFeLoopAttenuationDS3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuFeLoopAttenuationDS3.setStatus("current")
if mibBuilder.loadTexts:
    ldmVtuFeLoopAttenuationDS3.setUnits("tenth dB")
_LdmVtuFeSignalAttenuationDS1_Type = Integer32
_LdmVtuFeSignalAttenuationDS1_Object = MibScalar
ldmVtuFeSignalAttenuationDS1 = _LdmVtuFeSignalAttenuationDS1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 21),
    _LdmVtuFeSignalAttenuationDS1_Type()
)
ldmVtuFeSignalAttenuationDS1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuFeSignalAttenuationDS1.setStatus("current")
if mibBuilder.loadTexts:
    ldmVtuFeSignalAttenuationDS1.setUnits("tenth dB")
_LdmVtuFeSignalAttenuationDS2_Type = Integer32
_LdmVtuFeSignalAttenuationDS2_Object = MibScalar
ldmVtuFeSignalAttenuationDS2 = _LdmVtuFeSignalAttenuationDS2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 22),
    _LdmVtuFeSignalAttenuationDS2_Type()
)
ldmVtuFeSignalAttenuationDS2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuFeSignalAttenuationDS2.setStatus("current")
if mibBuilder.loadTexts:
    ldmVtuFeSignalAttenuationDS2.setUnits("tenth dB")
_LdmVtuFeSignalAttenuationDS3_Type = Integer32
_LdmVtuFeSignalAttenuationDS3_Object = MibScalar
ldmVtuFeSignalAttenuationDS3 = _LdmVtuFeSignalAttenuationDS3_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 23),
    _LdmVtuFeSignalAttenuationDS3_Type()
)
ldmVtuFeSignalAttenuationDS3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuFeSignalAttenuationDS3.setStatus("current")
if mibBuilder.loadTexts:
    ldmVtuFeSignalAttenuationDS3.setUnits("tenth dB")
_LdmVtuFeSignalMarginDS1_Type = Integer32
_LdmVtuFeSignalMarginDS1_Object = MibScalar
ldmVtuFeSignalMarginDS1 = _LdmVtuFeSignalMarginDS1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 24),
    _LdmVtuFeSignalMarginDS1_Type()
)
ldmVtuFeSignalMarginDS1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuFeSignalMarginDS1.setStatus("current")
if mibBuilder.loadTexts:
    ldmVtuFeSignalMarginDS1.setUnits("tenth dB")
_LdmVtuFeSignalMarginDS2_Type = Integer32
_LdmVtuFeSignalMarginDS2_Object = MibScalar
ldmVtuFeSignalMarginDS2 = _LdmVtuFeSignalMarginDS2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 25),
    _LdmVtuFeSignalMarginDS2_Type()
)
ldmVtuFeSignalMarginDS2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuFeSignalMarginDS2.setStatus("current")
if mibBuilder.loadTexts:
    ldmVtuFeSignalMarginDS2.setUnits("tenth dB")
_LdmVtuFeSignalMarginDS3_Type = Integer32
_LdmVtuFeSignalMarginDS3_Object = MibScalar
ldmVtuFeSignalMarginDS3 = _LdmVtuFeSignalMarginDS3_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 26),
    _LdmVtuFeSignalMarginDS3_Type()
)
ldmVtuFeSignalMarginDS3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuFeSignalMarginDS3.setStatus("current")
if mibBuilder.loadTexts:
    ldmVtuFeSignalMarginDS3.setUnits("tenth dB")
_LdmVtuFeAggregateTxPower_Type = Integer32
_LdmVtuFeAggregateTxPower_Object = MibScalar
ldmVtuFeAggregateTxPower = _LdmVtuFeAggregateTxPower_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 27),
    _LdmVtuFeAggregateTxPower_Type()
)
ldmVtuFeAggregateTxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuFeAggregateTxPower.setStatus("current")
if mibBuilder.loadTexts:
    ldmVtuFeAggregateTxPower.setUnits("tenth dB")
_LdmVtuFeAttainableBitRate_Type = Unsigned32
_LdmVtuFeAttainableBitRate_Object = MibScalar
ldmVtuFeAttainableBitRate = _LdmVtuFeAttainableBitRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 28),
    _LdmVtuFeAttainableBitRate_Type()
)
ldmVtuFeAttainableBitRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuFeAttainableBitRate.setStatus("current")
if mibBuilder.loadTexts:
    ldmVtuFeAttainableBitRate.setUnits("bits per second")
_LdmVtuNeHlinScale_Type = Integer32
_LdmVtuNeHlinScale_Object = MibScalar
ldmVtuNeHlinScale = _LdmVtuNeHlinScale_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 29),
    _LdmVtuNeHlinScale_Type()
)
ldmVtuNeHlinScale.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuNeHlinScale.setStatus("current")
_LdmVtuNeHlinReal_Type = OctetString
_LdmVtuNeHlinReal_Object = MibScalar
ldmVtuNeHlinReal = _LdmVtuNeHlinReal_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 30),
    _LdmVtuNeHlinReal_Type()
)
ldmVtuNeHlinReal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuNeHlinReal.setStatus("current")
_LdmVtuNeHlinImage_Type = OctetString
_LdmVtuNeHlinImage_Object = MibScalar
ldmVtuNeHlinImage = _LdmVtuNeHlinImage_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 31),
    _LdmVtuNeHlinImage_Type()
)
ldmVtuNeHlinImage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuNeHlinImage.setStatus("current")
_LdmVtuNeHlog_Type = OctetString
_LdmVtuNeHlog_Object = MibScalar
ldmVtuNeHlog = _LdmVtuNeHlog_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 32),
    _LdmVtuNeHlog_Type()
)
ldmVtuNeHlog.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuNeHlog.setStatus("current")
_LdmVtuNeQln_Type = OctetString
_LdmVtuNeQln_Object = MibScalar
ldmVtuNeQln = _LdmVtuNeQln_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 33),
    _LdmVtuNeQln_Type()
)
ldmVtuNeQln.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuNeQln.setStatus("current")
_LdmVtuNeSnr_Type = OctetString
_LdmVtuNeSnr_Object = MibScalar
ldmVtuNeSnr = _LdmVtuNeSnr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 34),
    _LdmVtuNeSnr_Type()
)
ldmVtuNeSnr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuNeSnr.setStatus("current")
_LdmVtuFeHlinScale_Type = Integer32
_LdmVtuFeHlinScale_Object = MibScalar
ldmVtuFeHlinScale = _LdmVtuFeHlinScale_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 35),
    _LdmVtuFeHlinScale_Type()
)
ldmVtuFeHlinScale.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuFeHlinScale.setStatus("current")
_LdmVtuFeHlinReal_Type = OctetString
_LdmVtuFeHlinReal_Object = MibScalar
ldmVtuFeHlinReal = _LdmVtuFeHlinReal_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 36),
    _LdmVtuFeHlinReal_Type()
)
ldmVtuFeHlinReal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuFeHlinReal.setStatus("current")
_LdmVtuFeHlinImage_Type = OctetString
_LdmVtuFeHlinImage_Object = MibScalar
ldmVtuFeHlinImage = _LdmVtuFeHlinImage_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 37),
    _LdmVtuFeHlinImage_Type()
)
ldmVtuFeHlinImage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuFeHlinImage.setStatus("current")
_LdmVtuFeHlog_Type = OctetString
_LdmVtuFeHlog_Object = MibScalar
ldmVtuFeHlog = _LdmVtuFeHlog_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 38),
    _LdmVtuFeHlog_Type()
)
ldmVtuFeHlog.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuFeHlog.setStatus("current")
_LdmVtuFeQln_Type = OctetString
_LdmVtuFeQln_Object = MibScalar
ldmVtuFeQln = _LdmVtuFeQln_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 39),
    _LdmVtuFeQln_Type()
)
ldmVtuFeQln.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuFeQln.setStatus("current")
_LdmVtuFeSnr_Type = OctetString
_LdmVtuFeSnr_Object = MibScalar
ldmVtuFeSnr = _LdmVtuFeSnr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 40),
    _LdmVtuFeSnr_Type()
)
ldmVtuFeSnr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuFeSnr.setStatus("current")
_LdmVtuNeHlinGroupSize_Type = Integer32
_LdmVtuNeHlinGroupSize_Object = MibScalar
ldmVtuNeHlinGroupSize = _LdmVtuNeHlinGroupSize_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 41),
    _LdmVtuNeHlinGroupSize_Type()
)
ldmVtuNeHlinGroupSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuNeHlinGroupSize.setStatus("current")
_LdmVtuFeHlinGroupSize_Type = Integer32
_LdmVtuFeHlinGroupSize_Object = MibScalar
ldmVtuFeHlinGroupSize = _LdmVtuFeHlinGroupSize_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 42),
    _LdmVtuFeHlinGroupSize_Type()
)
ldmVtuFeHlinGroupSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuFeHlinGroupSize.setStatus("current")
_LdmVtuNeHlogGroupSize_Type = Integer32
_LdmVtuNeHlogGroupSize_Object = MibScalar
ldmVtuNeHlogGroupSize = _LdmVtuNeHlogGroupSize_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 43),
    _LdmVtuNeHlogGroupSize_Type()
)
ldmVtuNeHlogGroupSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuNeHlogGroupSize.setStatus("current")
_LdmVtuFeHlogGroupSize_Type = Integer32
_LdmVtuFeHlogGroupSize_Object = MibScalar
ldmVtuFeHlogGroupSize = _LdmVtuFeHlogGroupSize_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 44),
    _LdmVtuFeHlogGroupSize_Type()
)
ldmVtuFeHlogGroupSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuFeHlogGroupSize.setStatus("current")
_LdmVtuNeQlnGroupSize_Type = Integer32
_LdmVtuNeQlnGroupSize_Object = MibScalar
ldmVtuNeQlnGroupSize = _LdmVtuNeQlnGroupSize_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 45),
    _LdmVtuNeQlnGroupSize_Type()
)
ldmVtuNeQlnGroupSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuNeQlnGroupSize.setStatus("current")
_LdmVtuFeQlnGroupSize_Type = Integer32
_LdmVtuFeQlnGroupSize_Object = MibScalar
ldmVtuFeQlnGroupSize = _LdmVtuFeQlnGroupSize_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 46),
    _LdmVtuFeQlnGroupSize_Type()
)
ldmVtuFeQlnGroupSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuFeQlnGroupSize.setStatus("current")
_LdmVtuNeSnrGroupSize_Type = Integer32
_LdmVtuNeSnrGroupSize_Object = MibScalar
ldmVtuNeSnrGroupSize = _LdmVtuNeSnrGroupSize_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 47),
    _LdmVtuNeSnrGroupSize_Type()
)
ldmVtuNeSnrGroupSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuNeSnrGroupSize.setStatus("current")
_LdmVtuFeSnrGroupSize_Type = Integer32
_LdmVtuFeSnrGroupSize_Object = MibScalar
ldmVtuFeSnrGroupSize = _LdmVtuFeSnrGroupSize_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 6, 48),
    _LdmVtuFeSnrGroupSize_Type()
)
ldmVtuFeSnrGroupSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmVtuFeSnrGroupSize.setStatus("current")
_ImaOamF5Loopback_ObjectIdentity = ObjectIdentity
imaOamF5Loopback = _ImaOamF5Loopback_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 7)
)
_ImaOamF5LoopbackTargetGroupIndex_Type = Integer32
_ImaOamF5LoopbackTargetGroupIndex_Object = MibScalar
imaOamF5LoopbackTargetGroupIndex = _ImaOamF5LoopbackTargetGroupIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 7, 1),
    _ImaOamF5LoopbackTargetGroupIndex_Type()
)
imaOamF5LoopbackTargetGroupIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imaOamF5LoopbackTargetGroupIndex.setStatus("current")
_ImaOamF5LoopbackTargetVpi_Type = Integer32
_ImaOamF5LoopbackTargetVpi_Object = MibScalar
imaOamF5LoopbackTargetVpi = _ImaOamF5LoopbackTargetVpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 7, 2),
    _ImaOamF5LoopbackTargetVpi_Type()
)
imaOamF5LoopbackTargetVpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imaOamF5LoopbackTargetVpi.setStatus("current")
_ImaOamF5LoopbackTargetVci_Type = Integer32
_ImaOamF5LoopbackTargetVci_Object = MibScalar
imaOamF5LoopbackTargetVci = _ImaOamF5LoopbackTargetVci_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 7, 3),
    _ImaOamF5LoopbackTargetVci_Type()
)
imaOamF5LoopbackTargetVci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imaOamF5LoopbackTargetVci.setStatus("current")


class _ImaOamF5LoopbackType_Type(Integer32):
    """Custom type imaOamF5LoopbackType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("end-to-end", 1),
          ("segment", 2))
    )


_ImaOamF5LoopbackType_Type.__name__ = "Integer32"
_ImaOamF5LoopbackType_Object = MibScalar
imaOamF5LoopbackType = _ImaOamF5LoopbackType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 7, 4),
    _ImaOamF5LoopbackType_Type()
)
imaOamF5LoopbackType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imaOamF5LoopbackType.setStatus("current")
_ImaOamF5LoopbackOps_Type = Integer32
_ImaOamF5LoopbackOps_Object = MibScalar
imaOamF5LoopbackOps = _ImaOamF5LoopbackOps_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 7, 5),
    _ImaOamF5LoopbackOps_Type()
)
imaOamF5LoopbackOps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imaOamF5LoopbackOps.setStatus("current")
_ImaOamF5LoopbackSegmentId_Type = DisplayString
_ImaOamF5LoopbackSegmentId_Object = MibScalar
imaOamF5LoopbackSegmentId = _ImaOamF5LoopbackSegmentId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 7, 6),
    _ImaOamF5LoopbackSegmentId_Type()
)
imaOamF5LoopbackSegmentId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imaOamF5LoopbackSegmentId.setStatus("current")
_ImaOamF5LoopbackStatus_Type = DisplayString
_ImaOamF5LoopbackStatus_Object = MibScalar
imaOamF5LoopbackStatus = _ImaOamF5LoopbackStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 7, 7),
    _ImaOamF5LoopbackStatus_Type()
)
imaOamF5LoopbackStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaOamF5LoopbackStatus.setStatus("current")
_Xdsl2ExtStatus_ObjectIdentity = ObjectIdentity
xdsl2ExtStatus = _Xdsl2ExtStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 8)
)
_Xdsl2ExtSCStatusTable_Object = MibTable
xdsl2ExtSCStatusTable = _Xdsl2ExtSCStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 8, 1)
)
if mibBuilder.loadTexts:
    xdsl2ExtSCStatusTable.setStatus("current")
_Xdsl2ExtSCStatusEntry_Object = MibTableRow
xdsl2ExtSCStatusEntry = _Xdsl2ExtSCStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 8, 1, 1)
)
xdsl2ExtSCStatusEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "VDSL2-LINE-MIB", "xdsl2SCStatusDirection"),
)
if mibBuilder.loadTexts:
    xdsl2ExtSCStatusEntry.setStatus("current")


class _Xdsl2SCStatusActAtp_Type(Integer32):
    """Custom type xdsl2SCStatusActAtp based on Integer32"""
    defaultValue = 2147483647

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-310, 310),
        ValueRangeConstraint(2147483647, 2147483647),
    )


_Xdsl2SCStatusActAtp_Type.__name__ = "Integer32"
_Xdsl2SCStatusActAtp_Object = MibTableColumn
xdsl2SCStatusActAtp = _Xdsl2SCStatusActAtp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 8, 1, 1, 1),
    _Xdsl2SCStatusActAtp_Type()
)
xdsl2SCStatusActAtp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2SCStatusActAtp.setStatus("current")
if mibBuilder.loadTexts:
    xdsl2SCStatusActAtp.setUnits("0.1 dBm")
_Xdsl2ExtSCStatusBandTable_Object = MibTable
xdsl2ExtSCStatusBandTable = _Xdsl2ExtSCStatusBandTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 8, 2)
)
if mibBuilder.loadTexts:
    xdsl2ExtSCStatusBandTable.setStatus("current")
_Xdsl2ExtSCStatusBandEntry_Object = MibTableRow
xdsl2ExtSCStatusBandEntry = _Xdsl2ExtSCStatusBandEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 8, 2, 1)
)
xdsl2ExtSCStatusBandEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "VDSL2-LINE-MIB", "xdsl2SCStatusBand"),
)
if mibBuilder.loadTexts:
    xdsl2ExtSCStatusBandEntry.setStatus("current")


class _Xdsl2SCStatusBandSnrMargin_Type(Integer32):
    """Custom type xdsl2SCStatusBandSnrMargin based on Integer32"""
    defaultValue = 2147483646

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-640, 630),
        ValueRangeConstraint(2147483646, 2147483646),
        ValueRangeConstraint(2147483647, 2147483647),
    )


_Xdsl2SCStatusBandSnrMargin_Type.__name__ = "Integer32"
_Xdsl2SCStatusBandSnrMargin_Object = MibTableColumn
xdsl2SCStatusBandSnrMargin = _Xdsl2SCStatusBandSnrMargin_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 4, 8, 2, 1, 1),
    _Xdsl2SCStatusBandSnrMargin_Type()
)
xdsl2SCStatusBandSnrMargin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2SCStatusBandSnrMargin.setStatus("current")
if mibBuilder.loadTexts:
    xdsl2SCStatusBandSnrMargin.setUnits("0.1 dB")
_Ipconf_ObjectIdentity = ObjectIdentity
ipconf = _Ipconf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 5)
)
_StaticRoute_ObjectIdentity = ObjectIdentity
staticRoute = _StaticRoute_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 5, 1)
)
_MaxNumOfStaticRoutes_Type = Integer32
_MaxNumOfStaticRoutes_Object = MibScalar
maxNumOfStaticRoutes = _MaxNumOfStaticRoutes_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 5, 1, 1),
    _MaxNumOfStaticRoutes_Type()
)
maxNumOfStaticRoutes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfStaticRoutes.setStatus("current")
_StaticRouteTable_Object = MibTable
staticRouteTable = _StaticRouteTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 5, 1, 2)
)
if mibBuilder.loadTexts:
    staticRouteTable.setStatus("current")
_StaticRouteEntry_Object = MibTableRow
staticRouteEntry = _StaticRouteEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 5, 1, 2, 1)
)
staticRouteEntry.setIndexNames(
    (1, "ZYXEL-IES5000-MIB", "staticRouteName"),
)
if mibBuilder.loadTexts:
    staticRouteEntry.setStatus("current")


class _StaticRouteName_Type(DisplayString):
    """Custom type staticRouteName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_StaticRouteName_Type.__name__ = "DisplayString"
_StaticRouteName_Object = MibTableColumn
staticRouteName = _StaticRouteName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 5, 1, 2, 1, 1),
    _StaticRouteName_Type()
)
staticRouteName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    staticRouteName.setStatus("current")
_StaticRouteDest_Type = IpAddress
_StaticRouteDest_Object = MibTableColumn
staticRouteDest = _StaticRouteDest_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 5, 1, 2, 1, 2),
    _StaticRouteDest_Type()
)
staticRouteDest.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    staticRouteDest.setStatus("current")
_StaticRouteMask_Type = IpAddress
_StaticRouteMask_Object = MibTableColumn
staticRouteMask = _StaticRouteMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 5, 1, 2, 1, 3),
    _StaticRouteMask_Type()
)
staticRouteMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    staticRouteMask.setStatus("current")
_StaticRouteGateway_Type = IpAddress
_StaticRouteGateway_Object = MibTableColumn
staticRouteGateway = _StaticRouteGateway_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 5, 1, 2, 1, 4),
    _StaticRouteGateway_Type()
)
staticRouteGateway.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    staticRouteGateway.setStatus("current")
_StaticRouteMetric_Type = Integer32
_StaticRouteMetric_Object = MibTableColumn
staticRouteMetric = _StaticRouteMetric_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 5, 1, 2, 1, 5),
    _StaticRouteMetric_Type()
)
staticRouteMetric.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    staticRouteMetric.setStatus("current")
_StaticRouteRowStatus_Type = RowStatus
_StaticRouteRowStatus_Object = MibTableColumn
staticRouteRowStatus = _StaticRouteRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 5, 1, 2, 1, 6),
    _StaticRouteRowStatus_Type()
)
staticRouteRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    staticRouteRowStatus.setStatus("current")
_StaticIp_ObjectIdentity = ObjectIdentity
staticIp = _StaticIp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 5, 2)
)
_StaticIpInbandIp_Type = IpAddress
_StaticIpInbandIp_Object = MibScalar
staticIpInbandIp = _StaticIpInbandIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 5, 2, 1),
    _StaticIpInbandIp_Type()
)
staticIpInbandIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    staticIpInbandIp.setStatus("current")
_StaticIpInbandMask_Type = IpAddress
_StaticIpInbandMask_Object = MibScalar
staticIpInbandMask = _StaticIpInbandMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 5, 2, 2),
    _StaticIpInbandMask_Type()
)
staticIpInbandMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    staticIpInbandMask.setStatus("current")
_StaticIpInbandVlan_Type = Integer32
_StaticIpInbandVlan_Object = MibScalar
staticIpInbandVlan = _StaticIpInbandVlan_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 5, 2, 3),
    _StaticIpInbandVlan_Type()
)
staticIpInbandVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    staticIpInbandVlan.setStatus("current")
_StaticIpOutbandIp_Type = IpAddress
_StaticIpOutbandIp_Object = MibScalar
staticIpOutbandIp = _StaticIpOutbandIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 5, 2, 4),
    _StaticIpOutbandIp_Type()
)
staticIpOutbandIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    staticIpOutbandIp.setStatus("current")
_StaticIpOutbandMask_Type = IpAddress
_StaticIpOutbandMask_Object = MibScalar
staticIpOutbandMask = _StaticIpOutbandMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 5, 2, 5),
    _StaticIpOutbandMask_Type()
)
staticIpOutbandMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    staticIpOutbandMask.setStatus("current")
_StaticIpGatewayIP_Type = IpAddress
_StaticIpGatewayIP_Object = MibScalar
staticIpGatewayIP = _StaticIpGatewayIP_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 5, 2, 6),
    _StaticIpGatewayIP_Type()
)
staticIpGatewayIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    staticIpGatewayIP.setStatus("current")


class _StaticIpOps_Type(Integer32):
    """Custom type staticIpOps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("set", 1),
          ("reload", 2))
    )


_StaticIpOps_Type.__name__ = "Integer32"
_StaticIpOps_Object = MibScalar
staticIpOps = _StaticIpOps_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 5, 2, 7),
    _StaticIpOps_Type()
)
staticIpOps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    staticIpOps.setStatus("current")
_Lcm_ObjectIdentity = ObjectIdentity
lcm = _Lcm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 6)
)
_NumOfChassis_Type = Integer32
_NumOfChassis_Object = MibScalar
numOfChassis = _NumOfChassis_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 6, 1),
    _NumOfChassis_Type()
)
numOfChassis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    numOfChassis.setStatus("current")
_ChassisTable_Object = MibTable
chassisTable = _ChassisTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 6, 2)
)
if mibBuilder.loadTexts:
    chassisTable.setStatus("current")
_ChassisEntry_Object = MibTableRow
chassisEntry = _ChassisEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 6, 2, 1)
)
chassisEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "chassisId"),
)
if mibBuilder.loadTexts:
    chassisEntry.setStatus("current")
_ChassisId_Type = Integer32
_ChassisId_Object = MibTableColumn
chassisId = _ChassisId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 6, 2, 1, 1),
    _ChassisId_Type()
)
chassisId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisId.setStatus("current")
_ChassisFrameNumber_Type = Integer32
_ChassisFrameNumber_Object = MibTableColumn
chassisFrameNumber = _ChassisFrameNumber_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 6, 2, 1, 2),
    _ChassisFrameNumber_Type()
)
chassisFrameNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chassisFrameNumber.setStatus("current")
_ChassisSerialNumber_Type = DisplayString
_ChassisSerialNumber_Object = MibTableColumn
chassisSerialNumber = _ChassisSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 6, 2, 1, 3),
    _ChassisSerialNumber_Type()
)
chassisSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisSerialNumber.setStatus("current")


class _ChassisNumber_Type(Integer32):
    """Custom type chassisNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 64),
    )


_ChassisNumber_Type.__name__ = "Integer32"
_ChassisNumber_Object = MibTableColumn
chassisNumber = _ChassisNumber_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 6, 2, 1, 4),
    _ChassisNumber_Type()
)
chassisNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chassisNumber.setStatus("current")


class _ChassisStatus_Type(Integer32):
    """Custom type chassisStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("empty", 1),
          ("up", 2),
          ("down", 3),
          ("testing", 4))
    )


_ChassisStatus_Type.__name__ = "Integer32"
_ChassisStatus_Object = MibTableColumn
chassisStatus = _ChassisStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 6, 2, 1, 5),
    _ChassisStatus_Type()
)
chassisStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisStatus.setStatus("current")
_SlotTable_Object = MibTable
slotTable = _SlotTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 6, 3)
)
if mibBuilder.loadTexts:
    slotTable.setStatus("current")
_SlotEntry_Object = MibTableRow
slotEntry = _SlotEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 6, 3, 1)
)
slotEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "chassisId"),
    (0, "ZYXEL-IES5000-MIB", "slotId"),
)
if mibBuilder.loadTexts:
    slotEntry.setStatus("current")
_SlotId_Type = Integer32
_SlotId_Object = MibTableColumn
slotId = _SlotId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 6, 3, 1, 1),
    _SlotId_Type()
)
slotId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotId.setStatus("current")


class _SlotModuleType_Type(Integer32):
    """Custom type slotModuleType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              119,
              120,
              121,
              122,
              123,
              124,
              125,
              126,
              127,
              128,
              129)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 1),
          ("msc1000G", 101),
          ("alc1248G-51", 102),
          ("alc1248G-53", 103),
          ("slc1248G-22", 104),
          ("vlc1224G-41", 105),
          ("msc1024G", 106),
          ("alc1272G-51", 107),
          ("vop1248G-61-SIP", 108),
          ("msc1000GA", 109),
          ("vlc1324G-51", 110),
          ("msc1224G", 111),
          ("vop1248G-61-H248", 112),
          ("vlc1348G-51", 113),
          ("elc1220G-55", 114),
          ("msc1024GA", 115),
          ("vlc1324G-53", 116),
          ("ima1408G-81", 117),
          ("vlc1424G-56", 118),
          ("slc1348G-22", 119),
          ("vlc1348G-53", 120),
          ("alc1372G-51", 121),
          ("msc1024GB", 122),
          ("msc1224GB", 123),
          ("vop1372G-61-H248", 124),
          ("msc1024GC", 125),
          ("glc1320G-55", 126),
          ("vop1372G-61-SIP", 127),
          ("alc1348G-51C", 128),
          ("alc1348G-51C-H248", 129))
    )


_SlotModuleType_Type.__name__ = "Integer32"
_SlotModuleType_Object = MibTableColumn
slotModuleType = _SlotModuleType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 6, 3, 1, 2),
    _SlotModuleType_Type()
)
slotModuleType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotModuleType.setStatus("current")
_SlotModuleDescr_Type = DisplayString
_SlotModuleDescr_Object = MibTableColumn
slotModuleDescr = _SlotModuleDescr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 6, 3, 1, 3),
    _SlotModuleDescr_Type()
)
slotModuleDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotModuleDescr.setStatus("current")
_SlotModuleFWVersion_Type = DisplayString
_SlotModuleFWVersion_Object = MibTableColumn
slotModuleFWVersion = _SlotModuleFWVersion_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 6, 3, 1, 4),
    _SlotModuleFWVersion_Type()
)
slotModuleFWVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotModuleFWVersion.setStatus("current")
_SlotModuleDriverVersion_Type = DisplayString
_SlotModuleDriverVersion_Object = MibTableColumn
slotModuleDriverVersion = _SlotModuleDriverVersion_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 6, 3, 1, 5),
    _SlotModuleDriverVersion_Type()
)
slotModuleDriverVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotModuleDriverVersion.setStatus("current")
_SlotModuleModemCodeVersion_Type = DisplayString
_SlotModuleModemCodeVersion_Object = MibTableColumn
slotModuleModemCodeVersion = _SlotModuleModemCodeVersion_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 6, 3, 1, 6),
    _SlotModuleModemCodeVersion_Type()
)
slotModuleModemCodeVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotModuleModemCodeVersion.setStatus("current")


class _SlotModuleStatus_Type(Integer32):
    """Custom type slotModuleStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("empty", 1),
          ("up", 2),
          ("down", 3),
          ("testing", 4),
          ("standby", 5))
    )


_SlotModuleStatus_Type.__name__ = "Integer32"
_SlotModuleStatus_Object = MibTableColumn
slotModuleStatus = _SlotModuleStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 6, 3, 1, 7),
    _SlotModuleStatus_Type()
)
slotModuleStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotModuleStatus.setStatus("current")
_SlotModuleAlarmStatus_Type = Integer32
_SlotModuleAlarmStatus_Object = MibTableColumn
slotModuleAlarmStatus = _SlotModuleAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 6, 3, 1, 8),
    _SlotModuleAlarmStatus_Type()
)
slotModuleAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotModuleAlarmStatus.setStatus("current")
_SlotModuleSerialNumber_Type = DisplayString
_SlotModuleSerialNumber_Object = MibTableColumn
slotModuleSerialNumber = _SlotModuleSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 6, 3, 1, 9),
    _SlotModuleSerialNumber_Type()
)
slotModuleSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotModuleSerialNumber.setStatus("current")
_SlotModuleHWVersion_Type = DisplayString
_SlotModuleHWVersion_Object = MibTableColumn
slotModuleHWVersion = _SlotModuleHWVersion_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 6, 3, 1, 10),
    _SlotModuleHWVersion_Type()
)
slotModuleHWVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotModuleHWVersion.setStatus("current")
_SlotModuleUpTime_Type = Integer32
_SlotModuleUpTime_Object = MibTableColumn
slotModuleUpTime = _SlotModuleUpTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 6, 3, 1, 11),
    _SlotModuleUpTime_Type()
)
slotModuleUpTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotModuleUpTime.setStatus("current")
if mibBuilder.loadTexts:
    slotModuleUpTime.setUnits("second")
_SlotModuleMacAddress_Type = MacAddress
_SlotModuleMacAddress_Object = MibTableColumn
slotModuleMacAddress = _SlotModuleMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 6, 3, 1, 12),
    _SlotModuleMacAddress_Type()
)
slotModuleMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotModuleMacAddress.setStatus("current")
_SlotModuleMacAddress2_Type = MacAddress
_SlotModuleMacAddress2_Object = MibTableColumn
slotModuleMacAddress2 = _SlotModuleMacAddress2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 6, 3, 1, 13),
    _SlotModuleMacAddress2_Type()
)
slotModuleMacAddress2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotModuleMacAddress2.setStatus("current")
_MscPortTable_Object = MibTable
mscPortTable = _MscPortTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 6, 4)
)
if mibBuilder.loadTexts:
    mscPortTable.setStatus("current")
_MscPortEntry_Object = MibTableRow
mscPortEntry = _MscPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 6, 4, 1)
)
mscPortEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "chassisId"),
    (0, "ZYXEL-IES5000-MIB", "slotId"),
    (0, "ZYXEL-IES5000-MIB", "mscPortId"),
)
if mibBuilder.loadTexts:
    mscPortEntry.setStatus("current")
_MscPortId_Type = Integer32
_MscPortId_Object = MibTableColumn
mscPortId = _MscPortId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 6, 4, 1, 1),
    _MscPortId_Type()
)
mscPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscPortId.setStatus("current")


class _MscPortType_Type(Integer32):
    """Custom type mscPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 1),
          ("e1000BaseT", 2),
          ("e1000BaseLX", 3),
          ("e1000BaseSX", 4),
          ("e100BaseFX", 5),
          ("e100BaseTX", 6),
          ("e1000BaseGBIC", 7),
          ("e10000BaseGBIC", 8))
    )


_MscPortType_Type.__name__ = "Integer32"
_MscPortType_Object = MibTableColumn
mscPortType = _MscPortType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 6, 4, 1, 2),
    _MscPortType_Type()
)
mscPortType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscPortType.setStatus("current")
_Multicast_ObjectIdentity = ObjectIdentity
multicast = _Multicast_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7)
)


class _IgmpEnable_Type(Integer32):
    """Custom type igmpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enableProxy", 1),
          ("enableSnooping", 2),
          ("disable", 3))
    )


_IgmpEnable_Type.__name__ = "Integer32"
_IgmpEnable_Object = MibScalar
igmpEnable = _IgmpEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 1),
    _IgmpEnable_Type()
)
igmpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpEnable.setStatus("current")
_StaticMulticast_ObjectIdentity = ObjectIdentity
staticMulticast = _StaticMulticast_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 2)
)
_MaxNumberOfMcastGroups_Type = Integer32
_MaxNumberOfMcastGroups_Object = MibScalar
maxNumberOfMcastGroups = _MaxNumberOfMcastGroups_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 2, 1),
    _MaxNumberOfMcastGroups_Type()
)
maxNumberOfMcastGroups.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumberOfMcastGroups.setStatus("current")
_McastGroupTable_Object = MibTable
mcastGroupTable = _McastGroupTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 2, 2)
)
if mibBuilder.loadTexts:
    mcastGroupTable.setStatus("current")
_McastGroupEntry_Object = MibTableRow
mcastGroupEntry = _McastGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 2, 2, 1)
)
mcastGroupEntry.setIndexNames(
    (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"),
    (0, "ZYXEL-IES5000-MIB", "mcastGroupIp"),
)
if mibBuilder.loadTexts:
    mcastGroupEntry.setStatus("current")
_McastGroupIp_Type = IpAddress
_McastGroupIp_Object = MibTableColumn
mcastGroupIp = _McastGroupIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 2, 2, 1, 1),
    _McastGroupIp_Type()
)
mcastGroupIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcastGroupIp.setStatus("current")
_McastGroupFixedPorts_Type = PortList
_McastGroupFixedPorts_Object = MibTableColumn
mcastGroupFixedPorts = _McastGroupFixedPorts_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 2, 2, 1, 2),
    _McastGroupFixedPorts_Type()
)
mcastGroupFixedPorts.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mcastGroupFixedPorts.setStatus("current")
_McastGroupForbiddenPorts_Type = PortList
_McastGroupForbiddenPorts_Object = MibTableColumn
mcastGroupForbiddenPorts = _McastGroupForbiddenPorts_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 2, 2, 1, 3),
    _McastGroupForbiddenPorts_Type()
)
mcastGroupForbiddenPorts.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mcastGroupForbiddenPorts.setStatus("current")
_McastGroupRowStatus_Type = RowStatus
_McastGroupRowStatus_Object = MibTableColumn
mcastGroupRowStatus = _McastGroupRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 2, 2, 1, 4),
    _McastGroupRowStatus_Type()
)
mcastGroupRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mcastGroupRowStatus.setStatus("current")
_MaxNumberOfMacMcastGroups_Type = Integer32
_MaxNumberOfMacMcastGroups_Object = MibScalar
maxNumberOfMacMcastGroups = _MaxNumberOfMacMcastGroups_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 2, 3),
    _MaxNumberOfMacMcastGroups_Type()
)
maxNumberOfMacMcastGroups.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumberOfMacMcastGroups.setStatus("current")
_MacMcastGroupTable_Object = MibTable
macMcastGroupTable = _MacMcastGroupTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 2, 4)
)
if mibBuilder.loadTexts:
    macMcastGroupTable.setStatus("current")
_MacMcastGroupEntry_Object = MibTableRow
macMcastGroupEntry = _MacMcastGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 2, 4, 1)
)
macMcastGroupEntry.setIndexNames(
    (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"),
    (0, "ZYXEL-IES5000-MIB", "macMcastGroupMac"),
)
if mibBuilder.loadTexts:
    macMcastGroupEntry.setStatus("current")
_MacMcastGroupMac_Type = PhysAddress
_MacMcastGroupMac_Object = MibTableColumn
macMcastGroupMac = _MacMcastGroupMac_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 2, 4, 1, 1),
    _MacMcastGroupMac_Type()
)
macMcastGroupMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macMcastGroupMac.setStatus("current")
_MacMcastGroupFixedPorts_Type = PortList
_MacMcastGroupFixedPorts_Object = MibTableColumn
macMcastGroupFixedPorts = _MacMcastGroupFixedPorts_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 2, 4, 1, 2),
    _MacMcastGroupFixedPorts_Type()
)
macMcastGroupFixedPorts.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    macMcastGroupFixedPorts.setStatus("current")
_MacMcastGroupRowStatus_Type = RowStatus
_MacMcastGroupRowStatus_Object = MibTableColumn
macMcastGroupRowStatus = _MacMcastGroupRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 2, 4, 1, 3),
    _MacMcastGroupRowStatus_Type()
)
macMcastGroupRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    macMcastGroupRowStatus.setStatus("current")
_McastInetGroupTable_Object = MibTable
mcastInetGroupTable = _McastInetGroupTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 2, 5)
)
if mibBuilder.loadTexts:
    mcastInetGroupTable.setStatus("current")
_McastInetGroupEntry_Object = MibTableRow
mcastInetGroupEntry = _McastInetGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 2, 5, 1)
)
mcastInetGroupEntry.setIndexNames(
    (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"),
    (0, "ZYXEL-IES5000-MIB", "mcastGroupInetAddrType"),
    (0, "ZYXEL-IES5000-MIB", "mcastGroupInetAddr"),
)
if mibBuilder.loadTexts:
    mcastInetGroupEntry.setStatus("current")
_McastGroupInetAddrType_Type = InetAddressType
_McastGroupInetAddrType_Object = MibTableColumn
mcastGroupInetAddrType = _McastGroupInetAddrType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 2, 5, 1, 1),
    _McastGroupInetAddrType_Type()
)
mcastGroupInetAddrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcastGroupInetAddrType.setStatus("current")
_McastGroupInetAddr_Type = InetAddress
_McastGroupInetAddr_Object = MibTableColumn
mcastGroupInetAddr = _McastGroupInetAddr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 2, 5, 1, 2),
    _McastGroupInetAddr_Type()
)
mcastGroupInetAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcastGroupInetAddr.setStatus("current")
_McastGroupInetFixedPorts_Type = PortList
_McastGroupInetFixedPorts_Object = MibTableColumn
mcastGroupInetFixedPorts = _McastGroupInetFixedPorts_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 2, 5, 1, 3),
    _McastGroupInetFixedPorts_Type()
)
mcastGroupInetFixedPorts.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mcastGroupInetFixedPorts.setStatus("current")
_McastGroupInetForbiddenPorts_Type = PortList
_McastGroupInetForbiddenPorts_Object = MibTableColumn
mcastGroupInetForbiddenPorts = _McastGroupInetForbiddenPorts_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 2, 5, 1, 4),
    _McastGroupInetForbiddenPorts_Type()
)
mcastGroupInetForbiddenPorts.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mcastGroupInetForbiddenPorts.setStatus("current")
_McastGroupInetRowStatus_Type = RowStatus
_McastGroupInetRowStatus_Object = MibTableColumn
mcastGroupInetRowStatus = _McastGroupInetRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 2, 5, 1, 5),
    _McastGroupInetRowStatus_Type()
)
mcastGroupInetRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mcastGroupInetRowStatus.setStatus("current")
_IgmpFilter_ObjectIdentity = ObjectIdentity
igmpFilter = _IgmpFilter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 3)
)
_MaxNumOfIgmpFilters_Type = Integer32
_MaxNumOfIgmpFilters_Object = MibScalar
maxNumOfIgmpFilters = _MaxNumOfIgmpFilters_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 3, 1),
    _MaxNumOfIgmpFilters_Type()
)
maxNumOfIgmpFilters.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfIgmpFilters.setStatus("current")
_IgmpFilterTable_Object = MibTable
igmpFilterTable = _IgmpFilterTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 3, 2)
)
if mibBuilder.loadTexts:
    igmpFilterTable.setStatus("current")
_IgmpFilterEntry_Object = MibTableRow
igmpFilterEntry = _IgmpFilterEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 3, 2, 1)
)
igmpFilterEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "igmpFilterName"),
    (0, "ZYXEL-IES5000-MIB", "igmpFilterIndex"),
)
if mibBuilder.loadTexts:
    igmpFilterEntry.setStatus("current")


class _IgmpFilterName_Type(DisplayString):
    """Custom type igmpFilterName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_IgmpFilterName_Type.__name__ = "DisplayString"
_IgmpFilterName_Object = MibTableColumn
igmpFilterName = _IgmpFilterName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 3, 2, 1, 1),
    _IgmpFilterName_Type()
)
igmpFilterName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpFilterName.setStatus("current")
_IgmpFilterIndex_Type = Integer32
_IgmpFilterIndex_Object = MibTableColumn
igmpFilterIndex = _IgmpFilterIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 3, 2, 1, 2),
    _IgmpFilterIndex_Type()
)
igmpFilterIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpFilterIndex.setStatus("current")
_IgmpFilterStartIp_Type = IpAddress
_IgmpFilterStartIp_Object = MibTableColumn
igmpFilterStartIp = _IgmpFilterStartIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 3, 2, 1, 3),
    _IgmpFilterStartIp_Type()
)
igmpFilterStartIp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    igmpFilterStartIp.setStatus("current")
_IgmpFilterEndIp_Type = IpAddress
_IgmpFilterEndIp_Object = MibTableColumn
igmpFilterEndIp = _IgmpFilterEndIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 3, 2, 1, 4),
    _IgmpFilterEndIp_Type()
)
igmpFilterEndIp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    igmpFilterEndIp.setStatus("current")
_IgmpFilterRowStatus_Type = RowStatus
_IgmpFilterRowStatus_Object = MibTableColumn
igmpFilterRowStatus = _IgmpFilterRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 3, 2, 1, 5),
    _IgmpFilterRowStatus_Type()
)
igmpFilterRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    igmpFilterRowStatus.setStatus("current")
_IgmpFilterInetAddrType_Type = InetAddressType
_IgmpFilterInetAddrType_Object = MibTableColumn
igmpFilterInetAddrType = _IgmpFilterInetAddrType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 3, 2, 1, 6),
    _IgmpFilterInetAddrType_Type()
)
igmpFilterInetAddrType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    igmpFilterInetAddrType.setStatus("current")
_IgmpFilterInetAddrStart_Type = InetAddress
_IgmpFilterInetAddrStart_Object = MibTableColumn
igmpFilterInetAddrStart = _IgmpFilterInetAddrStart_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 3, 2, 1, 7),
    _IgmpFilterInetAddrStart_Type()
)
igmpFilterInetAddrStart.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    igmpFilterInetAddrStart.setStatus("current")
_IgmpFilterInetAddrEnd_Type = InetAddress
_IgmpFilterInetAddrEnd_Object = MibTableColumn
igmpFilterInetAddrEnd = _IgmpFilterInetAddrEnd_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 3, 2, 1, 8),
    _IgmpFilterInetAddrEnd_Type()
)
igmpFilterInetAddrEnd.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    igmpFilterInetAddrEnd.setStatus("current")
_IgmpFilterPortTable_Object = MibTable
igmpFilterPortTable = _IgmpFilterPortTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 3, 3)
)
if mibBuilder.loadTexts:
    igmpFilterPortTable.setStatus("current")
_IgmpFilterPortEntry_Object = MibTableRow
igmpFilterPortEntry = _IgmpFilterPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 3, 3, 1)
)
igmpFilterPortEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    igmpFilterPortEntry.setStatus("current")


class _IgmpFilterPortFilterName_Type(DisplayString):
    """Custom type igmpFilterPortFilterName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_IgmpFilterPortFilterName_Type.__name__ = "DisplayString"
_IgmpFilterPortFilterName_Object = MibTableColumn
igmpFilterPortFilterName = _IgmpFilterPortFilterName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 3, 3, 1, 1),
    _IgmpFilterPortFilterName_Type()
)
igmpFilterPortFilterName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpFilterPortFilterName.setStatus("current")
_IgmpfilterBatchSet_ObjectIdentity = ObjectIdentity
igmpfilterBatchSet = _IgmpfilterBatchSet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 3, 4)
)
_IgmpfilterTarget_Type = OctetString
_IgmpfilterTarget_Object = MibScalar
igmpfilterTarget = _IgmpfilterTarget_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 3, 4, 1),
    _IgmpfilterTarget_Type()
)
igmpfilterTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpfilterTarget.setStatus("current")
_IgmpfilterOps_Type = Integer32
_IgmpfilterOps_Object = MibScalar
igmpfilterOps = _IgmpfilterOps_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 3, 4, 2),
    _IgmpfilterOps_Type()
)
igmpfilterOps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpfilterOps.setStatus("current")


class _IgmpfilterForBatchSet_Type(DisplayString):
    """Custom type igmpfilterForBatchSet based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_IgmpfilterForBatchSet_Type.__name__ = "DisplayString"
_IgmpfilterForBatchSet_Object = MibScalar
igmpfilterForBatchSet = _IgmpfilterForBatchSet_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 3, 4, 3),
    _IgmpfilterForBatchSet_Type()
)
igmpfilterForBatchSet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpfilterForBatchSet.setStatus("current")
_McastBandwidth_ObjectIdentity = ObjectIdentity
mcastBandwidth = _McastBandwidth_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 4)
)


class _McastDefaultBandwidth_Type(Integer32):
    """Custom type mcastDefaultBandwidth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100000),
    )


_McastDefaultBandwidth_Type.__name__ = "Integer32"
_McastDefaultBandwidth_Object = MibScalar
mcastDefaultBandwidth = _McastDefaultBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 4, 1),
    _McastDefaultBandwidth_Type()
)
mcastDefaultBandwidth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcastDefaultBandwidth.setStatus("current")
if mibBuilder.loadTexts:
    mcastDefaultBandwidth.setUnits("Kbps")
_MaxNumOfMcastBw_Type = Integer32
_MaxNumOfMcastBw_Object = MibScalar
maxNumOfMcastBw = _MaxNumOfMcastBw_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 4, 2),
    _MaxNumOfMcastBw_Type()
)
maxNumOfMcastBw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfMcastBw.setStatus("current")
_McastBwTable_Object = MibTable
mcastBwTable = _McastBwTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 4, 3)
)
if mibBuilder.loadTexts:
    mcastBwTable.setStatus("current")
_McastBwEntry_Object = MibTableRow
mcastBwEntry = _McastBwEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 4, 3, 1)
)
mcastBwEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "mcastBwIndex"),
    (0, "ZYXEL-IES5000-MIB", "mcastBwStartIp"),
    (0, "ZYXEL-IES5000-MIB", "mcastBwEndIp"),
)
if mibBuilder.loadTexts:
    mcastBwEntry.setStatus("current")
_McastBwIndex_Type = Integer32
_McastBwIndex_Object = MibTableColumn
mcastBwIndex = _McastBwIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 4, 3, 1, 1),
    _McastBwIndex_Type()
)
mcastBwIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcastBwIndex.setStatus("current")
_McastBwStartIp_Type = IpAddress
_McastBwStartIp_Object = MibTableColumn
mcastBwStartIp = _McastBwStartIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 4, 3, 1, 2),
    _McastBwStartIp_Type()
)
mcastBwStartIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcastBwStartIp.setStatus("current")
_McastBwEndIp_Type = IpAddress
_McastBwEndIp_Object = MibTableColumn
mcastBwEndIp = _McastBwEndIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 4, 3, 1, 3),
    _McastBwEndIp_Type()
)
mcastBwEndIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcastBwEndIp.setStatus("current")
_McastBwBandwidth_Type = Integer32
_McastBwBandwidth_Object = MibTableColumn
mcastBwBandwidth = _McastBwBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 4, 3, 1, 4),
    _McastBwBandwidth_Type()
)
mcastBwBandwidth.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mcastBwBandwidth.setStatus("current")
if mibBuilder.loadTexts:
    mcastBwBandwidth.setUnits("Kbps")
_McastBwRowStatus_Type = RowStatus
_McastBwRowStatus_Object = MibTableColumn
mcastBwRowStatus = _McastBwRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 4, 3, 1, 5),
    _McastBwRowStatus_Type()
)
mcastBwRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mcastBwRowStatus.setStatus("current")
_McastBwPortTable_Object = MibTable
mcastBwPortTable = _McastBwPortTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 4, 4)
)
if mibBuilder.loadTexts:
    mcastBwPortTable.setStatus("current")
_McastBwPortEntry_Object = MibTableRow
mcastBwPortEntry = _McastBwPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 4, 4, 1)
)
mcastBwPortEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    mcastBwPortEntry.setStatus("current")


class _McastBwPortEnable_Type(Integer32):
    """Custom type mcastBwPortEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_McastBwPortEnable_Type.__name__ = "Integer32"
_McastBwPortEnable_Object = MibTableColumn
mcastBwPortEnable = _McastBwPortEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 4, 4, 1, 1),
    _McastBwPortEnable_Type()
)
mcastBwPortEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcastBwPortEnable.setStatus("current")
_McastBwPortBandwidth_Type = Integer32
_McastBwPortBandwidth_Object = MibTableColumn
mcastBwPortBandwidth = _McastBwPortBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 4, 4, 1, 2),
    _McastBwPortBandwidth_Type()
)
mcastBwPortBandwidth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcastBwPortBandwidth.setStatus("current")
if mibBuilder.loadTexts:
    mcastBwPortBandwidth.setUnits("Kbps")
_McastBwInetTable_Object = MibTable
mcastBwInetTable = _McastBwInetTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 4, 5)
)
if mibBuilder.loadTexts:
    mcastBwInetTable.setStatus("current")
_McastBwInetEntry_Object = MibTableRow
mcastBwInetEntry = _McastBwInetEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 4, 5, 1)
)
mcastBwInetEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "mcastBwInetIndex"),
    (0, "ZYXEL-IES5000-MIB", "mcastBwInetAddrType"),
    (0, "ZYXEL-IES5000-MIB", "mcastBwInetAddrStart"),
    (0, "ZYXEL-IES5000-MIB", "mcastBwInetAddrEnd"),
)
if mibBuilder.loadTexts:
    mcastBwInetEntry.setStatus("current")
_McastBwInetIndex_Type = Integer32
_McastBwInetIndex_Object = MibTableColumn
mcastBwInetIndex = _McastBwInetIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 4, 5, 1, 1),
    _McastBwInetIndex_Type()
)
mcastBwInetIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcastBwInetIndex.setStatus("current")
_McastBwInetAddrType_Type = InetAddressType
_McastBwInetAddrType_Object = MibTableColumn
mcastBwInetAddrType = _McastBwInetAddrType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 4, 5, 1, 2),
    _McastBwInetAddrType_Type()
)
mcastBwInetAddrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcastBwInetAddrType.setStatus("current")
_McastBwInetAddrStart_Type = InetAddress
_McastBwInetAddrStart_Object = MibTableColumn
mcastBwInetAddrStart = _McastBwInetAddrStart_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 4, 5, 1, 3),
    _McastBwInetAddrStart_Type()
)
mcastBwInetAddrStart.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcastBwInetAddrStart.setStatus("current")
_McastBwInetAddrEnd_Type = InetAddress
_McastBwInetAddrEnd_Object = MibTableColumn
mcastBwInetAddrEnd = _McastBwInetAddrEnd_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 4, 5, 1, 4),
    _McastBwInetAddrEnd_Type()
)
mcastBwInetAddrEnd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcastBwInetAddrEnd.setStatus("current")
_McastBwInetBandwidth_Type = Integer32
_McastBwInetBandwidth_Object = MibTableColumn
mcastBwInetBandwidth = _McastBwInetBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 4, 5, 1, 5),
    _McastBwInetBandwidth_Type()
)
mcastBwInetBandwidth.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mcastBwInetBandwidth.setStatus("current")
if mibBuilder.loadTexts:
    mcastBwInetBandwidth.setUnits("Kbps")
_McastBwInetRowStatus_Type = RowStatus
_McastBwInetRowStatus_Object = MibTableColumn
mcastBwInetRowStatus = _McastBwInetRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 4, 5, 1, 6),
    _McastBwInetRowStatus_Type()
)
mcastBwInetRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mcastBwInetRowStatus.setStatus("current")
_IgmpCount_ObjectIdentity = ObjectIdentity
igmpCount = _IgmpCount_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 5)
)
_IgmpCountPortTable_Object = MibTable
igmpCountPortTable = _IgmpCountPortTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 5, 1)
)
if mibBuilder.loadTexts:
    igmpCountPortTable.setStatus("current")
_IgmpCountPortEntry_Object = MibTableRow
igmpCountPortEntry = _IgmpCountPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 5, 1, 1)
)
igmpCountPortEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    igmpCountPortEntry.setStatus("current")


class _IgmpCountPortEnable_Type(Integer32):
    """Custom type igmpCountPortEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_IgmpCountPortEnable_Type.__name__ = "Integer32"
_IgmpCountPortEnable_Object = MibTableColumn
igmpCountPortEnable = _IgmpCountPortEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 5, 1, 1, 1),
    _IgmpCountPortEnable_Type()
)
igmpCountPortEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpCountPortEnable.setStatus("current")
_IgmpCountPortLimit_Type = Integer32
_IgmpCountPortLimit_Object = MibTableColumn
igmpCountPortLimit = _IgmpCountPortLimit_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 5, 1, 1, 2),
    _IgmpCountPortLimit_Type()
)
igmpCountPortLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpCountPortLimit.setStatus("current")
_IgmpMessageCountPortTable_Object = MibTable
igmpMessageCountPortTable = _IgmpMessageCountPortTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 5, 2)
)
if mibBuilder.loadTexts:
    igmpMessageCountPortTable.setStatus("current")
_IgmpMessageCountPortEntry_Object = MibTableRow
igmpMessageCountPortEntry = _IgmpMessageCountPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 5, 2, 1)
)
igmpMessageCountPortEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    igmpMessageCountPortEntry.setStatus("current")


class _IgmpMessageCountPortEnable_Type(Integer32):
    """Custom type igmpMessageCountPortEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_IgmpMessageCountPortEnable_Type.__name__ = "Integer32"
_IgmpMessageCountPortEnable_Object = MibTableColumn
igmpMessageCountPortEnable = _IgmpMessageCountPortEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 5, 2, 1, 1),
    _IgmpMessageCountPortEnable_Type()
)
igmpMessageCountPortEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpMessageCountPortEnable.setStatus("current")
_IgmpMessageCountPortLimit_Type = Integer32
_IgmpMessageCountPortLimit_Object = MibTableColumn
igmpMessageCountPortLimit = _IgmpMessageCountPortLimit_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 5, 2, 1, 2),
    _IgmpMessageCountPortLimit_Type()
)
igmpMessageCountPortLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpMessageCountPortLimit.setStatus("current")
_Mvlan_ObjectIdentity = ObjectIdentity
mvlan = _Mvlan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 6)
)
_MaxNumOfMvlan_Type = Integer32
_MaxNumOfMvlan_Object = MibScalar
maxNumOfMvlan = _MaxNumOfMvlan_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 6, 1),
    _MaxNumOfMvlan_Type()
)
maxNumOfMvlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfMvlan.setStatus("current")
_MvlanTable_Object = MibTable
mvlanTable = _MvlanTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 6, 2)
)
if mibBuilder.loadTexts:
    mvlanTable.setStatus("current")
_MvlanEntry_Object = MibTableRow
mvlanEntry = _MvlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 6, 2, 1)
)
mvlanEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "mvlanIndex"),
)
if mibBuilder.loadTexts:
    mvlanEntry.setStatus("current")
_MvlanIndex_Type = VlanIndex
_MvlanIndex_Object = MibTableColumn
mvlanIndex = _MvlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 6, 2, 1, 1),
    _MvlanIndex_Type()
)
mvlanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mvlanIndex.setStatus("current")


class _MvlanName_Type(DisplayString):
    """Custom type mvlanName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 31),
    )


_MvlanName_Type.__name__ = "DisplayString"
_MvlanName_Object = MibTableColumn
mvlanName = _MvlanName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 6, 2, 1, 2),
    _MvlanName_Type()
)
mvlanName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mvlanName.setStatus("current")
_MvlanEgressPorts_Type = PortList
_MvlanEgressPorts_Object = MibTableColumn
mvlanEgressPorts = _MvlanEgressPorts_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 6, 2, 1, 3),
    _MvlanEgressPorts_Type()
)
mvlanEgressPorts.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mvlanEgressPorts.setStatus("current")
_MvlanRowStatus_Type = RowStatus
_MvlanRowStatus_Object = MibTableColumn
mvlanRowStatus = _MvlanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 6, 2, 1, 4),
    _MvlanRowStatus_Type()
)
mvlanRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mvlanRowStatus.setStatus("current")


class _Mvlan8021pPriority_Type(Integer32):
    """Custom type mvlan8021pPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Mvlan8021pPriority_Type.__name__ = "Integer32"
_Mvlan8021pPriority_Object = MibTableColumn
mvlan8021pPriority = _Mvlan8021pPriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 6, 2, 1, 5),
    _Mvlan8021pPriority_Type()
)
mvlan8021pPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mvlan8021pPriority.setStatus("current")
_MvlanTranslateTable_Object = MibTable
mvlanTranslateTable = _MvlanTranslateTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 6, 3)
)
if mibBuilder.loadTexts:
    mvlanTranslateTable.setStatus("current")
_MvlanTranslateEntry_Object = MibTableRow
mvlanTranslateEntry = _MvlanTranslateEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 6, 3, 1)
)
mvlanTranslateEntry.setIndexNames(
    (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"),
    (0, "ZYXEL-IES5000-MIB", "mvlanTranslateIndex"),
)
if mibBuilder.loadTexts:
    mvlanTranslateEntry.setStatus("current")
_MvlanTranslateIndex_Type = Integer32
_MvlanTranslateIndex_Object = MibTableColumn
mvlanTranslateIndex = _MvlanTranslateIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 6, 3, 1, 1),
    _MvlanTranslateIndex_Type()
)
mvlanTranslateIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mvlanTranslateIndex.setStatus("current")
_MvlanTranslateStartIp_Type = IpAddress
_MvlanTranslateStartIp_Object = MibTableColumn
mvlanTranslateStartIp = _MvlanTranslateStartIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 6, 3, 1, 2),
    _MvlanTranslateStartIp_Type()
)
mvlanTranslateStartIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mvlanTranslateStartIp.setStatus("current")
_MvlanTranslateEndIp_Type = IpAddress
_MvlanTranslateEndIp_Object = MibTableColumn
mvlanTranslateEndIp = _MvlanTranslateEndIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 6, 3, 1, 3),
    _MvlanTranslateEndIp_Type()
)
mvlanTranslateEndIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mvlanTranslateEndIp.setStatus("current")
_MvlanTranslateInetAddrType_Type = InetAddressType
_MvlanTranslateInetAddrType_Object = MibTableColumn
mvlanTranslateInetAddrType = _MvlanTranslateInetAddrType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 6, 3, 1, 4),
    _MvlanTranslateInetAddrType_Type()
)
mvlanTranslateInetAddrType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mvlanTranslateInetAddrType.setStatus("current")
_MvlanTranslateInetAddrStart_Type = InetAddress
_MvlanTranslateInetAddrStart_Object = MibTableColumn
mvlanTranslateInetAddrStart = _MvlanTranslateInetAddrStart_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 6, 3, 1, 5),
    _MvlanTranslateInetAddrStart_Type()
)
mvlanTranslateInetAddrStart.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mvlanTranslateInetAddrStart.setStatus("current")
_MvlanTranslateInetAddrEnd_Type = InetAddress
_MvlanTranslateInetAddrEnd_Object = MibTableColumn
mvlanTranslateInetAddrEnd = _MvlanTranslateInetAddrEnd_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 6, 3, 1, 6),
    _MvlanTranslateInetAddrEnd_Type()
)
mvlanTranslateInetAddrEnd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mvlanTranslateInetAddrEnd.setStatus("current")
_MvlanExtTable_Object = MibTable
mvlanExtTable = _MvlanExtTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 6, 4)
)
if mibBuilder.loadTexts:
    mvlanExtTable.setStatus("current")
_MvlanExtEntry_Object = MibTableRow
mvlanExtEntry = _MvlanExtEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 6, 4, 1)
)
mvlanExtEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "mvlanIndex"),
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    mvlanExtEntry.setStatus("current")


class _MvlanExtReg_Type(Integer32):
    """Custom type mvlanExtReg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fix", 1),
          ("forbid", 2))
    )


_MvlanExtReg_Type.__name__ = "Integer32"
_MvlanExtReg_Object = MibTableColumn
mvlanExtReg = _MvlanExtReg_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 6, 4, 1, 1),
    _MvlanExtReg_Type()
)
mvlanExtReg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mvlanExtReg.setStatus("current")
_MvlanExtCvid_Type = Integer32
_MvlanExtCvid_Object = MibTableColumn
mvlanExtCvid = _MvlanExtCvid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 6, 4, 1, 2),
    _MvlanExtCvid_Type()
)
mvlanExtCvid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mvlanExtCvid.setStatus("current")


class _MvlanNonmemberPort_Type(Integer32):
    """Custom type mvlanNonmemberPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("discard", 1),
          ("pass", 2))
    )


_MvlanNonmemberPort_Type.__name__ = "Integer32"
_MvlanNonmemberPort_Object = MibScalar
mvlanNonmemberPort = _MvlanNonmemberPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 6, 5),
    _MvlanNonmemberPort_Type()
)
mvlanNonmemberPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mvlanNonmemberPort.setStatus("current")
_QueryVid_ObjectIdentity = ObjectIdentity
queryVid = _QueryVid_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 7)
)
_MaxNumOfQryVid_Type = Integer32
_MaxNumOfQryVid_Object = MibScalar
maxNumOfQryVid = _MaxNumOfQryVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 7, 1),
    _MaxNumOfQryVid_Type()
)
maxNumOfQryVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfQryVid.setStatus("current")
_QryVidConfTable_Object = MibTable
qryVidConfTable = _QryVidConfTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 7, 2)
)
if mibBuilder.loadTexts:
    qryVidConfTable.setStatus("current")
_QryVidConfEntry_Object = MibTableRow
qryVidConfEntry = _QryVidConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 7, 2, 1)
)
qryVidConfEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "qryVid"),
)
if mibBuilder.loadTexts:
    qryVidConfEntry.setStatus("current")
_QryVid_Type = Integer32
_QryVid_Object = MibTableColumn
qryVid = _QryVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 7, 2, 1, 1),
    _QryVid_Type()
)
qryVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qryVid.setStatus("current")
_QryVidRowStatus_Type = RowStatus
_QryVidRowStatus_Object = MibTableColumn
qryVidRowStatus = _QryVidRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 7, 2, 1, 2),
    _QryVidRowStatus_Type()
)
qryVidRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qryVidRowStatus.setStatus("current")
_QryVidStatusTable_Object = MibTable
qryVidStatusTable = _QryVidStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 7, 3)
)
if mibBuilder.loadTexts:
    qryVidStatusTable.setStatus("current")
_QryVidStatusEntry_Object = MibTableRow
qryVidStatusEntry = _QryVidStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 7, 3, 1)
)
qryVidStatusEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "qryVid"),
)
if mibBuilder.loadTexts:
    qryVidStatusEntry.setStatus("current")


class _QryVidType_Type(Integer32):
    """Custom type qryVidType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("static", 1),
          ("dynamic", 2))
    )


_QryVidType_Type.__name__ = "Integer32"
_QryVidType_Object = MibTableColumn
qryVidType = _QryVidType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 7, 3, 1, 1),
    _QryVidType_Type()
)
qryVidType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qryVidType.setStatus("current")


class _IgmpMode_Type(Integer32):
    """Custom type igmpMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("aggresive", 1),
          ("normal", 2))
    )


_IgmpMode_Type.__name__ = "Integer32"
_IgmpMode_Object = MibScalar
igmpMode = _IgmpMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 8),
    _IgmpMode_Type()
)
igmpMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpMode.setStatus("current")


class _IgmpVersion_Type(Integer32):
    """Custom type igmpVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("v2", 1),
          ("v3", 2),
          ("mldv1", 3),
          ("mldv2", 4))
    )


_IgmpVersion_Type.__name__ = "Integer32"
_IgmpVersion_Object = MibScalar
igmpVersion = _IgmpVersion_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 9),
    _IgmpVersion_Type()
)
igmpVersion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpVersion.setStatus("current")


class _IgmpFastLeaveEnable_Type(Integer32):
    """Custom type igmpFastLeaveEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_IgmpFastLeaveEnable_Type.__name__ = "Integer32"
_IgmpFastLeaveEnable_Object = MibScalar
igmpFastLeaveEnable = _IgmpFastLeaveEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 10),
    _IgmpFastLeaveEnable_Type()
)
igmpFastLeaveEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpFastLeaveEnable.setStatus("current")
_IgmpFastLeaveTimer_Type = Integer32
_IgmpFastLeaveTimer_Object = MibScalar
igmpFastLeaveTimer = _IgmpFastLeaveTimer_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 11),
    _IgmpFastLeaveTimer_Type()
)
igmpFastLeaveTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpFastLeaveTimer.setStatus("current")
if mibBuilder.loadTexts:
    igmpFastLeaveTimer.setUnits("second")


class _UnknownMulticast_Type(Integer32):
    """Custom type unknownMulticast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("drop", 1),
          ("flood", 2))
    )


_UnknownMulticast_Type.__name__ = "Integer32"
_UnknownMulticast_Object = MibScalar
unknownMulticast = _UnknownMulticast_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 12),
    _UnknownMulticast_Type()
)
unknownMulticast.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    unknownMulticast.setStatus("current")


class _Ipv6PassThrough_Type(Integer32):
    """Custom type ipv6PassThrough based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("drop", 1),
          ("flood", 2),
          ("disable", 3))
    )


_Ipv6PassThrough_Type.__name__ = "Integer32"
_Ipv6PassThrough_Object = MibScalar
ipv6PassThrough = _Ipv6PassThrough_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 13),
    _Ipv6PassThrough_Type()
)
ipv6PassThrough.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6PassThrough.setStatus("current")


class _ReservedGroup_Type(Integer32):
    """Custom type reservedGroup based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("drop", 1),
          ("flood", 2))
    )


_ReservedGroup_Type.__name__ = "Integer32"
_ReservedGroup_Object = MibScalar
reservedGroup = _ReservedGroup_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 14),
    _ReservedGroup_Type()
)
reservedGroup.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    reservedGroup.setStatus("current")
_IgmpHistoryTable_Object = MibTable
igmpHistoryTable = _IgmpHistoryTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 15)
)
if mibBuilder.loadTexts:
    igmpHistoryTable.setStatus("current")
_IgmpHistoryEntry_Object = MibTableRow
igmpHistoryEntry = _IgmpHistoryEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 15, 1)
)
igmpHistoryEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "slotId"),
)
if mibBuilder.loadTexts:
    igmpHistoryEntry.setStatus("current")


class _Igmphistoryenable_Type(Integer32):
    """Custom type igmphistoryenable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_Igmphistoryenable_Type.__name__ = "Integer32"
_Igmphistoryenable_Object = MibTableColumn
igmphistoryenable = _Igmphistoryenable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 7, 15, 1, 1),
    _Igmphistoryenable_Type()
)
igmphistoryenable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmphistoryenable.setStatus("current")
_Port_ObjectIdentity = ObjectIdentity
port = _Port_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8)
)
_SubrPortTable_Object = MibTable
subrPortTable = _SubrPortTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 1)
)
if mibBuilder.loadTexts:
    subrPortTable.setStatus("current")
_SubrPortEntry_Object = MibTableRow
subrPortEntry = _SubrPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 1, 1)
)
subrPortEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    subrPortEntry.setStatus("current")


class _SubrPortName_Type(DisplayString):
    """Custom type subrPortName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 47),
    )


_SubrPortName_Type.__name__ = "DisplayString"
_SubrPortName_Object = MibTableColumn
subrPortName = _SubrPortName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 1, 1, 1),
    _SubrPortName_Type()
)
subrPortName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    subrPortName.setStatus("current")


class _SubrPortTel_Type(DisplayString):
    """Custom type subrPortTel based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 31),
    )


_SubrPortTel_Type.__name__ = "DisplayString"
_SubrPortTel_Object = MibTableColumn
subrPortTel = _SubrPortTel_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 1, 1, 2),
    _SubrPortTel_Type()
)
subrPortTel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    subrPortTel.setStatus("current")


class _SubrPortMdf_Type(DisplayString):
    """Custom type subrPortMdf based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 47),
    )


_SubrPortMdf_Type.__name__ = "DisplayString"
_SubrPortMdf_Object = MibTableColumn
subrPortMdf = _SubrPortMdf_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 1, 1, 3),
    _SubrPortMdf_Type()
)
subrPortMdf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    subrPortMdf.setStatus("current")
_AdslPort_ObjectIdentity = ObjectIdentity
adslPort = _AdslPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2)
)
_AdslLineConfTable_Object = MibTable
adslLineConfTable = _AdslLineConfTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 1)
)
if mibBuilder.loadTexts:
    adslLineConfTable.setStatus("current")
_AdslLineConfEntry_Object = MibTableRow
adslLineConfEntry = _AdslLineConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 1, 1)
)
adslLineConfEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    adslLineConfEntry.setStatus("current")


class _AdslLineConfAdslMode_Type(Integer32):
    """Custom type adslLineConfAdslMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("gDotLite", 1),
          ("gDotDmt", 2),
          ("t1Dot413", 3),
          ("auto", 4),
          ("etsi", 5),
          ("adsl2", 6),
          ("adsl2Plus", 7))
    )


_AdslLineConfAdslMode_Type.__name__ = "Integer32"
_AdslLineConfAdslMode_Object = MibTableColumn
adslLineConfAdslMode = _AdslLineConfAdslMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 1, 1, 1),
    _AdslLineConfAdslMode_Type()
)
adslLineConfAdslMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslLineConfAdslMode.setStatus("current")


class _AdslLineConfAnnexL_Type(Integer32):
    """Custom type adslLineConfAnnexL based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enableNarrowMode", 1),
          ("enableWideMode", 2),
          ("disable", 3))
    )


_AdslLineConfAnnexL_Type.__name__ = "Integer32"
_AdslLineConfAnnexL_Object = MibTableColumn
adslLineConfAnnexL = _AdslLineConfAnnexL_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 1, 1, 2),
    _AdslLineConfAnnexL_Type()
)
adslLineConfAnnexL.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslLineConfAnnexL.setStatus("current")


class _AdslLineConfAnnexM_Type(Integer32):
    """Custom type adslLineConfAnnexM based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AdslLineConfAnnexM_Type.__name__ = "Integer32"
_AdslLineConfAnnexM_Object = MibTableColumn
adslLineConfAnnexM = _AdslLineConfAnnexM_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 1, 1, 3),
    _AdslLineConfAnnexM_Type()
)
adslLineConfAnnexM.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslLineConfAnnexM.setStatus("current")


class _AdslLineConfAnnexI_Type(Integer32):
    """Custom type adslLineConfAnnexI based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AdslLineConfAnnexI_Type.__name__ = "Integer32"
_AdslLineConfAnnexI_Object = MibTableColumn
adslLineConfAnnexI = _AdslLineConfAnnexI_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 1, 1, 4),
    _AdslLineConfAnnexI_Type()
)
adslLineConfAnnexI.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslLineConfAnnexI.setStatus("current")
_AdslLineConfOptionMask_Type = Integer32
_AdslLineConfOptionMask_Object = MibTableColumn
adslLineConfOptionMask = _AdslLineConfOptionMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 1, 1, 5),
    _AdslLineConfOptionMask_Type()
)
adslLineConfOptionMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslLineConfOptionMask.setStatus("current")


class _AdslLineConfPowerMgmt_Type(Integer32):
    """Custom type adslLineConfPowerMgmt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enableL2", 1),
          ("enableL2andL3", 2),
          ("disable", 3))
    )


_AdslLineConfPowerMgmt_Type.__name__ = "Integer32"
_AdslLineConfPowerMgmt_Object = MibTableColumn
adslLineConfPowerMgmt = _AdslLineConfPowerMgmt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 1, 1, 6),
    _AdslLineConfPowerMgmt_Type()
)
adslLineConfPowerMgmt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslLineConfPowerMgmt.setStatus("current")


class _AdslLineConfPowerMode_Type(Integer32):
    """Custom type adslLineConfPowerMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fix", 1),
          ("priorityToPower", 2),
          ("priorityToRate", 3))
    )


_AdslLineConfPowerMode_Type.__name__ = "Integer32"
_AdslLineConfPowerMode_Object = MibTableColumn
adslLineConfPowerMode = _AdslLineConfPowerMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 1, 1, 7),
    _AdslLineConfPowerMode_Type()
)
adslLineConfPowerMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslLineConfPowerMode.setStatus("current")


class _AdslLineConfAturMaxTxPower_Type(Integer32):
    """Custom type adslLineConfAturMaxTxPower based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-130, 200),
    )


_AdslLineConfAturMaxTxPower_Type.__name__ = "Integer32"
_AdslLineConfAturMaxTxPower_Object = MibTableColumn
adslLineConfAturMaxTxPower = _AdslLineConfAturMaxTxPower_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 1, 1, 8),
    _AdslLineConfAturMaxTxPower_Type()
)
adslLineConfAturMaxTxPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslLineConfAturMaxTxPower.setStatus("current")
if mibBuilder.loadTexts:
    adslLineConfAturMaxTxPower.setUnits("tenth dBm")


class _AdslLineConfAtucMaxTxPower_Type(Integer32):
    """Custom type adslLineConfAtucMaxTxPower based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-50, 200),
    )


_AdslLineConfAtucMaxTxPower_Type.__name__ = "Integer32"
_AdslLineConfAtucMaxTxPower_Object = MibTableColumn
adslLineConfAtucMaxTxPower = _AdslLineConfAtucMaxTxPower_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 1, 1, 9),
    _AdslLineConfAtucMaxTxPower_Type()
)
adslLineConfAtucMaxTxPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslLineConfAtucMaxTxPower.setStatus("current")
if mibBuilder.loadTexts:
    adslLineConfAtucMaxTxPower.setUnits("tenth dBm")


class _AdslLineConfMaxRxPower_Type(Integer32):
    """Custom type adslLineConfMaxRxPower based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-255, 255),
    )


_AdslLineConfMaxRxPower_Type.__name__ = "Integer32"
_AdslLineConfMaxRxPower_Object = MibTableColumn
adslLineConfMaxRxPower = _AdslLineConfMaxRxPower_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 1, 1, 10),
    _AdslLineConfMaxRxPower_Type()
)
adslLineConfMaxRxPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslLineConfMaxRxPower.setStatus("current")
if mibBuilder.loadTexts:
    adslLineConfMaxRxPower.setUnits("tenth dBm")
_AdslLineConfAturCarrierMask_Type = OctetString
_AdslLineConfAturCarrierMask_Object = MibTableColumn
adslLineConfAturCarrierMask = _AdslLineConfAturCarrierMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 1, 1, 11),
    _AdslLineConfAturCarrierMask_Type()
)
adslLineConfAturCarrierMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslLineConfAturCarrierMask.setStatus("current")
_AdslLineConfAtucCarrierMask0_Type = OctetString
_AdslLineConfAtucCarrierMask0_Object = MibTableColumn
adslLineConfAtucCarrierMask0 = _AdslLineConfAtucCarrierMask0_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 1, 1, 12),
    _AdslLineConfAtucCarrierMask0_Type()
)
adslLineConfAtucCarrierMask0.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslLineConfAtucCarrierMask0.setStatus("current")
_AdslLineConfAtucCarrierMask1_Type = OctetString
_AdslLineConfAtucCarrierMask1_Object = MibTableColumn
adslLineConfAtucCarrierMask1 = _AdslLineConfAtucCarrierMask1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 1, 1, 13),
    _AdslLineConfAtucCarrierMask1_Type()
)
adslLineConfAtucCarrierMask1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslLineConfAtucCarrierMask1.setStatus("current")


class _AdslLineConfAturInp_Type(Integer32):
    """Custom type adslLineConfAturInp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("zero", 1),
          ("zero-point-five", 2),
          ("one", 3),
          ("two", 4),
          ("four", 5),
          ("eight", 6),
          ("sixteen", 7))
    )


_AdslLineConfAturInp_Type.__name__ = "Integer32"
_AdslLineConfAturInp_Object = MibTableColumn
adslLineConfAturInp = _AdslLineConfAturInp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 1, 1, 14),
    _AdslLineConfAturInp_Type()
)
adslLineConfAturInp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslLineConfAturInp.setStatus("current")


class _AdslLineConfAtucInp_Type(Integer32):
    """Custom type adslLineConfAtucInp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("zero", 1),
          ("zero-point-five", 2),
          ("one", 3),
          ("two", 4),
          ("four", 5),
          ("eight", 6),
          ("sixteen", 7))
    )


_AdslLineConfAtucInp_Type.__name__ = "Integer32"
_AdslLineConfAtucInp_Object = MibTableColumn
adslLineConfAtucInp = _AdslLineConfAtucInp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 1, 1, 15),
    _AdslLineConfAtucInp_Type()
)
adslLineConfAtucInp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslLineConfAtucInp.setStatus("current")
_BitLoad_ObjectIdentity = ObjectIdentity
bitLoad = _BitLoad_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 2)
)
_BitLoadTable_Object = MibTable
bitLoadTable = _BitLoadTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 2, 1)
)
if mibBuilder.loadTexts:
    bitLoadTable.setStatus("current")
_BitLoadEntry_Object = MibTableRow
bitLoadEntry = _BitLoadEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 2, 1, 1)
)
bitLoadEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    bitLoadEntry.setStatus("current")
_BitLoadBits_Type = OctetString
_BitLoadBits_Object = MibTableColumn
bitLoadBits = _BitLoadBits_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 2, 1, 1, 1),
    _BitLoadBits_Type()
)
bitLoadBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bitLoadBits.setStatus("current")
_BitLoadAtucNumOfCarriers_Type = Integer32
_BitLoadAtucNumOfCarriers_Object = MibTableColumn
bitLoadAtucNumOfCarriers = _BitLoadAtucNumOfCarriers_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 2, 1, 1, 2),
    _BitLoadAtucNumOfCarriers_Type()
)
bitLoadAtucNumOfCarriers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bitLoadAtucNumOfCarriers.setStatus("current")
_BitLoadAturNumOfCarriers_Type = Integer32
_BitLoadAturNumOfCarriers_Object = MibTableColumn
bitLoadAturNumOfCarriers = _BitLoadAturNumOfCarriers_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 2, 1, 1, 3),
    _BitLoadAturNumOfCarriers_Type()
)
bitLoadAturNumOfCarriers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bitLoadAturNumOfCarriers.setStatus("current")
_AdslPortBatchSet_ObjectIdentity = ObjectIdentity
adslPortBatchSet = _AdslPortBatchSet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 3)
)
_AdslPortTarget_Type = OctetString
_AdslPortTarget_Object = MibScalar
adslPortTarget = _AdslPortTarget_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 3, 1),
    _AdslPortTarget_Type()
)
adslPortTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslPortTarget.setStatus("current")
_AdslPortOps_Type = Integer32
_AdslPortOps_Object = MibScalar
adslPortOps = _AdslPortOps_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 3, 2),
    _AdslPortOps_Type()
)
adslPortOps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslPortOps.setStatus("current")


class _AdslModeForBatchSet_Type(Integer32):
    """Custom type adslModeForBatchSet based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("gDotLite", 1),
          ("gDotDmt", 2),
          ("t1Dot413", 3),
          ("auto", 4),
          ("etsi", 5),
          ("adsl2", 6),
          ("adsl2Plus", 7))
    )


_AdslModeForBatchSet_Type.__name__ = "Integer32"
_AdslModeForBatchSet_Object = MibScalar
adslModeForBatchSet = _AdslModeForBatchSet_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 3, 3),
    _AdslModeForBatchSet_Type()
)
adslModeForBatchSet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslModeForBatchSet.setStatus("current")


class _AdslLineProfileForBatchSet_Type(DisplayString):
    """Custom type adslLineProfileForBatchSet based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_AdslLineProfileForBatchSet_Type.__name__ = "DisplayString"
_AdslLineProfileForBatchSet_Object = MibScalar
adslLineProfileForBatchSet = _AdslLineProfileForBatchSet_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 3, 4),
    _AdslLineProfileForBatchSet_Type()
)
adslLineProfileForBatchSet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslLineProfileForBatchSet.setStatus("current")


class _AdslAlarmProfileForBatchSet_Type(DisplayString):
    """Custom type adslAlarmProfileForBatchSet based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_AdslAlarmProfileForBatchSet_Type.__name__ = "DisplayString"
_AdslAlarmProfileForBatchSet_Object = MibScalar
adslAlarmProfileForBatchSet = _AdslAlarmProfileForBatchSet_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 3, 5),
    _AdslAlarmProfileForBatchSet_Type()
)
adslAlarmProfileForBatchSet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslAlarmProfileForBatchSet.setStatus("current")
_AdslOptionMaskForBatchSet_Type = Integer32
_AdslOptionMaskForBatchSet_Object = MibScalar
adslOptionMaskForBatchSet = _AdslOptionMaskForBatchSet_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 3, 6),
    _AdslOptionMaskForBatchSet_Type()
)
adslOptionMaskForBatchSet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslOptionMaskForBatchSet.setStatus("current")


class _AdslAturMaxTxPowerForBatchSet_Type(Integer32):
    """Custom type adslAturMaxTxPowerForBatchSet based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-130, 200),
    )


_AdslAturMaxTxPowerForBatchSet_Type.__name__ = "Integer32"
_AdslAturMaxTxPowerForBatchSet_Object = MibScalar
adslAturMaxTxPowerForBatchSet = _AdslAturMaxTxPowerForBatchSet_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 3, 7),
    _AdslAturMaxTxPowerForBatchSet_Type()
)
adslAturMaxTxPowerForBatchSet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslAturMaxTxPowerForBatchSet.setStatus("current")
if mibBuilder.loadTexts:
    adslAturMaxTxPowerForBatchSet.setUnits("tenth dBm")


class _AdslAtucMaxTxPowerForBatchSet_Type(Integer32):
    """Custom type adslAtucMaxTxPowerForBatchSet based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-50, 200),
    )


_AdslAtucMaxTxPowerForBatchSet_Type.__name__ = "Integer32"
_AdslAtucMaxTxPowerForBatchSet_Object = MibScalar
adslAtucMaxTxPowerForBatchSet = _AdslAtucMaxTxPowerForBatchSet_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 3, 8),
    _AdslAtucMaxTxPowerForBatchSet_Type()
)
adslAtucMaxTxPowerForBatchSet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslAtucMaxTxPowerForBatchSet.setStatus("current")
if mibBuilder.loadTexts:
    adslAtucMaxTxPowerForBatchSet.setUnits("tenth dBm")


class _AdslMaxRxPowerForBatchSet_Type(Integer32):
    """Custom type adslMaxRxPowerForBatchSet based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-255, 255),
    )


_AdslMaxRxPowerForBatchSet_Type.__name__ = "Integer32"
_AdslMaxRxPowerForBatchSet_Object = MibScalar
adslMaxRxPowerForBatchSet = _AdslMaxRxPowerForBatchSet_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 3, 9),
    _AdslMaxRxPowerForBatchSet_Type()
)
adslMaxRxPowerForBatchSet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslMaxRxPowerForBatchSet.setStatus("current")
if mibBuilder.loadTexts:
    adslMaxRxPowerForBatchSet.setUnits("tenth dBm")
_AdslAturCarrierMaskForBatchSet_Type = OctetString
_AdslAturCarrierMaskForBatchSet_Object = MibScalar
adslAturCarrierMaskForBatchSet = _AdslAturCarrierMaskForBatchSet_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 3, 10),
    _AdslAturCarrierMaskForBatchSet_Type()
)
adslAturCarrierMaskForBatchSet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslAturCarrierMaskForBatchSet.setStatus("current")
_AdslAtucCarrierMask0ForBatchSet_Type = OctetString
_AdslAtucCarrierMask0ForBatchSet_Object = MibScalar
adslAtucCarrierMask0ForBatchSet = _AdslAtucCarrierMask0ForBatchSet_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 3, 11),
    _AdslAtucCarrierMask0ForBatchSet_Type()
)
adslAtucCarrierMask0ForBatchSet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslAtucCarrierMask0ForBatchSet.setStatus("current")
_AdslAtucCarrierMask1ForBatchSet_Type = OctetString
_AdslAtucCarrierMask1ForBatchSet_Object = MibScalar
adslAtucCarrierMask1ForBatchSet = _AdslAtucCarrierMask1ForBatchSet_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 3, 12),
    _AdslAtucCarrierMask1ForBatchSet_Type()
)
adslAtucCarrierMask1ForBatchSet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslAtucCarrierMask1ForBatchSet.setStatus("current")


class _AdslAturInpForBatchSet_Type(Integer32):
    """Custom type adslAturInpForBatchSet based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("zero", 1),
          ("zero-point-five", 2),
          ("one", 3),
          ("two", 4),
          ("four", 5),
          ("eight", 6),
          ("sixteen", 7))
    )


_AdslAturInpForBatchSet_Type.__name__ = "Integer32"
_AdslAturInpForBatchSet_Object = MibScalar
adslAturInpForBatchSet = _AdslAturInpForBatchSet_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 3, 13),
    _AdslAturInpForBatchSet_Type()
)
adslAturInpForBatchSet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslAturInpForBatchSet.setStatus("current")


class _AdslAtucInpForBatchSet_Type(Integer32):
    """Custom type adslAtucInpForBatchSet based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("zero", 1),
          ("zero-point-five", 2),
          ("one", 3),
          ("two", 4),
          ("four", 5),
          ("eight", 6),
          ("sixteen", 7))
    )


_AdslAtucInpForBatchSet_Type.__name__ = "Integer32"
_AdslAtucInpForBatchSet_Object = MibScalar
adslAtucInpForBatchSet = _AdslAtucInpForBatchSet_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 3, 14),
    _AdslAtucInpForBatchSet_Type()
)
adslAtucInpForBatchSet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adslAtucInpForBatchSet.setStatus("current")
_AdslLineStatusTable_Object = MibTable
adslLineStatusTable = _AdslLineStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 4)
)
if mibBuilder.loadTexts:
    adslLineStatusTable.setStatus("current")
_AdslLineStatusEntry_Object = MibTableRow
adslLineStatusEntry = _AdslLineStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 4, 1)
)
adslLineStatusEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    adslLineStatusEntry.setStatus("current")


class _AdslLineStatusMode_Type(Integer32):
    """Custom type adslLineStatusMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("gDotLite", 1),
          ("gDotDmt", 2),
          ("t1Dot413", 3),
          ("etsi", 4),
          ("adsl2", 5),
          ("adsl2Plus", 6),
          ("none", 7),
          ("adsl2Annexi", 8),
          ("adsl2Annexl", 9),
          ("adsl2AnnexlNarrow", 10),
          ("adsl2Annexm", 11),
          ("adsl2PlusAnnexi", 12),
          ("adsl2PlusAnnexm", 13))
    )


_AdslLineStatusMode_Type.__name__ = "Integer32"
_AdslLineStatusMode_Object = MibTableColumn
adslLineStatusMode = _AdslLineStatusMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 4, 1, 1),
    _AdslLineStatusMode_Type()
)
adslLineStatusMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLineStatusMode.setStatus("current")
_AdslLineStatusUpTime_Type = Unsigned32
_AdslLineStatusUpTime_Object = MibTableColumn
adslLineStatusUpTime = _AdslLineStatusUpTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 4, 1, 2),
    _AdslLineStatusUpTime_Type()
)
adslLineStatusUpTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLineStatusUpTime.setStatus("current")
if mibBuilder.loadTexts:
    adslLineStatusUpTime.setUnits("second")
_AdslLineStatusAturInp_Type = Integer32
_AdslLineStatusAturInp_Object = MibTableColumn
adslLineStatusAturInp = _AdslLineStatusAturInp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 4, 1, 3),
    _AdslLineStatusAturInp_Type()
)
adslLineStatusAturInp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLineStatusAturInp.setStatus("current")
if mibBuilder.loadTexts:
    adslLineStatusAturInp.setUnits("0.1 DMT symbol")
_AdslLineStatusAtucInp_Type = Integer32
_AdslLineStatusAtucInp_Object = MibTableColumn
adslLineStatusAtucInp = _AdslLineStatusAtucInp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 4, 1, 4),
    _AdslLineStatusAtucInp_Type()
)
adslLineStatusAtucInp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLineStatusAtucInp.setStatus("current")
if mibBuilder.loadTexts:
    adslLineStatusAtucInp.setUnits("0.1 DMT symbol")
_PowerMgmtParamTable_Object = MibTable
powerMgmtParamTable = _PowerMgmtParamTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 5)
)
if mibBuilder.loadTexts:
    powerMgmtParamTable.setStatus("current")
_PowerMgmtParamEntry_Object = MibTableRow
powerMgmtParamEntry = _PowerMgmtParamEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 5, 1)
)
powerMgmtParamEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    powerMgmtParamEntry.setStatus("current")
_PowerMgmtL0Time_Type = Integer32
_PowerMgmtL0Time_Object = MibTableColumn
powerMgmtL0Time = _PowerMgmtL0Time_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 5, 1, 1),
    _PowerMgmtL0Time_Type()
)
powerMgmtL0Time.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerMgmtL0Time.setStatus("current")
if mibBuilder.loadTexts:
    powerMgmtL0Time.setUnits("second")
_PowerMgmtL2Time_Type = Integer32
_PowerMgmtL2Time_Object = MibTableColumn
powerMgmtL2Time = _PowerMgmtL2Time_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 5, 1, 2),
    _PowerMgmtL2Time_Type()
)
powerMgmtL2Time.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerMgmtL2Time.setStatus("current")
if mibBuilder.loadTexts:
    powerMgmtL2Time.setUnits("second")
_PowerMgmtL2Atpr_Type = Integer32
_PowerMgmtL2Atpr_Object = MibTableColumn
powerMgmtL2Atpr = _PowerMgmtL2Atpr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 5, 1, 3),
    _PowerMgmtL2Atpr_Type()
)
powerMgmtL2Atpr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerMgmtL2Atpr.setStatus("current")
if mibBuilder.loadTexts:
    powerMgmtL2Atpr.setUnits("dB")
_PowerMgmtL2Atprt_Type = Integer32
_PowerMgmtL2Atprt_Object = MibTableColumn
powerMgmtL2Atprt = _PowerMgmtL2Atprt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 5, 1, 4),
    _PowerMgmtL2Atprt_Type()
)
powerMgmtL2Atprt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerMgmtL2Atprt.setStatus("current")
if mibBuilder.loadTexts:
    powerMgmtL2Atprt.setUnits("dB")
_PowerMgmtL2MinRate_Type = Integer32
_PowerMgmtL2MinRate_Object = MibTableColumn
powerMgmtL2MinRate = _PowerMgmtL2MinRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 5, 1, 5),
    _PowerMgmtL2MinRate_Type()
)
powerMgmtL2MinRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerMgmtL2MinRate.setStatus("current")
if mibBuilder.loadTexts:
    powerMgmtL2MinRate.setUnits("Kbps")
_PowerMgmtL2MaxRate_Type = Integer32
_PowerMgmtL2MaxRate_Object = MibTableColumn
powerMgmtL2MaxRate = _PowerMgmtL2MaxRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 5, 1, 6),
    _PowerMgmtL2MaxRate_Type()
)
powerMgmtL2MaxRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerMgmtL2MaxRate.setStatus("current")
if mibBuilder.loadTexts:
    powerMgmtL2MaxRate.setUnits("Kbps")
_PowerMgmtL2ThreshRate_Type = Integer32
_PowerMgmtL2ThreshRate_Object = MibTableColumn
powerMgmtL2ThreshRate = _PowerMgmtL2ThreshRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 5, 1, 7),
    _PowerMgmtL2ThreshRate_Type()
)
powerMgmtL2ThreshRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerMgmtL2ThreshRate.setStatus("current")
if mibBuilder.loadTexts:
    powerMgmtL2ThreshRate.setUnits("percentage")
_PowerMgmtPSDTable_Object = MibTable
powerMgmtPSDTable = _PowerMgmtPSDTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 6)
)
if mibBuilder.loadTexts:
    powerMgmtPSDTable.setStatus("current")
_PowerMgmtPSDEntry_Object = MibTableRow
powerMgmtPSDEntry = _PowerMgmtPSDEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 6, 1)
)
powerMgmtPSDEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    powerMgmtPSDEntry.setStatus("current")
_PowerMgmtAtucMaxPSD_Type = Integer32
_PowerMgmtAtucMaxPSD_Object = MibTableColumn
powerMgmtAtucMaxPSD = _PowerMgmtAtucMaxPSD_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 6, 1, 1),
    _PowerMgmtAtucMaxPSD_Type()
)
powerMgmtAtucMaxPSD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerMgmtAtucMaxPSD.setStatus("current")
if mibBuilder.loadTexts:
    powerMgmtAtucMaxPSD.setUnits("0.1dBm/Hz")
_PowerMgmtAturMaxPSD_Type = Integer32
_PowerMgmtAturMaxPSD_Object = MibTableColumn
powerMgmtAturMaxPSD = _PowerMgmtAturMaxPSD_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 2, 6, 1, 2),
    _PowerMgmtAturMaxPSD_Type()
)
powerMgmtAturMaxPSD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerMgmtAturMaxPSD.setStatus("current")
if mibBuilder.loadTexts:
    powerMgmtAturMaxPSD.setUnits("0.1dBm/Hz")
_ShdslPort_ObjectIdentity = ObjectIdentity
shdslPort = _ShdslPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 3)
)
_ShdslLineConfTable_Object = MibTable
shdslLineConfTable = _ShdslLineConfTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 3, 1)
)
if mibBuilder.loadTexts:
    shdslLineConfTable.setStatus("current")
_ShdslLineConfEntry_Object = MibTableRow
shdslLineConfEntry = _ShdslLineConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 3, 1, 1)
)
shdslLineConfEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    shdslLineConfEntry.setStatus("current")


class _ShdslLineConfShdslMode_Type(Integer32):
    """Custom type shdslLineConfShdslMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("stuc", 1),
          ("stur", 2))
    )


_ShdslLineConfShdslMode_Type.__name__ = "Integer32"
_ShdslLineConfShdslMode_Object = MibTableColumn
shdslLineConfShdslMode = _ShdslLineConfShdslMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 3, 1, 1, 1),
    _ShdslLineConfShdslMode_Type()
)
shdslLineConfShdslMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    shdslLineConfShdslMode.setStatus("current")


class _ShdslLineConfPmms_Type(Integer32):
    """Custom type shdslLineConfPmms based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("normal", 1),
          ("forced", 2))
    )


_ShdslLineConfPmms_Type.__name__ = "Integer32"
_ShdslLineConfPmms_Object = MibTableColumn
shdslLineConfPmms = _ShdslLineConfPmms_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 3, 1, 1, 2),
    _ShdslLineConfPmms_Type()
)
shdslLineConfPmms.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    shdslLineConfPmms.setStatus("current")


class _ShdslLineConfPboMode_Type(Integer32):
    """Custom type shdslLineConfPboMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("normal-epl", 1),
          ("forced-epl", 2),
          ("forced-no-epl", 3))
    )


_ShdslLineConfPboMode_Type.__name__ = "Integer32"
_ShdslLineConfPboMode_Object = MibTableColumn
shdslLineConfPboMode = _ShdslLineConfPboMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 3, 1, 1, 3),
    _ShdslLineConfPboMode_Type()
)
shdslLineConfPboMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    shdslLineConfPboMode.setStatus("current")


class _ShdslLineConfPboValue_Type(Integer32):
    """Custom type shdslLineConfPboValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_ShdslLineConfPboValue_Type.__name__ = "Integer32"
_ShdslLineConfPboValue_Object = MibTableColumn
shdslLineConfPboValue = _ShdslLineConfPboValue_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 3, 1, 1, 4),
    _ShdslLineConfPboValue_Type()
)
shdslLineConfPboValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    shdslLineConfPboValue.setStatus("current")
if mibBuilder.loadTexts:
    shdslLineConfPboValue.setUnits("dB")


class _ShdslLineConfModulation_Type(Integer32):
    """Custom type shdslLineConfModulation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("pam16", 2),
          ("pam32", 3))
    )


_ShdslLineConfModulation_Type.__name__ = "Integer32"
_ShdslLineConfModulation_Object = MibTableColumn
shdslLineConfModulation = _ShdslLineConfModulation_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 3, 1, 1, 5),
    _ShdslLineConfModulation_Type()
)
shdslLineConfModulation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    shdslLineConfModulation.setStatus("current")


class _ShdslLineConfTCMode_Type(Integer32):
    """Custom type shdslLineConfTCMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("atm", 1),
          ("efm", 2))
    )


_ShdslLineConfTCMode_Type.__name__ = "Integer32"
_ShdslLineConfTCMode_Object = MibTableColumn
shdslLineConfTCMode = _ShdslLineConfTCMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 3, 1, 1, 6),
    _ShdslLineConfTCMode_Type()
)
shdslLineConfTCMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    shdslLineConfTCMode.setStatus("current")
_ShdslPortBatchSet_ObjectIdentity = ObjectIdentity
shdslPortBatchSet = _ShdslPortBatchSet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 3, 2)
)
_ShdslPortTarget_Type = OctetString
_ShdslPortTarget_Object = MibScalar
shdslPortTarget = _ShdslPortTarget_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 3, 2, 1),
    _ShdslPortTarget_Type()
)
shdslPortTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    shdslPortTarget.setStatus("current")
_ShdslPortOps_Type = Integer32
_ShdslPortOps_Object = MibScalar
shdslPortOps = _ShdslPortOps_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 3, 2, 2),
    _ShdslPortOps_Type()
)
shdslPortOps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    shdslPortOps.setStatus("current")


class _ShdslModeForBatchSet_Type(Integer32):
    """Custom type shdslModeForBatchSet based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("stuc", 1),
          ("stur", 2))
    )


_ShdslModeForBatchSet_Type.__name__ = "Integer32"
_ShdslModeForBatchSet_Object = MibScalar
shdslModeForBatchSet = _ShdslModeForBatchSet_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 3, 2, 3),
    _ShdslModeForBatchSet_Type()
)
shdslModeForBatchSet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    shdslModeForBatchSet.setStatus("current")


class _ShdslLineProfileForBatchSet_Type(DisplayString):
    """Custom type shdslLineProfileForBatchSet based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_ShdslLineProfileForBatchSet_Type.__name__ = "DisplayString"
_ShdslLineProfileForBatchSet_Object = MibScalar
shdslLineProfileForBatchSet = _ShdslLineProfileForBatchSet_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 3, 2, 4),
    _ShdslLineProfileForBatchSet_Type()
)
shdslLineProfileForBatchSet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    shdslLineProfileForBatchSet.setStatus("current")


class _ShdslAlarmProfileForBatchSet_Type(DisplayString):
    """Custom type shdslAlarmProfileForBatchSet based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_ShdslAlarmProfileForBatchSet_Type.__name__ = "DisplayString"
_ShdslAlarmProfileForBatchSet_Object = MibScalar
shdslAlarmProfileForBatchSet = _ShdslAlarmProfileForBatchSet_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 3, 2, 5),
    _ShdslAlarmProfileForBatchSet_Type()
)
shdslAlarmProfileForBatchSet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    shdslAlarmProfileForBatchSet.setStatus("current")


class _ShdslPboValueForBatchSet_Type(Integer32):
    """Custom type shdslPboValueForBatchSet based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_ShdslPboValueForBatchSet_Type.__name__ = "Integer32"
_ShdslPboValueForBatchSet_Object = MibScalar
shdslPboValueForBatchSet = _ShdslPboValueForBatchSet_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 3, 2, 6),
    _ShdslPboValueForBatchSet_Type()
)
shdslPboValueForBatchSet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    shdslPboValueForBatchSet.setStatus("current")
if mibBuilder.loadTexts:
    shdslPboValueForBatchSet.setUnits("dB")
_ShdslLineStatusTable_Object = MibTable
shdslLineStatusTable = _ShdslLineStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 3, 3)
)
if mibBuilder.loadTexts:
    shdslLineStatusTable.setStatus("current")
_ShdslLineStatusEntry_Object = MibTableRow
shdslLineStatusEntry = _ShdslLineStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 3, 3, 1)
)
shdslLineStatusEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    shdslLineStatusEntry.setStatus("current")


class _ShdslLineStatusWirePair_Type(Integer32):
    """Custom type shdslLineStatusWirePair based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4)
        )
    )
    namedValues = NamedValues(
        *(("twoWire", 1),
          ("fourWire", 2),
          ("mpair4", 4))
    )


_ShdslLineStatusWirePair_Type.__name__ = "Integer32"
_ShdslLineStatusWirePair_Object = MibTableColumn
shdslLineStatusWirePair = _ShdslLineStatusWirePair_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 3, 3, 1, 1),
    _ShdslLineStatusWirePair_Type()
)
shdslLineStatusWirePair.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    shdslLineStatusWirePair.setStatus("current")
_Pvc_ObjectIdentity = ObjectIdentity
pvc = _Pvc_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 4)
)
_MaxNumOfPvcs_Type = Integer32
_MaxNumOfPvcs_Object = MibScalar
maxNumOfPvcs = _MaxNumOfPvcs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 4, 1),
    _MaxNumOfPvcs_Type()
)
maxNumOfPvcs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfPvcs.setStatus("current")
_PvcTable_Object = MibTable
pvcTable = _PvcTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 4, 2)
)
if mibBuilder.loadTexts:
    pvcTable.setStatus("current")
_PvcEntry_Object = MibTableRow
pvcEntry = _PvcEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 4, 2, 1)
)
pvcEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "pvcVpi"),
    (0, "ZYXEL-IES5000-MIB", "pvcVci"),
    (0, "ZYXEL-IES5000-MIB", "pvcPvid"),
)
if mibBuilder.loadTexts:
    pvcEntry.setStatus("current")


class _PvcVpi_Type(Integer32):
    """Custom type pvcVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_PvcVpi_Type.__name__ = "Integer32"
_PvcVpi_Object = MibTableColumn
pvcVpi = _PvcVpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 4, 2, 1, 1),
    _PvcVpi_Type()
)
pvcVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvcVpi.setStatus("current")


class _PvcVci_Type(Integer32):
    """Custom type pvcVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_PvcVci_Type.__name__ = "Integer32"
_PvcVci_Object = MibTableColumn
pvcVci = _PvcVci_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 4, 2, 1, 2),
    _PvcVci_Type()
)
pvcVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvcVci.setStatus("current")
_PvcPvid_Type = VlanIndex
_PvcPvid_Object = MibTableColumn
pvcPvid = _PvcPvid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 4, 2, 1, 3),
    _PvcPvid_Type()
)
pvcPvid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvcPvid.setStatus("current")


class _PvcEncap_Type(Integer32):
    """Custom type pvcEncap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("llc", 1),
          ("vc", 2),
          ("auto", 3))
    )


_PvcEncap_Type.__name__ = "Integer32"
_PvcEncap_Object = MibTableColumn
pvcEncap = _PvcEncap_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 4, 2, 1, 4),
    _PvcEncap_Type()
)
pvcEncap.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvcEncap.setStatus("current")


class _PvcPriority_Type(Integer32):
    """Custom type pvcPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_PvcPriority_Type.__name__ = "Integer32"
_PvcPriority_Object = MibTableColumn
pvcPriority = _PvcPriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 4, 2, 1, 5),
    _PvcPriority_Type()
)
pvcPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvcPriority.setStatus("current")


class _PvcProfile_Type(DisplayString):
    """Custom type pvcProfile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_PvcProfile_Type.__name__ = "DisplayString"
_PvcProfile_Object = MibTableColumn
pvcProfile = _PvcProfile_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 4, 2, 1, 6),
    _PvcProfile_Type()
)
pvcProfile.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvcProfile.setStatus("current")
_PvcRowStatus_Type = RowStatus
_PvcRowStatus_Object = MibTableColumn
pvcRowStatus = _PvcRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 4, 2, 1, 7),
    _PvcRowStatus_Type()
)
pvcRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvcRowStatus.setStatus("current")


class _PvcMvlanEnable_Type(Integer32):
    """Custom type pvcMvlanEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_PvcMvlanEnable_Type.__name__ = "Integer32"
_PvcMvlanEnable_Object = MibTableColumn
pvcMvlanEnable = _PvcMvlanEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 4, 2, 1, 8),
    _PvcMvlanEnable_Type()
)
pvcMvlanEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvcMvlanEnable.setStatus("current")
_PvcAcName_Type = DisplayString
_PvcAcName_Object = MibTableColumn
pvcAcName = _PvcAcName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 4, 2, 1, 9),
    _PvcAcName_Type()
)
pvcAcName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvcAcName.setStatus("current")
_PvcServiceName_Type = DisplayString
_PvcServiceName_Object = MibTableColumn
pvcServiceName = _PvcServiceName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 4, 2, 1, 10),
    _PvcServiceName_Type()
)
pvcServiceName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvcServiceName.setStatus("current")
_PvcHelloTime_Type = Integer32
_PvcHelloTime_Object = MibTableColumn
pvcHelloTime = _PvcHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 4, 2, 1, 11),
    _PvcHelloTime_Type()
)
pvcHelloTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvcHelloTime.setStatus("current")
if mibBuilder.loadTexts:
    pvcHelloTime.setUnits("second")
_PvcVlanTable_Object = MibTable
pvcVlanTable = _PvcVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 4, 3)
)
if mibBuilder.loadTexts:
    pvcVlanTable.setStatus("current")
_PvcVlanEntry_Object = MibTableRow
pvcVlanEntry = _PvcVlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 4, 3, 1)
)
pvcVlanEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "pvcVpi"),
    (0, "ZYXEL-IES5000-MIB", "pvcVci"),
    (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"),
)
if mibBuilder.loadTexts:
    pvcVlanEntry.setStatus("current")


class _PvcVlanReg_Type(Integer32):
    """Custom type pvcVlanReg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("egress", 1),
          ("forbidden", 2))
    )


_PvcVlanReg_Type.__name__ = "Integer32"
_PvcVlanReg_Object = MibTableColumn
pvcVlanReg = _PvcVlanReg_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 4, 3, 1, 1),
    _PvcVlanReg_Type()
)
pvcVlanReg.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvcVlanReg.setStatus("current")


class _PvcVlanTag_Type(Integer32):
    """Custom type pvcVlanTag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("tag", 1),
          ("untag", 2))
    )


_PvcVlanTag_Type.__name__ = "Integer32"
_PvcVlanTag_Object = MibTableColumn
pvcVlanTag = _PvcVlanTag_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 4, 3, 1, 2),
    _PvcVlanTag_Type()
)
pvcVlanTag.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvcVlanTag.setStatus("current")
_PvcVlanRowStatus_Type = RowStatus
_PvcVlanRowStatus_Object = MibTableColumn
pvcVlanRowStatus = _PvcVlanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 4, 3, 1, 3),
    _PvcVlanRowStatus_Type()
)
pvcVlanRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pvcVlanRowStatus.setStatus("current")
_PvcUsRateLimitTable_Object = MibTable
pvcUsRateLimitTable = _PvcUsRateLimitTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 4, 4)
)
if mibBuilder.loadTexts:
    pvcUsRateLimitTable.setStatus("current")
_PvcUsRateLimitEntry_Object = MibTableRow
pvcUsRateLimitEntry = _PvcUsRateLimitEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 4, 4, 1)
)
pvcUsRateLimitEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "pvcVpi"),
    (0, "ZYXEL-IES5000-MIB", "pvcVci"),
)
if mibBuilder.loadTexts:
    pvcUsRateLimitEntry.setStatus("current")


class _PvcUsRateLimitEnable_Type(Integer32):
    """Custom type pvcUsRateLimitEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_PvcUsRateLimitEnable_Type.__name__ = "Integer32"
_PvcUsRateLimitEnable_Object = MibTableColumn
pvcUsRateLimitEnable = _PvcUsRateLimitEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 4, 4, 1, 1),
    _PvcUsRateLimitEnable_Type()
)
pvcUsRateLimitEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcUsRateLimitEnable.setStatus("current")
_PvcUsRateLimit_Type = Integer32
_PvcUsRateLimit_Object = MibTableColumn
pvcUsRateLimit = _PvcUsRateLimit_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 4, 4, 1, 2),
    _PvcUsRateLimit_Type()
)
pvcUsRateLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcUsRateLimit.setStatus("current")
if mibBuilder.loadTexts:
    pvcUsRateLimit.setUnits("Kbps")
_Ppvc_ObjectIdentity = ObjectIdentity
ppvc = _Ppvc_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 5)
)
_MaxNumOfPriorityPvcs_Type = Integer32
_MaxNumOfPriorityPvcs_Object = MibScalar
maxNumOfPriorityPvcs = _MaxNumOfPriorityPvcs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 5, 1),
    _MaxNumOfPriorityPvcs_Type()
)
maxNumOfPriorityPvcs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfPriorityPvcs.setStatus("current")
_PpvcTable_Object = MibTable
ppvcTable = _PpvcTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 5, 2)
)
if mibBuilder.loadTexts:
    ppvcTable.setStatus("current")
_PpvcEntry_Object = MibTableRow
ppvcEntry = _PpvcEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 5, 2, 1)
)
ppvcEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "ppvcVpi"),
    (0, "ZYXEL-IES5000-MIB", "ppvcVci"),
    (0, "ZYXEL-IES5000-MIB", "ppvcPvid"),
)
if mibBuilder.loadTexts:
    ppvcEntry.setStatus("current")


class _PpvcVpi_Type(Integer32):
    """Custom type ppvcVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_PpvcVpi_Type.__name__ = "Integer32"
_PpvcVpi_Object = MibTableColumn
ppvcVpi = _PpvcVpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 5, 2, 1, 1),
    _PpvcVpi_Type()
)
ppvcVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ppvcVpi.setStatus("current")


class _PpvcVci_Type(Integer32):
    """Custom type ppvcVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_PpvcVci_Type.__name__ = "Integer32"
_PpvcVci_Object = MibTableColumn
ppvcVci = _PpvcVci_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 5, 2, 1, 2),
    _PpvcVci_Type()
)
ppvcVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ppvcVci.setStatus("current")
_PpvcPvid_Type = VlanIndex
_PpvcPvid_Object = MibTableColumn
ppvcPvid = _PpvcPvid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 5, 2, 1, 3),
    _PpvcPvid_Type()
)
ppvcPvid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ppvcPvid.setStatus("current")


class _PpvcEncap_Type(Integer32):
    """Custom type ppvcEncap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("llc", 1),
          ("vc", 2))
    )


_PpvcEncap_Type.__name__ = "Integer32"
_PpvcEncap_Object = MibTableColumn
ppvcEncap = _PpvcEncap_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 5, 2, 1, 4),
    _PpvcEncap_Type()
)
ppvcEncap.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ppvcEncap.setStatus("current")


class _PpvcPriority_Type(Integer32):
    """Custom type ppvcPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_PpvcPriority_Type.__name__ = "Integer32"
_PpvcPriority_Object = MibTableColumn
ppvcPriority = _PpvcPriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 5, 2, 1, 5),
    _PpvcPriority_Type()
)
ppvcPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ppvcPriority.setStatus("current")
_PpvcRowStatus_Type = RowStatus
_PpvcRowStatus_Object = MibTableColumn
ppvcRowStatus = _PpvcRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 5, 2, 1, 6),
    _PpvcRowStatus_Type()
)
ppvcRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ppvcRowStatus.setStatus("current")
_PpvcVlanTable_Object = MibTable
ppvcVlanTable = _PpvcVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 5, 3)
)
if mibBuilder.loadTexts:
    ppvcVlanTable.setStatus("current")
_PpvcVlanEntry_Object = MibTableRow
ppvcVlanEntry = _PpvcVlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 5, 3, 1)
)
ppvcVlanEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "ppvcVpi"),
    (0, "ZYXEL-IES5000-MIB", "ppvcVci"),
    (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"),
)
if mibBuilder.loadTexts:
    ppvcVlanEntry.setStatus("current")


class _PpvcVlanReg_Type(Integer32):
    """Custom type ppvcVlanReg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("egress", 1),
          ("forbidden", 2))
    )


_PpvcVlanReg_Type.__name__ = "Integer32"
_PpvcVlanReg_Object = MibTableColumn
ppvcVlanReg = _PpvcVlanReg_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 5, 3, 1, 1),
    _PpvcVlanReg_Type()
)
ppvcVlanReg.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ppvcVlanReg.setStatus("current")


class _PpvcVlanTag_Type(Integer32):
    """Custom type ppvcVlanTag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("tag", 1),
          ("untag", 2))
    )


_PpvcVlanTag_Type.__name__ = "Integer32"
_PpvcVlanTag_Object = MibTableColumn
ppvcVlanTag = _PpvcVlanTag_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 5, 3, 1, 2),
    _PpvcVlanTag_Type()
)
ppvcVlanTag.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ppvcVlanTag.setStatus("current")
_PpvcVlanRowStatus_Type = RowStatus
_PpvcVlanRowStatus_Object = MibTableColumn
ppvcVlanRowStatus = _PpvcVlanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 5, 3, 1, 3),
    _PpvcVlanRowStatus_Type()
)
ppvcVlanRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ppvcVlanRowStatus.setStatus("current")
_PpvcMemberTable_Object = MibTable
ppvcMemberTable = _PpvcMemberTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 5, 4)
)
if mibBuilder.loadTexts:
    ppvcMemberTable.setStatus("current")
_PpvcMemberEntry_Object = MibTableRow
ppvcMemberEntry = _PpvcMemberEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 5, 4, 1)
)
ppvcMemberEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "ppvcVpi"),
    (0, "ZYXEL-IES5000-MIB", "ppvcVci"),
    (0, "ZYXEL-IES5000-MIB", "ppvcMemberVpi"),
    (0, "ZYXEL-IES5000-MIB", "ppvcMemberVci"),
    (0, "ZYXEL-IES5000-MIB", "ppvcMemberPriority"),
)
if mibBuilder.loadTexts:
    ppvcMemberEntry.setStatus("current")


class _PpvcMemberVpi_Type(Integer32):
    """Custom type ppvcMemberVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_PpvcMemberVpi_Type.__name__ = "Integer32"
_PpvcMemberVpi_Object = MibTableColumn
ppvcMemberVpi = _PpvcMemberVpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 5, 4, 1, 1),
    _PpvcMemberVpi_Type()
)
ppvcMemberVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ppvcMemberVpi.setStatus("current")


class _PpvcMemberVci_Type(Integer32):
    """Custom type ppvcMemberVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_PpvcMemberVci_Type.__name__ = "Integer32"
_PpvcMemberVci_Object = MibTableColumn
ppvcMemberVci = _PpvcMemberVci_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 5, 4, 1, 2),
    _PpvcMemberVci_Type()
)
ppvcMemberVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ppvcMemberVci.setStatus("current")


class _PpvcMemberPriority_Type(Integer32):
    """Custom type ppvcMemberPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_PpvcMemberPriority_Type.__name__ = "Integer32"
_PpvcMemberPriority_Object = MibTableColumn
ppvcMemberPriority = _PpvcMemberPriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 5, 4, 1, 3),
    _PpvcMemberPriority_Type()
)
ppvcMemberPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ppvcMemberPriority.setStatus("current")


class _PpvcMemberProfile_Type(DisplayString):
    """Custom type ppvcMemberProfile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_PpvcMemberProfile_Type.__name__ = "DisplayString"
_PpvcMemberProfile_Object = MibTableColumn
ppvcMemberProfile = _PpvcMemberProfile_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 5, 4, 1, 4),
    _PpvcMemberProfile_Type()
)
ppvcMemberProfile.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ppvcMemberProfile.setStatus("current")
_PpvcMemberRowStatus_Type = RowStatus
_PpvcMemberRowStatus_Object = MibTableColumn
ppvcMemberRowStatus = _PpvcMemberRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 5, 4, 1, 5),
    _PpvcMemberRowStatus_Type()
)
ppvcMemberRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ppvcMemberRowStatus.setStatus("current")
_PortOperation_ObjectIdentity = ObjectIdentity
portOperation = _PortOperation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 6)
)
_PortTarget_Type = OctetString
_PortTarget_Object = MibScalar
portTarget = _PortTarget_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 6, 1),
    _PortTarget_Type()
)
portTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portTarget.setStatus("current")
_PortOps_Type = Integer32
_PortOps_Object = MibScalar
portOps = _PortOps_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 6, 2),
    _PortOps_Type()
)
portOps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portOps.setStatus("current")
_PvcStats_ObjectIdentity = ObjectIdentity
pvcStats = _PvcStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 7)
)
_PvcStatsTable_Object = MibTable
pvcStatsTable = _PvcStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 7, 1)
)
if mibBuilder.loadTexts:
    pvcStatsTable.setStatus("current")
_PvcStatsEntry_Object = MibTableRow
pvcStatsEntry = _PvcStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 7, 1, 1)
)
pvcStatsEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "pvcVpi"),
    (0, "ZYXEL-IES5000-MIB", "pvcVci"),
)
if mibBuilder.loadTexts:
    pvcStatsEntry.setStatus("current")
_PvcStatsTxRate_Type = Unsigned32
_PvcStatsTxRate_Object = MibTableColumn
pvcStatsTxRate = _PvcStatsTxRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 7, 1, 1, 1),
    _PvcStatsTxRate_Type()
)
pvcStatsTxRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvcStatsTxRate.setStatus("current")
_PvcStatsRxRate_Type = Unsigned32
_PvcStatsRxRate_Object = MibTableColumn
pvcStatsRxRate = _PvcStatsRxRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 7, 1, 1, 2),
    _PvcStatsRxRate_Type()
)
pvcStatsRxRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvcStatsRxRate.setStatus("current")
_PvcStatsTxCells_Type = Counter64
_PvcStatsTxCells_Object = MibTableColumn
pvcStatsTxCells = _PvcStatsTxCells_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 7, 1, 1, 3),
    _PvcStatsTxCells_Type()
)
pvcStatsTxCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvcStatsTxCells.setStatus("current")
_PvcStatsRxCells_Type = Counter64
_PvcStatsRxCells_Object = MibTableColumn
pvcStatsRxCells = _PvcStatsRxCells_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 7, 1, 1, 4),
    _PvcStatsRxCells_Type()
)
pvcStatsRxCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvcStatsRxCells.setStatus("current")
_PvcStatsCrcErrors_Type = Counter64
_PvcStatsCrcErrors_Object = MibTableColumn
pvcStatsCrcErrors = _PvcStatsCrcErrors_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 7, 1, 1, 5),
    _PvcStatsCrcErrors_Type()
)
pvcStatsCrcErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvcStatsCrcErrors.setStatus("current")
_PvcStatsTxPackets_Type = Counter64
_PvcStatsTxPackets_Object = MibTableColumn
pvcStatsTxPackets = _PvcStatsTxPackets_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 7, 1, 1, 6),
    _PvcStatsTxPackets_Type()
)
pvcStatsTxPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvcStatsTxPackets.setStatus("current")
_PvcStatsRxPackets_Type = Counter64
_PvcStatsRxPackets_Object = MibTableColumn
pvcStatsRxPackets = _PvcStatsRxPackets_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 7, 1, 1, 7),
    _PvcStatsRxPackets_Type()
)
pvcStatsRxPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvcStatsRxPackets.setStatus("current")
_PvcStatsTxUnicast_Type = Counter64
_PvcStatsTxUnicast_Object = MibTableColumn
pvcStatsTxUnicast = _PvcStatsTxUnicast_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 7, 1, 1, 8),
    _PvcStatsTxUnicast_Type()
)
pvcStatsTxUnicast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvcStatsTxUnicast.setStatus("current")
_PvcStatsRxUnicast_Type = Counter64
_PvcStatsRxUnicast_Object = MibTableColumn
pvcStatsRxUnicast = _PvcStatsRxUnicast_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 7, 1, 1, 9),
    _PvcStatsRxUnicast_Type()
)
pvcStatsRxUnicast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvcStatsRxUnicast.setStatus("current")
_PvcStatsTxMulticast_Type = Counter64
_PvcStatsTxMulticast_Object = MibTableColumn
pvcStatsTxMulticast = _PvcStatsTxMulticast_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 7, 1, 1, 10),
    _PvcStatsTxMulticast_Type()
)
pvcStatsTxMulticast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvcStatsTxMulticast.setStatus("current")
_PvcStatsRxMulticast_Type = Counter64
_PvcStatsRxMulticast_Object = MibTableColumn
pvcStatsRxMulticast = _PvcStatsRxMulticast_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 7, 1, 1, 11),
    _PvcStatsRxMulticast_Type()
)
pvcStatsRxMulticast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvcStatsRxMulticast.setStatus("current")
_PvcStatsTxBroadcast_Type = Counter64
_PvcStatsTxBroadcast_Object = MibTableColumn
pvcStatsTxBroadcast = _PvcStatsTxBroadcast_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 7, 1, 1, 12),
    _PvcStatsTxBroadcast_Type()
)
pvcStatsTxBroadcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvcStatsTxBroadcast.setStatus("current")
_PvcStatsRxBroadcast_Type = Counter64
_PvcStatsRxBroadcast_Object = MibTableColumn
pvcStatsRxBroadcast = _PvcStatsRxBroadcast_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 7, 1, 1, 13),
    _PvcStatsRxBroadcast_Type()
)
pvcStatsRxBroadcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvcStatsRxBroadcast.setStatus("current")
_PvcStatsTxDiscard_Type = Counter64
_PvcStatsTxDiscard_Object = MibTableColumn
pvcStatsTxDiscard = _PvcStatsTxDiscard_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 7, 1, 1, 14),
    _PvcStatsTxDiscard_Type()
)
pvcStatsTxDiscard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvcStatsTxDiscard.setStatus("current")
_PvcStatsRxDiscard_Type = Counter64
_PvcStatsRxDiscard_Object = MibTableColumn
pvcStatsRxDiscard = _PvcStatsRxDiscard_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 7, 1, 1, 15),
    _PvcStatsRxDiscard_Type()
)
pvcStatsRxDiscard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvcStatsRxDiscard.setStatus("current")
_PvcCounterIfIndex_Type = Integer32
_PvcCounterIfIndex_Object = MibScalar
pvcCounterIfIndex = _PvcCounterIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 7, 2),
    _PvcCounterIfIndex_Type()
)
pvcCounterIfIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcCounterIfIndex.setStatus("current")


class _PvcCounterVpi_Type(Integer32):
    """Custom type pvcCounterVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_PvcCounterVpi_Type.__name__ = "Integer32"
_PvcCounterVpi_Object = MibScalar
pvcCounterVpi = _PvcCounterVpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 7, 3),
    _PvcCounterVpi_Type()
)
pvcCounterVpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcCounterVpi.setStatus("current")


class _PvcCounterVci_Type(Integer32):
    """Custom type pvcCounterVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_PvcCounterVci_Type.__name__ = "Integer32"
_PvcCounterVci_Object = MibScalar
pvcCounterVci = _PvcCounterVci_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 7, 4),
    _PvcCounterVci_Type()
)
pvcCounterVci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcCounterVci.setStatus("current")
_PvcCounterReset_Type = Integer32
_PvcCounterReset_Object = MibScalar
pvcCounterReset = _PvcCounterReset_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 7, 5),
    _PvcCounterReset_Type()
)
pvcCounterReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcCounterReset.setStatus("current")
_Paepvc_ObjectIdentity = ObjectIdentity
paepvc = _Paepvc_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 8)
)
_PaepvcTable_Object = MibTable
paepvcTable = _PaepvcTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 8, 1)
)
if mibBuilder.loadTexts:
    paepvcTable.setStatus("current")
_PaepvcEntry_Object = MibTableRow
paepvcEntry = _PaepvcEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 8, 1, 1)
)
paepvcEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "paepvcVpi"),
    (0, "ZYXEL-IES5000-MIB", "paepvcVci"),
    (0, "ZYXEL-IES5000-MIB", "paepvcPvid"),
)
if mibBuilder.loadTexts:
    paepvcEntry.setStatus("current")


class _PaepvcVpi_Type(Integer32):
    """Custom type paepvcVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_PaepvcVpi_Type.__name__ = "Integer32"
_PaepvcVpi_Object = MibTableColumn
paepvcVpi = _PaepvcVpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 8, 1, 1, 1),
    _PaepvcVpi_Type()
)
paepvcVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    paepvcVpi.setStatus("current")


class _PaepvcVci_Type(Integer32):
    """Custom type paepvcVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_PaepvcVci_Type.__name__ = "Integer32"
_PaepvcVci_Object = MibTableColumn
paepvcVci = _PaepvcVci_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 8, 1, 1, 2),
    _PaepvcVci_Type()
)
paepvcVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    paepvcVci.setStatus("current")
_PaepvcPvid_Type = VlanIndex
_PaepvcPvid_Object = MibTableColumn
paepvcPvid = _PaepvcPvid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 8, 1, 1, 3),
    _PaepvcPvid_Type()
)
paepvcPvid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    paepvcPvid.setStatus("current")


class _PaepvcEncap_Type(Integer32):
    """Custom type paepvcEncap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("llc", 1),
          ("vc", 2))
    )


_PaepvcEncap_Type.__name__ = "Integer32"
_PaepvcEncap_Object = MibTableColumn
paepvcEncap = _PaepvcEncap_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 8, 1, 1, 4),
    _PaepvcEncap_Type()
)
paepvcEncap.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    paepvcEncap.setStatus("current")


class _PaepvcPriority_Type(Integer32):
    """Custom type paepvcPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_PaepvcPriority_Type.__name__ = "Integer32"
_PaepvcPriority_Object = MibTableColumn
paepvcPriority = _PaepvcPriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 8, 1, 1, 5),
    _PaepvcPriority_Type()
)
paepvcPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    paepvcPriority.setStatus("current")


class _PaepvcProfile_Type(DisplayString):
    """Custom type paepvcProfile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_PaepvcProfile_Type.__name__ = "DisplayString"
_PaepvcProfile_Object = MibTableColumn
paepvcProfile = _PaepvcProfile_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 8, 1, 1, 6),
    _PaepvcProfile_Type()
)
paepvcProfile.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    paepvcProfile.setStatus("current")
_PaepvcAcName_Type = DisplayString
_PaepvcAcName_Object = MibTableColumn
paepvcAcName = _PaepvcAcName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 8, 1, 1, 7),
    _PaepvcAcName_Type()
)
paepvcAcName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    paepvcAcName.setStatus("current")
_PaepvcServiceName_Type = DisplayString
_PaepvcServiceName_Object = MibTableColumn
paepvcServiceName = _PaepvcServiceName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 8, 1, 1, 8),
    _PaepvcServiceName_Type()
)
paepvcServiceName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    paepvcServiceName.setStatus("current")
_PaepvcHelloTime_Type = Integer32
_PaepvcHelloTime_Object = MibTableColumn
paepvcHelloTime = _PaepvcHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 8, 1, 1, 9),
    _PaepvcHelloTime_Type()
)
paepvcHelloTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    paepvcHelloTime.setStatus("current")
if mibBuilder.loadTexts:
    paepvcHelloTime.setUnits("second")
_PaepvcRowStatus_Type = RowStatus
_PaepvcRowStatus_Object = MibTableColumn
paepvcRowStatus = _PaepvcRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 8, 1, 1, 10),
    _PaepvcRowStatus_Type()
)
paepvcRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    paepvcRowStatus.setStatus("current")
_Tlspvc_ObjectIdentity = ObjectIdentity
tlspvc = _Tlspvc_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 9)
)
_TlspvcTable_Object = MibTable
tlspvcTable = _TlspvcTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 9, 1)
)
if mibBuilder.loadTexts:
    tlspvcTable.setStatus("current")
_TlspvcEntry_Object = MibTableRow
tlspvcEntry = _TlspvcEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 9, 1, 1)
)
tlspvcEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "tlspvcVpi"),
    (0, "ZYXEL-IES5000-MIB", "tlspvcVci"),
    (0, "ZYXEL-IES5000-MIB", "tlspvcSvid"),
)
if mibBuilder.loadTexts:
    tlspvcEntry.setStatus("current")


class _TlspvcVpi_Type(Integer32):
    """Custom type tlspvcVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_TlspvcVpi_Type.__name__ = "Integer32"
_TlspvcVpi_Object = MibTableColumn
tlspvcVpi = _TlspvcVpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 9, 1, 1, 1),
    _TlspvcVpi_Type()
)
tlspvcVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tlspvcVpi.setStatus("current")


class _TlspvcVci_Type(Integer32):
    """Custom type tlspvcVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_TlspvcVci_Type.__name__ = "Integer32"
_TlspvcVci_Object = MibTableColumn
tlspvcVci = _TlspvcVci_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 9, 1, 1, 2),
    _TlspvcVci_Type()
)
tlspvcVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tlspvcVci.setStatus("current")
_TlspvcSvid_Type = VlanIndex
_TlspvcSvid_Object = MibTableColumn
tlspvcSvid = _TlspvcSvid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 9, 1, 1, 3),
    _TlspvcSvid_Type()
)
tlspvcSvid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tlspvcSvid.setStatus("current")


class _TlspvcEncap_Type(Integer32):
    """Custom type tlspvcEncap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("llc", 1),
          ("vc", 2))
    )


_TlspvcEncap_Type.__name__ = "Integer32"
_TlspvcEncap_Object = MibTableColumn
tlspvcEncap = _TlspvcEncap_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 9, 1, 1, 4),
    _TlspvcEncap_Type()
)
tlspvcEncap.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    tlspvcEncap.setStatus("current")


class _TlspvcSpriority_Type(Integer32):
    """Custom type tlspvcSpriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_TlspvcSpriority_Type.__name__ = "Integer32"
_TlspvcSpriority_Object = MibTableColumn
tlspvcSpriority = _TlspvcSpriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 9, 1, 1, 5),
    _TlspvcSpriority_Type()
)
tlspvcSpriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    tlspvcSpriority.setStatus("current")


class _TlspvcProfile_Type(DisplayString):
    """Custom type tlspvcProfile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_TlspvcProfile_Type.__name__ = "DisplayString"
_TlspvcProfile_Object = MibTableColumn
tlspvcProfile = _TlspvcProfile_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 9, 1, 1, 6),
    _TlspvcProfile_Type()
)
tlspvcProfile.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    tlspvcProfile.setStatus("current")
_TlspvcRowStatus_Type = RowStatus
_TlspvcRowStatus_Object = MibTableColumn
tlspvcRowStatus = _TlspvcRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 9, 1, 1, 7),
    _TlspvcRowStatus_Type()
)
tlspvcRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    tlspvcRowStatus.setStatus("current")
_VdslPort_ObjectIdentity = ObjectIdentity
vdslPort = _VdslPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10)
)
_VdslLineConfTable_Object = MibTable
vdslLineConfTable = _VdslLineConfTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1)
)
if mibBuilder.loadTexts:
    vdslLineConfTable.setStatus("current")
_VdslLineConfEntry_Object = MibTableRow
vdslLineConfEntry = _VdslLineConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1)
)
vdslLineConfEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    vdslLineConfEntry.setStatus("current")


class _VdslLineConfUpbo_Type(Integer32):
    """Custom type vdslLineConfUpbo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_VdslLineConfUpbo_Type.__name__ = "Integer32"
_VdslLineConfUpbo_Object = MibTableColumn
vdslLineConfUpbo = _VdslLineConfUpbo_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 1),
    _VdslLineConfUpbo_Type()
)
vdslLineConfUpbo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfUpbo.setStatus("current")


class _VdslLineConfVdslProfile_Type(Integer32):
    """Custom type vdslLineConfVdslProfile based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("vdsl-8a", 1),
          ("vdsl-8b", 2),
          ("vdsl-8c", 3),
          ("vdsl-8d", 4),
          ("vdsl-12a", 5),
          ("vdsl-12b", 6),
          ("vdsl-17a", 7),
          ("auto", 8),
          ("adsl2plus", 9),
          ("vdsl2", 10))
    )


_VdslLineConfVdslProfile_Type.__name__ = "Integer32"
_VdslLineConfVdslProfile_Object = MibTableColumn
vdslLineConfVdslProfile = _VdslLineConfVdslProfile_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 2),
    _VdslLineConfVdslProfile_Type()
)
vdslLineConfVdslProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfVdslProfile.setStatus("current")


class _VdslLineConfFrequencyPlan_Type(Integer32):
    """Custom type vdslLineConfFrequencyPlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("plan997", 1),
          ("plan998", 2))
    )


_VdslLineConfFrequencyPlan_Type.__name__ = "Integer32"
_VdslLineConfFrequencyPlan_Object = MibTableColumn
vdslLineConfFrequencyPlan = _VdslLineConfFrequencyPlan_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 3),
    _VdslLineConfFrequencyPlan_Type()
)
vdslLineConfFrequencyPlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfFrequencyPlan.setStatus("current")


class _VdslLineConfRfiBand_Type(Integer32):
    """Custom type vdslLineConfRfiBand based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("ansi", 2),
          ("etsi", 3),
          ("custom", 4))
    )


_VdslLineConfRfiBand_Type.__name__ = "Integer32"
_VdslLineConfRfiBand_Object = MibTableColumn
vdslLineConfRfiBand = _VdslLineConfRfiBand_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 4),
    _VdslLineConfRfiBand_Type()
)
vdslLineConfRfiBand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfRfiBand.setStatus("current")
_VdslLineConfIpqosProfile_Type = DisplayString
_VdslLineConfIpqosProfile_Object = MibTableColumn
vdslLineConfIpqosProfile = _VdslLineConfIpqosProfile_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 5),
    _VdslLineConfIpqosProfile_Type()
)
vdslLineConfIpqosProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfIpqosProfile.setStatus("current")


class _VdslLineConfVturInp_Type(Integer32):
    """Custom type vdslLineConfVturInp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 160),
    )


_VdslLineConfVturInp_Type.__name__ = "Integer32"
_VdslLineConfVturInp_Object = MibTableColumn
vdslLineConfVturInp = _VdslLineConfVturInp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 6),
    _VdslLineConfVturInp_Type()
)
vdslLineConfVturInp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfVturInp.setStatus("current")
if mibBuilder.loadTexts:
    vdslLineConfVturInp.setUnits("0.1 DTM symbol")


class _VdslLineConfVtucInp_Type(Integer32):
    """Custom type vdslLineConfVtucInp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 160),
    )


_VdslLineConfVtucInp_Type.__name__ = "Integer32"
_VdslLineConfVtucInp_Object = MibTableColumn
vdslLineConfVtucInp = _VdslLineConfVtucInp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 7),
    _VdslLineConfVtucInp_Type()
)
vdslLineConfVtucInp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfVtucInp.setStatus("current")
if mibBuilder.loadTexts:
    vdslLineConfVtucInp.setUnits("0.1 DTM symbol")
_VdslLineConfOptionMask_Type = Integer32
_VdslLineConfOptionMask_Object = MibTableColumn
vdslLineConfOptionMask = _VdslLineConfOptionMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 8),
    _VdslLineConfOptionMask_Type()
)
vdslLineConfOptionMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfOptionMask.setStatus("current")


class _VdslLineConfUpboForceLength_Type(Integer32):
    """Custom type vdslLineConfUpboForceLength based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1270),
    )


_VdslLineConfUpboForceLength_Type.__name__ = "Integer32"
_VdslLineConfUpboForceLength_Object = MibTableColumn
vdslLineConfUpboForceLength = _VdslLineConfUpboForceLength_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 9),
    _VdslLineConfUpboForceLength_Type()
)
vdslLineConfUpboForceLength.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfUpboForceLength.setStatus("current")
if mibBuilder.loadTexts:
    vdslLineConfUpboForceLength.setUnits("0.1dB")


class _VdslLineConfPsdShape_Type(Integer32):
    """Custom type vdslLineConfPsdShape based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51)
        )
    )
    namedValues = NamedValues(
        *(("vdsl2-a-nus0", 1),
          ("vdsl2-a-eu32", 2),
          ("vdsl2-a-eu36", 3),
          ("vdsl2-a-eu40", 4),
          ("vdsl2-a-eu44", 5),
          ("vdsl2-a-eu48", 6),
          ("vdsl2-a-eu52", 7),
          ("vdsl2-a-eu56", 8),
          ("vdsl2-a-eu60", 9),
          ("vdsl2-a-eu64", 10),
          ("vdsl2-a-eu128", 11),
          ("vdsl1-fttex-ansi-m1", 12),
          ("vdsl1-fttex-ansi-m2", 13),
          ("vdsl1-fttcab-ansi-m1", 14),
          ("vdsl1-fttcab-ansi-m2", 15),
          ("vdsl1-fttex-ansi-m1-e", 16),
          ("vdsl1-fttex-ansi-m2-e", 17),
          ("vdsl-fttcab-ansi-m1-e", 18),
          ("vdsl-fttcab-ansi-m2-e", 19),
          ("vdsl2-a-ct", 20),
          ("vdsl2-b8-1", 21),
          ("vdsl2-b8-2", 22),
          ("vdsl2-b8-3", 23),
          ("vdsl2-b8-4", 24),
          ("vdsl2-b8-5", 25),
          ("vdsl2-b8-6", 26),
          ("vdsl2-b8-7", 27),
          ("vdsl2-b8-8", 28),
          ("vdsl2-b8-9", 29),
          ("vdsl2-b8-10", 30),
          ("vdsl2-b8-11", 31),
          ("vdsl2-b8-12", 32),
          ("vdsl2-b8-13", 33),
          ("vdsl2-b8-14", 34),
          ("vdsl2-b8-15", 35),
          ("vdsl2-b8-16", 36),
          ("vdsl2-b7-1", 37),
          ("vdsl2-b7-2", 38),
          ("vdsl2-b7-3", 39),
          ("vdsl2-b7-4", 40),
          ("vdsl2-b7-5", 41),
          ("vdsl2-b7-6", 42),
          ("vdsl2-b7-7", 43),
          ("vdsl2-b7-8", 44),
          ("vdsl2-b7-9", 45),
          ("vdsl2-b7-10", 46),
          ("vdsl2-bt-anfp", 47),
          ("vdsl2-c-138-b", 48),
          ("vdsl2-c-276-b", 49),
          ("vdsl2-c-138-co", 50),
          ("vdsl2-c-276-co", 51))
    )


_VdslLineConfPsdShape_Type.__name__ = "Integer32"
_VdslLineConfPsdShape_Object = MibTableColumn
vdslLineConfPsdShape = _VdslLineConfPsdShape_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 10),
    _VdslLineConfPsdShape_Type()
)
vdslLineConfPsdShape.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfPsdShape.setStatus("current")


class _VdslLineConfDpbo_Type(Integer32):
    """Custom type vdslLineConfDpbo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_VdslLineConfDpbo_Type.__name__ = "Integer32"
_VdslLineConfDpbo_Object = MibTableColumn
vdslLineConfDpbo = _VdslLineConfDpbo_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 11),
    _VdslLineConfDpbo_Type()
)
vdslLineConfDpbo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfDpbo.setStatus("current")


class _VdslLineConfDpboParamEsel_Type(Integer32):
    """Custom type vdslLineConfDpboParamEsel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 511),
    )


_VdslLineConfDpboParamEsel_Type.__name__ = "Integer32"
_VdslLineConfDpboParamEsel_Object = MibTableColumn
vdslLineConfDpboParamEsel = _VdslLineConfDpboParamEsel_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 12),
    _VdslLineConfDpboParamEsel_Type()
)
vdslLineConfDpboParamEsel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfDpboParamEsel.setStatus("current")
if mibBuilder.loadTexts:
    vdslLineConfDpboParamEsel.setUnits("0.5dB")


class _VdslLineConfDpboParamEscma_Type(Integer32):
    """Custom type vdslLineConfDpboParamEscma based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 640),
    )


_VdslLineConfDpboParamEscma_Type.__name__ = "Integer32"
_VdslLineConfDpboParamEscma_Object = MibTableColumn
vdslLineConfDpboParamEscma = _VdslLineConfDpboParamEscma_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 13),
    _VdslLineConfDpboParamEscma_Type()
)
vdslLineConfDpboParamEscma.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfDpboParamEscma.setStatus("current")


class _VdslLineConfDpboParamEscmb_Type(Integer32):
    """Custom type vdslLineConfDpboParamEscmb based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 640),
    )


_VdslLineConfDpboParamEscmb_Type.__name__ = "Integer32"
_VdslLineConfDpboParamEscmb_Object = MibTableColumn
vdslLineConfDpboParamEscmb = _VdslLineConfDpboParamEscmb_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 14),
    _VdslLineConfDpboParamEscmb_Type()
)
vdslLineConfDpboParamEscmb.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfDpboParamEscmb.setStatus("current")


class _VdslLineConfDpboParamEscmc_Type(Integer32):
    """Custom type vdslLineConfDpboParamEscmc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 640),
    )


_VdslLineConfDpboParamEscmc_Type.__name__ = "Integer32"
_VdslLineConfDpboParamEscmc_Object = MibTableColumn
vdslLineConfDpboParamEscmc = _VdslLineConfDpboParamEscmc_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 15),
    _VdslLineConfDpboParamEscmc_Type()
)
vdslLineConfDpboParamEscmc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfDpboParamEscmc.setStatus("current")


class _VdslLineConfDpboParamMus_Type(Integer32):
    """Custom type vdslLineConfDpboParamMus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_VdslLineConfDpboParamMus_Type.__name__ = "Integer32"
_VdslLineConfDpboParamMus_Object = MibTableColumn
vdslLineConfDpboParamMus = _VdslLineConfDpboParamMus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 16),
    _VdslLineConfDpboParamMus_Type()
)
vdslLineConfDpboParamMus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfDpboParamMus.setStatus("current")
if mibBuilder.loadTexts:
    vdslLineConfDpboParamMus.setUnits("-0.5 dBm/Hz")


class _VdslLineConfDpboParamFmin_Type(Integer32):
    """Custom type vdslLineConfDpboParamFmin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048),
    )


_VdslLineConfDpboParamFmin_Type.__name__ = "Integer32"
_VdslLineConfDpboParamFmin_Object = MibTableColumn
vdslLineConfDpboParamFmin = _VdslLineConfDpboParamFmin_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 17),
    _VdslLineConfDpboParamFmin_Type()
)
vdslLineConfDpboParamFmin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfDpboParamFmin.setStatus("current")
if mibBuilder.loadTexts:
    vdslLineConfDpboParamFmin.setUnits("4.3125kHz")


class _VdslLineConfDpboParamFmax_Type(Integer32):
    """Custom type vdslLineConfDpboParamFmax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(32, 6956),
    )


_VdslLineConfDpboParamFmax_Type.__name__ = "Integer32"
_VdslLineConfDpboParamFmax_Object = MibTableColumn
vdslLineConfDpboParamFmax = _VdslLineConfDpboParamFmax_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 18),
    _VdslLineConfDpboParamFmax_Type()
)
vdslLineConfDpboParamFmax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfDpboParamFmax.setStatus("current")
if mibBuilder.loadTexts:
    vdslLineConfDpboParamFmax.setUnits("4.3125kHz")


class _VdslLineConfDpboParamPsdId_Type(Integer32):
    """Custom type vdslLineConfDpboParamPsdId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              100)
        )
    )
    namedValues = NamedValues(
        *(("psd-co", 1),
          ("psd-flat", 2),
          ("psd-cab-ansi", 3),
          ("psd-cab-etsi", 4),
          ("psd-exch-etsi", 5),
          ("psd-exch-ansi", 6),
          ("psd-default", 100))
    )


_VdslLineConfDpboParamPsdId_Type.__name__ = "Integer32"
_VdslLineConfDpboParamPsdId_Object = MibTableColumn
vdslLineConfDpboParamPsdId = _VdslLineConfDpboParamPsdId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 19),
    _VdslLineConfDpboParamPsdId_Type()
)
vdslLineConfDpboParamPsdId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfDpboParamPsdId.setStatus("current")


class _VdslLineConfCompatible_Type(Integer32):
    """Custom type vdslLineConfCompatible based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("adsl2", 2),
          ("adsl2Plus", 3))
    )


_VdslLineConfCompatible_Type.__name__ = "Integer32"
_VdslLineConfCompatible_Object = MibTableColumn
vdslLineConfCompatible = _VdslLineConfCompatible_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 20),
    _VdslLineConfCompatible_Type()
)
vdslLineConfCompatible.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfCompatible.setStatus("current")


class _VdslLineConfPowerMode_Type(Integer32):
    """Custom type vdslLineConfPowerMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fix", 1),
          ("priorityToPower", 2),
          ("priorityToRate", 3))
    )


_VdslLineConfPowerMode_Type.__name__ = "Integer32"
_VdslLineConfPowerMode_Object = MibTableColumn
vdslLineConfPowerMode = _VdslLineConfPowerMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 21),
    _VdslLineConfPowerMode_Type()
)
vdslLineConfPowerMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfPowerMode.setStatus("current")
_VdslLineConfVturMaxTxPower_Type = Integer32
_VdslLineConfVturMaxTxPower_Object = MibTableColumn
vdslLineConfVturMaxTxPower = _VdslLineConfVturMaxTxPower_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 22),
    _VdslLineConfVturMaxTxPower_Type()
)
vdslLineConfVturMaxTxPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfVturMaxTxPower.setStatus("current")
_VdslLineConfVtucMaxTxPower_Type = Integer32
_VdslLineConfVtucMaxTxPower_Object = MibTableColumn
vdslLineConfVtucMaxTxPower = _VdslLineConfVtucMaxTxPower_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 23),
    _VdslLineConfVtucMaxTxPower_Type()
)
vdslLineConfVtucMaxTxPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfVtucMaxTxPower.setStatus("current")
_VdslLineConfMaxRxPower_Type = Integer32
_VdslLineConfMaxRxPower_Object = MibTableColumn
vdslLineConfMaxRxPower = _VdslLineConfMaxRxPower_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 24),
    _VdslLineConfMaxRxPower_Type()
)
vdslLineConfMaxRxPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfMaxRxPower.setStatus("current")
_VdslLineConfPMask_Type = Integer32
_VdslLineConfPMask_Object = MibTableColumn
vdslLineConfPMask = _VdslLineConfPMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 25),
    _VdslLineConfPMask_Type()
)
vdslLineConfPMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfPMask.setStatus("current")
_VdslLineConfAturCarrierMask_Type = OctetString
_VdslLineConfAturCarrierMask_Object = MibTableColumn
vdslLineConfAturCarrierMask = _VdslLineConfAturCarrierMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 26),
    _VdslLineConfAturCarrierMask_Type()
)
vdslLineConfAturCarrierMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfAturCarrierMask.setStatus("current")
_VdslLineConfAtucCarrierMask0_Type = OctetString
_VdslLineConfAtucCarrierMask0_Object = MibTableColumn
vdslLineConfAtucCarrierMask0 = _VdslLineConfAtucCarrierMask0_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 27),
    _VdslLineConfAtucCarrierMask0_Type()
)
vdslLineConfAtucCarrierMask0.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfAtucCarrierMask0.setStatus("current")
_VdslLineConfAtucCarrierMask1_Type = OctetString
_VdslLineConfAtucCarrierMask1_Object = MibTableColumn
vdslLineConfAtucCarrierMask1 = _VdslLineConfAtucCarrierMask1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 28),
    _VdslLineConfAtucCarrierMask1_Type()
)
vdslLineConfAtucCarrierMask1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfAtucCarrierMask1.setStatus("current")


class _VdslLineConfSnrModeDs_Type(Integer32):
    """Custom type vdslLineConfSnrModeDs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_VdslLineConfSnrModeDs_Type.__name__ = "Integer32"
_VdslLineConfSnrModeDs_Object = MibTableColumn
vdslLineConfSnrModeDs = _VdslLineConfSnrModeDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 29),
    _VdslLineConfSnrModeDs_Type()
)
vdslLineConfSnrModeDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfSnrModeDs.setStatus("current")


class _VdslLineConfSnrModeUs_Type(Integer32):
    """Custom type vdslLineConfSnrModeUs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_VdslLineConfSnrModeUs_Type.__name__ = "Integer32"
_VdslLineConfSnrModeUs_Object = MibTableColumn
vdslLineConfSnrModeUs = _VdslLineConfSnrModeUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 30),
    _VdslLineConfSnrModeUs_Type()
)
vdslLineConfSnrModeUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfSnrModeUs.setStatus("current")
_VdslLineConfTxRefVnDs_Type = OctetString
_VdslLineConfTxRefVnDs_Object = MibTableColumn
vdslLineConfTxRefVnDs = _VdslLineConfTxRefVnDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 31),
    _VdslLineConfTxRefVnDs_Type()
)
vdslLineConfTxRefVnDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfTxRefVnDs.setStatus("current")
_VdslLineConfTxRefVnUs_Type = OctetString
_VdslLineConfTxRefVnUs_Object = MibTableColumn
vdslLineConfTxRefVnUs = _VdslLineConfTxRefVnUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 32),
    _VdslLineConfTxRefVnUs_Type()
)
vdslLineConfTxRefVnUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfTxRefVnUs.setStatus("current")


class _VdslLineConfTpstcTypeAdsl_Type(Integer32):
    """Custom type vdslLineConfTpstcTypeAdsl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("atm", 1),
          ("ptm", 2))
    )


_VdslLineConfTpstcTypeAdsl_Type.__name__ = "Integer32"
_VdslLineConfTpstcTypeAdsl_Object = MibTableColumn
vdslLineConfTpstcTypeAdsl = _VdslLineConfTpstcTypeAdsl_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 33),
    _VdslLineConfTpstcTypeAdsl_Type()
)
vdslLineConfTpstcTypeAdsl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfTpstcTypeAdsl.setStatus("current")


class _VdslLineConfTpstcTypeVdsl_Type(Integer32):
    """Custom type vdslLineConfTpstcTypeVdsl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("atm", 1),
          ("ptm", 2))
    )


_VdslLineConfTpstcTypeVdsl_Type.__name__ = "Integer32"
_VdslLineConfTpstcTypeVdsl_Object = MibTableColumn
vdslLineConfTpstcTypeVdsl = _VdslLineConfTpstcTypeVdsl_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 34),
    _VdslLineConfTpstcTypeVdsl_Type()
)
vdslLineConfTpstcTypeVdsl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfTpstcTypeVdsl.setStatus("current")


class _VdslLineConfVturInmEq_Type(Unsigned32):
    """Custom type vdslLineConfVturInmEq based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_VdslLineConfVturInmEq_Type.__name__ = "Unsigned32"
_VdslLineConfVturInmEq_Object = MibTableColumn
vdslLineConfVturInmEq = _VdslLineConfVturInmEq_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 35),
    _VdslLineConfVturInmEq_Type()
)
vdslLineConfVturInmEq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfVturInmEq.setStatus("current")


class _VdslLineConfVtucInmEq_Type(Unsigned32):
    """Custom type vdslLineConfVtucInmEq based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_VdslLineConfVtucInmEq_Type.__name__ = "Unsigned32"
_VdslLineConfVtucInmEq_Object = MibTableColumn
vdslLineConfVtucInmEq = _VdslLineConfVtucInmEq_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 36),
    _VdslLineConfVtucInmEq_Type()
)
vdslLineConfVtucInmEq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfVtucInmEq.setStatus("current")
_VdslLineConfInmVturCC_Type = Unsigned32
_VdslLineConfInmVturCC_Object = MibTableColumn
vdslLineConfInmVturCC = _VdslLineConfInmVturCC_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 37),
    _VdslLineConfInmVturCC_Type()
)
vdslLineConfInmVturCC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfInmVturCC.setStatus("current")
_VdslLineConfInmVtucCC_Type = Unsigned32
_VdslLineConfInmVtucCC_Object = MibTableColumn
vdslLineConfInmVtucCC = _VdslLineConfInmVtucCC_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 38),
    _VdslLineConfInmVtucCC_Type()
)
vdslLineConfInmVtucCC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfInmVtucCC.setStatus("current")
_VdslLineConfInmVturIATO_Type = Unsigned32
_VdslLineConfInmVturIATO_Object = MibTableColumn
vdslLineConfInmVturIATO = _VdslLineConfInmVturIATO_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 39),
    _VdslLineConfInmVturIATO_Type()
)
vdslLineConfInmVturIATO.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfInmVturIATO.setStatus("current")
_VdslLineConfInmVtucIATO_Type = Unsigned32
_VdslLineConfInmVtucIATO_Object = MibTableColumn
vdslLineConfInmVtucIATO = _VdslLineConfInmVtucIATO_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 40),
    _VdslLineConfInmVtucIATO_Type()
)
vdslLineConfInmVtucIATO.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfInmVtucIATO.setStatus("current")
_VdslLineConfInmVturIATS_Type = Unsigned32
_VdslLineConfInmVturIATS_Object = MibTableColumn
vdslLineConfInmVturIATS = _VdslLineConfInmVturIATS_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 41),
    _VdslLineConfInmVturIATS_Type()
)
vdslLineConfInmVturIATS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfInmVturIATS.setStatus("current")
_VdslLineConfInmVtucIATS_Type = Unsigned32
_VdslLineConfInmVtucIATS_Object = MibTableColumn
vdslLineConfInmVtucIATS = _VdslLineConfInmVtucIATS_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 42),
    _VdslLineConfInmVtucIATS_Type()
)
vdslLineConfInmVtucIATS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfInmVtucIATS.setStatus("current")
_VdslLineConfInmVtucISDBUS_Type = Integer32
_VdslLineConfInmVtucISDBUS_Object = MibTableColumn
vdslLineConfInmVtucISDBUS = _VdslLineConfInmVtucISDBUS_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 43),
    _VdslLineConfInmVtucISDBUS_Type()
)
vdslLineConfInmVtucISDBUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfInmVtucISDBUS.setStatus("current")
_VdslLineConfGinpRtxModeDs_Type = Xdsl2ConfigRtxMode
_VdslLineConfGinpRtxModeDs_Object = MibTableColumn
vdslLineConfGinpRtxModeDs = _VdslLineConfGinpRtxModeDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 44),
    _VdslLineConfGinpRtxModeDs_Type()
)
vdslLineConfGinpRtxModeDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfGinpRtxModeDs.setStatus("current")
_VdslLineConfGinpRtxModeUs_Type = Xdsl2ConfigRtxMode
_VdslLineConfGinpRtxModeUs_Object = MibTableColumn
vdslLineConfGinpRtxModeUs = _VdslLineConfGinpRtxModeUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 45),
    _VdslLineConfGinpRtxModeUs_Type()
)
vdslLineConfGinpRtxModeUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfGinpRtxModeUs.setStatus("current")
_VdslLineConfGinpEtrMaxDs_Type = Unsigned32
_VdslLineConfGinpEtrMaxDs_Object = MibTableColumn
vdslLineConfGinpEtrMaxDs = _VdslLineConfGinpEtrMaxDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 46),
    _VdslLineConfGinpEtrMaxDs_Type()
)
vdslLineConfGinpEtrMaxDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfGinpEtrMaxDs.setStatus("current")
_VdslLineConfGinpEtrMaxUs_Type = Unsigned32
_VdslLineConfGinpEtrMaxUs_Object = MibTableColumn
vdslLineConfGinpEtrMaxUs = _VdslLineConfGinpEtrMaxUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 47),
    _VdslLineConfGinpEtrMaxUs_Type()
)
vdslLineConfGinpEtrMaxUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfGinpEtrMaxUs.setStatus("current")
_VdslLineConfGinpEtrMinDs_Type = Unsigned32
_VdslLineConfGinpEtrMinDs_Object = MibTableColumn
vdslLineConfGinpEtrMinDs = _VdslLineConfGinpEtrMinDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 48),
    _VdslLineConfGinpEtrMinDs_Type()
)
vdslLineConfGinpEtrMinDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfGinpEtrMinDs.setStatus("current")
_VdslLineConfGinpEtrMinUs_Type = Unsigned32
_VdslLineConfGinpEtrMinUs_Object = MibTableColumn
vdslLineConfGinpEtrMinUs = _VdslLineConfGinpEtrMinUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 49),
    _VdslLineConfGinpEtrMinUs_Type()
)
vdslLineConfGinpEtrMinUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfGinpEtrMinUs.setStatus("current")
_VdslLineConfGinpNdrMaxDs_Type = Unsigned32
_VdslLineConfGinpNdrMaxDs_Object = MibTableColumn
vdslLineConfGinpNdrMaxDs = _VdslLineConfGinpNdrMaxDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 50),
    _VdslLineConfGinpNdrMaxDs_Type()
)
vdslLineConfGinpNdrMaxDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfGinpNdrMaxDs.setStatus("current")
_VdslLineConfGinpNdrMaxUs_Type = Unsigned32
_VdslLineConfGinpNdrMaxUs_Object = MibTableColumn
vdslLineConfGinpNdrMaxUs = _VdslLineConfGinpNdrMaxUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 51),
    _VdslLineConfGinpNdrMaxUs_Type()
)
vdslLineConfGinpNdrMaxUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfGinpNdrMaxUs.setStatus("current")
_VdslLineConfGinpShineRatioDs_Type = Unsigned32
_VdslLineConfGinpShineRatioDs_Object = MibTableColumn
vdslLineConfGinpShineRatioDs = _VdslLineConfGinpShineRatioDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 52),
    _VdslLineConfGinpShineRatioDs_Type()
)
vdslLineConfGinpShineRatioDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfGinpShineRatioDs.setStatus("current")
_VdslLineConfGinpShineRatioUs_Type = Unsigned32
_VdslLineConfGinpShineRatioUs_Object = MibTableColumn
vdslLineConfGinpShineRatioUs = _VdslLineConfGinpShineRatioUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 53),
    _VdslLineConfGinpShineRatioUs_Type()
)
vdslLineConfGinpShineRatioUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfGinpShineRatioUs.setStatus("current")
_VdslLineConfGinpLeftrThresholdDs_Type = Unsigned32
_VdslLineConfGinpLeftrThresholdDs_Object = MibTableColumn
vdslLineConfGinpLeftrThresholdDs = _VdslLineConfGinpLeftrThresholdDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 54),
    _VdslLineConfGinpLeftrThresholdDs_Type()
)
vdslLineConfGinpLeftrThresholdDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfGinpLeftrThresholdDs.setStatus("current")
_VdslLineConfGinpLeftrThresholdUs_Type = Unsigned32
_VdslLineConfGinpLeftrThresholdUs_Object = MibTableColumn
vdslLineConfGinpLeftrThresholdUs = _VdslLineConfGinpLeftrThresholdUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 55),
    _VdslLineConfGinpLeftrThresholdUs_Type()
)
vdslLineConfGinpLeftrThresholdUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfGinpLeftrThresholdUs.setStatus("current")
_VdslLineConfGinpMaxDelayDs_Type = Unsigned32
_VdslLineConfGinpMaxDelayDs_Object = MibTableColumn
vdslLineConfGinpMaxDelayDs = _VdslLineConfGinpMaxDelayDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 56),
    _VdslLineConfGinpMaxDelayDs_Type()
)
vdslLineConfGinpMaxDelayDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfGinpMaxDelayDs.setStatus("current")
_VdslLineConfGinpMaxDelayUs_Type = Unsigned32
_VdslLineConfGinpMaxDelayUs_Object = MibTableColumn
vdslLineConfGinpMaxDelayUs = _VdslLineConfGinpMaxDelayUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 57),
    _VdslLineConfGinpMaxDelayUs_Type()
)
vdslLineConfGinpMaxDelayUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfGinpMaxDelayUs.setStatus("current")
_VdslLineConfGinpMinDelayDs_Type = Unsigned32
_VdslLineConfGinpMinDelayDs_Object = MibTableColumn
vdslLineConfGinpMinDelayDs = _VdslLineConfGinpMinDelayDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 58),
    _VdslLineConfGinpMinDelayDs_Type()
)
vdslLineConfGinpMinDelayDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfGinpMinDelayDs.setStatus("current")
_VdslLineConfGinpMinDelayUs_Type = Unsigned32
_VdslLineConfGinpMinDelayUs_Object = MibTableColumn
vdslLineConfGinpMinDelayUs = _VdslLineConfGinpMinDelayUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 59),
    _VdslLineConfGinpMinDelayUs_Type()
)
vdslLineConfGinpMinDelayUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfGinpMinDelayUs.setStatus("current")
_VdslLineConfGinpInpMinDs_Type = Unsigned32
_VdslLineConfGinpInpMinDs_Object = MibTableColumn
vdslLineConfGinpInpMinDs = _VdslLineConfGinpInpMinDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 60),
    _VdslLineConfGinpInpMinDs_Type()
)
vdslLineConfGinpInpMinDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfGinpInpMinDs.setStatus("current")
_VdslLineConfGinpInpMinUs_Type = Unsigned32
_VdslLineConfGinpInpMinUs_Object = MibTableColumn
vdslLineConfGinpInpMinUs = _VdslLineConfGinpInpMinUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 61),
    _VdslLineConfGinpInpMinUs_Type()
)
vdslLineConfGinpInpMinUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfGinpInpMinUs.setStatus("current")
_VdslLineConfGinpReinCfgInpDs_Type = Unsigned32
_VdslLineConfGinpReinCfgInpDs_Object = MibTableColumn
vdslLineConfGinpReinCfgInpDs = _VdslLineConfGinpReinCfgInpDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 62),
    _VdslLineConfGinpReinCfgInpDs_Type()
)
vdslLineConfGinpReinCfgInpDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfGinpReinCfgInpDs.setStatus("current")
_VdslLineConfGinpReinCfgInpUs_Type = Unsigned32
_VdslLineConfGinpReinCfgInpUs_Object = MibTableColumn
vdslLineConfGinpReinCfgInpUs = _VdslLineConfGinpReinCfgInpUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 63),
    _VdslLineConfGinpReinCfgInpUs_Type()
)
vdslLineConfGinpReinCfgInpUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfGinpReinCfgInpUs.setStatus("current")
_VdslLineConfGinpReinCfgFreqDs_Type = Unsigned32
_VdslLineConfGinpReinCfgFreqDs_Object = MibTableColumn
vdslLineConfGinpReinCfgFreqDs = _VdslLineConfGinpReinCfgFreqDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 64),
    _VdslLineConfGinpReinCfgFreqDs_Type()
)
vdslLineConfGinpReinCfgFreqDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfGinpReinCfgFreqDs.setStatus("current")
_VdslLineConfGinpReinCfgFreqUs_Type = Unsigned32
_VdslLineConfGinpReinCfgFreqUs_Object = MibTableColumn
vdslLineConfGinpReinCfgFreqUs = _VdslLineConfGinpReinCfgFreqUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 65),
    _VdslLineConfGinpReinCfgFreqUs_Type()
)
vdslLineConfGinpReinCfgFreqUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfGinpReinCfgFreqUs.setStatus("current")
_VdslLineConfSosMinRateB0Ds_Type = Unsigned32
_VdslLineConfSosMinRateB0Ds_Object = MibTableColumn
vdslLineConfSosMinRateB0Ds = _VdslLineConfSosMinRateB0Ds_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 66),
    _VdslLineConfSosMinRateB0Ds_Type()
)
vdslLineConfSosMinRateB0Ds.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfSosMinRateB0Ds.setStatus("current")
_VdslLineConfSosMinRateB0Us_Type = Unsigned32
_VdslLineConfSosMinRateB0Us_Object = MibTableColumn
vdslLineConfSosMinRateB0Us = _VdslLineConfSosMinRateB0Us_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 67),
    _VdslLineConfSosMinRateB0Us_Type()
)
vdslLineConfSosMinRateB0Us.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfSosMinRateB0Us.setStatus("current")
_VdslLineConfSosTimeDs_Type = Unsigned32
_VdslLineConfSosTimeDs_Object = MibTableColumn
vdslLineConfSosTimeDs = _VdslLineConfSosTimeDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 68),
    _VdslLineConfSosTimeDs_Type()
)
vdslLineConfSosTimeDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfSosTimeDs.setStatus("current")
_VdslLineConfSosTimeUs_Type = Unsigned32
_VdslLineConfSosTimeUs_Object = MibTableColumn
vdslLineConfSosTimeUs = _VdslLineConfSosTimeUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 69),
    _VdslLineConfSosTimeUs_Type()
)
vdslLineConfSosTimeUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfSosTimeUs.setStatus("current")
_VdslLineConfSosCrcDs_Type = Unsigned32
_VdslLineConfSosCrcDs_Object = MibTableColumn
vdslLineConfSosCrcDs = _VdslLineConfSosCrcDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 70),
    _VdslLineConfSosCrcDs_Type()
)
vdslLineConfSosCrcDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfSosCrcDs.setStatus("current")
_VdslLineConfSosCrcUs_Type = Unsigned32
_VdslLineConfSosCrcUs_Object = MibTableColumn
vdslLineConfSosCrcUs = _VdslLineConfSosCrcUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 71),
    _VdslLineConfSosCrcUs_Type()
)
vdslLineConfSosCrcUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfSosCrcUs.setStatus("current")
_VdslLineConfSosNToneDs_Type = Unsigned32
_VdslLineConfSosNToneDs_Object = MibTableColumn
vdslLineConfSosNToneDs = _VdslLineConfSosNToneDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 72),
    _VdslLineConfSosNToneDs_Type()
)
vdslLineConfSosNToneDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfSosNToneDs.setStatus("current")
_VdslLineConfSosNToneUs_Type = Unsigned32
_VdslLineConfSosNToneUs_Object = MibTableColumn
vdslLineConfSosNToneUs = _VdslLineConfSosNToneUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 73),
    _VdslLineConfSosNToneUs_Type()
)
vdslLineConfSosNToneUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfSosNToneUs.setStatus("current")
_VdslLineConfSosMaxDs_Type = Unsigned32
_VdslLineConfSosMaxDs_Object = MibTableColumn
vdslLineConfSosMaxDs = _VdslLineConfSosMaxDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 74),
    _VdslLineConfSosMaxDs_Type()
)
vdslLineConfSosMaxDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfSosMaxDs.setStatus("current")
_VdslLineConfSosMaxUs_Type = Unsigned32
_VdslLineConfSosMaxUs_Object = MibTableColumn
vdslLineConfSosMaxUs = _VdslLineConfSosMaxUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 75),
    _VdslLineConfSosMaxUs_Type()
)
vdslLineConfSosMaxUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfSosMaxUs.setStatus("current")


class _VdslLineConfSosMultiStepDs_Type(Integer32):
    """Custom type vdslLineConfSosMultiStepDs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("noLimit", 0),
          ("gsos256", 2),
          ("gsos512", 3),
          ("gsos1024", 4))
    )


_VdslLineConfSosMultiStepDs_Type.__name__ = "Integer32"
_VdslLineConfSosMultiStepDs_Object = MibTableColumn
vdslLineConfSosMultiStepDs = _VdslLineConfSosMultiStepDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 76),
    _VdslLineConfSosMultiStepDs_Type()
)
vdslLineConfSosMultiStepDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfSosMultiStepDs.setStatus("current")


class _VdslLineConfSosMultiStepUs_Type(Integer32):
    """Custom type vdslLineConfSosMultiStepUs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("noLimit", 0),
          ("gsos256", 2),
          ("gsos512", 3),
          ("gsos1024", 4))
    )


_VdslLineConfSosMultiStepUs_Type.__name__ = "Integer32"
_VdslLineConfSosMultiStepUs_Object = MibTableColumn
vdslLineConfSosMultiStepUs = _VdslLineConfSosMultiStepUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 77),
    _VdslLineConfSosMultiStepUs_Type()
)
vdslLineConfSosMultiStepUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfSosMultiStepUs.setStatus("current")


class _VdslLineConfRocEnableDs_Type(Integer32):
    """Custom type vdslLineConfRocEnableDs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_VdslLineConfRocEnableDs_Type.__name__ = "Integer32"
_VdslLineConfRocEnableDs_Object = MibTableColumn
vdslLineConfRocEnableDs = _VdslLineConfRocEnableDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 78),
    _VdslLineConfRocEnableDs_Type()
)
vdslLineConfRocEnableDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfRocEnableDs.setStatus("current")


class _VdslLineConfRocEnableUs_Type(Integer32):
    """Custom type vdslLineConfRocEnableUs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_VdslLineConfRocEnableUs_Type.__name__ = "Integer32"
_VdslLineConfRocEnableUs_Object = MibTableColumn
vdslLineConfRocEnableUs = _VdslLineConfRocEnableUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 79),
    _VdslLineConfRocEnableUs_Type()
)
vdslLineConfRocEnableUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfRocEnableUs.setStatus("current")
_VdslLineConfRocSnrmDs_Type = Unsigned32
_VdslLineConfRocSnrmDs_Object = MibTableColumn
vdslLineConfRocSnrmDs = _VdslLineConfRocSnrmDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 80),
    _VdslLineConfRocSnrmDs_Type()
)
vdslLineConfRocSnrmDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfRocSnrmDs.setStatus("current")
_VdslLineConfRocSnrmUs_Type = Unsigned32
_VdslLineConfRocSnrmUs_Object = MibTableColumn
vdslLineConfRocSnrmUs = _VdslLineConfRocSnrmUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 81),
    _VdslLineConfRocSnrmUs_Type()
)
vdslLineConfRocSnrmUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfRocSnrmUs.setStatus("current")
_VdslLineConfRocMinInpDs_Type = Unsigned32
_VdslLineConfRocMinInpDs_Object = MibTableColumn
vdslLineConfRocMinInpDs = _VdslLineConfRocMinInpDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 82),
    _VdslLineConfRocMinInpDs_Type()
)
vdslLineConfRocMinInpDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfRocMinInpDs.setStatus("current")
_VdslLineConfRocMinInpUs_Type = Unsigned32
_VdslLineConfRocMinInpUs_Object = MibTableColumn
vdslLineConfRocMinInpUs = _VdslLineConfRocMinInpUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 83),
    _VdslLineConfRocMinInpUs_Type()
)
vdslLineConfRocMinInpUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfRocMinInpUs.setStatus("current")


class _VdslLineConfSosEnableDs_Type(Integer32):
    """Custom type vdslLineConfSosEnableDs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_VdslLineConfSosEnableDs_Type.__name__ = "Integer32"
_VdslLineConfSosEnableDs_Object = MibTableColumn
vdslLineConfSosEnableDs = _VdslLineConfSosEnableDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 84),
    _VdslLineConfSosEnableDs_Type()
)
vdslLineConfSosEnableDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfSosEnableDs.setStatus("current")


class _VdslLineConfSosEnableUs_Type(Integer32):
    """Custom type vdslLineConfSosEnableUs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_VdslLineConfSosEnableUs_Type.__name__ = "Integer32"
_VdslLineConfSosEnableUs_Object = MibTableColumn
vdslLineConfSosEnableUs = _VdslLineConfSosEnableUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 85),
    _VdslLineConfSosEnableUs_Type()
)
vdslLineConfSosEnableUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfSosEnableUs.setStatus("current")


class _VdslLineConfDynamicDepthDs_Type(Integer32):
    """Custom type vdslLineConfDynamicDepthDs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_VdslLineConfDynamicDepthDs_Type.__name__ = "Integer32"
_VdslLineConfDynamicDepthDs_Object = MibTableColumn
vdslLineConfDynamicDepthDs = _VdslLineConfDynamicDepthDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 86),
    _VdslLineConfDynamicDepthDs_Type()
)
vdslLineConfDynamicDepthDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfDynamicDepthDs.setStatus("current")


class _VdslLineConfDynamicDepthUs_Type(Integer32):
    """Custom type vdslLineConfDynamicDepthUs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_VdslLineConfDynamicDepthUs_Type.__name__ = "Integer32"
_VdslLineConfDynamicDepthUs_Object = MibTableColumn
vdslLineConfDynamicDepthUs = _VdslLineConfDynamicDepthUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 87),
    _VdslLineConfDynamicDepthUs_Type()
)
vdslLineConfDynamicDepthUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfDynamicDepthUs.setStatus("current")


class _VdslLineConfDpboParamType_Type(Integer32):
    """Custom type vdslLineConfDpboParamType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("g9971", 1),
          ("t-com", 2))
    )


_VdslLineConfDpboParamType_Type.__name__ = "Integer32"
_VdslLineConfDpboParamType_Object = MibTableColumn
vdslLineConfDpboParamType = _VdslLineConfDpboParamType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 88),
    _VdslLineConfDpboParamType_Type()
)
vdslLineConfDpboParamType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfDpboParamType.setStatus("current")


class _VdslLineConfDpboParamEselMin_Type(Integer32):
    """Custom type vdslLineConfDpboParamEselMin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 511),
    )


_VdslLineConfDpboParamEselMin_Type.__name__ = "Integer32"
_VdslLineConfDpboParamEselMin_Object = MibTableColumn
vdslLineConfDpboParamEselMin = _VdslLineConfDpboParamEselMin_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 89),
    _VdslLineConfDpboParamEselMin_Type()
)
vdslLineConfDpboParamEselMin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfDpboParamEselMin.setStatus("current")
if mibBuilder.loadTexts:
    vdslLineConfDpboParamEselMin.setUnits("0.5 dB")


class _VdslLineConfHsTxA43Psd_Type(Integer32):
    """Custom type vdslLineConfHsTxA43Psd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-128, -32),
    )


_VdslLineConfHsTxA43Psd_Type.__name__ = "Integer32"
_VdslLineConfHsTxA43Psd_Object = MibTableColumn
vdslLineConfHsTxA43Psd = _VdslLineConfHsTxA43Psd_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 90),
    _VdslLineConfHsTxA43Psd_Type()
)
vdslLineConfHsTxA43Psd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfHsTxA43Psd.setStatus("current")
if mibBuilder.loadTexts:
    vdslLineConfHsTxA43Psd.setUnits("dB/HzB")


class _VdslLineConfHsTxB43Psd_Type(Integer32):
    """Custom type vdslLineConfHsTxB43Psd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-128, -32),
    )


_VdslLineConfHsTxB43Psd_Type.__name__ = "Integer32"
_VdslLineConfHsTxB43Psd_Object = MibTableColumn
vdslLineConfHsTxB43Psd = _VdslLineConfHsTxB43Psd_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 91),
    _VdslLineConfHsTxB43Psd_Type()
)
vdslLineConfHsTxB43Psd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfHsTxB43Psd.setStatus("current")
if mibBuilder.loadTexts:
    vdslLineConfHsTxB43Psd.setUnits("dB/HzB")


class _VdslLineConfHsTxA43cB43cPsd_Type(Integer32):
    """Custom type vdslLineConfHsTxA43cB43cPsd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-128, -32),
    )


_VdslLineConfHsTxA43cB43cPsd_Type.__name__ = "Integer32"
_VdslLineConfHsTxA43cB43cPsd_Object = MibTableColumn
vdslLineConfHsTxA43cB43cPsd = _VdslLineConfHsTxA43cB43cPsd_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 92),
    _VdslLineConfHsTxA43cB43cPsd_Type()
)
vdslLineConfHsTxA43cB43cPsd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfHsTxA43cB43cPsd.setStatus("current")
if mibBuilder.loadTexts:
    vdslLineConfHsTxA43cB43cPsd.setUnits("dB/HzB")


class _VdslLineConfHsTxV43Carrier257Psd_Type(Integer32):
    """Custom type vdslLineConfHsTxV43Carrier257Psd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-128, -32),
    )


_VdslLineConfHsTxV43Carrier257Psd_Type.__name__ = "Integer32"
_VdslLineConfHsTxV43Carrier257Psd_Object = MibTableColumn
vdslLineConfHsTxV43Carrier257Psd = _VdslLineConfHsTxV43Carrier257Psd_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 93),
    _VdslLineConfHsTxV43Carrier257Psd_Type()
)
vdslLineConfHsTxV43Carrier257Psd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfHsTxV43Carrier257Psd.setStatus("current")
if mibBuilder.loadTexts:
    vdslLineConfHsTxV43Carrier257Psd.setUnits("dB/HzB")


class _VdslLineConfHsTxV43Carrier383Psd_Type(Integer32):
    """Custom type vdslLineConfHsTxV43Carrier383Psd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-128, -32),
    )


_VdslLineConfHsTxV43Carrier383Psd_Type.__name__ = "Integer32"
_VdslLineConfHsTxV43Carrier383Psd_Object = MibTableColumn
vdslLineConfHsTxV43Carrier383Psd = _VdslLineConfHsTxV43Carrier383Psd_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 94),
    _VdslLineConfHsTxV43Carrier383Psd_Type()
)
vdslLineConfHsTxV43Carrier383Psd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfHsTxV43Carrier383Psd.setStatus("current")
if mibBuilder.loadTexts:
    vdslLineConfHsTxV43Carrier383Psd.setUnits("dB/HzB")


class _VdslLineConfHsTxV43Carrier511Psd_Type(Integer32):
    """Custom type vdslLineConfHsTxV43Carrier511Psd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-128, -32),
    )


_VdslLineConfHsTxV43Carrier511Psd_Type.__name__ = "Integer32"
_VdslLineConfHsTxV43Carrier511Psd_Object = MibTableColumn
vdslLineConfHsTxV43Carrier511Psd = _VdslLineConfHsTxV43Carrier511Psd_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 1, 1, 95),
    _VdslLineConfHsTxV43Carrier511Psd_Type()
)
vdslLineConfHsTxV43Carrier511Psd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfHsTxV43Carrier511Psd.setStatus("current")
if mibBuilder.loadTexts:
    vdslLineConfHsTxV43Carrier511Psd.setUnits("dB/HzB")
_VdslVlan_ObjectIdentity = ObjectIdentity
vdslVlan = _VdslVlan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2)
)
_VdslPortConfTable_Object = MibTable
vdslPortConfTable = _VdslPortConfTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 1)
)
if mibBuilder.loadTexts:
    vdslPortConfTable.setStatus("current")
_VdslPortConfEntry_Object = MibTableRow
vdslPortConfEntry = _VdslPortConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 1, 1)
)
vdslPortConfEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    vdslPortConfEntry.setStatus("current")
_VdslPortConfPvid_Type = VlanIndex
_VdslPortConfPvid_Object = MibTableColumn
vdslPortConfPvid = _VdslPortConfPvid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 1, 1, 1),
    _VdslPortConfPvid_Type()
)
vdslPortConfPvid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslPortConfPvid.setStatus("current")


class _VdslPortConfPriority_Type(Integer32):
    """Custom type vdslPortConfPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_VdslPortConfPriority_Type.__name__ = "Integer32"
_VdslPortConfPriority_Object = MibTableColumn
vdslPortConfPriority = _VdslPortConfPriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 1, 1, 2),
    _VdslPortConfPriority_Type()
)
vdslPortConfPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslPortConfPriority.setStatus("current")


class _VdslPortConfAcceptableFrameType_Type(Integer32):
    """Custom type vdslPortConfAcceptableFrameType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("admitAll", 1),
          ("admitOnlyVlanTagged", 2))
    )


_VdslPortConfAcceptableFrameType_Type.__name__ = "Integer32"
_VdslPortConfAcceptableFrameType_Object = MibTableColumn
vdslPortConfAcceptableFrameType = _VdslPortConfAcceptableFrameType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 1, 1, 3),
    _VdslPortConfAcceptableFrameType_Type()
)
vdslPortConfAcceptableFrameType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslPortConfAcceptableFrameType.setStatus("current")


class _VdslPortConfTlsEnable_Type(Integer32):
    """Custom type vdslPortConfTlsEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_VdslPortConfTlsEnable_Type.__name__ = "Integer32"
_VdslPortConfTlsEnable_Object = MibTableColumn
vdslPortConfTlsEnable = _VdslPortConfTlsEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 1, 1, 4),
    _VdslPortConfTlsEnable_Type()
)
vdslPortConfTlsEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslPortConfTlsEnable.setStatus("current")
_VdslPortConfTlsVid_Type = VlanIndex
_VdslPortConfTlsVid_Object = MibTableColumn
vdslPortConfTlsVid = _VdslPortConfTlsVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 1, 1, 5),
    _VdslPortConfTlsVid_Type()
)
vdslPortConfTlsVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslPortConfTlsVid.setStatus("current")
_VdslPortConfTlsPriority_Type = Integer32
_VdslPortConfTlsPriority_Object = MibTableColumn
vdslPortConfTlsPriority = _VdslPortConfTlsPriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 1, 1, 6),
    _VdslPortConfTlsPriority_Type()
)
vdslPortConfTlsPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslPortConfTlsPriority.setStatus("current")


class _VdslPortConfDtEnable_Type(Integer32):
    """Custom type vdslPortConfDtEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_VdslPortConfDtEnable_Type.__name__ = "Integer32"
_VdslPortConfDtEnable_Object = MibTableColumn
vdslPortConfDtEnable = _VdslPortConfDtEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 1, 1, 7),
    _VdslPortConfDtEnable_Type()
)
vdslPortConfDtEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslPortConfDtEnable.setStatus("current")
_VdslPortConfDtSvid_Type = VlanIndex
_VdslPortConfDtSvid_Object = MibTableColumn
vdslPortConfDtSvid = _VdslPortConfDtSvid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 1, 1, 8),
    _VdslPortConfDtSvid_Type()
)
vdslPortConfDtSvid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslPortConfDtSvid.setStatus("current")
_VdslPortConfDtSpriority_Type = Integer32
_VdslPortConfDtSpriority_Object = MibTableColumn
vdslPortConfDtSpriority = _VdslPortConfDtSpriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 1, 1, 9),
    _VdslPortConfDtSpriority_Type()
)
vdslPortConfDtSpriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslPortConfDtSpriority.setStatus("current")
_VdslPortConfDtCvid_Type = VlanIndex
_VdslPortConfDtCvid_Object = MibTableColumn
vdslPortConfDtCvid = _VdslPortConfDtCvid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 1, 1, 10),
    _VdslPortConfDtCvid_Type()
)
vdslPortConfDtCvid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslPortConfDtCvid.setStatus("current")
_VdslPortConfDtCpriority_Type = Integer32
_VdslPortConfDtCpriority_Object = MibTableColumn
vdslPortConfDtCpriority = _VdslPortConfDtCpriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 1, 1, 11),
    _VdslPortConfDtCpriority_Type()
)
vdslPortConfDtCpriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslPortConfDtCpriority.setStatus("current")


class _VdslPortConfTlsPrioCopyEnable_Type(Integer32):
    """Custom type vdslPortConfTlsPrioCopyEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_VdslPortConfTlsPrioCopyEnable_Type.__name__ = "Integer32"
_VdslPortConfTlsPrioCopyEnable_Object = MibTableColumn
vdslPortConfTlsPrioCopyEnable = _VdslPortConfTlsPrioCopyEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 1, 1, 12),
    _VdslPortConfTlsPrioCopyEnable_Type()
)
vdslPortConfTlsPrioCopyEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslPortConfTlsPrioCopyEnable.setStatus("current")
_VdslPortVlanTable_Object = MibTable
vdslPortVlanTable = _VdslPortVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 2)
)
if mibBuilder.loadTexts:
    vdslPortVlanTable.setStatus("current")
_VdslPortVlanEntry_Object = MibTableRow
vdslPortVlanEntry = _VdslPortVlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 2, 1)
)
vdslPortVlanEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"),
)
if mibBuilder.loadTexts:
    vdslPortVlanEntry.setStatus("current")


class _VdslPortVlanReg_Type(Integer32):
    """Custom type vdslPortVlanReg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("egress", 1),
          ("forbidden", 2))
    )


_VdslPortVlanReg_Type.__name__ = "Integer32"
_VdslPortVlanReg_Object = MibTableColumn
vdslPortVlanReg = _VdslPortVlanReg_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 2, 1, 1),
    _VdslPortVlanReg_Type()
)
vdslPortVlanReg.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdslPortVlanReg.setStatus("current")


class _VdslPortVlanTag_Type(Integer32):
    """Custom type vdslPortVlanTag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("tag", 1),
          ("untag", 2))
    )


_VdslPortVlanTag_Type.__name__ = "Integer32"
_VdslPortVlanTag_Object = MibTableColumn
vdslPortVlanTag = _VdslPortVlanTag_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 2, 1, 2),
    _VdslPortVlanTag_Type()
)
vdslPortVlanTag.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdslPortVlanTag.setStatus("current")
_VdslPortVlanRowStatus_Type = RowStatus
_VdslPortVlanRowStatus_Object = MibTableColumn
vdslPortVlanRowStatus = _VdslPortVlanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 2, 1, 3),
    _VdslPortVlanRowStatus_Type()
)
vdslPortVlanRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdslPortVlanRowStatus.setStatus("current")
_VdslVlanStaticTable_Object = MibTable
vdslVlanStaticTable = _VdslVlanStaticTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 3)
)
if mibBuilder.loadTexts:
    vdslVlanStaticTable.setStatus("current")
_VdslVlanStaticEntry_Object = MibTableRow
vdslVlanStaticEntry = _VdslVlanStaticEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 3, 1)
)
vdslVlanStaticEntry.setIndexNames(
    (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"),
)
if mibBuilder.loadTexts:
    vdslVlanStaticEntry.setStatus("current")
_VdslVlanStaticEgressPorts_Type = PortList
_VdslVlanStaticEgressPorts_Object = MibTableColumn
vdslVlanStaticEgressPorts = _VdslVlanStaticEgressPorts_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 3, 1, 1),
    _VdslVlanStaticEgressPorts_Type()
)
vdslVlanStaticEgressPorts.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdslVlanStaticEgressPorts.setStatus("current")
_VdslVlanStaticUntaggedPorts_Type = PortList
_VdslVlanStaticUntaggedPorts_Object = MibTableColumn
vdslVlanStaticUntaggedPorts = _VdslVlanStaticUntaggedPorts_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 3, 1, 2),
    _VdslVlanStaticUntaggedPorts_Type()
)
vdslVlanStaticUntaggedPorts.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdslVlanStaticUntaggedPorts.setStatus("current")
_VdslVlanStaticRowStatus_Type = RowStatus
_VdslVlanStaticRowStatus_Object = MibTableColumn
vdslVlanStaticRowStatus = _VdslVlanStaticRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 3, 1, 3),
    _VdslVlanStaticRowStatus_Type()
)
vdslVlanStaticRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdslVlanStaticRowStatus.setStatus("current")
_VdslPortPvlanTable_Object = MibTable
vdslPortPvlanTable = _VdslPortPvlanTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 4)
)
if mibBuilder.loadTexts:
    vdslPortPvlanTable.setStatus("current")
_VdslPortPvlanEntry_Object = MibTableRow
vdslPortPvlanEntry = _VdslPortPvlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 4, 1)
)
vdslPortPvlanEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "vdslPortPvlanEtype"),
    (0, "ZYXEL-IES5000-MIB", "vdslPortPvlanVid"),
)
if mibBuilder.loadTexts:
    vdslPortPvlanEntry.setStatus("current")
_VdslPortPvlanEtype_Type = Unsigned32
_VdslPortPvlanEtype_Object = MibTableColumn
vdslPortPvlanEtype = _VdslPortPvlanEtype_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 4, 1, 1),
    _VdslPortPvlanEtype_Type()
)
vdslPortPvlanEtype.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslPortPvlanEtype.setStatus("current")
_VdslPortPvlanVid_Type = VlanIndex
_VdslPortPvlanVid_Object = MibTableColumn
vdslPortPvlanVid = _VdslPortPvlanVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 4, 1, 2),
    _VdslPortPvlanVid_Type()
)
vdslPortPvlanVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslPortPvlanVid.setStatus("current")


class _VdslPortPvlanPriority_Type(Integer32):
    """Custom type vdslPortPvlanPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_VdslPortPvlanPriority_Type.__name__ = "Integer32"
_VdslPortPvlanPriority_Object = MibTableColumn
vdslPortPvlanPriority = _VdslPortPvlanPriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 4, 1, 3),
    _VdslPortPvlanPriority_Type()
)
vdslPortPvlanPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdslPortPvlanPriority.setStatus("current")
_VdslPortPvlanRowStatus_Type = RowStatus
_VdslPortPvlanRowStatus_Object = MibTableColumn
vdslPortPvlanRowStatus = _VdslPortPvlanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 2, 4, 1, 4),
    _VdslPortPvlanRowStatus_Type()
)
vdslPortPvlanRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdslPortPvlanRowStatus.setStatus("current")
_VdslRfiCustomTable_Object = MibTable
vdslRfiCustomTable = _VdslRfiCustomTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 3)
)
if mibBuilder.loadTexts:
    vdslRfiCustomTable.setStatus("current")
_VdslRfiCustomEntry_Object = MibTableRow
vdslRfiCustomEntry = _VdslRfiCustomEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 3, 1)
)
vdslRfiCustomEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "vdslRfiCustomIndex"),
)
if mibBuilder.loadTexts:
    vdslRfiCustomEntry.setStatus("current")
_VdslRfiCustomIndex_Type = Integer32
_VdslRfiCustomIndex_Object = MibTableColumn
vdslRfiCustomIndex = _VdslRfiCustomIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 3, 1, 1),
    _VdslRfiCustomIndex_Type()
)
vdslRfiCustomIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslRfiCustomIndex.setStatus("current")
_VdslRfiCustomStartFreq_Type = Integer32
_VdslRfiCustomStartFreq_Object = MibTableColumn
vdslRfiCustomStartFreq = _VdslRfiCustomStartFreq_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 3, 1, 2),
    _VdslRfiCustomStartFreq_Type()
)
vdslRfiCustomStartFreq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslRfiCustomStartFreq.setStatus("current")
if mibBuilder.loadTexts:
    vdslRfiCustomStartFreq.setUnits("KHz")
_VdslRfiCustomEndFreq_Type = Integer32
_VdslRfiCustomEndFreq_Object = MibTableColumn
vdslRfiCustomEndFreq = _VdslRfiCustomEndFreq_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 3, 1, 3),
    _VdslRfiCustomEndFreq_Type()
)
vdslRfiCustomEndFreq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslRfiCustomEndFreq.setStatus("current")
if mibBuilder.loadTexts:
    vdslRfiCustomEndFreq.setUnits("KHz")


class _VdslRfiCustomEnable_Type(Integer32):
    """Custom type vdslRfiCustomEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_VdslRfiCustomEnable_Type.__name__ = "Integer32"
_VdslRfiCustomEnable_Object = MibTableColumn
vdslRfiCustomEnable = _VdslRfiCustomEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 3, 1, 4),
    _VdslRfiCustomEnable_Type()
)
vdslRfiCustomEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslRfiCustomEnable.setStatus("current")


class _VdslRfiCustomMode_Type(Integer32):
    """Custom type vdslRfiCustomMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notch", 1),
          ("gap", 2))
    )


_VdslRfiCustomMode_Type.__name__ = "Integer32"
_VdslRfiCustomMode_Object = MibTableColumn
vdslRfiCustomMode = _VdslRfiCustomMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 3, 1, 5),
    _VdslRfiCustomMode_Type()
)
vdslRfiCustomMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslRfiCustomMode.setStatus("current")
_VdslLineConfUpboParamTable_Object = MibTable
vdslLineConfUpboParamTable = _VdslLineConfUpboParamTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 4)
)
if mibBuilder.loadTexts:
    vdslLineConfUpboParamTable.setStatus("current")
_VdslLineConfUpboParamEntry_Object = MibTableRow
vdslLineConfUpboParamEntry = _VdslLineConfUpboParamEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 4, 1)
)
vdslLineConfUpboParamEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "vdslLineConfUpboParamBand"),
)
if mibBuilder.loadTexts:
    vdslLineConfUpboParamEntry.setStatus("current")
_VdslLineConfUpboParamBand_Type = Integer32
_VdslLineConfUpboParamBand_Object = MibTableColumn
vdslLineConfUpboParamBand = _VdslLineConfUpboParamBand_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 4, 1, 1),
    _VdslLineConfUpboParamBand_Type()
)
vdslLineConfUpboParamBand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineConfUpboParamBand.setStatus("current")


class _VdslLineConfUpboParamA_Type(Integer32):
    """Custom type vdslLineConfUpboParamA based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4000, 8095),
    )


_VdslLineConfUpboParamA_Type.__name__ = "Integer32"
_VdslLineConfUpboParamA_Object = MibTableColumn
vdslLineConfUpboParamA = _VdslLineConfUpboParamA_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 4, 1, 2),
    _VdslLineConfUpboParamA_Type()
)
vdslLineConfUpboParamA.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfUpboParamA.setStatus("current")
if mibBuilder.loadTexts:
    vdslLineConfUpboParamA.setUnits("0.01 dBm/Hz")


class _VdslLineConfUpboParamB_Type(Integer32):
    """Custom type vdslLineConfUpboParamB based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_VdslLineConfUpboParamB_Type.__name__ = "Integer32"
_VdslLineConfUpboParamB_Object = MibTableColumn
vdslLineConfUpboParamB = _VdslLineConfUpboParamB_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 4, 1, 3),
    _VdslLineConfUpboParamB_Type()
)
vdslLineConfUpboParamB.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfUpboParamB.setStatus("current")
if mibBuilder.loadTexts:
    vdslLineConfUpboParamB.setUnits("0.01 dBm/Hz")
_VdslLineConfDpboTable_Object = MibTable
vdslLineConfDpboTable = _VdslLineConfDpboTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 5)
)
if mibBuilder.loadTexts:
    vdslLineConfDpboTable.setStatus("current")
_VdslLineConfDpboEntry_Object = MibTableRow
vdslLineConfDpboEntry = _VdslLineConfDpboEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 5, 1)
)
vdslLineConfDpboEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "vdslLineConfDpboIndex"),
)
if mibBuilder.loadTexts:
    vdslLineConfDpboEntry.setStatus("current")
_VdslLineConfDpboIndex_Type = Integer32
_VdslLineConfDpboIndex_Object = MibTableColumn
vdslLineConfDpboIndex = _VdslLineConfDpboIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 5, 1, 1),
    _VdslLineConfDpboIndex_Type()
)
vdslLineConfDpboIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineConfDpboIndex.setStatus("current")


class _VdslLineConfDpboTone_Type(Integer32):
    """Custom type vdslLineConfDpboTone based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 512),
    )


_VdslLineConfDpboTone_Type.__name__ = "Integer32"
_VdslLineConfDpboTone_Object = MibTableColumn
vdslLineConfDpboTone = _VdslLineConfDpboTone_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 5, 1, 2),
    _VdslLineConfDpboTone_Type()
)
vdslLineConfDpboTone.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfDpboTone.setStatus("current")


class _VdslLineConfDpboPsd_Type(Integer32):
    """Custom type vdslLineConfDpboPsd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_VdslLineConfDpboPsd_Type.__name__ = "Integer32"
_VdslLineConfDpboPsd_Object = MibTableColumn
vdslLineConfDpboPsd = _VdslLineConfDpboPsd_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 10, 5, 1, 3),
    _VdslLineConfDpboPsd_Type()
)
vdslLineConfDpboPsd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdslLineConfDpboPsd.setStatus("current")
if mibBuilder.loadTexts:
    vdslLineConfDpboPsd.setUnits("-0.5dBm/Hz")
_Ipbpvc_ObjectIdentity = ObjectIdentity
ipbpvc = _Ipbpvc_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11)
)
_IpbpvcDomainTable_Object = MibTable
ipbpvcDomainTable = _IpbpvcDomainTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 1)
)
if mibBuilder.loadTexts:
    ipbpvcDomainTable.setStatus("current")
_IpbpvcDomainEntry_Object = MibTableRow
ipbpvcDomainEntry = _IpbpvcDomainEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 1, 1)
)
ipbpvcDomainEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "ipbpvcDomainName"),
)
if mibBuilder.loadTexts:
    ipbpvcDomainEntry.setStatus("current")


class _IpbpvcDomainName_Type(DisplayString):
    """Custom type ipbpvcDomainName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_IpbpvcDomainName_Type.__name__ = "DisplayString"
_IpbpvcDomainName_Object = MibTableColumn
ipbpvcDomainName = _IpbpvcDomainName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 1, 1, 1),
    _IpbpvcDomainName_Type()
)
ipbpvcDomainName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipbpvcDomainName.setStatus("current")
_IpbpvcDomainRowStatus_Type = RowStatus
_IpbpvcDomainRowStatus_Object = MibTableColumn
ipbpvcDomainRowStatus = _IpbpvcDomainRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 1, 1, 2),
    _IpbpvcDomainRowStatus_Type()
)
ipbpvcDomainRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipbpvcDomainRowStatus.setStatus("current")
_IpbpvcDomainVlanTable_Object = MibTable
ipbpvcDomainVlanTable = _IpbpvcDomainVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 2)
)
if mibBuilder.loadTexts:
    ipbpvcDomainVlanTable.setStatus("current")
_IpbpvcDomainVlanEntry_Object = MibTableRow
ipbpvcDomainVlanEntry = _IpbpvcDomainVlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 2, 1)
)
ipbpvcDomainVlanEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "ipbpvcDomainName"),
    (0, "ZYXEL-IES5000-MIB", "ipbpvcDomainVlanId"),
)
if mibBuilder.loadTexts:
    ipbpvcDomainVlanEntry.setStatus("current")
_IpbpvcDomainVlanId_Type = VlanIndex
_IpbpvcDomainVlanId_Object = MibTableColumn
ipbpvcDomainVlanId = _IpbpvcDomainVlanId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 2, 1, 1),
    _IpbpvcDomainVlanId_Type()
)
ipbpvcDomainVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipbpvcDomainVlanId.setStatus("current")


class _IpbpvcDomainDhcpVlanEnable_Type(Integer32):
    """Custom type ipbpvcDomainDhcpVlanEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_IpbpvcDomainDhcpVlanEnable_Type.__name__ = "Integer32"
_IpbpvcDomainDhcpVlanEnable_Object = MibTableColumn
ipbpvcDomainDhcpVlanEnable = _IpbpvcDomainDhcpVlanEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 2, 1, 2),
    _IpbpvcDomainDhcpVlanEnable_Type()
)
ipbpvcDomainDhcpVlanEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipbpvcDomainDhcpVlanEnable.setStatus("current")
_IpbpvcDomainVlanRowStatus_Type = RowStatus
_IpbpvcDomainVlanRowStatus_Object = MibTableColumn
ipbpvcDomainVlanRowStatus = _IpbpvcDomainVlanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 2, 1, 3),
    _IpbpvcDomainVlanRowStatus_Type()
)
ipbpvcDomainVlanRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipbpvcDomainVlanRowStatus.setStatus("current")
_IpbpvcEdgeRouterTable_Object = MibTable
ipbpvcEdgeRouterTable = _IpbpvcEdgeRouterTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 3)
)
if mibBuilder.loadTexts:
    ipbpvcEdgeRouterTable.setStatus("current")
_IpbpvcEdgeRouterEntry_Object = MibTableRow
ipbpvcEdgeRouterEntry = _IpbpvcEdgeRouterEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 3, 1)
)
ipbpvcEdgeRouterEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "ipbpvcDomainName"),
    (0, "ZYXEL-IES5000-MIB", "ipbpvcEdgeRouterIp"),
    (0, "ZYXEL-IES5000-MIB", "ipbpvcEdgeRouterMask"),
    (0, "ZYXEL-IES5000-MIB", "ipbpvcEdgeRouterVid"),
)
if mibBuilder.loadTexts:
    ipbpvcEdgeRouterEntry.setStatus("current")
_IpbpvcEdgeRouterIp_Type = IpAddress
_IpbpvcEdgeRouterIp_Object = MibTableColumn
ipbpvcEdgeRouterIp = _IpbpvcEdgeRouterIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 3, 1, 1),
    _IpbpvcEdgeRouterIp_Type()
)
ipbpvcEdgeRouterIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipbpvcEdgeRouterIp.setStatus("current")
_IpbpvcEdgeRouterVid_Type = VlanIndex
_IpbpvcEdgeRouterVid_Object = MibTableColumn
ipbpvcEdgeRouterVid = _IpbpvcEdgeRouterVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 3, 1, 2),
    _IpbpvcEdgeRouterVid_Type()
)
ipbpvcEdgeRouterVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipbpvcEdgeRouterVid.setStatus("current")
_IpbpvcEdgeRouterMask_Type = Integer32
_IpbpvcEdgeRouterMask_Object = MibTableColumn
ipbpvcEdgeRouterMask = _IpbpvcEdgeRouterMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 3, 1, 3),
    _IpbpvcEdgeRouterMask_Type()
)
ipbpvcEdgeRouterMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipbpvcEdgeRouterMask.setStatus("current")
_IpbpvcEdgeRouterRowStatus_Type = RowStatus
_IpbpvcEdgeRouterRowStatus_Object = MibTableColumn
ipbpvcEdgeRouterRowStatus = _IpbpvcEdgeRouterRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 3, 1, 4),
    _IpbpvcEdgeRouterRowStatus_Type()
)
ipbpvcEdgeRouterRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipbpvcEdgeRouterRowStatus.setStatus("current")
_IpbpvcInterfaceTable_Object = MibTable
ipbpvcInterfaceTable = _IpbpvcInterfaceTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 4)
)
if mibBuilder.loadTexts:
    ipbpvcInterfaceTable.setStatus("current")
_IpbpvcInterfaceEntry_Object = MibTableRow
ipbpvcInterfaceEntry = _IpbpvcInterfaceEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 4, 1)
)
ipbpvcInterfaceEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "ipbpvcDomainName"),
    (0, "ZYXEL-IES5000-MIB", "ipbpvcInterfaceIp"),
    (0, "ZYXEL-IES5000-MIB", "ipbpvcInterfaceMask"),
    (0, "ZYXEL-IES5000-MIB", "ipbpvcInterfaceVid"),
)
if mibBuilder.loadTexts:
    ipbpvcInterfaceEntry.setStatus("current")
_IpbpvcInterfaceIp_Type = IpAddress
_IpbpvcInterfaceIp_Object = MibTableColumn
ipbpvcInterfaceIp = _IpbpvcInterfaceIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 4, 1, 1),
    _IpbpvcInterfaceIp_Type()
)
ipbpvcInterfaceIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipbpvcInterfaceIp.setStatus("current")
_IpbpvcInterfaceMask_Type = Integer32
_IpbpvcInterfaceMask_Object = MibTableColumn
ipbpvcInterfaceMask = _IpbpvcInterfaceMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 4, 1, 2),
    _IpbpvcInterfaceMask_Type()
)
ipbpvcInterfaceMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipbpvcInterfaceMask.setStatus("current")
_IpbpvcInterfaceVid_Type = VlanIndex
_IpbpvcInterfaceVid_Object = MibTableColumn
ipbpvcInterfaceVid = _IpbpvcInterfaceVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 4, 1, 3),
    _IpbpvcInterfaceVid_Type()
)
ipbpvcInterfaceVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipbpvcInterfaceVid.setStatus("current")
_IpbpvcInterfaceIfIndex_Type = Integer32
_IpbpvcInterfaceIfIndex_Object = MibTableColumn
ipbpvcInterfaceIfIndex = _IpbpvcInterfaceIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 4, 1, 4),
    _IpbpvcInterfaceIfIndex_Type()
)
ipbpvcInterfaceIfIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipbpvcInterfaceIfIndex.setStatus("current")
_IpbpvcInterfaceVpi_Type = Integer32
_IpbpvcInterfaceVpi_Object = MibTableColumn
ipbpvcInterfaceVpi = _IpbpvcInterfaceVpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 4, 1, 5),
    _IpbpvcInterfaceVpi_Type()
)
ipbpvcInterfaceVpi.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipbpvcInterfaceVpi.setStatus("current")
_IpbpvcInterfaceVci_Type = Integer32
_IpbpvcInterfaceVci_Object = MibTableColumn
ipbpvcInterfaceVci = _IpbpvcInterfaceVci_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 4, 1, 6),
    _IpbpvcInterfaceVci_Type()
)
ipbpvcInterfaceVci.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipbpvcInterfaceVci.setStatus("current")
_IpbpvcInterfaceRowStatus_Type = RowStatus
_IpbpvcInterfaceRowStatus_Object = MibTableColumn
ipbpvcInterfaceRowStatus = _IpbpvcInterfaceRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 4, 1, 7),
    _IpbpvcInterfaceRowStatus_Type()
)
ipbpvcInterfaceRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipbpvcInterfaceRowStatus.setStatus("current")
_IpbpvcRouteTable_Object = MibTable
ipbpvcRouteTable = _IpbpvcRouteTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 5)
)
if mibBuilder.loadTexts:
    ipbpvcRouteTable.setStatus("current")
_IpbpvcRouteEntry_Object = MibTableRow
ipbpvcRouteEntry = _IpbpvcRouteEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 5, 1)
)
ipbpvcRouteEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "ipbpvcDomainName"),
    (0, "ZYXEL-IES5000-MIB", "ipbpvcRouteIp"),
    (0, "ZYXEL-IES5000-MIB", "ipbpvcRouteMask"),
    (0, "ZYXEL-IES5000-MIB", "ipbpvcRouteNextHop"),
)
if mibBuilder.loadTexts:
    ipbpvcRouteEntry.setStatus("current")
_IpbpvcRouteIp_Type = IpAddress
_IpbpvcRouteIp_Object = MibTableColumn
ipbpvcRouteIp = _IpbpvcRouteIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 5, 1, 1),
    _IpbpvcRouteIp_Type()
)
ipbpvcRouteIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipbpvcRouteIp.setStatus("current")
_IpbpvcRouteMask_Type = Integer32
_IpbpvcRouteMask_Object = MibTableColumn
ipbpvcRouteMask = _IpbpvcRouteMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 5, 1, 2),
    _IpbpvcRouteMask_Type()
)
ipbpvcRouteMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipbpvcRouteMask.setStatus("current")
_IpbpvcRouteNextHop_Type = IpAddress
_IpbpvcRouteNextHop_Object = MibTableColumn
ipbpvcRouteNextHop = _IpbpvcRouteNextHop_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 5, 1, 3),
    _IpbpvcRouteNextHop_Type()
)
ipbpvcRouteNextHop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipbpvcRouteNextHop.setStatus("current")


class _IpbpvcRouteMetric_Type(Integer32):
    """Custom type ipbpvcRouteMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_IpbpvcRouteMetric_Type.__name__ = "Integer32"
_IpbpvcRouteMetric_Object = MibTableColumn
ipbpvcRouteMetric = _IpbpvcRouteMetric_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 5, 1, 4),
    _IpbpvcRouteMetric_Type()
)
ipbpvcRouteMetric.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipbpvcRouteMetric.setStatus("current")
_IpbpvcRoutePriority_Type = Integer32
_IpbpvcRoutePriority_Object = MibTableColumn
ipbpvcRoutePriority = _IpbpvcRoutePriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 5, 1, 5),
    _IpbpvcRoutePriority_Type()
)
ipbpvcRoutePriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipbpvcRoutePriority.setStatus("current")
_IpbpvcRouteRowStatus_Type = RowStatus
_IpbpvcRouteRowStatus_Object = MibTableColumn
ipbpvcRouteRowStatus = _IpbpvcRouteRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 5, 1, 6),
    _IpbpvcRouteRowStatus_Type()
)
ipbpvcRouteRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipbpvcRouteRowStatus.setStatus("current")
_IpbpvcTable_Object = MibTable
ipbpvcTable = _IpbpvcTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 6)
)
if mibBuilder.loadTexts:
    ipbpvcTable.setStatus("current")
_IpbpvcEntry_Object = MibTableRow
ipbpvcEntry = _IpbpvcEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 6, 1)
)
ipbpvcEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "ipbpvcVpi"),
    (0, "ZYXEL-IES5000-MIB", "ipbpvcVci"),
    (0, "ZYXEL-IES5000-MIB", "ipbpvcPvid"),
)
if mibBuilder.loadTexts:
    ipbpvcEntry.setStatus("current")
_IpbpvcVpi_Type = Integer32
_IpbpvcVpi_Object = MibTableColumn
ipbpvcVpi = _IpbpvcVpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 6, 1, 1),
    _IpbpvcVpi_Type()
)
ipbpvcVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipbpvcVpi.setStatus("current")
_IpbpvcVci_Type = Integer32
_IpbpvcVci_Object = MibTableColumn
ipbpvcVci = _IpbpvcVci_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 6, 1, 2),
    _IpbpvcVci_Type()
)
ipbpvcVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipbpvcVci.setStatus("current")
_IpbpvcPvid_Type = Integer32
_IpbpvcPvid_Object = MibTableColumn
ipbpvcPvid = _IpbpvcPvid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 6, 1, 3),
    _IpbpvcPvid_Type()
)
ipbpvcPvid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipbpvcPvid.setStatus("current")


class _IpbpvcEncap_Type(Integer32):
    """Custom type ipbpvcEncap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("llc", 1),
          ("vc", 2),
          ("llc-r", 3),
          ("vc-r", 4))
    )


_IpbpvcEncap_Type.__name__ = "Integer32"
_IpbpvcEncap_Object = MibTableColumn
ipbpvcEncap = _IpbpvcEncap_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 6, 1, 4),
    _IpbpvcEncap_Type()
)
ipbpvcEncap.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipbpvcEncap.setStatus("current")


class _IpbpvcPriority_Type(Integer32):
    """Custom type ipbpvcPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_IpbpvcPriority_Type.__name__ = "Integer32"
_IpbpvcPriority_Object = MibTableColumn
ipbpvcPriority = _IpbpvcPriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 6, 1, 5),
    _IpbpvcPriority_Type()
)
ipbpvcPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipbpvcPriority.setStatus("current")


class _IpbpvcProfile_Type(DisplayString):
    """Custom type ipbpvcProfile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_IpbpvcProfile_Type.__name__ = "DisplayString"
_IpbpvcProfile_Object = MibTableColumn
ipbpvcProfile = _IpbpvcProfile_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 6, 1, 6),
    _IpbpvcProfile_Type()
)
ipbpvcProfile.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipbpvcProfile.setStatus("current")
_IpbpvcRowStatus_Type = RowStatus
_IpbpvcRowStatus_Object = MibTableColumn
ipbpvcRowStatus = _IpbpvcRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 6, 1, 7),
    _IpbpvcRowStatus_Type()
)
ipbpvcRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipbpvcRowStatus.setStatus("current")
_IpbpvcVlanTable_Object = MibTable
ipbpvcVlanTable = _IpbpvcVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 7)
)
if mibBuilder.loadTexts:
    ipbpvcVlanTable.setStatus("current")
_IpbpvcVlanEntry_Object = MibTableRow
ipbpvcVlanEntry = _IpbpvcVlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 7, 1)
)
ipbpvcVlanEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "ipbpvcVpi"),
    (0, "ZYXEL-IES5000-MIB", "ipbpvcVci"),
    (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"),
)
if mibBuilder.loadTexts:
    ipbpvcVlanEntry.setStatus("current")


class _IpbpvcVlanReg_Type(Integer32):
    """Custom type ipbpvcVlanReg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("egress", 1),
          ("forbidden", 2))
    )


_IpbpvcVlanReg_Type.__name__ = "Integer32"
_IpbpvcVlanReg_Object = MibTableColumn
ipbpvcVlanReg = _IpbpvcVlanReg_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 7, 1, 1),
    _IpbpvcVlanReg_Type()
)
ipbpvcVlanReg.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipbpvcVlanReg.setStatus("current")


class _IpbpvcVlanTag_Type(Integer32):
    """Custom type ipbpvcVlanTag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("tag", 1),
          ("untag", 2))
    )


_IpbpvcVlanTag_Type.__name__ = "Integer32"
_IpbpvcVlanTag_Object = MibTableColumn
ipbpvcVlanTag = _IpbpvcVlanTag_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 7, 1, 2),
    _IpbpvcVlanTag_Type()
)
ipbpvcVlanTag.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipbpvcVlanTag.setStatus("current")
_IpbpvcVlanRowStatus_Type = RowStatus
_IpbpvcVlanRowStatus_Object = MibTableColumn
ipbpvcVlanRowStatus = _IpbpvcVlanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 7, 1, 3),
    _IpbpvcVlanRowStatus_Type()
)
ipbpvcVlanRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipbpvcVlanRowStatus.setStatus("current")
_Arpproxy_ObjectIdentity = ObjectIdentity
arpproxy = _Arpproxy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 8)
)


class _ArpproxyAge_Type(Integer32):
    """Custom type arpproxyAge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 10000),
    )


_ArpproxyAge_Type.__name__ = "Integer32"
_ArpproxyAge_Object = MibScalar
arpproxyAge = _ArpproxyAge_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 8, 1),
    _ArpproxyAge_Type()
)
arpproxyAge.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    arpproxyAge.setStatus("current")
if mibBuilder.loadTexts:
    arpproxyAge.setUnits("second")
_ArpproxyFlush_ObjectIdentity = ObjectIdentity
arpproxyFlush = _ArpproxyFlush_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 8, 2)
)


class _ArpproxyFlushTarget_Type(Integer32):
    """Custom type arpproxyFlushTarget based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("all", 1),
          ("edgerouter", 2),
          ("interface", 3))
    )


_ArpproxyFlushTarget_Type.__name__ = "Integer32"
_ArpproxyFlushTarget_Object = MibScalar
arpproxyFlushTarget = _ArpproxyFlushTarget_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 8, 2, 1),
    _ArpproxyFlushTarget_Type()
)
arpproxyFlushTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    arpproxyFlushTarget.setStatus("current")
_ArpproxyFlushOps_Type = Integer32
_ArpproxyFlushOps_Object = MibScalar
arpproxyFlushOps = _ArpproxyFlushOps_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 8, 2, 2),
    _ArpproxyFlushOps_Type()
)
arpproxyFlushOps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    arpproxyFlushOps.setStatus("current")
_ArpproxyFlushEdgeRouterIp_Type = IpAddress
_ArpproxyFlushEdgeRouterIp_Object = MibScalar
arpproxyFlushEdgeRouterIp = _ArpproxyFlushEdgeRouterIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 8, 2, 3),
    _ArpproxyFlushEdgeRouterIp_Type()
)
arpproxyFlushEdgeRouterIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    arpproxyFlushEdgeRouterIp.setStatus("current")
_ArpproxyFlushEdgeRouterVid_Type = VlanIndex
_ArpproxyFlushEdgeRouterVid_Object = MibScalar
arpproxyFlushEdgeRouterVid = _ArpproxyFlushEdgeRouterVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 8, 2, 4),
    _ArpproxyFlushEdgeRouterVid_Type()
)
arpproxyFlushEdgeRouterVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    arpproxyFlushEdgeRouterVid.setStatus("current")
_ArpproxyFlushInterfaceIp_Type = IpAddress
_ArpproxyFlushInterfaceIp_Object = MibScalar
arpproxyFlushInterfaceIp = _ArpproxyFlushInterfaceIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 8, 2, 5),
    _ArpproxyFlushInterfaceIp_Type()
)
arpproxyFlushInterfaceIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    arpproxyFlushInterfaceIp.setStatus("current")
_ArpproxyFlushInterfaceMask_Type = Integer32
_ArpproxyFlushInterfaceMask_Object = MibScalar
arpproxyFlushInterfaceMask = _ArpproxyFlushInterfaceMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 8, 2, 6),
    _ArpproxyFlushInterfaceMask_Type()
)
arpproxyFlushInterfaceMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    arpproxyFlushInterfaceMask.setStatus("current")
_ArpproxyFlushInterfaceVid_Type = VlanIndex
_ArpproxyFlushInterfaceVid_Object = MibScalar
arpproxyFlushInterfaceVid = _ArpproxyFlushInterfaceVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 11, 8, 2, 7),
    _ArpproxyFlushInterfaceVid_Type()
)
arpproxyFlushInterfaceVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    arpproxyFlushInterfaceVid.setStatus("current")
_VoipPort_ObjectIdentity = ObjectIdentity
voipPort = _VoipPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12)
)
_VoipSipLineConfTable_Object = MibTable
voipSipLineConfTable = _VoipSipLineConfTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 1)
)
if mibBuilder.loadTexts:
    voipSipLineConfTable.setStatus("current")
_VoipSipLineConfEntry_Object = MibTableRow
voipSipLineConfEntry = _VoipSipLineConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 1, 1)
)
voipSipLineConfEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipIfIndex"),
)
if mibBuilder.loadTexts:
    voipSipLineConfEntry.setStatus("current")


class _VoipSipLineConfSipProfile_Type(DisplayString):
    """Custom type voipSipLineConfSipProfile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipSipLineConfSipProfile_Type.__name__ = "DisplayString"
_VoipSipLineConfSipProfile_Object = MibTableColumn
voipSipLineConfSipProfile = _VoipSipLineConfSipProfile_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 1, 1, 1),
    _VoipSipLineConfSipProfile_Type()
)
voipSipLineConfSipProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipSipLineConfSipProfile.setStatus("current")


class _VoipSipLineConfSipCallSvcProfile_Type(DisplayString):
    """Custom type voipSipLineConfSipCallSvcProfile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipSipLineConfSipCallSvcProfile_Type.__name__ = "DisplayString"
_VoipSipLineConfSipCallSvcProfile_Object = MibTableColumn
voipSipLineConfSipCallSvcProfile = _VoipSipLineConfSipCallSvcProfile_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 1, 1, 2),
    _VoipSipLineConfSipCallSvcProfile_Type()
)
voipSipLineConfSipCallSvcProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipSipLineConfSipCallSvcProfile.setStatus("current")


class _VoipSipLineConfDspProfile_Type(DisplayString):
    """Custom type voipSipLineConfDspProfile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipSipLineConfDspProfile_Type.__name__ = "DisplayString"
_VoipSipLineConfDspProfile_Object = MibTableColumn
voipSipLineConfDspProfile = _VoipSipLineConfDspProfile_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 1, 1, 3),
    _VoipSipLineConfDspProfile_Type()
)
voipSipLineConfDspProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipSipLineConfDspProfile.setStatus("current")


class _VoipSipLineConfAccount_Type(DisplayString):
    """Custom type voipSipLineConfAccount based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipSipLineConfAccount_Type.__name__ = "DisplayString"
_VoipSipLineConfAccount_Object = MibTableColumn
voipSipLineConfAccount = _VoipSipLineConfAccount_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 1, 1, 4),
    _VoipSipLineConfAccount_Type()
)
voipSipLineConfAccount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipSipLineConfAccount.setStatus("current")


class _VoipSipLineConfPassword_Type(DisplayString):
    """Custom type voipSipLineConfPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipSipLineConfPassword_Type.__name__ = "DisplayString"
_VoipSipLineConfPassword_Object = MibTableColumn
voipSipLineConfPassword = _VoipSipLineConfPassword_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 1, 1, 5),
    _VoipSipLineConfPassword_Type()
)
voipSipLineConfPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipSipLineConfPassword.setStatus("current")


class _VoipSipLineConfDataProfile_Type(DisplayString):
    """Custom type voipSipLineConfDataProfile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipSipLineConfDataProfile_Type.__name__ = "DisplayString"
_VoipSipLineConfDataProfile_Object = MibTableColumn
voipSipLineConfDataProfile = _VoipSipLineConfDataProfile_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 1, 1, 6),
    _VoipSipLineConfDataProfile_Type()
)
voipSipLineConfDataProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipSipLineConfDataProfile.setStatus("current")
_VoipPortH248_ObjectIdentity = ObjectIdentity
voipPortH248 = _VoipPortH248_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 2)
)
_VoipH248LineConfTable_Object = MibTable
voipH248LineConfTable = _VoipH248LineConfTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 2, 1)
)
if mibBuilder.loadTexts:
    voipH248LineConfTable.setStatus("current")
_VoipH248LineConfEntry_Object = MibTableRow
voipH248LineConfEntry = _VoipH248LineConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 2, 1, 1)
)
voipH248LineConfEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipIfIndex"),
)
if mibBuilder.loadTexts:
    voipH248LineConfEntry.setStatus("current")


class _VoipH248LineConfMgName_Type(DisplayString):
    """Custom type voipH248LineConfMgName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipH248LineConfMgName_Type.__name__ = "DisplayString"
_VoipH248LineConfMgName_Object = MibTableColumn
voipH248LineConfMgName = _VoipH248LineConfMgName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 2, 1, 1, 1),
    _VoipH248LineConfMgName_Type()
)
voipH248LineConfMgName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipH248LineConfMgName.setStatus("current")


class _VoipH248LineConfDspProfile_Type(DisplayString):
    """Custom type voipH248LineConfDspProfile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipH248LineConfDspProfile_Type.__name__ = "DisplayString"
_VoipH248LineConfDspProfile_Object = MibTableColumn
voipH248LineConfDspProfile = _VoipH248LineConfDspProfile_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 2, 1, 1, 2),
    _VoipH248LineConfDspProfile_Type()
)
voipH248LineConfDspProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipH248LineConfDspProfile.setStatus("current")


class _VoipH248LineConfDataProfile_Type(DisplayString):
    """Custom type voipH248LineConfDataProfile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipH248LineConfDataProfile_Type.__name__ = "DisplayString"
_VoipH248LineConfDataProfile_Object = MibTableColumn
voipH248LineConfDataProfile = _VoipH248LineConfDataProfile_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 2, 1, 1, 3),
    _VoipH248LineConfDataProfile_Type()
)
voipH248LineConfDataProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipH248LineConfDataProfile.setStatus("current")
_VoipH248TerminationTable_Object = MibTable
voipH248TerminationTable = _VoipH248TerminationTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 2, 2)
)
if mibBuilder.loadTexts:
    voipH248TerminationTable.setStatus("current")
_VoipH248TerminationEntry_Object = MibTableRow
voipH248TerminationEntry = _VoipH248TerminationEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 2, 2, 1)
)
voipH248TerminationEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipIfIndex"),
)
if mibBuilder.loadTexts:
    voipH248TerminationEntry.setStatus("current")


class _VoipH248TerminationName_Type(DisplayString):
    """Custom type voipH248TerminationName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipH248TerminationName_Type.__name__ = "DisplayString"
_VoipH248TerminationName_Object = MibTableColumn
voipH248TerminationName = _VoipH248TerminationName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 2, 2, 1, 1),
    _VoipH248TerminationName_Type()
)
voipH248TerminationName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipH248TerminationName.setStatus("current")
_VoipPotsImpedanceConfTable_Object = MibTable
voipPotsImpedanceConfTable = _VoipPotsImpedanceConfTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 3)
)
if mibBuilder.loadTexts:
    voipPotsImpedanceConfTable.setStatus("current")
_VoipPotsImpedanceConfEntry_Object = MibTableRow
voipPotsImpedanceConfEntry = _VoipPotsImpedanceConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 3, 1)
)
voipPotsImpedanceConfEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipIfIndex"),
)
if mibBuilder.loadTexts:
    voipPotsImpedanceConfEntry.setStatus("current")


class _VoipPotsImpedance_Type(Integer32):
    """Custom type voipPotsImpedance based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              255)
        )
    )
    namedValues = NamedValues(
        *(("impedance-600ohm", 0),
          ("impedance-600ohm-1000nf", 1),
          ("impedance-220ohm-820ohm-120nf", 2),
          ("impedance-270ohm-750ohm-150nf", 3),
          ("impedance-300ohm-1000ohm-220nf", 4),
          ("impedance-370ohm-620ohm-310nf", 5),
          ("impedance-220ohm-680ohm-100nf", 6),
          ("impedance-220ohm-820ohm-115nf", 7),
          ("impedance-900ohm", 8),
          ("impedance-200ohm-680ohm-100nf", 9),
          ("impedance-900ohm-2160nf", 10),
          ("default", 255))
    )


_VoipPotsImpedance_Type.__name__ = "Integer32"
_VoipPotsImpedance_Object = MibTableColumn
voipPotsImpedance = _VoipPotsImpedance_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 3, 1, 1),
    _VoipPotsImpedance_Type()
)
voipPotsImpedance.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipPotsImpedance.setStatus("current")
_VoipPotsGainConfTable_Object = MibTable
voipPotsGainConfTable = _VoipPotsGainConfTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 4)
)
if mibBuilder.loadTexts:
    voipPotsGainConfTable.setStatus("current")
_VoipPotsGainConfEntry_Object = MibTableRow
voipPotsGainConfEntry = _VoipPotsGainConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 4, 1)
)
voipPotsGainConfEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipIfIndex"),
)
if mibBuilder.loadTexts:
    voipPotsGainConfEntry.setStatus("current")


class _VoipPotsTxGain_Type(Integer32):
    """Custom type voipPotsTxGain based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-200, 200),
    )


_VoipPotsTxGain_Type.__name__ = "Integer32"
_VoipPotsTxGain_Object = MibTableColumn
voipPotsTxGain = _VoipPotsTxGain_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 4, 1, 1),
    _VoipPotsTxGain_Type()
)
voipPotsTxGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipPotsTxGain.setStatus("current")
if mibBuilder.loadTexts:
    voipPotsTxGain.setUnits("0.1dB")


class _VoipPotsRxGain_Type(Integer32):
    """Custom type voipPotsRxGain based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-200, 200),
    )


_VoipPotsRxGain_Type.__name__ = "Integer32"
_VoipPotsRxGain_Object = MibTableColumn
voipPotsRxGain = _VoipPotsRxGain_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 4, 1, 2),
    _VoipPotsRxGain_Type()
)
voipPotsRxGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipPotsRxGain.setStatus("current")
if mibBuilder.loadTexts:
    voipPotsRxGain.setUnits("0.1dB")


class _VoipPotsDataTxGain_Type(Integer32):
    """Custom type voipPotsDataTxGain based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-200, 200),
    )


_VoipPotsDataTxGain_Type.__name__ = "Integer32"
_VoipPotsDataTxGain_Object = MibTableColumn
voipPotsDataTxGain = _VoipPotsDataTxGain_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 4, 1, 3),
    _VoipPotsDataTxGain_Type()
)
voipPotsDataTxGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipPotsDataTxGain.setStatus("current")
if mibBuilder.loadTexts:
    voipPotsDataTxGain.setUnits("0.1dB")


class _VoipPotsDataRxGain_Type(Integer32):
    """Custom type voipPotsDataRxGain based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-200, 200),
    )


_VoipPotsDataRxGain_Type.__name__ = "Integer32"
_VoipPotsDataRxGain_Object = MibTableColumn
voipPotsDataRxGain = _VoipPotsDataRxGain_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 4, 1, 4),
    _VoipPotsDataRxGain_Type()
)
voipPotsDataRxGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipPotsDataRxGain.setStatus("current")
if mibBuilder.loadTexts:
    voipPotsDataRxGain.setUnits("0.1dB")
_VoipOpmodeConfTable_Object = MibTable
voipOpmodeConfTable = _VoipOpmodeConfTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 5)
)
if mibBuilder.loadTexts:
    voipOpmodeConfTable.setStatus("current")
_VoipOpmodeConfEntry_Object = MibTableRow
voipOpmodeConfEntry = _VoipOpmodeConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 5, 1)
)
voipOpmodeConfEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipIfIndex"),
)
if mibBuilder.loadTexts:
    voipOpmodeConfEntry.setStatus("current")


class _VoipOpMode_Type(Integer32):
    """Custom type voipOpMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("v5sip", 1))
    )


_VoipOpMode_Type.__name__ = "Integer32"
_VoipOpMode_Object = MibTableColumn
voipOpMode = _VoipOpMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 5, 1, 1),
    _VoipOpMode_Type()
)
voipOpMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipOpMode.setStatus("current")
_VoipPolarityReverseConfTable_Object = MibTable
voipPolarityReverseConfTable = _VoipPolarityReverseConfTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 6)
)
if mibBuilder.loadTexts:
    voipPolarityReverseConfTable.setStatus("current")
_VoipPolarityReverseConfEntry_Object = MibTableRow
voipPolarityReverseConfEntry = _VoipPolarityReverseConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 6, 1)
)
voipPolarityReverseConfEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipIfIndex"),
)
if mibBuilder.loadTexts:
    voipPolarityReverseConfEntry.setStatus("current")


class _VoipPolarityReverse_Type(Integer32):
    """Custom type voipPolarityReverse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_VoipPolarityReverse_Type.__name__ = "Integer32"
_VoipPolarityReverse_Object = MibTableColumn
voipPolarityReverse = _VoipPolarityReverse_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 6, 1, 1),
    _VoipPolarityReverse_Type()
)
voipPolarityReverse.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipPolarityReverse.setStatus("current")
_VoipPotsCidConfTable_Object = MibTable
voipPotsCidConfTable = _VoipPotsCidConfTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 7)
)
if mibBuilder.loadTexts:
    voipPotsCidConfTable.setStatus("current")
_VoipPotsCidConfEntry_Object = MibTableRow
voipPotsCidConfEntry = _VoipPotsCidConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 7, 1)
)
voipPotsCidConfEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipIfIndex"),
)
if mibBuilder.loadTexts:
    voipPotsCidConfEntry.setStatus("current")


class _VoipPotsCidASType_Type(Integer32):
    """Custom type voipPotsCidASType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("defval", 0),
          ("cid-during-ring", 1),
          ("dtas-cid-before-ring", 2),
          ("rpas-cid-before-ring", 3),
          ("lr-dtas-cid-before-ring", 4),
          ("lr-cid-before-ring", 5))
    )


_VoipPotsCidASType_Type.__name__ = "Integer32"
_VoipPotsCidASType_Object = MibTableColumn
voipPotsCidASType = _VoipPotsCidASType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 7, 1, 1),
    _VoipPotsCidASType_Type()
)
voipPotsCidASType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipPotsCidASType.setStatus("current")


class _VoipPotsCidPayloadType_Type(Integer32):
    """Custom type voipPotsCidPayloadType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("defval", 0),
          ("mdmf", 1),
          ("sdmf", 2),
          ("etsi-mdmf", 3),
          ("etsi-sdmf", 4),
          ("dtmf", 5),
          ("uk-mdmf", 6),
          ("uk-sdmf", 7),
          ("japanese-mdmf", 8))
    )


_VoipPotsCidPayloadType_Type.__name__ = "Integer32"
_VoipPotsCidPayloadType_Object = MibTableColumn
voipPotsCidPayloadType = _VoipPotsCidPayloadType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 7, 1, 2),
    _VoipPotsCidPayloadType_Type()
)
voipPotsCidPayloadType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipPotsCidPayloadType.setStatus("current")
_VoipPotsLineConfTable_Object = MibTable
voipPotsLineConfTable = _VoipPotsLineConfTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 8)
)
if mibBuilder.loadTexts:
    voipPotsLineConfTable.setStatus("current")
_VoipPotsLineConfEntry_Object = MibTableRow
voipPotsLineConfEntry = _VoipPotsLineConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 8, 1)
)
voipPotsLineConfEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipIfIndex"),
)
if mibBuilder.loadTexts:
    voipPotsLineConfEntry.setStatus("current")
_VoipPotsLineFlashDefault_Type = Integer32
_VoipPotsLineFlashDefault_Object = MibTableColumn
voipPotsLineFlashDefault = _VoipPotsLineFlashDefault_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 8, 1, 1),
    _VoipPotsLineFlashDefault_Type()
)
voipPotsLineFlashDefault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipPotsLineFlashDefault.setStatus("current")


class _VoipPotsLineFlashMax_Type(Integer32):
    """Custom type voipPotsLineFlashMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(20, 1500),
    )


_VoipPotsLineFlashMax_Type.__name__ = "Integer32"
_VoipPotsLineFlashMax_Object = MibTableColumn
voipPotsLineFlashMax = _VoipPotsLineFlashMax_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 8, 1, 2),
    _VoipPotsLineFlashMax_Type()
)
voipPotsLineFlashMax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipPotsLineFlashMax.setStatus("current")
_VoipPotsLineFlashMin_Type = Integer32
_VoipPotsLineFlashMin_Object = MibTableColumn
voipPotsLineFlashMin = _VoipPotsLineFlashMin_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 8, 1, 3),
    _VoipPotsLineFlashMin_Type()
)
voipPotsLineFlashMin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipPotsLineFlashMin.setStatus("current")


class _VoipPotsLineLoop_Type(Integer32):
    """Custom type voipPotsLineLoop based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("ohm-2600", 0),
          ("ohm-3200", 1))
    )


_VoipPotsLineLoop_Type.__name__ = "Integer32"
_VoipPotsLineLoop_Object = MibTableColumn
voipPotsLineLoop = _VoipPotsLineLoop_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 12, 8, 1, 4),
    _VoipPotsLineLoop_Type()
)
voipPotsLineLoop.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipPotsLineLoop.setStatus("current")
_EnetPort_ObjectIdentity = ObjectIdentity
enetPort = _EnetPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13)
)
_EnetLineConfTable_Object = MibTable
enetLineConfTable = _EnetLineConfTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 1)
)
if mibBuilder.loadTexts:
    enetLineConfTable.setStatus("current")
_EnetLineConfEntry_Object = MibTableRow
enetLineConfEntry = _EnetLineConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 1, 1)
)
enetLineConfEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    enetLineConfEntry.setStatus("current")
_EnetLineConfBandWidthIngress_Type = Integer32
_EnetLineConfBandWidthIngress_Object = MibTableColumn
enetLineConfBandWidthIngress = _EnetLineConfBandWidthIngress_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 1, 1, 1),
    _EnetLineConfBandWidthIngress_Type()
)
enetLineConfBandWidthIngress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    enetLineConfBandWidthIngress.setStatus("current")
if mibBuilder.loadTexts:
    enetLineConfBandWidthIngress.setUnits("Kbps")
_EnetLineConfBandWidthEgress_Type = Integer32
_EnetLineConfBandWidthEgress_Object = MibTableColumn
enetLineConfBandWidthEgress = _EnetLineConfBandWidthEgress_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 1, 1, 2),
    _EnetLineConfBandWidthEgress_Type()
)
enetLineConfBandWidthEgress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    enetLineConfBandWidthEgress.setStatus("current")
if mibBuilder.loadTexts:
    enetLineConfBandWidthEgress.setUnits("Kbps")


class _EnetLineConfFlowCtrlEnable_Type(Integer32):
    """Custom type enetLineConfFlowCtrlEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_EnetLineConfFlowCtrlEnable_Type.__name__ = "Integer32"
_EnetLineConfFlowCtrlEnable_Object = MibTableColumn
enetLineConfFlowCtrlEnable = _EnetLineConfFlowCtrlEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 1, 1, 3),
    _EnetLineConfFlowCtrlEnable_Type()
)
enetLineConfFlowCtrlEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    enetLineConfFlowCtrlEnable.setStatus("current")


class _EnetLineConfSpeed_Type(Integer32):
    """Custom type enetLineConfSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("i100baseFD", 2),
          ("i1000baseFD", 3))
    )


_EnetLineConfSpeed_Type.__name__ = "Integer32"
_EnetLineConfSpeed_Object = MibTableColumn
enetLineConfSpeed = _EnetLineConfSpeed_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 1, 1, 4),
    _EnetLineConfSpeed_Type()
)
enetLineConfSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    enetLineConfSpeed.setStatus("current")
_EnetPortConfTable_Object = MibTable
enetPortConfTable = _EnetPortConfTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 2)
)
if mibBuilder.loadTexts:
    enetPortConfTable.setStatus("current")
_EnetPortConfEntry_Object = MibTableRow
enetPortConfEntry = _EnetPortConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 2, 1)
)
enetPortConfEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    enetPortConfEntry.setStatus("current")


class _EnetPortConfPriority_Type(Integer32):
    """Custom type enetPortConfPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_EnetPortConfPriority_Type.__name__ = "Integer32"
_EnetPortConfPriority_Object = MibTableColumn
enetPortConfPriority = _EnetPortConfPriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 2, 1, 1),
    _EnetPortConfPriority_Type()
)
enetPortConfPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    enetPortConfPriority.setStatus("current")
_EnetPortConfPvid_Type = VlanIndex
_EnetPortConfPvid_Object = MibTableColumn
enetPortConfPvid = _EnetPortConfPvid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 2, 1, 2),
    _EnetPortConfPvid_Type()
)
enetPortConfPvid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    enetPortConfPvid.setStatus("current")


class _EnetPortConfAcceptableFrameType_Type(Integer32):
    """Custom type enetPortConfAcceptableFrameType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("admitAll", 1),
          ("admitOnlyVlanTagged", 2))
    )


_EnetPortConfAcceptableFrameType_Type.__name__ = "Integer32"
_EnetPortConfAcceptableFrameType_Object = MibTableColumn
enetPortConfAcceptableFrameType = _EnetPortConfAcceptableFrameType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 2, 1, 3),
    _EnetPortConfAcceptableFrameType_Type()
)
enetPortConfAcceptableFrameType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    enetPortConfAcceptableFrameType.setStatus("current")


class _EnetPortConfTlsEnable_Type(Integer32):
    """Custom type enetPortConfTlsEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_EnetPortConfTlsEnable_Type.__name__ = "Integer32"
_EnetPortConfTlsEnable_Object = MibTableColumn
enetPortConfTlsEnable = _EnetPortConfTlsEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 2, 1, 4),
    _EnetPortConfTlsEnable_Type()
)
enetPortConfTlsEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    enetPortConfTlsEnable.setStatus("current")
_EnetPortConfTlsVid_Type = VlanIndex
_EnetPortConfTlsVid_Object = MibTableColumn
enetPortConfTlsVid = _EnetPortConfTlsVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 2, 1, 5),
    _EnetPortConfTlsVid_Type()
)
enetPortConfTlsVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    enetPortConfTlsVid.setStatus("current")
_EnetPortConfTlsPriority_Type = Integer32
_EnetPortConfTlsPriority_Object = MibTableColumn
enetPortConfTlsPriority = _EnetPortConfTlsPriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 2, 1, 6),
    _EnetPortConfTlsPriority_Type()
)
enetPortConfTlsPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    enetPortConfTlsPriority.setStatus("current")


class _EnetPortConfRateLimitProfile_Type(DisplayString):
    """Custom type enetPortConfRateLimitProfile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_EnetPortConfRateLimitProfile_Type.__name__ = "DisplayString"
_EnetPortConfRateLimitProfile_Object = MibTableColumn
enetPortConfRateLimitProfile = _EnetPortConfRateLimitProfile_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 2, 1, 7),
    _EnetPortConfRateLimitProfile_Type()
)
enetPortConfRateLimitProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    enetPortConfRateLimitProfile.setStatus("current")


class _EnetPortConfQueueRateLimitProfile_Type(DisplayString):
    """Custom type enetPortConfQueueRateLimitProfile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_EnetPortConfQueueRateLimitProfile_Type.__name__ = "DisplayString"
_EnetPortConfQueueRateLimitProfile_Object = MibTableColumn
enetPortConfQueueRateLimitProfile = _EnetPortConfQueueRateLimitProfile_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 2, 1, 8),
    _EnetPortConfQueueRateLimitProfile_Type()
)
enetPortConfQueueRateLimitProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    enetPortConfQueueRateLimitProfile.setStatus("current")


class _EnetPortConfDtEnable_Type(Integer32):
    """Custom type enetPortConfDtEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_EnetPortConfDtEnable_Type.__name__ = "Integer32"
_EnetPortConfDtEnable_Object = MibTableColumn
enetPortConfDtEnable = _EnetPortConfDtEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 2, 1, 9),
    _EnetPortConfDtEnable_Type()
)
enetPortConfDtEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    enetPortConfDtEnable.setStatus("current")
_EnetPortConfDtSvid_Type = VlanIndex
_EnetPortConfDtSvid_Object = MibTableColumn
enetPortConfDtSvid = _EnetPortConfDtSvid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 2, 1, 10),
    _EnetPortConfDtSvid_Type()
)
enetPortConfDtSvid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    enetPortConfDtSvid.setStatus("current")
_EnetPortConfDtSpriority_Type = Integer32
_EnetPortConfDtSpriority_Object = MibTableColumn
enetPortConfDtSpriority = _EnetPortConfDtSpriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 2, 1, 11),
    _EnetPortConfDtSpriority_Type()
)
enetPortConfDtSpriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    enetPortConfDtSpriority.setStatus("current")
_EnetPortConfDtCvid_Type = VlanIndex
_EnetPortConfDtCvid_Object = MibTableColumn
enetPortConfDtCvid = _EnetPortConfDtCvid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 2, 1, 12),
    _EnetPortConfDtCvid_Type()
)
enetPortConfDtCvid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    enetPortConfDtCvid.setStatus("current")
_EnetPortVlanTable_Object = MibTable
enetPortVlanTable = _EnetPortVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 3)
)
if mibBuilder.loadTexts:
    enetPortVlanTable.setStatus("current")
_EnetPortVlanEntry_Object = MibTableRow
enetPortVlanEntry = _EnetPortVlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 3, 1)
)
enetPortVlanEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"),
)
if mibBuilder.loadTexts:
    enetPortVlanEntry.setStatus("current")


class _EnetPortVlanReg_Type(Integer32):
    """Custom type enetPortVlanReg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("egress", 1),
          ("forbidden", 2))
    )


_EnetPortVlanReg_Type.__name__ = "Integer32"
_EnetPortVlanReg_Object = MibTableColumn
enetPortVlanReg = _EnetPortVlanReg_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 3, 1, 1),
    _EnetPortVlanReg_Type()
)
enetPortVlanReg.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    enetPortVlanReg.setStatus("current")


class _EnetPortVlanTag_Type(Integer32):
    """Custom type enetPortVlanTag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("tag", 1),
          ("untag", 2))
    )


_EnetPortVlanTag_Type.__name__ = "Integer32"
_EnetPortVlanTag_Object = MibTableColumn
enetPortVlanTag = _EnetPortVlanTag_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 3, 1, 2),
    _EnetPortVlanTag_Type()
)
enetPortVlanTag.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    enetPortVlanTag.setStatus("current")
_EnetPortVlanRowStatus_Type = RowStatus
_EnetPortVlanRowStatus_Object = MibTableColumn
enetPortVlanRowStatus = _EnetPortVlanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 3, 1, 3),
    _EnetPortVlanRowStatus_Type()
)
enetPortVlanRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    enetPortVlanRowStatus.setStatus("current")
_ElcDot3ad_ObjectIdentity = ObjectIdentity
elcDot3ad = _ElcDot3ad_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 4)
)
_ElcDot3adTable_Object = MibTable
elcDot3adTable = _ElcDot3adTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 4, 1)
)
if mibBuilder.loadTexts:
    elcDot3adTable.setStatus("current")
_ElcDot3adEntry_Object = MibTableRow
elcDot3adEntry = _ElcDot3adEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 4, 1, 1)
)
elcDot3adEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "elcDot3adSlotId"),
    (0, "ZYXEL-IES5000-MIB", "elcDot3adGroupId"),
)
if mibBuilder.loadTexts:
    elcDot3adEntry.setStatus("current")
_ElcDot3adSlotId_Type = Integer32
_ElcDot3adSlotId_Object = MibTableColumn
elcDot3adSlotId = _ElcDot3adSlotId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 4, 1, 1, 1),
    _ElcDot3adSlotId_Type()
)
elcDot3adSlotId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    elcDot3adSlotId.setStatus("current")


class _ElcDot3adGroupId_Type(Integer32):
    """Custom type elcDot3adGroupId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_ElcDot3adGroupId_Type.__name__ = "Integer32"
_ElcDot3adGroupId_Object = MibTableColumn
elcDot3adGroupId = _ElcDot3adGroupId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 4, 1, 1, 2),
    _ElcDot3adGroupId_Type()
)
elcDot3adGroupId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    elcDot3adGroupId.setStatus("current")


class _ElcDot3adEnable_Type(Integer32):
    """Custom type elcDot3adEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("enableWithLacp", 2),
          ("disable", 3))
    )


_ElcDot3adEnable_Type.__name__ = "Integer32"
_ElcDot3adEnable_Object = MibTableColumn
elcDot3adEnable = _ElcDot3adEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 4, 1, 1, 3),
    _ElcDot3adEnable_Type()
)
elcDot3adEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    elcDot3adEnable.setStatus("current")
_ElcAggPortTable_Object = MibTable
elcAggPortTable = _ElcAggPortTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 4, 2)
)
if mibBuilder.loadTexts:
    elcAggPortTable.setStatus("current")
_ElcAggPortEntry_Object = MibTableRow
elcAggPortEntry = _ElcAggPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 4, 2, 1)
)
elcAggPortEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    elcAggPortEntry.setStatus("current")


class _ElcAggPortJoin_Type(Integer32):
    """Custom type elcAggPortJoin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("disjoin", 0),
          ("joinTrunkingGroup1", 1),
          ("joinTrunkingGroup2", 2),
          ("joinTrunkingGroup3", 3),
          ("joinTrunkingGroup4", 4),
          ("joinTrunkingGroup5", 5),
          ("joinTrunkingGroup6", 6),
          ("joinTrunkingGroup7", 7),
          ("joinTrunkingGroup8", 8),
          ("joinTrunkingGroup9", 9),
          ("joinTrunkingGroup10", 10))
    )


_ElcAggPortJoin_Type.__name__ = "Integer32"
_ElcAggPortJoin_Object = MibTableColumn
elcAggPortJoin = _ElcAggPortJoin_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 4, 2, 1, 1),
    _ElcAggPortJoin_Type()
)
elcAggPortJoin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    elcAggPortJoin.setStatus("current")
_EnetQoS_ObjectIdentity = ObjectIdentity
enetQoS = _EnetQoS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 5)
)
_EnetQScheduleTable_Object = MibTable
enetQScheduleTable = _EnetQScheduleTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 5, 1)
)
if mibBuilder.loadTexts:
    enetQScheduleTable.setStatus("current")
_EnetQScheduleEntry_Object = MibTableRow
enetQScheduleEntry = _EnetQScheduleEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 5, 1, 1)
)
enetQScheduleEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    enetQScheduleEntry.setStatus("current")
_EnetQScheduleType_Type = Integer32
_EnetQScheduleType_Object = MibTableColumn
enetQScheduleType = _EnetQScheduleType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 5, 1, 1, 1),
    _EnetQScheduleType_Type()
)
enetQScheduleType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    enetQScheduleType.setStatus("current")
_EnetQueueWeightTable_Object = MibTable
enetQueueWeightTable = _EnetQueueWeightTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 5, 2)
)
if mibBuilder.loadTexts:
    enetQueueWeightTable.setStatus("current")
_EnetQueueWeightEntry_Object = MibTableRow
enetQueueWeightEntry = _EnetQueueWeightEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 5, 2, 1)
)
enetQueueWeightEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "P-BRIDGE-MIB", "dot1dTrafficClass"),
)
if mibBuilder.loadTexts:
    enetQueueWeightEntry.setStatus("current")
_EnetQueueWeight_Type = Integer32
_EnetQueueWeight_Object = MibTableColumn
enetQueueWeight = _EnetQueueWeight_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 5, 2, 1, 1),
    _EnetQueueWeight_Type()
)
enetQueueWeight.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    enetQueueWeight.setStatus("current")
_EnetPortPvlanTable_Object = MibTable
enetPortPvlanTable = _EnetPortPvlanTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 6)
)
if mibBuilder.loadTexts:
    enetPortPvlanTable.setStatus("current")
_EnetPortPvlanEntry_Object = MibTableRow
enetPortPvlanEntry = _EnetPortPvlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 6, 1)
)
enetPortPvlanEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "enetPortPvlanEtype"),
    (0, "ZYXEL-IES5000-MIB", "enetPortPvlanVid"),
)
if mibBuilder.loadTexts:
    enetPortPvlanEntry.setStatus("current")
_EnetPortPvlanEtype_Type = Unsigned32
_EnetPortPvlanEtype_Object = MibTableColumn
enetPortPvlanEtype = _EnetPortPvlanEtype_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 6, 1, 1),
    _EnetPortPvlanEtype_Type()
)
enetPortPvlanEtype.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    enetPortPvlanEtype.setStatus("current")
_EnetPortPvlanVid_Type = VlanIndex
_EnetPortPvlanVid_Object = MibTableColumn
enetPortPvlanVid = _EnetPortPvlanVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 6, 1, 2),
    _EnetPortPvlanVid_Type()
)
enetPortPvlanVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    enetPortPvlanVid.setStatus("current")


class _EnetPortPvlanPriority_Type(Integer32):
    """Custom type enetPortPvlanPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_EnetPortPvlanPriority_Type.__name__ = "Integer32"
_EnetPortPvlanPriority_Object = MibTableColumn
enetPortPvlanPriority = _EnetPortPvlanPriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 6, 1, 3),
    _EnetPortPvlanPriority_Type()
)
enetPortPvlanPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    enetPortPvlanPriority.setStatus("current")
_EnetPortPvlanRowStatus_Type = RowStatus
_EnetPortPvlanRowStatus_Object = MibTableColumn
enetPortPvlanRowStatus = _EnetPortPvlanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 6, 1, 4),
    _EnetPortPvlanRowStatus_Type()
)
enetPortPvlanRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    enetPortPvlanRowStatus.setStatus("current")
_EnetPortXvlanTable_Object = MibTable
enetPortXvlanTable = _EnetPortXvlanTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 7)
)
if mibBuilder.loadTexts:
    enetPortXvlanTable.setStatus("current")
_EnetPortXvlanEntry_Object = MibTableRow
enetPortXvlanEntry = _EnetPortXvlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 7, 1)
)
enetPortXvlanEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "enetPortXvlanCvid"),
    (0, "ZYXEL-IES5000-MIB", "enetPortXvlanSvid"),
)
if mibBuilder.loadTexts:
    enetPortXvlanEntry.setStatus("current")


class _EnetPortXvlanCvid_Type(Unsigned32):
    """Custom type enetPortXvlanCvid based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_EnetPortXvlanCvid_Type.__name__ = "Unsigned32"
_EnetPortXvlanCvid_Object = MibTableColumn
enetPortXvlanCvid = _EnetPortXvlanCvid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 7, 1, 1),
    _EnetPortXvlanCvid_Type()
)
enetPortXvlanCvid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    enetPortXvlanCvid.setStatus("current")


class _EnetPortXvlanSvid_Type(Unsigned32):
    """Custom type enetPortXvlanSvid based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_EnetPortXvlanSvid_Type.__name__ = "Unsigned32"
_EnetPortXvlanSvid_Object = MibTableColumn
enetPortXvlanSvid = _EnetPortXvlanSvid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 7, 1, 2),
    _EnetPortXvlanSvid_Type()
)
enetPortXvlanSvid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    enetPortXvlanSvid.setStatus("current")
_EnetPortXvlanRowStatus_Type = RowStatus
_EnetPortXvlanRowStatus_Object = MibTableColumn
enetPortXvlanRowStatus = _EnetPortXvlanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 13, 7, 1, 3),
    _EnetPortXvlanRowStatus_Type()
)
enetPortXvlanRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    enetPortXvlanRowStatus.setStatus("current")
_GbondGroupTable_Object = MibTable
gbondGroupTable = _GbondGroupTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 14)
)
if mibBuilder.loadTexts:
    gbondGroupTable.setStatus("current")
_GbondGroupEntry_Object = MibTableRow
gbondGroupEntry = _GbondGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 14, 1)
)
gbondGroupEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "slotId"),
    (1, "ZYXEL-IES5000-MIB", "gbondGroupName"),
)
if mibBuilder.loadTexts:
    gbondGroupEntry.setStatus("current")
_GbondGroupName_Type = DisplayString
_GbondGroupName_Object = MibTableColumn
gbondGroupName = _GbondGroupName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 14, 1, 1),
    _GbondGroupName_Type()
)
gbondGroupName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    gbondGroupName.setStatus("current")
_GbondGroupPorts_Type = OctetString
_GbondGroupPorts_Object = MibTableColumn
gbondGroupPorts = _GbondGroupPorts_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 14, 1, 2),
    _GbondGroupPorts_Type()
)
gbondGroupPorts.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    gbondGroupPorts.setStatus("current")
_GbondGroupRowStatus_Type = RowStatus
_GbondGroupRowStatus_Object = MibTableColumn
gbondGroupRowStatus = _GbondGroupRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 14, 1, 3),
    _GbondGroupRowStatus_Type()
)
gbondGroupRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    gbondGroupRowStatus.setStatus("current")
_Dtpvc_ObjectIdentity = ObjectIdentity
dtpvc = _Dtpvc_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 15)
)
_DtpvcTable_Object = MibTable
dtpvcTable = _DtpvcTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 15, 1)
)
if mibBuilder.loadTexts:
    dtpvcTable.setStatus("current")
_DtpvcEntry_Object = MibTableRow
dtpvcEntry = _DtpvcEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 15, 1, 1)
)
dtpvcEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "dtpvcVpi"),
    (0, "ZYXEL-IES5000-MIB", "dtpvcVci"),
    (0, "ZYXEL-IES5000-MIB", "dtpvcSvid"),
    (0, "ZYXEL-IES5000-MIB", "dtpvcCvid"),
)
if mibBuilder.loadTexts:
    dtpvcEntry.setStatus("current")


class _DtpvcVpi_Type(Integer32):
    """Custom type dtpvcVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_DtpvcVpi_Type.__name__ = "Integer32"
_DtpvcVpi_Object = MibTableColumn
dtpvcVpi = _DtpvcVpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 15, 1, 1, 1),
    _DtpvcVpi_Type()
)
dtpvcVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dtpvcVpi.setStatus("current")


class _DtpvcVci_Type(Integer32):
    """Custom type dtpvcVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_DtpvcVci_Type.__name__ = "Integer32"
_DtpvcVci_Object = MibTableColumn
dtpvcVci = _DtpvcVci_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 15, 1, 1, 2),
    _DtpvcVci_Type()
)
dtpvcVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dtpvcVci.setStatus("current")
_DtpvcSvid_Type = VlanIndex
_DtpvcSvid_Object = MibTableColumn
dtpvcSvid = _DtpvcSvid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 15, 1, 1, 3),
    _DtpvcSvid_Type()
)
dtpvcSvid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dtpvcSvid.setStatus("current")
_DtpvcCvid_Type = VlanIndex
_DtpvcCvid_Object = MibTableColumn
dtpvcCvid = _DtpvcCvid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 15, 1, 1, 4),
    _DtpvcCvid_Type()
)
dtpvcCvid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dtpvcCvid.setStatus("current")


class _DtpvcEncap_Type(Integer32):
    """Custom type dtpvcEncap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("llc", 1),
          ("vc", 2))
    )


_DtpvcEncap_Type.__name__ = "Integer32"
_DtpvcEncap_Object = MibTableColumn
dtpvcEncap = _DtpvcEncap_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 15, 1, 1, 5),
    _DtpvcEncap_Type()
)
dtpvcEncap.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dtpvcEncap.setStatus("current")


class _DtpvcSPriority_Type(Integer32):
    """Custom type dtpvcSPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_DtpvcSPriority_Type.__name__ = "Integer32"
_DtpvcSPriority_Object = MibTableColumn
dtpvcSPriority = _DtpvcSPriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 15, 1, 1, 6),
    _DtpvcSPriority_Type()
)
dtpvcSPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dtpvcSPriority.setStatus("current")


class _DtpvcCPriority_Type(Integer32):
    """Custom type dtpvcCPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_DtpvcCPriority_Type.__name__ = "Integer32"
_DtpvcCPriority_Object = MibTableColumn
dtpvcCPriority = _DtpvcCPriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 15, 1, 1, 7),
    _DtpvcCPriority_Type()
)
dtpvcCPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dtpvcCPriority.setStatus("current")


class _DtpvcProfile_Type(DisplayString):
    """Custom type dtpvcProfile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_DtpvcProfile_Type.__name__ = "DisplayString"
_DtpvcProfile_Object = MibTableColumn
dtpvcProfile = _DtpvcProfile_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 15, 1, 1, 8),
    _DtpvcProfile_Type()
)
dtpvcProfile.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dtpvcProfile.setStatus("current")
_DtpvcRowStatus_Type = RowStatus
_DtpvcRowStatus_Object = MibTableColumn
dtpvcRowStatus = _DtpvcRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 15, 1, 1, 9),
    _DtpvcRowStatus_Type()
)
dtpvcRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dtpvcRowStatus.setStatus("current")


class _DtpvcMvlanEnable_Type(Integer32):
    """Custom type dtpvcMvlanEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_DtpvcMvlanEnable_Type.__name__ = "Integer32"
_DtpvcMvlanEnable_Object = MibTableColumn
dtpvcMvlanEnable = _DtpvcMvlanEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 15, 1, 1, 10),
    _DtpvcMvlanEnable_Type()
)
dtpvcMvlanEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dtpvcMvlanEnable.setStatus("current")
_E1Port_ObjectIdentity = ObjectIdentity
e1Port = _E1Port_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 16)
)
_E1PortConfTable_Object = MibTable
e1PortConfTable = _E1PortConfTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 16, 1)
)
if mibBuilder.loadTexts:
    e1PortConfTable.setStatus("current")
_E1PortConfEntry_Object = MibTableRow
e1PortConfEntry = _E1PortConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 16, 1, 1)
)
e1PortConfEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    e1PortConfEntry.setStatus("current")


class _E1PortConfAdminStatus_Type(Integer32):
    """Custom type e1PortConfAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_E1PortConfAdminStatus_Type.__name__ = "Integer32"
_E1PortConfAdminStatus_Object = MibTableColumn
e1PortConfAdminStatus = _E1PortConfAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 16, 1, 1, 1),
    _E1PortConfAdminStatus_Type()
)
e1PortConfAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    e1PortConfAdminStatus.setStatus("current")


class _E1PortConfAlarmProfile_Type(DisplayString):
    """Custom type e1PortConfAlarmProfile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_E1PortConfAlarmProfile_Type.__name__ = "DisplayString"
_E1PortConfAlarmProfile_Object = MibTableColumn
e1PortConfAlarmProfile = _E1PortConfAlarmProfile_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 16, 1, 1, 2),
    _E1PortConfAlarmProfile_Type()
)
e1PortConfAlarmProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    e1PortConfAlarmProfile.setStatus("current")


class _E1PortConfImpedance_Type(Integer32):
    """Custom type e1PortConfImpedance based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("impedance-75ohm", 1),
          ("impedance-120ohm", 2))
    )


_E1PortConfImpedance_Type.__name__ = "Integer32"
_E1PortConfImpedance_Object = MibTableColumn
e1PortConfImpedance = _E1PortConfImpedance_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 16, 1, 1, 3),
    _E1PortConfImpedance_Type()
)
e1PortConfImpedance.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    e1PortConfImpedance.setStatus("current")
_E1PortConfTimingSrc_Type = Integer32
_E1PortConfTimingSrc_Object = MibTableColumn
e1PortConfTimingSrc = _E1PortConfTimingSrc_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 16, 1, 1, 4),
    _E1PortConfTimingSrc_Type()
)
e1PortConfTimingSrc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    e1PortConfTimingSrc.setStatus("current")
_Xvlan_ObjectIdentity = ObjectIdentity
xvlan = _Xvlan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 17)
)
_XvlanTable_Object = MibTable
xvlanTable = _XvlanTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 17, 1)
)
if mibBuilder.loadTexts:
    xvlanTable.setStatus("current")
_XvlanEntry_Object = MibTableRow
xvlanEntry = _XvlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 17, 1, 1)
)
xvlanEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "xvlanCvid"),
    (0, "ZYXEL-IES5000-MIB", "xvlanSvid"),
    (0, "ZYXEL-IES5000-MIB", "xvlanCvids"),
)
if mibBuilder.loadTexts:
    xvlanEntry.setStatus("current")


class _XvlanCvid_Type(Unsigned32):
    """Custom type xvlanCvid based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_XvlanCvid_Type.__name__ = "Unsigned32"
_XvlanCvid_Object = MibTableColumn
xvlanCvid = _XvlanCvid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 17, 1, 1, 1),
    _XvlanCvid_Type()
)
xvlanCvid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xvlanCvid.setStatus("current")


class _XvlanSvid_Type(Unsigned32):
    """Custom type xvlanSvid based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_XvlanSvid_Type.__name__ = "Unsigned32"
_XvlanSvid_Object = MibTableColumn
xvlanSvid = _XvlanSvid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 17, 1, 1, 2),
    _XvlanSvid_Type()
)
xvlanSvid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xvlanSvid.setStatus("current")


class _XvlanCvids_Type(Unsigned32):
    """Custom type xvlanCvids based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4094),
    )


_XvlanCvids_Type.__name__ = "Unsigned32"
_XvlanCvids_Object = MibTableColumn
xvlanCvids = _XvlanCvids_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 17, 1, 1, 3),
    _XvlanCvids_Type()
)
xvlanCvids.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xvlanCvids.setStatus("current")
_XvlanRowStatus_Type = Integer32
_XvlanRowStatus_Object = MibTableColumn
xvlanRowStatus = _XvlanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 17, 1, 1, 4),
    _XvlanRowStatus_Type()
)
xvlanRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xvlanRowStatus.setStatus("current")
_Vdsl2Port_ObjectIdentity = ObjectIdentity
vdsl2Port = _Vdsl2Port_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18)
)
_Vdsl2LineConfTable_Object = MibTable
vdsl2LineConfTable = _Vdsl2LineConfTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 1)
)
if mibBuilder.loadTexts:
    vdsl2LineConfTable.setStatus("current")
_Vdsl2LineConfEntry_Object = MibTableRow
vdsl2LineConfEntry = _Vdsl2LineConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 1, 1)
)
vdsl2LineConfEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    vdsl2LineConfEntry.setStatus("current")
_Vdsl2LineConfRateLimitProfile_Type = DisplayString
_Vdsl2LineConfRateLimitProfile_Object = MibTableColumn
vdsl2LineConfRateLimitProfile = _Vdsl2LineConfRateLimitProfile_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 1, 1, 1),
    _Vdsl2LineConfRateLimitProfile_Type()
)
vdsl2LineConfRateLimitProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LineConfRateLimitProfile.setStatus("current")
_Vdsl2LineConfQueueRateLimitProfile_Type = DisplayString
_Vdsl2LineConfQueueRateLimitProfile_Object = MibTableColumn
vdsl2LineConfQueueRateLimitProfile = _Vdsl2LineConfQueueRateLimitProfile_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 1, 1, 2),
    _Vdsl2LineConfQueueRateLimitProfile_Type()
)
vdsl2LineConfQueueRateLimitProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LineConfQueueRateLimitProfile.setStatus("current")
_Vdsl2Pvc_ObjectIdentity = ObjectIdentity
vdsl2Pvc = _Vdsl2Pvc_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 2)
)
_Vdsl2PvcTable_Object = MibTable
vdsl2PvcTable = _Vdsl2PvcTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 2, 1)
)
if mibBuilder.loadTexts:
    vdsl2PvcTable.setStatus("current")
_Vdsl2PvcEntry_Object = MibTableRow
vdsl2PvcEntry = _Vdsl2PvcEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 2, 1, 1)
)
vdsl2PvcEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "vdsl2PvcVpi"),
    (0, "ZYXEL-IES5000-MIB", "vdsl2PvcVci"),
    (0, "ZYXEL-IES5000-MIB", "vdsl2PvcPvid"),
)
if mibBuilder.loadTexts:
    vdsl2PvcEntry.setStatus("current")


class _Vdsl2PvcVpi_Type(Integer32):
    """Custom type vdsl2PvcVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_Vdsl2PvcVpi_Type.__name__ = "Integer32"
_Vdsl2PvcVpi_Object = MibTableColumn
vdsl2PvcVpi = _Vdsl2PvcVpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 2, 1, 1, 1),
    _Vdsl2PvcVpi_Type()
)
vdsl2PvcVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdsl2PvcVpi.setStatus("current")


class _Vdsl2PvcVci_Type(Integer32):
    """Custom type vdsl2PvcVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Vdsl2PvcVci_Type.__name__ = "Integer32"
_Vdsl2PvcVci_Object = MibTableColumn
vdsl2PvcVci = _Vdsl2PvcVci_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 2, 1, 1, 2),
    _Vdsl2PvcVci_Type()
)
vdsl2PvcVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdsl2PvcVci.setStatus("current")


class _Vdsl2PvcPvid_Type(Integer32):
    """Custom type vdsl2PvcPvid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_Vdsl2PvcPvid_Type.__name__ = "Integer32"
_Vdsl2PvcPvid_Object = MibTableColumn
vdsl2PvcPvid = _Vdsl2PvcPvid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 2, 1, 1, 3),
    _Vdsl2PvcPvid_Type()
)
vdsl2PvcPvid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdsl2PvcPvid.setStatus("current")


class _Vdsl2PvcEncap_Type(Integer32):
    """Custom type vdsl2PvcEncap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("llc", 1),
          ("vc", 2))
    )


_Vdsl2PvcEncap_Type.__name__ = "Integer32"
_Vdsl2PvcEncap_Object = MibTableColumn
vdsl2PvcEncap = _Vdsl2PvcEncap_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 2, 1, 1, 4),
    _Vdsl2PvcEncap_Type()
)
vdsl2PvcEncap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2PvcEncap.setStatus("current")


class _Vdsl2PvcPriority_Type(Integer32):
    """Custom type vdsl2PvcPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Vdsl2PvcPriority_Type.__name__ = "Integer32"
_Vdsl2PvcPriority_Object = MibTableColumn
vdsl2PvcPriority = _Vdsl2PvcPriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 2, 1, 1, 5),
    _Vdsl2PvcPriority_Type()
)
vdsl2PvcPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2PvcPriority.setStatus("current")
_Vdsl2PvcSuper_Type = Integer32
_Vdsl2PvcSuper_Object = MibTableColumn
vdsl2PvcSuper = _Vdsl2PvcSuper_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 2, 1, 1, 6),
    _Vdsl2PvcSuper_Type()
)
vdsl2PvcSuper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2PvcSuper.setStatus("current")
_Vdsl2PvcRowStatus_Type = RowStatus
_Vdsl2PvcRowStatus_Object = MibTableColumn
vdsl2PvcRowStatus = _Vdsl2PvcRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 2, 1, 1, 7),
    _Vdsl2PvcRowStatus_Type()
)
vdsl2PvcRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2PvcRowStatus.setStatus("current")
_Vdsl2QSchedule_ObjectIdentity = ObjectIdentity
vdsl2QSchedule = _Vdsl2QSchedule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 3)
)
_Vdsl2QScheduleTable_Object = MibTable
vdsl2QScheduleTable = _Vdsl2QScheduleTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 3, 1)
)
if mibBuilder.loadTexts:
    vdsl2QScheduleTable.setStatus("current")
_Vdsl2QScheduleEntry_Object = MibTableRow
vdsl2QScheduleEntry = _Vdsl2QScheduleEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 3, 1, 1)
)
vdsl2QScheduleEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    vdsl2QScheduleEntry.setStatus("current")


class _Vdsl2QScheduleType_Type(Integer32):
    """Custom type vdsl2QScheduleType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("spq", 1),
          ("wrr", 2))
    )


_Vdsl2QScheduleType_Type.__name__ = "Integer32"
_Vdsl2QScheduleType_Object = MibTableColumn
vdsl2QScheduleType = _Vdsl2QScheduleType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 3, 1, 1, 1),
    _Vdsl2QScheduleType_Type()
)
vdsl2QScheduleType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2QScheduleType.setStatus("current")
_Vdsl2QueueWeightTable_Object = MibTable
vdsl2QueueWeightTable = _Vdsl2QueueWeightTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 3, 2)
)
if mibBuilder.loadTexts:
    vdsl2QueueWeightTable.setStatus("current")
_Vdsl2QueueWeightEntry_Object = MibTableRow
vdsl2QueueWeightEntry = _Vdsl2QueueWeightEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 3, 2, 1)
)
vdsl2QueueWeightEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "P-BRIDGE-MIB", "dot1dTrafficClass"),
)
if mibBuilder.loadTexts:
    vdsl2QueueWeightEntry.setStatus("current")


class _Vdsl2QueueWeight_Type(Integer32):
    """Custom type vdsl2QueueWeight based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_Vdsl2QueueWeight_Type.__name__ = "Integer32"
_Vdsl2QueueWeight_Object = MibTableColumn
vdsl2QueueWeight = _Vdsl2QueueWeight_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 3, 2, 1, 1),
    _Vdsl2QueueWeight_Type()
)
vdsl2QueueWeight.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2QueueWeight.setStatus("current")
_Vdsl2Paepvc_ObjectIdentity = ObjectIdentity
vdsl2Paepvc = _Vdsl2Paepvc_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 4)
)
_Vdsl2PaepvcTable_Object = MibTable
vdsl2PaepvcTable = _Vdsl2PaepvcTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 4, 1)
)
if mibBuilder.loadTexts:
    vdsl2PaepvcTable.setStatus("current")
_Vdsl2PaepvcEntry_Object = MibTableRow
vdsl2PaepvcEntry = _Vdsl2PaepvcEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 4, 1, 1)
)
vdsl2PaepvcEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "vdsl2PaepvcVpi"),
    (0, "ZYXEL-IES5000-MIB", "vdsl2PaepvcVci"),
    (0, "ZYXEL-IES5000-MIB", "vdsl2PaepvcPvid"),
)
if mibBuilder.loadTexts:
    vdsl2PaepvcEntry.setStatus("current")


class _Vdsl2PaepvcVpi_Type(Integer32):
    """Custom type vdsl2PaepvcVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_Vdsl2PaepvcVpi_Type.__name__ = "Integer32"
_Vdsl2PaepvcVpi_Object = MibTableColumn
vdsl2PaepvcVpi = _Vdsl2PaepvcVpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 4, 1, 1, 1),
    _Vdsl2PaepvcVpi_Type()
)
vdsl2PaepvcVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdsl2PaepvcVpi.setStatus("current")


class _Vdsl2PaepvcVci_Type(Integer32):
    """Custom type vdsl2PaepvcVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Vdsl2PaepvcVci_Type.__name__ = "Integer32"
_Vdsl2PaepvcVci_Object = MibTableColumn
vdsl2PaepvcVci = _Vdsl2PaepvcVci_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 4, 1, 1, 2),
    _Vdsl2PaepvcVci_Type()
)
vdsl2PaepvcVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdsl2PaepvcVci.setStatus("current")
_Vdsl2PaepvcPvid_Type = VlanIndex
_Vdsl2PaepvcPvid_Object = MibTableColumn
vdsl2PaepvcPvid = _Vdsl2PaepvcPvid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 4, 1, 1, 3),
    _Vdsl2PaepvcPvid_Type()
)
vdsl2PaepvcPvid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdsl2PaepvcPvid.setStatus("current")


class _Vdsl2PaepvcEncap_Type(Integer32):
    """Custom type vdsl2PaepvcEncap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("llc", 1),
          ("vc", 2))
    )


_Vdsl2PaepvcEncap_Type.__name__ = "Integer32"
_Vdsl2PaepvcEncap_Object = MibTableColumn
vdsl2PaepvcEncap = _Vdsl2PaepvcEncap_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 4, 1, 1, 4),
    _Vdsl2PaepvcEncap_Type()
)
vdsl2PaepvcEncap.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2PaepvcEncap.setStatus("current")


class _Vdsl2PaepvcPriority_Type(Integer32):
    """Custom type vdsl2PaepvcPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Vdsl2PaepvcPriority_Type.__name__ = "Integer32"
_Vdsl2PaepvcPriority_Object = MibTableColumn
vdsl2PaepvcPriority = _Vdsl2PaepvcPriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 4, 1, 1, 5),
    _Vdsl2PaepvcPriority_Type()
)
vdsl2PaepvcPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2PaepvcPriority.setStatus("current")
_Vdsl2PaepvcAcName_Type = DisplayString
_Vdsl2PaepvcAcName_Object = MibTableColumn
vdsl2PaepvcAcName = _Vdsl2PaepvcAcName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 4, 1, 1, 6),
    _Vdsl2PaepvcAcName_Type()
)
vdsl2PaepvcAcName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2PaepvcAcName.setStatus("current")
_Vdsl2PaepvcServiceName_Type = DisplayString
_Vdsl2PaepvcServiceName_Object = MibTableColumn
vdsl2PaepvcServiceName = _Vdsl2PaepvcServiceName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 4, 1, 1, 7),
    _Vdsl2PaepvcServiceName_Type()
)
vdsl2PaepvcServiceName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2PaepvcServiceName.setStatus("current")
_Vdsl2PaepvcHelloTime_Type = Integer32
_Vdsl2PaepvcHelloTime_Object = MibTableColumn
vdsl2PaepvcHelloTime = _Vdsl2PaepvcHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 4, 1, 1, 8),
    _Vdsl2PaepvcHelloTime_Type()
)
vdsl2PaepvcHelloTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2PaepvcHelloTime.setStatus("current")
if mibBuilder.loadTexts:
    vdsl2PaepvcHelloTime.setUnits("second")
_Vdsl2PaepvcRowStatus_Type = RowStatus
_Vdsl2PaepvcRowStatus_Object = MibTableColumn
vdsl2PaepvcRowStatus = _Vdsl2PaepvcRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 18, 4, 1, 1, 9),
    _Vdsl2PaepvcRowStatus_Type()
)
vdsl2PaepvcRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2PaepvcRowStatus.setStatus("current")
_PvcAll_ObjectIdentity = ObjectIdentity
pvcAll = _PvcAll_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 19)
)
_PvcAllFilter_Type = Integer32
_PvcAllFilter_Object = MibScalar
pvcAllFilter = _PvcAllFilter_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 19, 1),
    _PvcAllFilter_Type()
)
pvcAllFilter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcAllFilter.setStatus("current")
_PvcAllTable_Object = MibTable
pvcAllTable = _PvcAllTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 19, 2)
)
if mibBuilder.loadTexts:
    pvcAllTable.setStatus("current")
_PvcAllEntry_Object = MibTableRow
pvcAllEntry = _PvcAllEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 19, 2, 1)
)
pvcAllEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "pvcVpi"),
    (0, "ZYXEL-IES5000-MIB", "pvcVci"),
)
if mibBuilder.loadTexts:
    pvcAllEntry.setStatus("current")


class _PvcAllVpi_Type(Integer32):
    """Custom type pvcAllVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_PvcAllVpi_Type.__name__ = "Integer32"
_PvcAllVpi_Object = MibTableColumn
pvcAllVpi = _PvcAllVpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 19, 2, 1, 1),
    _PvcAllVpi_Type()
)
pvcAllVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvcAllVpi.setStatus("current")


class _PvcAllVci_Type(Integer32):
    """Custom type pvcAllVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_PvcAllVci_Type.__name__ = "Integer32"
_PvcAllVci_Object = MibTableColumn
pvcAllVci = _PvcAllVci_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 19, 2, 1, 2),
    _PvcAllVci_Type()
)
pvcAllVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvcAllVci.setStatus("current")


class _PvcAllEncap_Type(Integer32):
    """Custom type pvcAllEncap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("llc", 1),
          ("vc", 2))
    )


_PvcAllEncap_Type.__name__ = "Integer32"
_PvcAllEncap_Object = MibTableColumn
pvcAllEncap = _PvcAllEncap_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 19, 2, 1, 3),
    _PvcAllEncap_Type()
)
pvcAllEncap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvcAllEncap.setStatus("current")


class _PvcAllType_Type(Integer32):
    """Custom type pvcAllType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("pvc", 1),
          ("paepvc", 2),
          ("tlspvc", 3),
          ("ipbpvc", 4),
          ("dtpvc", 5))
    )


_PvcAllType_Type.__name__ = "Integer32"
_PvcAllType_Object = MibTableColumn
pvcAllType = _PvcAllType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 8, 19, 2, 1, 4),
    _PvcAllType_Type()
)
pvcAllType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvcAllType.setStatus("current")
_Profile_ObjectIdentity = ObjectIdentity
profile = _Profile_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9)
)
_AdslProfile_ObjectIdentity = ObjectIdentity
adslProfile = _AdslProfile_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 1)
)
_MaxNumOfAdslLineProfiles_Type = Integer32
_MaxNumOfAdslLineProfiles_Object = MibScalar
maxNumOfAdslLineProfiles = _MaxNumOfAdslLineProfiles_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 1, 1),
    _MaxNumOfAdslLineProfiles_Type()
)
maxNumOfAdslLineProfiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfAdslLineProfiles.setStatus("current")
_MaxNumOfAdslAlarmProfiles_Type = Integer32
_MaxNumOfAdslAlarmProfiles_Object = MibScalar
maxNumOfAdslAlarmProfiles = _MaxNumOfAdslAlarmProfiles_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 1, 2),
    _MaxNumOfAdslAlarmProfiles_Type()
)
maxNumOfAdslAlarmProfiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfAdslAlarmProfiles.setStatus("current")
_ShdslProfile_ObjectIdentity = ObjectIdentity
shdslProfile = _ShdslProfile_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 2)
)
_MaxNumOfShdslLineProfiles_Type = Integer32
_MaxNumOfShdslLineProfiles_Object = MibScalar
maxNumOfShdslLineProfiles = _MaxNumOfShdslLineProfiles_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 2, 1),
    _MaxNumOfShdslLineProfiles_Type()
)
maxNumOfShdslLineProfiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfShdslLineProfiles.setStatus("current")
_MaxNumOfShdslAlarmProfiles_Type = Integer32
_MaxNumOfShdslAlarmProfiles_Object = MibScalar
maxNumOfShdslAlarmProfiles = _MaxNumOfShdslAlarmProfiles_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 2, 2),
    _MaxNumOfShdslAlarmProfiles_Type()
)
maxNumOfShdslAlarmProfiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfShdslAlarmProfiles.setStatus("current")
_AtmProfile_ObjectIdentity = ObjectIdentity
atmProfile = _AtmProfile_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 3)
)
_MaxNumOfAtmProfiles_Type = Integer32
_MaxNumOfAtmProfiles_Object = MibScalar
maxNumOfAtmProfiles = _MaxNumOfAtmProfiles_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 3, 1),
    _MaxNumOfAtmProfiles_Type()
)
maxNumOfAtmProfiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfAtmProfiles.setStatus("current")
_AtmProfileTable_Object = MibTable
atmProfileTable = _AtmProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 3, 2)
)
if mibBuilder.loadTexts:
    atmProfileTable.setStatus("current")
_AtmProfileEntry_Object = MibTableRow
atmProfileEntry = _AtmProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 3, 2, 1)
)
atmProfileEntry.setIndexNames(
    (1, "ZYXEL-IES5000-MIB", "atmProfileName"),
)
if mibBuilder.loadTexts:
    atmProfileEntry.setStatus("current")


class _AtmProfileName_Type(DisplayString):
    """Custom type atmProfileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_AtmProfileName_Type.__name__ = "DisplayString"
_AtmProfileName_Object = MibTableColumn
atmProfileName = _AtmProfileName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 3, 2, 1, 1),
    _AtmProfileName_Type()
)
atmProfileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmProfileName.setStatus("current")


class _AtmProfileAAL_Type(Integer32):
    """Custom type atmProfileAAL based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 5),
    )


_AtmProfileAAL_Type.__name__ = "Integer32"
_AtmProfileAAL_Object = MibTableColumn
atmProfileAAL = _AtmProfileAAL_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 3, 2, 1, 2),
    _AtmProfileAAL_Type()
)
atmProfileAAL.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmProfileAAL.setStatus("current")


class _AtmProfileClass_Type(Integer32):
    """Custom type atmProfileClass based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("cbr", 1),
          ("rt-vbr", 2),
          ("nrt-vbr", 3),
          ("ubr", 4),
          ("abr", 5))
    )


_AtmProfileClass_Type.__name__ = "Integer32"
_AtmProfileClass_Object = MibTableColumn
atmProfileClass = _AtmProfileClass_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 3, 2, 1, 3),
    _AtmProfileClass_Type()
)
atmProfileClass.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmProfileClass.setStatus("current")
_AtmProfilePcr_Type = Unsigned32
_AtmProfilePcr_Object = MibTableColumn
atmProfilePcr = _AtmProfilePcr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 3, 2, 1, 4),
    _AtmProfilePcr_Type()
)
atmProfilePcr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmProfilePcr.setStatus("current")
if mibBuilder.loadTexts:
    atmProfilePcr.setUnits("cells per second")


class _AtmProfileCdvt_Type(Integer32):
    """Custom type atmProfileCdvt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_AtmProfileCdvt_Type.__name__ = "Integer32"
_AtmProfileCdvt_Object = MibTableColumn
atmProfileCdvt = _AtmProfileCdvt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 3, 2, 1, 5),
    _AtmProfileCdvt_Type()
)
atmProfileCdvt.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmProfileCdvt.setStatus("current")
if mibBuilder.loadTexts:
    atmProfileCdvt.setUnits("cell")
_AtmProfileScrMcr_Type = Unsigned32
_AtmProfileScrMcr_Object = MibTableColumn
atmProfileScrMcr = _AtmProfileScrMcr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 3, 2, 1, 6),
    _AtmProfileScrMcr_Type()
)
atmProfileScrMcr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmProfileScrMcr.setStatus("current")
if mibBuilder.loadTexts:
    atmProfileScrMcr.setUnits("cells per second")


class _AtmProfileBt_Type(Integer32):
    """Custom type atmProfileBt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_AtmProfileBt_Type.__name__ = "Integer32"
_AtmProfileBt_Object = MibTableColumn
atmProfileBt = _AtmProfileBt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 3, 2, 1, 7),
    _AtmProfileBt_Type()
)
atmProfileBt.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmProfileBt.setStatus("current")
if mibBuilder.loadTexts:
    atmProfileBt.setUnits("cell")
_AtmProfileRowStatus_Type = RowStatus
_AtmProfileRowStatus_Object = MibTableColumn
atmProfileRowStatus = _AtmProfileRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 3, 2, 1, 8),
    _AtmProfileRowStatus_Type()
)
atmProfileRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmProfileRowStatus.setStatus("current")
_Profsvr_ObjectIdentity = ObjectIdentity
profsvr = _Profsvr_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 4)
)


class _ProfileServerMode_Type(Integer32):
    """Custom type profileServerMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("server", 1),
          ("client", 2))
    )


_ProfileServerMode_Type.__name__ = "Integer32"
_ProfileServerMode_Object = MibScalar
profileServerMode = _ProfileServerMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 4, 1),
    _ProfileServerMode_Type()
)
profileServerMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    profileServerMode.setStatus("current")
_ProfileServerIp_Type = IpAddress
_ProfileServerIp_Object = MibScalar
profileServerIp = _ProfileServerIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 4, 2),
    _ProfileServerIp_Type()
)
profileServerIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    profileServerIp.setStatus("current")
_ProfsvrClientTable_Object = MibTable
profsvrClientTable = _ProfsvrClientTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 4, 3)
)
if mibBuilder.loadTexts:
    profsvrClientTable.setStatus("current")
_ProfsvrClientEntry_Object = MibTableRow
profsvrClientEntry = _ProfsvrClientEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 4, 3, 1)
)
profsvrClientEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "profsvrClientIp"),
)
if mibBuilder.loadTexts:
    profsvrClientEntry.setStatus("current")
_ProfsvrClientIp_Type = IpAddress
_ProfsvrClientIp_Object = MibTableColumn
profsvrClientIp = _ProfsvrClientIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 4, 3, 1, 1),
    _ProfsvrClientIp_Type()
)
profsvrClientIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    profsvrClientIp.setStatus("current")


class _ProfsvrClientType_Type(Integer32):
    """Custom type profsvrClientType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("nodelete", 1),
          ("delete", 2))
    )


_ProfsvrClientType_Type.__name__ = "Integer32"
_ProfsvrClientType_Object = MibTableColumn
profsvrClientType = _ProfsvrClientType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 4, 3, 1, 2),
    _ProfsvrClientType_Type()
)
profsvrClientType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    profsvrClientType.setStatus("current")
_ProfsvrClientRowStatus_Type = RowStatus
_ProfsvrClientRowStatus_Object = MibTableColumn
profsvrClientRowStatus = _ProfsvrClientRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 4, 3, 1, 3),
    _ProfsvrClientRowStatus_Type()
)
profsvrClientRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    profsvrClientRowStatus.setStatus("current")
_ProfileServerSync_Type = Integer32
_ProfileServerSync_Object = MibScalar
profileServerSync = _ProfileServerSync_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 4, 4),
    _ProfileServerSync_Type()
)
profileServerSync.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    profileServerSync.setStatus("current")
_AclProfile_ObjectIdentity = ObjectIdentity
aclProfile = _AclProfile_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5)
)
_AclProfileTable_Object = MibTable
aclProfileTable = _AclProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1)
)
if mibBuilder.loadTexts:
    aclProfileTable.setStatus("current")
_AclProfileEntry_Object = MibTableRow
aclProfileEntry = _AclProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1)
)
aclProfileEntry.setIndexNames(
    (1, "ZYXEL-IES5000-MIB", "aclProfileRuleName"),
)
if mibBuilder.loadTexts:
    aclProfileEntry.setStatus("current")
_AclProfileRuleName_Type = DisplayString
_AclProfileRuleName_Object = MibTableColumn
aclProfileRuleName = _AclProfileRuleName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 1),
    _AclProfileRuleName_Type()
)
aclProfileRuleName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclProfileRuleName.setStatus("current")
_AclProfileRuleNumber_Type = Integer32
_AclProfileRuleNumber_Object = MibTableColumn
aclProfileRuleNumber = _AclProfileRuleNumber_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 2),
    _AclProfileRuleNumber_Type()
)
aclProfileRuleNumber.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileRuleNumber.setStatus("current")
_AclProfileActionNumber_Type = Integer32
_AclProfileActionNumber_Object = MibTableColumn
aclProfileActionNumber = _AclProfileActionNumber_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 3),
    _AclProfileActionNumber_Type()
)
aclProfileActionNumber.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileActionNumber.setStatus("current")
_AclProfileRuleParamMask_Type = Integer32
_AclProfileRuleParamMask_Object = MibTableColumn
aclProfileRuleParamMask = _AclProfileRuleParamMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 4),
    _AclProfileRuleParamMask_Type()
)
aclProfileRuleParamMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileRuleParamMask.setStatus("current")


class _AclProfileRuleEtype_Type(Integer32):
    """Custom type aclProfileRuleEtype based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_AclProfileRuleEtype_Type.__name__ = "Integer32"
_AclProfileRuleEtype_Object = MibTableColumn
aclProfileRuleEtype = _AclProfileRuleEtype_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 5),
    _AclProfileRuleEtype_Type()
)
aclProfileRuleEtype.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileRuleEtype.setStatus("current")


class _AclProfileRuleVid_Type(Integer32):
    """Custom type aclProfileRuleVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_AclProfileRuleVid_Type.__name__ = "Integer32"
_AclProfileRuleVid_Object = MibTableColumn
aclProfileRuleVid = _AclProfileRuleVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 6),
    _AclProfileRuleVid_Type()
)
aclProfileRuleVid.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileRuleVid.setStatus("current")
_AclProfileRuleSmac_Type = PhysAddress
_AclProfileRuleSmac_Object = MibTableColumn
aclProfileRuleSmac = _AclProfileRuleSmac_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 7),
    _AclProfileRuleSmac_Type()
)
aclProfileRuleSmac.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileRuleSmac.setStatus("current")
_AclProfileRuleDmac_Type = PhysAddress
_AclProfileRuleDmac_Object = MibTableColumn
aclProfileRuleDmac = _AclProfileRuleDmac_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 8),
    _AclProfileRuleDmac_Type()
)
aclProfileRuleDmac.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileRuleDmac.setStatus("current")


class _AclProfileRulePriority_Type(Integer32):
    """Custom type aclProfileRulePriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_AclProfileRulePriority_Type.__name__ = "Integer32"
_AclProfileRulePriority_Object = MibTableColumn
aclProfileRulePriority = _AclProfileRulePriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 9),
    _AclProfileRulePriority_Type()
)
aclProfileRulePriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileRulePriority.setStatus("current")


class _AclProfileRuleProtocol_Type(Integer32):
    """Custom type aclProfileRuleProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_AclProfileRuleProtocol_Type.__name__ = "Integer32"
_AclProfileRuleProtocol_Object = MibTableColumn
aclProfileRuleProtocol = _AclProfileRuleProtocol_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 10),
    _AclProfileRuleProtocol_Type()
)
aclProfileRuleProtocol.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileRuleProtocol.setStatus("current")
_AclProfileRuleSrcIP_Type = IpAddress
_AclProfileRuleSrcIP_Object = MibTableColumn
aclProfileRuleSrcIP = _AclProfileRuleSrcIP_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 11),
    _AclProfileRuleSrcIP_Type()
)
aclProfileRuleSrcIP.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileRuleSrcIP.setStatus("current")


class _AclProfileRuleSrcIPMask_Type(Integer32):
    """Custom type aclProfileRuleSrcIPMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32),
    )


_AclProfileRuleSrcIPMask_Type.__name__ = "Integer32"
_AclProfileRuleSrcIPMask_Object = MibTableColumn
aclProfileRuleSrcIPMask = _AclProfileRuleSrcIPMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 12),
    _AclProfileRuleSrcIPMask_Type()
)
aclProfileRuleSrcIPMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileRuleSrcIPMask.setStatus("current")
_AclProfileRuleDestIP_Type = IpAddress
_AclProfileRuleDestIP_Object = MibTableColumn
aclProfileRuleDestIP = _AclProfileRuleDestIP_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 13),
    _AclProfileRuleDestIP_Type()
)
aclProfileRuleDestIP.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileRuleDestIP.setStatus("current")


class _AclProfileRuleDestIPMask_Type(Integer32):
    """Custom type aclProfileRuleDestIPMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32),
    )


_AclProfileRuleDestIPMask_Type.__name__ = "Integer32"
_AclProfileRuleDestIPMask_Object = MibTableColumn
aclProfileRuleDestIPMask = _AclProfileRuleDestIPMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 14),
    _AclProfileRuleDestIPMask_Type()
)
aclProfileRuleDestIPMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileRuleDestIPMask.setStatus("current")


class _AclProfileRuleStartTos_Type(Integer32):
    """Custom type aclProfileRuleStartTos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_AclProfileRuleStartTos_Type.__name__ = "Integer32"
_AclProfileRuleStartTos_Object = MibTableColumn
aclProfileRuleStartTos = _AclProfileRuleStartTos_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 15),
    _AclProfileRuleStartTos_Type()
)
aclProfileRuleStartTos.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileRuleStartTos.setStatus("current")


class _AclProfileRuleEndTos_Type(Integer32):
    """Custom type aclProfileRuleEndTos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_AclProfileRuleEndTos_Type.__name__ = "Integer32"
_AclProfileRuleEndTos_Object = MibTableColumn
aclProfileRuleEndTos = _AclProfileRuleEndTos_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 16),
    _AclProfileRuleEndTos_Type()
)
aclProfileRuleEndTos.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileRuleEndTos.setStatus("current")


class _AclProfileRuleSrcStartPort_Type(Integer32):
    """Custom type aclProfileRuleSrcStartPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_AclProfileRuleSrcStartPort_Type.__name__ = "Integer32"
_AclProfileRuleSrcStartPort_Object = MibTableColumn
aclProfileRuleSrcStartPort = _AclProfileRuleSrcStartPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 17),
    _AclProfileRuleSrcStartPort_Type()
)
aclProfileRuleSrcStartPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileRuleSrcStartPort.setStatus("current")


class _AclProfileRuleSrcEndPort_Type(Integer32):
    """Custom type aclProfileRuleSrcEndPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_AclProfileRuleSrcEndPort_Type.__name__ = "Integer32"
_AclProfileRuleSrcEndPort_Object = MibTableColumn
aclProfileRuleSrcEndPort = _AclProfileRuleSrcEndPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 18),
    _AclProfileRuleSrcEndPort_Type()
)
aclProfileRuleSrcEndPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileRuleSrcEndPort.setStatus("current")


class _AclProfileRuleDestStartPort_Type(Integer32):
    """Custom type aclProfileRuleDestStartPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_AclProfileRuleDestStartPort_Type.__name__ = "Integer32"
_AclProfileRuleDestStartPort_Object = MibTableColumn
aclProfileRuleDestStartPort = _AclProfileRuleDestStartPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 19),
    _AclProfileRuleDestStartPort_Type()
)
aclProfileRuleDestStartPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileRuleDestStartPort.setStatus("current")


class _AclProfileRuleDestEndPort_Type(Integer32):
    """Custom type aclProfileRuleDestEndPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_AclProfileRuleDestEndPort_Type.__name__ = "Integer32"
_AclProfileRuleDestEndPort_Object = MibTableColumn
aclProfileRuleDestEndPort = _AclProfileRuleDestEndPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 20),
    _AclProfileRuleDestEndPort_Type()
)
aclProfileRuleDestEndPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileRuleDestEndPort.setStatus("current")


class _AclProfileActionRate_Type(Integer32):
    """Custom type aclProfileActionRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100032),
    )


_AclProfileActionRate_Type.__name__ = "Integer32"
_AclProfileActionRate_Object = MibTableColumn
aclProfileActionRate = _AclProfileActionRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 21),
    _AclProfileActionRate_Type()
)
aclProfileActionRate.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileActionRate.setStatus("current")


class _AclProfileActionrvlan_Type(Integer32):
    """Custom type aclProfileActionrvlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_AclProfileActionrvlan_Type.__name__ = "Integer32"
_AclProfileActionrvlan_Object = MibTableColumn
aclProfileActionrvlan = _AclProfileActionrvlan_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 22),
    _AclProfileActionrvlan_Type()
)
aclProfileActionrvlan.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileActionrvlan.setStatus("current")


class _AclProfileActionrpri_Type(Integer32):
    """Custom type aclProfileActionrpri based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_AclProfileActionrpri_Type.__name__ = "Integer32"
_AclProfileActionrpri_Object = MibTableColumn
aclProfileActionrpri = _AclProfileActionrpri_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 23),
    _AclProfileActionrpri_Type()
)
aclProfileActionrpri.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileActionrpri.setStatus("current")
_AclProfileRowStatus_Type = RowStatus
_AclProfileRowStatus_Object = MibTableColumn
aclProfileRowStatus = _AclProfileRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 24),
    _AclProfileRowStatus_Type()
)
aclProfileRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileRowStatus.setStatus("current")
_AclProfileRuleSip_Type = IpAddress
_AclProfileRuleSip_Object = MibTableColumn
aclProfileRuleSip = _AclProfileRuleSip_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 25),
    _AclProfileRuleSip_Type()
)
aclProfileRuleSip.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileRuleSip.setStatus("current")
_AclProfileRuleDip_Type = IpAddress
_AclProfileRuleDip_Object = MibTableColumn
aclProfileRuleDip = _AclProfileRuleDip_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 26),
    _AclProfileRuleDip_Type()
)
aclProfileRuleDip.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileRuleDip.setStatus("current")


class _AclProfileRuleSport_Type(Integer32):
    """Custom type aclProfileRuleSport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_AclProfileRuleSport_Type.__name__ = "Integer32"
_AclProfileRuleSport_Object = MibTableColumn
aclProfileRuleSport = _AclProfileRuleSport_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 27),
    _AclProfileRuleSport_Type()
)
aclProfileRuleSport.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileRuleSport.setStatus("current")


class _AclProfileRuleDport_Type(Integer32):
    """Custom type aclProfileRuleDport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_AclProfileRuleDport_Type.__name__ = "Integer32"
_AclProfileRuleDport_Object = MibTableColumn
aclProfileRuleDport = _AclProfileRuleDport_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 28),
    _AclProfileRuleDport_Type()
)
aclProfileRuleDport.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileRuleDport.setStatus("current")
_AclProfileRuleSrcIp6_Type = InetAddress
_AclProfileRuleSrcIp6_Object = MibTableColumn
aclProfileRuleSrcIp6 = _AclProfileRuleSrcIp6_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 29),
    _AclProfileRuleSrcIp6_Type()
)
aclProfileRuleSrcIp6.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileRuleSrcIp6.setStatus("current")
_AclProfileRuleDstIp6_Type = InetAddress
_AclProfileRuleDstIp6_Object = MibTableColumn
aclProfileRuleDstIp6 = _AclProfileRuleDstIp6_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 30),
    _AclProfileRuleDstIp6_Type()
)
aclProfileRuleDstIp6.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileRuleDstIp6.setStatus("current")
_AclProfileRuleSip6_Type = InetAddress
_AclProfileRuleSip6_Object = MibTableColumn
aclProfileRuleSip6 = _AclProfileRuleSip6_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 31),
    _AclProfileRuleSip6_Type()
)
aclProfileRuleSip6.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileRuleSip6.setStatus("current")
_AclProfileRuleDip6_Type = InetAddress
_AclProfileRuleDip6_Object = MibTableColumn
aclProfileRuleDip6 = _AclProfileRuleDip6_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 5, 1, 1, 32),
    _AclProfileRuleDip6_Type()
)
aclProfileRuleDip6.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    aclProfileRuleDip6.setStatus("current")
_VdslProfile_ObjectIdentity = ObjectIdentity
vdslProfile = _VdslProfile_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 6)
)
_MaxNumOfVdslLineProfiles_Type = Integer32
_MaxNumOfVdslLineProfiles_Object = MibScalar
maxNumOfVdslLineProfiles = _MaxNumOfVdslLineProfiles_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 6, 1),
    _MaxNumOfVdslLineProfiles_Type()
)
maxNumOfVdslLineProfiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfVdslLineProfiles.setStatus("current")
_MaxNumOfVdslAlarmProfiles_Type = Integer32
_MaxNumOfVdslAlarmProfiles_Object = MibScalar
maxNumOfVdslAlarmProfiles = _MaxNumOfVdslAlarmProfiles_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 6, 2),
    _MaxNumOfVdslAlarmProfiles_Type()
)
maxNumOfVdslAlarmProfiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfVdslAlarmProfiles.setStatus("current")
_VdslLineConfProfileExtendedTable_Object = MibTable
vdslLineConfProfileExtendedTable = _VdslLineConfProfileExtendedTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 6, 3)
)
if mibBuilder.loadTexts:
    vdslLineConfProfileExtendedTable.setStatus("current")
_VdslLineConfProfileExtendedEntry_Object = MibTableRow
vdslLineConfProfileExtendedEntry = _VdslLineConfProfileExtendedEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 6, 3, 1)
)
vdslLineConfProfileExtendedEntry.setIndexNames(
    (0, "VDSL-LINE-MIB", "vdslLineConfProfileName"),
)
if mibBuilder.loadTexts:
    vdslLineConfProfileExtendedEntry.setStatus("current")


class _Vdsl2LConfProfRaModeDs_Type(Integer32):
    """Custom type vdsl2LConfProfRaModeDs based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("manual", 1),
          ("raInit", 2),
          ("dynamicRa", 3))
    )


_Vdsl2LConfProfRaModeDs_Type.__name__ = "Integer32"
_Vdsl2LConfProfRaModeDs_Object = MibTableColumn
vdsl2LConfProfRaModeDs = _Vdsl2LConfProfRaModeDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 6, 3, 1, 1),
    _Vdsl2LConfProfRaModeDs_Type()
)
vdsl2LConfProfRaModeDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LConfProfRaModeDs.setStatus("current")


class _Vdsl2LConfProfRaModeUs_Type(Integer32):
    """Custom type vdsl2LConfProfRaModeUs based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("manual", 1),
          ("raInit", 2),
          ("dynamicRa", 3))
    )


_Vdsl2LConfProfRaModeUs_Type.__name__ = "Integer32"
_Vdsl2LConfProfRaModeUs_Object = MibTableColumn
vdsl2LConfProfRaModeUs = _Vdsl2LConfProfRaModeUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 6, 3, 1, 2),
    _Vdsl2LConfProfRaModeUs_Type()
)
vdsl2LConfProfRaModeUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LConfProfRaModeUs.setStatus("current")


class _Vdsl2LConfProfRaUsNrmDs_Type(Unsigned32):
    """Custom type vdsl2LConfProfRaUsNrmDs based on Unsigned32"""
    defaultValue = 10

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 310),
    )


_Vdsl2LConfProfRaUsNrmDs_Type.__name__ = "Unsigned32"
_Vdsl2LConfProfRaUsNrmDs_Object = MibTableColumn
vdsl2LConfProfRaUsNrmDs = _Vdsl2LConfProfRaUsNrmDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 6, 3, 1, 3),
    _Vdsl2LConfProfRaUsNrmDs_Type()
)
vdsl2LConfProfRaUsNrmDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LConfProfRaUsNrmDs.setStatus("current")
if mibBuilder.loadTexts:
    vdsl2LConfProfRaUsNrmDs.setUnits("0.1 dB")


class _Vdsl2LConfProfRaUsNrmUs_Type(Unsigned32):
    """Custom type vdsl2LConfProfRaUsNrmUs based on Unsigned32"""
    defaultValue = 10

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 310),
    )


_Vdsl2LConfProfRaUsNrmUs_Type.__name__ = "Unsigned32"
_Vdsl2LConfProfRaUsNrmUs_Object = MibTableColumn
vdsl2LConfProfRaUsNrmUs = _Vdsl2LConfProfRaUsNrmUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 6, 3, 1, 4),
    _Vdsl2LConfProfRaUsNrmUs_Type()
)
vdsl2LConfProfRaUsNrmUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LConfProfRaUsNrmUs.setStatus("current")
if mibBuilder.loadTexts:
    vdsl2LConfProfRaUsNrmUs.setUnits("0.1 dB")


class _Vdsl2LConfProfRaDsNrmDs_Type(Unsigned32):
    """Custom type vdsl2LConfProfRaDsNrmDs based on Unsigned32"""
    defaultValue = 10

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 310),
    )


_Vdsl2LConfProfRaDsNrmDs_Type.__name__ = "Unsigned32"
_Vdsl2LConfProfRaDsNrmDs_Object = MibTableColumn
vdsl2LConfProfRaDsNrmDs = _Vdsl2LConfProfRaDsNrmDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 6, 3, 1, 5),
    _Vdsl2LConfProfRaDsNrmDs_Type()
)
vdsl2LConfProfRaDsNrmDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LConfProfRaDsNrmDs.setStatus("current")
if mibBuilder.loadTexts:
    vdsl2LConfProfRaDsNrmDs.setUnits("0.1 dB")


class _Vdsl2LConfProfRaDsNrmUs_Type(Unsigned32):
    """Custom type vdsl2LConfProfRaDsNrmUs based on Unsigned32"""
    defaultValue = 10

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 310),
    )


_Vdsl2LConfProfRaDsNrmUs_Type.__name__ = "Unsigned32"
_Vdsl2LConfProfRaDsNrmUs_Object = MibTableColumn
vdsl2LConfProfRaDsNrmUs = _Vdsl2LConfProfRaDsNrmUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 6, 3, 1, 6),
    _Vdsl2LConfProfRaDsNrmUs_Type()
)
vdsl2LConfProfRaDsNrmUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LConfProfRaDsNrmUs.setStatus("current")
if mibBuilder.loadTexts:
    vdsl2LConfProfRaDsNrmUs.setUnits("0.1 dB")
_Vdsl2LConfProfProfileName_Type = DisplayString
_Vdsl2LConfProfProfileName_Object = MibTableColumn
vdsl2LConfProfProfileName = _Vdsl2LConfProfProfileName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 6, 3, 1, 7),
    _Vdsl2LConfProfProfileName_Type()
)
vdsl2LConfProfProfileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdsl2LConfProfProfileName.setStatus("current")
_VdslLineAlarmConfProfileExtendedTable_Object = MibTable
vdslLineAlarmConfProfileExtendedTable = _VdslLineAlarmConfProfileExtendedTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 6, 4)
)
if mibBuilder.loadTexts:
    vdslLineAlarmConfProfileExtendedTable.setStatus("current")
_VdslLineAlarmConfProfileExtendedEntry_Object = MibTableRow
vdslLineAlarmConfProfileExtendedEntry = _VdslLineAlarmConfProfileExtendedEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 6, 4, 1)
)
vdslLineAlarmConfProfileExtendedEntry.setIndexNames(
    (0, "VDSL-LINE-MIB", "vdslLineAlarmConfProfileName"),
)
if mibBuilder.loadTexts:
    vdslLineAlarmConfProfileExtendedEntry.setStatus("current")
_VdslLAlarmConfProfProfileName_Type = DisplayString
_VdslLAlarmConfProfProfileName_Object = MibTableColumn
vdslLAlarmConfProfProfileName = _VdslLAlarmConfProfProfileName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 6, 4, 1, 1),
    _VdslLAlarmConfProfProfileName_Type()
)
vdslLAlarmConfProfProfileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLAlarmConfProfProfileName.setStatus("current")
_VoipProfile_ObjectIdentity = ObjectIdentity
voipProfile = _VoipProfile_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7)
)
_SipProfile_ObjectIdentity = ObjectIdentity
sipProfile = _SipProfile_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1)
)
_MaxNumOfSipProfiles_Type = Integer32
_MaxNumOfSipProfiles_Object = MibScalar
maxNumOfSipProfiles = _MaxNumOfSipProfiles_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 1),
    _MaxNumOfSipProfiles_Type()
)
maxNumOfSipProfiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfSipProfiles.setStatus("current")
_SipProfileTable_Object = MibTable
sipProfileTable = _SipProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 2)
)
if mibBuilder.loadTexts:
    sipProfileTable.setStatus("current")
_SipProfileEntry_Object = MibTableRow
sipProfileEntry = _SipProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 2, 1)
)
sipProfileEntry.setIndexNames(
    (1, "ZYXEL-IES5000-MIB", "sipProfileName"),
)
if mibBuilder.loadTexts:
    sipProfileEntry.setStatus("current")


class _SipProfileName_Type(DisplayString):
    """Custom type sipProfileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_SipProfileName_Type.__name__ = "DisplayString"
_SipProfileName_Object = MibTableColumn
sipProfileName = _SipProfileName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 2, 1, 1),
    _SipProfileName_Type()
)
sipProfileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sipProfileName.setStatus("current")
_SipProfileSipSvr_Type = DisplayString
_SipProfileSipSvr_Object = MibTableColumn
sipProfileSipSvr = _SipProfileSipSvr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 2, 1, 2),
    _SipProfileSipSvr_Type()
)
sipProfileSipSvr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipProfileSipSvr.setStatus("current")
_SipProfileRegSvr_Type = DisplayString
_SipProfileRegSvr_Object = MibTableColumn
sipProfileRegSvr = _SipProfileRegSvr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 2, 1, 3),
    _SipProfileRegSvr_Type()
)
sipProfileRegSvr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipProfileRegSvr.setStatus("current")
_SipProfileProxySvr_Type = DisplayString
_SipProfileProxySvr_Object = MibTableColumn
sipProfileProxySvr = _SipProfileProxySvr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 2, 1, 4),
    _SipProfileProxySvr_Type()
)
sipProfileProxySvr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipProfileProxySvr.setStatus("current")


class _SipProfileSipPort_Type(Integer32):
    """Custom type sipProfileSipPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1025, 65535),
    )


_SipProfileSipPort_Type.__name__ = "Integer32"
_SipProfileSipPort_Object = MibTableColumn
sipProfileSipPort = _SipProfileSipPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 2, 1, 5),
    _SipProfileSipPort_Type()
)
sipProfileSipPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipProfileSipPort.setStatus("current")


class _SipProfileRegSvrPort_Type(Integer32):
    """Custom type sipProfileRegSvrPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1025, 65535),
    )


_SipProfileRegSvrPort_Type.__name__ = "Integer32"
_SipProfileRegSvrPort_Object = MibTableColumn
sipProfileRegSvrPort = _SipProfileRegSvrPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 2, 1, 6),
    _SipProfileRegSvrPort_Type()
)
sipProfileRegSvrPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipProfileRegSvrPort.setStatus("current")


class _SipProfileProxySvrPort_Type(Integer32):
    """Custom type sipProfileProxySvrPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1025, 65535),
    )


_SipProfileProxySvrPort_Type.__name__ = "Integer32"
_SipProfileProxySvrPort_Object = MibTableColumn
sipProfileProxySvrPort = _SipProfileProxySvrPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 2, 1, 7),
    _SipProfileProxySvrPort_Type()
)
sipProfileProxySvrPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipProfileProxySvrPort.setStatus("current")


class _SipProfileUriType_Type(Integer32):
    """Custom type sipProfileUriType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("use-sip-uri", 1),
          ("use-tel-uri", 2))
    )


_SipProfileUriType_Type.__name__ = "Integer32"
_SipProfileUriType_Object = MibTableColumn
sipProfileUriType = _SipProfileUriType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 2, 1, 8),
    _SipProfileUriType_Type()
)
sipProfileUriType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipProfileUriType.setStatus("current")


class _SipProfilePbit_Type(Integer32):
    """Custom type sipProfilePbit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_SipProfilePbit_Type.__name__ = "Integer32"
_SipProfilePbit_Object = MibTableColumn
sipProfilePbit = _SipProfilePbit_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 2, 1, 9),
    _SipProfilePbit_Type()
)
sipProfilePbit.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipProfilePbit.setStatus("current")


class _SipProfileDscp_Type(Integer32):
    """Custom type sipProfileDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_SipProfileDscp_Type.__name__ = "Integer32"
_SipProfileDscp_Object = MibTableColumn
sipProfileDscp = _SipProfileDscp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 2, 1, 10),
    _SipProfileDscp_Type()
)
sipProfileDscp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipProfileDscp.setStatus("current")


class _SipProfileKeepAlive_Type(Integer32):
    """Custom type sipProfileKeepAlive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_SipProfileKeepAlive_Type.__name__ = "Integer32"
_SipProfileKeepAlive_Object = MibTableColumn
sipProfileKeepAlive = _SipProfileKeepAlive_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 2, 1, 11),
    _SipProfileKeepAlive_Type()
)
sipProfileKeepAlive.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipProfileKeepAlive.setStatus("current")


class _SipProfileSe_Type(Integer32):
    """Custom type sipProfileSe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(90, 65535),
    )


_SipProfileSe_Type.__name__ = "Integer32"
_SipProfileSe_Object = MibTableColumn
sipProfileSe = _SipProfileSe_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 2, 1, 12),
    _SipProfileSe_Type()
)
sipProfileSe.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipProfileSe.setStatus("current")
if mibBuilder.loadTexts:
    sipProfileSe.setUnits("second")


class _SipProfilePrack_Type(Integer32):
    """Custom type sipProfilePrack based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_SipProfilePrack_Type.__name__ = "Integer32"
_SipProfilePrack_Object = MibTableColumn
sipProfilePrack = _SipProfilePrack_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 2, 1, 13),
    _SipProfilePrack_Type()
)
sipProfilePrack.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipProfilePrack.setStatus("current")
_SipProfileRowStatus_Type = RowStatus
_SipProfileRowStatus_Object = MibTableColumn
sipProfileRowStatus = _SipProfileRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 2, 1, 14),
    _SipProfileRowStatus_Type()
)
sipProfileRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipProfileRowStatus.setStatus("current")
_SipProfileReSend_Type = Integer32
_SipProfileReSend_Object = MibTableColumn
sipProfileReSend = _SipProfileReSend_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 2, 1, 15),
    _SipProfileReSend_Type()
)
sipProfileReSend.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipProfileReSend.setStatus("current")


class _SipProfileNonceCountKeep_Type(Integer32):
    """Custom type sipProfileNonceCountKeep based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_SipProfileNonceCountKeep_Type.__name__ = "Integer32"
_SipProfileNonceCountKeep_Object = MibTableColumn
sipProfileNonceCountKeep = _SipProfileNonceCountKeep_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 2, 1, 16),
    _SipProfileNonceCountKeep_Type()
)
sipProfileNonceCountKeep.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipProfileNonceCountKeep.setStatus("current")


class _SipProfileQopQuote_Type(Integer32):
    """Custom type sipProfileQopQuote based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_SipProfileQopQuote_Type.__name__ = "Integer32"
_SipProfileQopQuote_Object = MibTableColumn
sipProfileQopQuote = _SipProfileQopQuote_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 2, 1, 17),
    _SipProfileQopQuote_Type()
)
sipProfileQopQuote.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipProfileQopQuote.setStatus("current")


class _SipProfileRefertobracket_Type(Integer32):
    """Custom type sipProfileRefertobracket based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_SipProfileRefertobracket_Type.__name__ = "Integer32"
_SipProfileRefertobracket_Object = MibTableColumn
sipProfileRefertobracket = _SipProfileRefertobracket_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 2, 1, 18),
    _SipProfileRefertobracket_Type()
)
sipProfileRefertobracket.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipProfileRefertobracket.setStatus("current")


class _SipProfileRefertodot_Type(Integer32):
    """Custom type sipProfileRefertodot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dot", 1),
          ("hex", 2))
    )


_SipProfileRefertodot_Type.__name__ = "Integer32"
_SipProfileRefertodot_Object = MibTableColumn
sipProfileRefertodot = _SipProfileRefertodot_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 2, 1, 19),
    _SipProfileRefertodot_Type()
)
sipProfileRefertodot.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipProfileRefertodot.setStatus("current")
_SipProfileRtpStartPort_Type = Integer32
_SipProfileRtpStartPort_Object = MibTableColumn
sipProfileRtpStartPort = _SipProfileRtpStartPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 2, 1, 20),
    _SipProfileRtpStartPort_Type()
)
sipProfileRtpStartPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipProfileRtpStartPort.setStatus("current")
_SipProfileRtpEndPort_Type = Integer32
_SipProfileRtpEndPort_Object = MibTableColumn
sipProfileRtpEndPort = _SipProfileRtpEndPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 2, 1, 21),
    _SipProfileRtpEndPort_Type()
)
sipProfileRtpEndPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipProfileRtpEndPort.setStatus("current")
_MaxNumOfSipCallSvcProfiles_Type = Integer32
_MaxNumOfSipCallSvcProfiles_Object = MibScalar
maxNumOfSipCallSvcProfiles = _MaxNumOfSipCallSvcProfiles_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 3),
    _MaxNumOfSipCallSvcProfiles_Type()
)
maxNumOfSipCallSvcProfiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfSipCallSvcProfiles.setStatus("current")
_SipCallSvcProfileTable_Object = MibTable
sipCallSvcProfileTable = _SipCallSvcProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 4)
)
if mibBuilder.loadTexts:
    sipCallSvcProfileTable.setStatus("current")
_SipCallSvcProfileEntry_Object = MibTableRow
sipCallSvcProfileEntry = _SipCallSvcProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 4, 1)
)
sipCallSvcProfileEntry.setIndexNames(
    (1, "ZYXEL-IES5000-MIB", "sipCallSvcProfileName"),
)
if mibBuilder.loadTexts:
    sipCallSvcProfileEntry.setStatus("current")


class _SipCallSvcProfileName_Type(DisplayString):
    """Custom type sipCallSvcProfileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_SipCallSvcProfileName_Type.__name__ = "DisplayString"
_SipCallSvcProfileName_Object = MibTableColumn
sipCallSvcProfileName = _SipCallSvcProfileName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 4, 1, 1),
    _SipCallSvcProfileName_Type()
)
sipCallSvcProfileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sipCallSvcProfileName.setStatus("current")


class _SipCallSvcProfilePasswdOn_Type(Integer32):
    """Custom type sipCallSvcProfilePasswdOn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_SipCallSvcProfilePasswdOn_Type.__name__ = "Integer32"
_SipCallSvcProfilePasswdOn_Object = MibTableColumn
sipCallSvcProfilePasswdOn = _SipCallSvcProfilePasswdOn_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 4, 1, 2),
    _SipCallSvcProfilePasswdOn_Type()
)
sipCallSvcProfilePasswdOn.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipCallSvcProfilePasswdOn.setStatus("current")


class _SipCallSvcProfilePasswd_Type(DisplayString):
    """Custom type sipCallSvcProfilePasswd based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_SipCallSvcProfilePasswd_Type.__name__ = "DisplayString"
_SipCallSvcProfilePasswd_Object = MibTableColumn
sipCallSvcProfilePasswd = _SipCallSvcProfilePasswd_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 4, 1, 3),
    _SipCallSvcProfilePasswd_Type()
)
sipCallSvcProfilePasswd.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipCallSvcProfilePasswd.setStatus("current")


class _SipCallSvcProfileNumberPlanOn_Type(Integer32):
    """Custom type sipCallSvcProfileNumberPlanOn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_SipCallSvcProfileNumberPlanOn_Type.__name__ = "Integer32"
_SipCallSvcProfileNumberPlanOn_Object = MibTableColumn
sipCallSvcProfileNumberPlanOn = _SipCallSvcProfileNumberPlanOn_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 4, 1, 4),
    _SipCallSvcProfileNumberPlanOn_Type()
)
sipCallSvcProfileNumberPlanOn.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipCallSvcProfileNumberPlanOn.setStatus("current")


class _SipCallSvcProfileNumberPlanCc_Type(DisplayString):
    """Custom type sipCallSvcProfileNumberPlanCc based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 7),
    )


_SipCallSvcProfileNumberPlanCc_Type.__name__ = "DisplayString"
_SipCallSvcProfileNumberPlanCc_Object = MibTableColumn
sipCallSvcProfileNumberPlanCc = _SipCallSvcProfileNumberPlanCc_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 4, 1, 5),
    _SipCallSvcProfileNumberPlanCc_Type()
)
sipCallSvcProfileNumberPlanCc.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipCallSvcProfileNumberPlanCc.setStatus("current")


class _SipCallSvcProfileNumberPlanNdc_Type(DisplayString):
    """Custom type sipCallSvcProfileNumberPlanNdc based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 7),
    )


_SipCallSvcProfileNumberPlanNdc_Type.__name__ = "DisplayString"
_SipCallSvcProfileNumberPlanNdc_Object = MibTableColumn
sipCallSvcProfileNumberPlanNdc = _SipCallSvcProfileNumberPlanNdc_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 4, 1, 6),
    _SipCallSvcProfileNumberPlanNdc_Type()
)
sipCallSvcProfileNumberPlanNdc.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipCallSvcProfileNumberPlanNdc.setStatus("current")


class _SipCallSvcProfileNumberPlanTable_Type(DisplayString):
    """Custom type sipCallSvcProfileNumberPlanTable based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_SipCallSvcProfileNumberPlanTable_Type.__name__ = "DisplayString"
_SipCallSvcProfileNumberPlanTable_Object = MibTableColumn
sipCallSvcProfileNumberPlanTable = _SipCallSvcProfileNumberPlanTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 4, 1, 7),
    _SipCallSvcProfileNumberPlanTable_Type()
)
sipCallSvcProfileNumberPlanTable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipCallSvcProfileNumberPlanTable.setStatus("current")
_SipCallSvcProfileStateMask_Type = Integer32
_SipCallSvcProfileStateMask_Object = MibTableColumn
sipCallSvcProfileStateMask = _SipCallSvcProfileStateMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 4, 1, 8),
    _SipCallSvcProfileStateMask_Type()
)
sipCallSvcProfileStateMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipCallSvcProfileStateMask.setStatus("current")


class _SipCallSvcProfileDtmf_Type(Integer32):
    """Custom type sipCallSvcProfileDtmf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("bypass", 1),
          ("rfc2833", 2),
          ("rfc2833like", 3),
          ("sipinfo", 4),
          ("plaintext", 5))
    )


_SipCallSvcProfileDtmf_Type.__name__ = "Integer32"
_SipCallSvcProfileDtmf_Object = MibTableColumn
sipCallSvcProfileDtmf = _SipCallSvcProfileDtmf_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 4, 1, 9),
    _SipCallSvcProfileDtmf_Type()
)
sipCallSvcProfileDtmf.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipCallSvcProfileDtmf.setStatus("current")


class _SipCallSvcProfileFax_Type(Integer32):
    """Custom type sipCallSvcProfileFax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("g711", 1),
          ("t38", 2),
          ("t38rtp", 3))
    )


_SipCallSvcProfileFax_Type.__name__ = "Integer32"
_SipCallSvcProfileFax_Object = MibTableColumn
sipCallSvcProfileFax = _SipCallSvcProfileFax_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 4, 1, 10),
    _SipCallSvcProfileFax_Type()
)
sipCallSvcProfileFax.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipCallSvcProfileFax.setStatus("current")
_SipCallSvcProfileRowStatus_Type = RowStatus
_SipCallSvcProfileRowStatus_Object = MibTableColumn
sipCallSvcProfileRowStatus = _SipCallSvcProfileRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 4, 1, 11),
    _SipCallSvcProfileRowStatus_Type()
)
sipCallSvcProfileRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipCallSvcProfileRowStatus.setStatus("current")


class _SipCallSvcProfileKeypattern_Type(DisplayString):
    """Custom type sipCallSvcProfileKeypattern based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_SipCallSvcProfileKeypattern_Type.__name__ = "DisplayString"
_SipCallSvcProfileKeypattern_Object = MibTableColumn
sipCallSvcProfileKeypattern = _SipCallSvcProfileKeypattern_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 4, 1, 12),
    _SipCallSvcProfileKeypattern_Type()
)
sipCallSvcProfileKeypattern.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipCallSvcProfileKeypattern.setStatus("current")


class _SipCallSvcProfileRegTime_Type(Integer32):
    """Custom type sipCallSvcProfileRegTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(120, 65535),
    )


_SipCallSvcProfileRegTime_Type.__name__ = "Integer32"
_SipCallSvcProfileRegTime_Object = MibTableColumn
sipCallSvcProfileRegTime = _SipCallSvcProfileRegTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 4, 1, 13),
    _SipCallSvcProfileRegTime_Type()
)
sipCallSvcProfileRegTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipCallSvcProfileRegTime.setStatus("current")
if mibBuilder.loadTexts:
    sipCallSvcProfileRegTime.setUnits("seconds")


class _SipCallSvcProfileFlash_Type(Integer32):
    """Custom type sipCallSvcProfileFlash based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("invite", 1),
          ("rfc2833", 2),
          ("rfc2833like", 3),
          ("sipinfo1", 4),
          ("sipinfo2", 5),
          ("sipinfo3", 6),
          ("sipinfo4", 7),
          ("sipinfo5", 8),
          ("sipinfo6", 9))
    )


_SipCallSvcProfileFlash_Type.__name__ = "Integer32"
_SipCallSvcProfileFlash_Object = MibTableColumn
sipCallSvcProfileFlash = _SipCallSvcProfileFlash_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 4, 1, 14),
    _SipCallSvcProfileFlash_Type()
)
sipCallSvcProfileFlash.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipCallSvcProfileFlash.setStatus("current")
_SipCallSvcProfileFlashPattern_Type = DisplayString
_SipCallSvcProfileFlashPattern_Object = MibTableColumn
sipCallSvcProfileFlashPattern = _SipCallSvcProfileFlashPattern_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 4, 1, 15),
    _SipCallSvcProfileFlashPattern_Type()
)
sipCallSvcProfileFlashPattern.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipCallSvcProfileFlashPattern.setStatus("current")
_SipCallSvcProfileReanswerTime_Type = Integer32
_SipCallSvcProfileReanswerTime_Object = MibTableColumn
sipCallSvcProfileReanswerTime = _SipCallSvcProfileReanswerTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 4, 1, 16),
    _SipCallSvcProfileReanswerTime_Type()
)
sipCallSvcProfileReanswerTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipCallSvcProfileReanswerTime.setStatus("current")
if mibBuilder.loadTexts:
    sipCallSvcProfileReanswerTime.setUnits("seconds")
_SipCallSvcProfileFirstDigit_Type = Integer32
_SipCallSvcProfileFirstDigit_Object = MibTableColumn
sipCallSvcProfileFirstDigit = _SipCallSvcProfileFirstDigit_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 4, 1, 17),
    _SipCallSvcProfileFirstDigit_Type()
)
sipCallSvcProfileFirstDigit.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipCallSvcProfileFirstDigit.setStatus("current")
_SipCallSvcProfileInterdigit_Type = Integer32
_SipCallSvcProfileInterdigit_Object = MibTableColumn
sipCallSvcProfileInterdigit = _SipCallSvcProfileInterdigit_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 4, 1, 18),
    _SipCallSvcProfileInterdigit_Type()
)
sipCallSvcProfileInterdigit.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipCallSvcProfileInterdigit.setStatus("current")
_SipCallSvcProfileLocalHelpTable_Object = MibTable
sipCallSvcProfileLocalHelpTable = _SipCallSvcProfileLocalHelpTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 5)
)
if mibBuilder.loadTexts:
    sipCallSvcProfileLocalHelpTable.setStatus("current")
_SipCallSvcProfileLocalHelpEntry_Object = MibTableRow
sipCallSvcProfileLocalHelpEntry = _SipCallSvcProfileLocalHelpEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 5, 1)
)
sipCallSvcProfileLocalHelpEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "sipCallSvcProfileName"),
    (0, "ZYXEL-IES5000-MIB", "sipCallSvcProfileLocalHelpIndex"),
)
if mibBuilder.loadTexts:
    sipCallSvcProfileLocalHelpEntry.setStatus("current")


class _SipCallSvcProfileLocalHelpIndex_Type(Integer32):
    """Custom type sipCallSvcProfileLocalHelpIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_SipCallSvcProfileLocalHelpIndex_Type.__name__ = "Integer32"
_SipCallSvcProfileLocalHelpIndex_Object = MibTableColumn
sipCallSvcProfileLocalHelpIndex = _SipCallSvcProfileLocalHelpIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 5, 1, 1),
    _SipCallSvcProfileLocalHelpIndex_Type()
)
sipCallSvcProfileLocalHelpIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sipCallSvcProfileLocalHelpIndex.setStatus("current")


class _SipCallSvcProfileLocalHelpTableName_Type(DisplayString):
    """Custom type sipCallSvcProfileLocalHelpTableName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_SipCallSvcProfileLocalHelpTableName_Type.__name__ = "DisplayString"
_SipCallSvcProfileLocalHelpTableName_Object = MibTableColumn
sipCallSvcProfileLocalHelpTableName = _SipCallSvcProfileLocalHelpTableName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 5, 1, 2),
    _SipCallSvcProfileLocalHelpTableName_Type()
)
sipCallSvcProfileLocalHelpTableName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sipCallSvcProfileLocalHelpTableName.setStatus("current")


class _SipCallSvcProfileLocalHelpTableTel_Type(DisplayString):
    """Custom type sipCallSvcProfileLocalHelpTableTel based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 15),
    )


_SipCallSvcProfileLocalHelpTableTel_Type.__name__ = "DisplayString"
_SipCallSvcProfileLocalHelpTableTel_Object = MibTableColumn
sipCallSvcProfileLocalHelpTableTel = _SipCallSvcProfileLocalHelpTableTel_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 5, 1, 3),
    _SipCallSvcProfileLocalHelpTableTel_Type()
)
sipCallSvcProfileLocalHelpTableTel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sipCallSvcProfileLocalHelpTableTel.setStatus("current")
_MaxNumOfSipDialPlanProfiles_Type = Integer32
_MaxNumOfSipDialPlanProfiles_Object = MibScalar
maxNumOfSipDialPlanProfiles = _MaxNumOfSipDialPlanProfiles_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 6),
    _MaxNumOfSipDialPlanProfiles_Type()
)
maxNumOfSipDialPlanProfiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfSipDialPlanProfiles.setStatus("current")
_SipDialPlanProfileTable_Object = MibTable
sipDialPlanProfileTable = _SipDialPlanProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 7)
)
if mibBuilder.loadTexts:
    sipDialPlanProfileTable.setStatus("current")
_SipDialPlanProfileEntry_Object = MibTableRow
sipDialPlanProfileEntry = _SipDialPlanProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 7, 1)
)
sipDialPlanProfileEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "sipDialPlanProfileName"),
    (0, "ZYXEL-IES5000-MIB", "sipDialPlanProfileIndex"),
)
if mibBuilder.loadTexts:
    sipDialPlanProfileEntry.setStatus("current")


class _SipDialPlanProfileName_Type(DisplayString):
    """Custom type sipDialPlanProfileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_SipDialPlanProfileName_Type.__name__ = "DisplayString"
_SipDialPlanProfileName_Object = MibTableColumn
sipDialPlanProfileName = _SipDialPlanProfileName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 7, 1, 1),
    _SipDialPlanProfileName_Type()
)
sipDialPlanProfileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sipDialPlanProfileName.setStatus("current")


class _SipDialPlanProfileIndex_Type(Integer32):
    """Custom type sipDialPlanProfileIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_SipDialPlanProfileIndex_Type.__name__ = "Integer32"
_SipDialPlanProfileIndex_Object = MibTableColumn
sipDialPlanProfileIndex = _SipDialPlanProfileIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 7, 1, 2),
    _SipDialPlanProfileIndex_Type()
)
sipDialPlanProfileIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sipDialPlanProfileIndex.setStatus("current")


class _SipDialPlanProfileDialPlanTableName_Type(DisplayString):
    """Custom type sipDialPlanProfileDialPlanTableName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_SipDialPlanProfileDialPlanTableName_Type.__name__ = "DisplayString"
_SipDialPlanProfileDialPlanTableName_Object = MibTableColumn
sipDialPlanProfileDialPlanTableName = _SipDialPlanProfileDialPlanTableName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 7, 1, 3),
    _SipDialPlanProfileDialPlanTableName_Type()
)
sipDialPlanProfileDialPlanTableName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sipDialPlanProfileDialPlanTableName.setStatus("current")
_SipDialPlanProfileRowStatus_Type = RowStatus
_SipDialPlanProfileRowStatus_Object = MibTableColumn
sipDialPlanProfileRowStatus = _SipDialPlanProfileRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 1, 7, 1, 4),
    _SipDialPlanProfileRowStatus_Type()
)
sipDialPlanProfileRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sipDialPlanProfileRowStatus.setStatus("current")
_MaxNumOfDspProfiles_Type = Integer32
_MaxNumOfDspProfiles_Object = MibScalar
maxNumOfDspProfiles = _MaxNumOfDspProfiles_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 2),
    _MaxNumOfDspProfiles_Type()
)
maxNumOfDspProfiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfDspProfiles.setStatus("current")
_DspProfileTable_Object = MibTable
dspProfileTable = _DspProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 3)
)
if mibBuilder.loadTexts:
    dspProfileTable.setStatus("current")
_DspProfileEntry_Object = MibTableRow
dspProfileEntry = _DspProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 3, 1)
)
dspProfileEntry.setIndexNames(
    (1, "ZYXEL-IES5000-MIB", "dspProfileName"),
)
if mibBuilder.loadTexts:
    dspProfileEntry.setStatus("current")


class _DspProfileName_Type(DisplayString):
    """Custom type dspProfileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_DspProfileName_Type.__name__ = "DisplayString"
_DspProfileName_Object = MibTableColumn
dspProfileName = _DspProfileName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 3, 1, 1),
    _DspProfileName_Type()
)
dspProfileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dspProfileName.setStatus("current")
_DspProfileCodec_Type = Integer32
_DspProfileCodec_Object = MibTableColumn
dspProfileCodec = _DspProfileCodec_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 3, 1, 2),
    _DspProfileCodec_Type()
)
dspProfileCodec.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dspProfileCodec.setStatus("current")


class _DspProfilePlayBufferMinDelay_Type(Integer32):
    """Custom type dspProfilePlayBufferMinDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 500),
    )


_DspProfilePlayBufferMinDelay_Type.__name__ = "Integer32"
_DspProfilePlayBufferMinDelay_Object = MibTableColumn
dspProfilePlayBufferMinDelay = _DspProfilePlayBufferMinDelay_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 3, 1, 3),
    _DspProfilePlayBufferMinDelay_Type()
)
dspProfilePlayBufferMinDelay.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dspProfilePlayBufferMinDelay.setStatus("current")
if mibBuilder.loadTexts:
    dspProfilePlayBufferMinDelay.setUnits("millisecond")


class _DspProfilePlayBufferMaxDelay_Type(Integer32):
    """Custom type dspProfilePlayBufferMaxDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 500),
    )


_DspProfilePlayBufferMaxDelay_Type.__name__ = "Integer32"
_DspProfilePlayBufferMaxDelay_Object = MibTableColumn
dspProfilePlayBufferMaxDelay = _DspProfilePlayBufferMaxDelay_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 3, 1, 4),
    _DspProfilePlayBufferMaxDelay_Type()
)
dspProfilePlayBufferMaxDelay.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dspProfilePlayBufferMaxDelay.setStatus("current")
if mibBuilder.loadTexts:
    dspProfilePlayBufferMaxDelay.setUnits("millisecond")


class _DspProfileEchoTail_Type(Integer32):
    """Custom type dspProfileEchoTail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("echotail-8", 1),
          ("echotail-16", 2),
          ("echotail-32", 3),
          ("echotail-128", 4))
    )


_DspProfileEchoTail_Type.__name__ = "Integer32"
_DspProfileEchoTail_Object = MibTableColumn
dspProfileEchoTail = _DspProfileEchoTail_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 3, 1, 5),
    _DspProfileEchoTail_Type()
)
dspProfileEchoTail.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dspProfileEchoTail.setStatus("current")
_DspProfileRowStatus_Type = RowStatus
_DspProfileRowStatus_Object = MibTableColumn
dspProfileRowStatus = _DspProfileRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 3, 1, 6),
    _DspProfileRowStatus_Type()
)
dspProfileRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dspProfileRowStatus.setStatus("current")


class _DspProfileEchocancelOn_Type(Integer32):
    """Custom type dspProfileEchocancelOn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_DspProfileEchocancelOn_Type.__name__ = "Integer32"
_DspProfileEchocancelOn_Object = MibTableColumn
dspProfileEchocancelOn = _DspProfileEchocancelOn_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 3, 1, 7),
    _DspProfileEchocancelOn_Type()
)
dspProfileEchocancelOn.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dspProfileEchocancelOn.setStatus("current")


class _DspProfileVadOn_Type(Integer32):
    """Custom type dspProfileVadOn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_DspProfileVadOn_Type.__name__ = "Integer32"
_DspProfileVadOn_Object = MibTableColumn
dspProfileVadOn = _DspProfileVadOn_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 3, 1, 8),
    _DspProfileVadOn_Type()
)
dspProfileVadOn.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dspProfileVadOn.setStatus("current")


class _DspProfileg711vpi_Type(Integer32):
    """Custom type dspProfileg711vpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("interval-10ms", 1),
          ("interval-20ms", 2),
          ("interval-30ms", 3),
          ("interval-40ms", 4))
    )


_DspProfileg711vpi_Type.__name__ = "Integer32"
_DspProfileg711vpi_Object = MibTableColumn
dspProfileg711vpi = _DspProfileg711vpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 3, 1, 9),
    _DspProfileg711vpi_Type()
)
dspProfileg711vpi.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dspProfileg711vpi.setStatus("current")


class _DspProfileg723vpi_Type(Integer32):
    """Custom type dspProfileg723vpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("interval-30ms", 1),
          ("interval-60ms", 2))
    )


_DspProfileg723vpi_Type.__name__ = "Integer32"
_DspProfileg723vpi_Object = MibTableColumn
dspProfileg723vpi = _DspProfileg723vpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 3, 1, 10),
    _DspProfileg723vpi_Type()
)
dspProfileg723vpi.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dspProfileg723vpi.setStatus("current")


class _DspProfileg726vpi_Type(Integer32):
    """Custom type dspProfileg726vpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("interval-10ms", 1),
          ("interval-20ms", 2),
          ("interval-30ms", 3),
          ("interval-40ms", 4))
    )


_DspProfileg726vpi_Type.__name__ = "Integer32"
_DspProfileg726vpi_Object = MibTableColumn
dspProfileg726vpi = _DspProfileg726vpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 3, 1, 11),
    _DspProfileg726vpi_Type()
)
dspProfileg726vpi.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dspProfileg726vpi.setStatus("current")


class _DspProfileg729vpi_Type(Integer32):
    """Custom type dspProfileg729vpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("interval-10ms", 1),
          ("interval-20ms", 2),
          ("interval-30ms", 3),
          ("interval-40ms", 4),
          ("interval-50ms", 5),
          ("interval-60ms", 6))
    )


_DspProfileg729vpi_Type.__name__ = "Integer32"
_DspProfileg729vpi_Object = MibTableColumn
dspProfileg729vpi = _DspProfileg729vpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 3, 1, 12),
    _DspProfileg729vpi_Type()
)
dspProfileg729vpi.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dspProfileg729vpi.setStatus("current")


class _DspProfilePbit_Type(Integer32):
    """Custom type dspProfilePbit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_DspProfilePbit_Type.__name__ = "Integer32"
_DspProfilePbit_Object = MibTableColumn
dspProfilePbit = _DspProfilePbit_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 3, 1, 13),
    _DspProfilePbit_Type()
)
dspProfilePbit.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dspProfilePbit.setStatus("current")


class _DspProfileDscp_Type(Integer32):
    """Custom type dspProfileDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_DspProfileDscp_Type.__name__ = "Integer32"
_DspProfileDscp_Object = MibTableColumn
dspProfileDscp = _DspProfileDscp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 3, 1, 14),
    _DspProfileDscp_Type()
)
dspProfileDscp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dspProfileDscp.setStatus("current")


class _DspProfileCodecPriority_Type(DisplayString):
    """Custom type dspProfileCodecPriority based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_DspProfileCodecPriority_Type.__name__ = "DisplayString"
_DspProfileCodecPriority_Object = MibTableColumn
dspProfileCodecPriority = _DspProfileCodecPriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 3, 1, 15),
    _DspProfileCodecPriority_Type()
)
dspProfileCodecPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dspProfileCodecPriority.setStatus("current")
_H248Profile_ObjectIdentity = ObjectIdentity
h248Profile = _H248Profile_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4)
)
_MaxNumOfH248Profiles_Type = Integer32
_MaxNumOfH248Profiles_Object = MibScalar
maxNumOfH248Profiles = _MaxNumOfH248Profiles_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 1),
    _MaxNumOfH248Profiles_Type()
)
maxNumOfH248Profiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfH248Profiles.setStatus("current")
_H248ProfileTable_Object = MibTable
h248ProfileTable = _H248ProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2)
)
if mibBuilder.loadTexts:
    h248ProfileTable.setStatus("current")
_H248ProfileEntry_Object = MibTableRow
h248ProfileEntry = _H248ProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1)
)
h248ProfileEntry.setIndexNames(
    (1, "ZYXEL-IES5000-MIB", "h248ProfileName"),
)
if mibBuilder.loadTexts:
    h248ProfileEntry.setStatus("current")


class _H248ProfileName_Type(DisplayString):
    """Custom type h248ProfileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_H248ProfileName_Type.__name__ = "DisplayString"
_H248ProfileName_Object = MibTableColumn
h248ProfileName = _H248ProfileName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 1),
    _H248ProfileName_Type()
)
h248ProfileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    h248ProfileName.setStatus("current")


class _H248ProfileMgc_Type(DisplayString):
    """Custom type h248ProfileMgc based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 63),
    )


_H248ProfileMgc_Type.__name__ = "DisplayString"
_H248ProfileMgc_Object = MibTableColumn
h248ProfileMgc = _H248ProfileMgc_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 2),
    _H248ProfileMgc_Type()
)
h248ProfileMgc.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfileMgc.setStatus("current")


class _H248ProfileMgcPort_Type(Integer32):
    """Custom type h248ProfileMgcPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1025, 65535),
    )


_H248ProfileMgcPort_Type.__name__ = "Integer32"
_H248ProfileMgcPort_Object = MibTableColumn
h248ProfileMgcPort = _H248ProfileMgcPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 3),
    _H248ProfileMgcPort_Type()
)
h248ProfileMgcPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfileMgcPort.setStatus("current")


class _H248ProfileMgc2On_Type(Integer32):
    """Custom type h248ProfileMgc2On based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_H248ProfileMgc2On_Type.__name__ = "Integer32"
_H248ProfileMgc2On_Object = MibTableColumn
h248ProfileMgc2On = _H248ProfileMgc2On_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 4),
    _H248ProfileMgc2On_Type()
)
h248ProfileMgc2On.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfileMgc2On.setStatus("current")
_H248ProfileMgc2_Type = DisplayString
_H248ProfileMgc2_Object = MibTableColumn
h248ProfileMgc2 = _H248ProfileMgc2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 5),
    _H248ProfileMgc2_Type()
)
h248ProfileMgc2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfileMgc2.setStatus("current")


class _H248ProfileMgc2Port_Type(Integer32):
    """Custom type h248ProfileMgc2Port based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1025, 65535),
    )


_H248ProfileMgc2Port_Type.__name__ = "Integer32"
_H248ProfileMgc2Port_Object = MibTableColumn
h248ProfileMgc2Port = _H248ProfileMgc2Port_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 6),
    _H248ProfileMgc2Port_Type()
)
h248ProfileMgc2Port.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfileMgc2Port.setStatus("current")


class _H248ProfileTransport_Type(Integer32):
    """Custom type h248ProfileTransport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("udp", 1),
          ("tcp", 2))
    )


_H248ProfileTransport_Type.__name__ = "Integer32"
_H248ProfileTransport_Object = MibTableColumn
h248ProfileTransport = _H248ProfileTransport_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 7),
    _H248ProfileTransport_Type()
)
h248ProfileTransport.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfileTransport.setStatus("current")


class _H248ProfileEncode_Type(Integer32):
    """Custom type h248ProfileEncode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("long", 1),
          ("short", 2))
    )


_H248ProfileEncode_Type.__name__ = "Integer32"
_H248ProfileEncode_Object = MibTableColumn
h248ProfileEncode = _H248ProfileEncode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 8),
    _H248ProfileEncode_Type()
)
h248ProfileEncode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfileEncode.setStatus("current")


class _H248ProfilePbit_Type(Integer32):
    """Custom type h248ProfilePbit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_H248ProfilePbit_Type.__name__ = "Integer32"
_H248ProfilePbit_Object = MibTableColumn
h248ProfilePbit = _H248ProfilePbit_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 9),
    _H248ProfilePbit_Type()
)
h248ProfilePbit.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfilePbit.setStatus("current")


class _H248ProfileDscp_Type(Integer32):
    """Custom type h248ProfileDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_H248ProfileDscp_Type.__name__ = "Integer32"
_H248ProfileDscp_Object = MibTableColumn
h248ProfileDscp = _H248ProfileDscp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 10),
    _H248ProfileDscp_Type()
)
h248ProfileDscp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfileDscp.setStatus("current")
_H248ProfileRowStatus_Type = RowStatus
_H248ProfileRowStatus_Object = MibTableColumn
h248ProfileRowStatus = _H248ProfileRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 11),
    _H248ProfileRowStatus_Type()
)
h248ProfileRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfileRowStatus.setStatus("current")


class _H248ProfileSoftswitch_Type(Integer32):
    """Custom type h248ProfileSoftswitch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("defval", 1),
          ("zxss10-ss", 2),
          ("nortel-cs1500", 3),
          ("nortel-cs2000", 4),
          ("huawei-soft3000", 5),
          ("alu-5020", 6),
          ("nsn", 7),
          ("iskratel", 8),
          ("alu-5060", 9))
    )


_H248ProfileSoftswitch_Type.__name__ = "Integer32"
_H248ProfileSoftswitch_Object = MibTableColumn
h248ProfileSoftswitch = _H248ProfileSoftswitch_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 12),
    _H248ProfileSoftswitch_Type()
)
h248ProfileSoftswitch.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfileSoftswitch.setStatus("current")


class _H248ProfileInactivityTimer_Type(Integer32):
    """Custom type h248ProfileInactivityTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_H248ProfileInactivityTimer_Type.__name__ = "Integer32"
_H248ProfileInactivityTimer_Object = MibTableColumn
h248ProfileInactivityTimer = _H248ProfileInactivityTimer_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 13),
    _H248ProfileInactivityTimer_Type()
)
h248ProfileInactivityTimer.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfileInactivityTimer.setStatus("current")
_H248ProfilePrefixName_Type = DisplayString
_H248ProfilePrefixName_Object = MibTableColumn
h248ProfilePrefixName = _H248ProfilePrefixName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 14),
    _H248ProfilePrefixName_Type()
)
h248ProfilePrefixName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfilePrefixName.setStatus("current")
_H248ProfileRtpPortStart_Type = Integer32
_H248ProfileRtpPortStart_Object = MibTableColumn
h248ProfileRtpPortStart = _H248ProfileRtpPortStart_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 15),
    _H248ProfileRtpPortStart_Type()
)
h248ProfileRtpPortStart.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfileRtpPortStart.setStatus("current")
_H248ProfileRtpPortEnd_Type = Integer32
_H248ProfileRtpPortEnd_Object = MibTableColumn
h248ProfileRtpPortEnd = _H248ProfileRtpPortEnd_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 16),
    _H248ProfileRtpPortEnd_Type()
)
h248ProfileRtpPortEnd.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfileRtpPortEnd.setStatus("current")
_H248ProfileInitRetranTime_Type = Integer32
_H248ProfileInitRetranTime_Object = MibTableColumn
h248ProfileInitRetranTime = _H248ProfileInitRetranTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 17),
    _H248ProfileInitRetranTime_Type()
)
h248ProfileInitRetranTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfileInitRetranTime.setStatus("current")
_H248ProfileMinRetranTime_Type = Integer32
_H248ProfileMinRetranTime_Object = MibTableColumn
h248ProfileMinRetranTime = _H248ProfileMinRetranTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 18),
    _H248ProfileMinRetranTime_Type()
)
h248ProfileMinRetranTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfileMinRetranTime.setStatus("current")
_H248ProfileMaxRetranTime_Type = Integer32
_H248ProfileMaxRetranTime_Object = MibTableColumn
h248ProfileMaxRetranTime = _H248ProfileMaxRetranTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 19),
    _H248ProfileMaxRetranTime_Type()
)
h248ProfileMaxRetranTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfileMaxRetranTime.setStatus("current")
_H248ProfileRetranWindow_Type = Integer32
_H248ProfileRetranWindow_Object = MibTableColumn
h248ProfileRetranWindow = _H248ProfileRetranWindow_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 20),
    _H248ProfileRetranWindow_Type()
)
h248ProfileRetranWindow.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfileRetranWindow.setStatus("current")
_H248ProfileStartTimeout_Type = Integer32
_H248ProfileStartTimeout_Object = MibTableColumn
h248ProfileStartTimeout = _H248ProfileStartTimeout_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 21),
    _H248ProfileStartTimeout_Type()
)
h248ProfileStartTimeout.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfileStartTimeout.setStatus("current")
_H248ProfileShortTimeout_Type = Integer32
_H248ProfileShortTimeout_Object = MibTableColumn
h248ProfileShortTimeout = _H248ProfileShortTimeout_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 22),
    _H248ProfileShortTimeout_Type()
)
h248ProfileShortTimeout.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfileShortTimeout.setStatus("current")
_H248ProfileLongTimeout_Type = Integer32
_H248ProfileLongTimeout_Object = MibTableColumn
h248ProfileLongTimeout = _H248ProfileLongTimeout_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 23),
    _H248ProfileLongTimeout_Type()
)
h248ProfileLongTimeout.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfileLongTimeout.setStatus("current")


class _H248ProfileVBD_Type(Integer32):
    """Custom type h248ProfileVBD based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_H248ProfileVBD_Type.__name__ = "Integer32"
_H248ProfileVBD_Object = MibTableColumn
h248ProfileVBD = _H248ProfileVBD_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 24),
    _H248ProfileVBD_Type()
)
h248ProfileVBD.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfileVBD.setStatus("current")
_H248ProfileSuffixStartNum_Type = DisplayString
_H248ProfileSuffixStartNum_Object = MibTableColumn
h248ProfileSuffixStartNum = _H248ProfileSuffixStartNum_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 25),
    _H248ProfileSuffixStartNum_Type()
)
h248ProfileSuffixStartNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfileSuffixStartNum.setStatus("current")
_H248ProfileSuffixSuffixLen_Type = Integer32
_H248ProfileSuffixSuffixLen_Object = MibTableColumn
h248ProfileSuffixSuffixLen = _H248ProfileSuffixSuffixLen_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 26),
    _H248ProfileSuffixSuffixLen_Type()
)
h248ProfileSuffixSuffixLen.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfileSuffixSuffixLen.setStatus("current")


class _H248ProfileRFC2833_Type(Integer32):
    """Custom type h248ProfileRFC2833 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_H248ProfileRFC2833_Type.__name__ = "Integer32"
_H248ProfileRFC2833_Object = MibTableColumn
h248ProfileRFC2833 = _H248ProfileRFC2833_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 27),
    _H248ProfileRFC2833_Type()
)
h248ProfileRFC2833.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfileRFC2833.setStatus("current")
_H248ProfileRFC2833PT_Type = Integer32
_H248ProfileRFC2833PT_Object = MibTableColumn
h248ProfileRFC2833PT = _H248ProfileRFC2833PT_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 28),
    _H248ProfileRFC2833PT_Type()
)
h248ProfileRFC2833PT.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfileRFC2833PT.setStatus("current")


class _H248ProfileT38_Type(Integer32):
    """Custom type h248ProfileT38 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_H248ProfileT38_Type.__name__ = "Integer32"
_H248ProfileT38_Object = MibTableColumn
h248ProfileT38 = _H248ProfileT38_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 29),
    _H248ProfileT38_Type()
)
h248ProfileT38.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfileT38.setStatus("current")


class _H248ProfileForceVersion_Type(Integer32):
    """Custom type h248ProfileForceVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_H248ProfileForceVersion_Type.__name__ = "Integer32"
_H248ProfileForceVersion_Object = MibTableColumn
h248ProfileForceVersion = _H248ProfileForceVersion_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 30),
    _H248ProfileForceVersion_Type()
)
h248ProfileForceVersion.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    h248ProfileForceVersion.setStatus("current")


class _H248ProfileLocalcall_Type(Integer32):
    """Custom type h248ProfileLocalcall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_H248ProfileLocalcall_Type.__name__ = "Integer32"
_H248ProfileLocalcall_Object = MibTableColumn
h248ProfileLocalcall = _H248ProfileLocalcall_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 31),
    _H248ProfileLocalcall_Type()
)
h248ProfileLocalcall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    h248ProfileLocalcall.setStatus("current")


class _H248ProfileCallthrough_Type(Integer32):
    """Custom type h248ProfileCallthrough based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_H248ProfileCallthrough_Type.__name__ = "Integer32"
_H248ProfileCallthrough_Object = MibTableColumn
h248ProfileCallthrough = _H248ProfileCallthrough_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 7, 4, 2, 1, 32),
    _H248ProfileCallthrough_Type()
)
h248ProfileCallthrough.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    h248ProfileCallthrough.setStatus("current")
_IpqosProfile_ObjectIdentity = ObjectIdentity
ipqosProfile = _IpqosProfile_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 8)
)
_MaxNumOfIpqosProfiles_Type = Integer32
_MaxNumOfIpqosProfiles_Object = MibScalar
maxNumOfIpqosProfiles = _MaxNumOfIpqosProfiles_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 8, 1),
    _MaxNumOfIpqosProfiles_Type()
)
maxNumOfIpqosProfiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfIpqosProfiles.setStatus("current")
_IpqosProfileTable_Object = MibTable
ipqosProfileTable = _IpqosProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 8, 2)
)
if mibBuilder.loadTexts:
    ipqosProfileTable.setStatus("current")
_IpqosProfileEntry_Object = MibTableRow
ipqosProfileEntry = _IpqosProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 8, 2, 1)
)
ipqosProfileEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "ipqosProfileName"),
    (0, "ZYXEL-IES5000-MIB", "ipqosProfileNumOfQueue"),
)
if mibBuilder.loadTexts:
    ipqosProfileEntry.setStatus("current")


class _IpqosProfileName_Type(DisplayString):
    """Custom type ipqosProfileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_IpqosProfileName_Type.__name__ = "DisplayString"
_IpqosProfileName_Object = MibTableColumn
ipqosProfileName = _IpqosProfileName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 8, 2, 1, 1),
    _IpqosProfileName_Type()
)
ipqosProfileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipqosProfileName.setStatus("current")


class _IpqosProfileNumOfQueue_Type(Integer32):
    """Custom type ipqosProfileNumOfQueue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_IpqosProfileNumOfQueue_Type.__name__ = "Integer32"
_IpqosProfileNumOfQueue_Object = MibTableColumn
ipqosProfileNumOfQueue = _IpqosProfileNumOfQueue_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 8, 2, 1, 2),
    _IpqosProfileNumOfQueue_Type()
)
ipqosProfileNumOfQueue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipqosProfileNumOfQueue.setStatus("current")
_IpqosProfileRowStatus_Type = RowStatus
_IpqosProfileRowStatus_Object = MibTableColumn
ipqosProfileRowStatus = _IpqosProfileRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 8, 2, 1, 3),
    _IpqosProfileRowStatus_Type()
)
ipqosProfileRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipqosProfileRowStatus.setStatus("current")
_IpqosProfileQueueTable_Object = MibTable
ipqosProfileQueueTable = _IpqosProfileQueueTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 8, 3)
)
if mibBuilder.loadTexts:
    ipqosProfileQueueTable.setStatus("current")
_IpqosProfileQueueEntry_Object = MibTableRow
ipqosProfileQueueEntry = _IpqosProfileQueueEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 8, 3, 1)
)
ipqosProfileQueueEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "ipqosProfileName"),
    (0, "ZYXEL-IES5000-MIB", "ipqosProfileQueueIndex"),
)
if mibBuilder.loadTexts:
    ipqosProfileQueueEntry.setStatus("current")
_IpqosProfileQueueIndex_Type = Integer32
_IpqosProfileQueueIndex_Object = MibTableColumn
ipqosProfileQueueIndex = _IpqosProfileQueueIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 8, 3, 1, 1),
    _IpqosProfileQueueIndex_Type()
)
ipqosProfileQueueIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipqosProfileQueueIndex.setStatus("current")
_IpqosProfileQueuePIR_Type = Integer32
_IpqosProfileQueuePIR_Object = MibTableColumn
ipqosProfileQueuePIR = _IpqosProfileQueuePIR_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 8, 3, 1, 2),
    _IpqosProfileQueuePIR_Type()
)
ipqosProfileQueuePIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqosProfileQueuePIR.setStatus("current")
if mibBuilder.loadTexts:
    ipqosProfileQueuePIR.setUnits("Kbps")
_IpqosProfileQueueCIR_Type = Integer32
_IpqosProfileQueueCIR_Object = MibTableColumn
ipqosProfileQueueCIR = _IpqosProfileQueueCIR_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 8, 3, 1, 3),
    _IpqosProfileQueueCIR_Type()
)
ipqosProfileQueueCIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqosProfileQueueCIR.setStatus("current")
if mibBuilder.loadTexts:
    ipqosProfileQueueCIR.setUnits("Kbps")
_IpqosProfileQueuePBS_Type = Integer32
_IpqosProfileQueuePBS_Object = MibTableColumn
ipqosProfileQueuePBS = _IpqosProfileQueuePBS_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 8, 3, 1, 4),
    _IpqosProfileQueuePBS_Type()
)
ipqosProfileQueuePBS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqosProfileQueuePBS.setStatus("current")
if mibBuilder.loadTexts:
    ipqosProfileQueuePBS.setUnits("byte")
_IpqosProfileQueueCBS_Type = Integer32
_IpqosProfileQueueCBS_Object = MibTableColumn
ipqosProfileQueueCBS = _IpqosProfileQueueCBS_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 8, 3, 1, 5),
    _IpqosProfileQueueCBS_Type()
)
ipqosProfileQueueCBS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqosProfileQueueCBS.setStatus("current")
if mibBuilder.loadTexts:
    ipqosProfileQueueCBS.setUnits("byts")


class _IpqosProfileQueueLevel_Type(Integer32):
    """Custom type ipqosProfileQueueLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_IpqosProfileQueueLevel_Type.__name__ = "Integer32"
_IpqosProfileQueueLevel_Object = MibTableColumn
ipqosProfileQueueLevel = _IpqosProfileQueueLevel_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 8, 3, 1, 6),
    _IpqosProfileQueueLevel_Type()
)
ipqosProfileQueueLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqosProfileQueueLevel.setStatus("current")


class _IpqosProfileQueueWeight_Type(Integer32):
    """Custom type ipqosProfileQueueWeight based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 127),
    )


_IpqosProfileQueueWeight_Type.__name__ = "Integer32"
_IpqosProfileQueueWeight_Object = MibTableColumn
ipqosProfileQueueWeight = _IpqosProfileQueueWeight_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 8, 3, 1, 7),
    _IpqosProfileQueueWeight_Type()
)
ipqosProfileQueueWeight.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqosProfileQueueWeight.setStatus("current")
_RateLimitProfile_ObjectIdentity = ObjectIdentity
rateLimitProfile = _RateLimitProfile_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 9)
)
_MaxNumOfRateLimitProfiles_Type = Integer32
_MaxNumOfRateLimitProfiles_Object = MibScalar
maxNumOfRateLimitProfiles = _MaxNumOfRateLimitProfiles_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 9, 1),
    _MaxNumOfRateLimitProfiles_Type()
)
maxNumOfRateLimitProfiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfRateLimitProfiles.setStatus("current")
_RateLimitProfileTable_Object = MibTable
rateLimitProfileTable = _RateLimitProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 9, 2)
)
if mibBuilder.loadTexts:
    rateLimitProfileTable.setStatus("current")
_RateLimitProfileEntry_Object = MibTableRow
rateLimitProfileEntry = _RateLimitProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 9, 2, 1)
)
rateLimitProfileEntry.setIndexNames(
    (1, "ZYXEL-IES5000-MIB", "rateLimitProfileName"),
)
if mibBuilder.loadTexts:
    rateLimitProfileEntry.setStatus("current")


class _RateLimitProfileName_Type(DisplayString):
    """Custom type rateLimitProfileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_RateLimitProfileName_Type.__name__ = "DisplayString"
_RateLimitProfileName_Object = MibTableColumn
rateLimitProfileName = _RateLimitProfileName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 9, 2, 1, 1),
    _RateLimitProfileName_Type()
)
rateLimitProfileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rateLimitProfileName.setStatus("current")


class _RateLimitProfileIngressRate_Type(Integer32):
    """Custom type rateLimitProfileIngressRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100032),
    )


_RateLimitProfileIngressRate_Type.__name__ = "Integer32"
_RateLimitProfileIngressRate_Object = MibTableColumn
rateLimitProfileIngressRate = _RateLimitProfileIngressRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 9, 2, 1, 2),
    _RateLimitProfileIngressRate_Type()
)
rateLimitProfileIngressRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rateLimitProfileIngressRate.setStatus("current")


class _RateLimitProfileEgressRate_Type(Integer32):
    """Custom type rateLimitProfileEgressRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100032),
    )


_RateLimitProfileEgressRate_Type.__name__ = "Integer32"
_RateLimitProfileEgressRate_Object = MibTableColumn
rateLimitProfileEgressRate = _RateLimitProfileEgressRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 9, 2, 1, 3),
    _RateLimitProfileEgressRate_Type()
)
rateLimitProfileEgressRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rateLimitProfileEgressRate.setStatus("current")
_RateLimitProfileRowStatus_Type = RowStatus
_RateLimitProfileRowStatus_Object = MibTableColumn
rateLimitProfileRowStatus = _RateLimitProfileRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 9, 2, 1, 4),
    _RateLimitProfileRowStatus_Type()
)
rateLimitProfileRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    rateLimitProfileRowStatus.setStatus("current")
_E1AlarmProfile_ObjectIdentity = ObjectIdentity
e1AlarmProfile = _E1AlarmProfile_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 10)
)
_MaxNumOfE1AlarmProfile_Type = Integer32
_MaxNumOfE1AlarmProfile_Object = MibScalar
maxNumOfE1AlarmProfile = _MaxNumOfE1AlarmProfile_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 10, 1),
    _MaxNumOfE1AlarmProfile_Type()
)
maxNumOfE1AlarmProfile.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfE1AlarmProfile.setStatus("current")
_E1AlarmProfileTable_Object = MibTable
e1AlarmProfileTable = _E1AlarmProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 10, 2)
)
if mibBuilder.loadTexts:
    e1AlarmProfileTable.setStatus("current")
_E1AlarmProfileEntry_Object = MibTableRow
e1AlarmProfileEntry = _E1AlarmProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 10, 2, 1)
)
e1AlarmProfileEntry.setIndexNames(
    (1, "ZYXEL-IES5000-MIB", "e1AlarmProfileName"),
)
if mibBuilder.loadTexts:
    e1AlarmProfileEntry.setStatus("current")


class _E1AlarmProfileName_Type(DisplayString):
    """Custom type e1AlarmProfileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_E1AlarmProfileName_Type.__name__ = "DisplayString"
_E1AlarmProfileName_Object = MibTableColumn
e1AlarmProfileName = _E1AlarmProfileName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 10, 2, 1, 1),
    _E1AlarmProfileName_Type()
)
e1AlarmProfileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1AlarmProfileName.setStatus("current")


class _E1AlarmProfileQEs_Type(Integer32):
    """Custom type e1AlarmProfileQEs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_E1AlarmProfileQEs_Type.__name__ = "Integer32"
_E1AlarmProfileQEs_Object = MibTableColumn
e1AlarmProfileQEs = _E1AlarmProfileQEs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 10, 2, 1, 2),
    _E1AlarmProfileQEs_Type()
)
e1AlarmProfileQEs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    e1AlarmProfileQEs.setStatus("current")


class _E1AlarmProfileQSes_Type(Integer32):
    """Custom type e1AlarmProfileQSes based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_E1AlarmProfileQSes_Type.__name__ = "Integer32"
_E1AlarmProfileQSes_Object = MibTableColumn
e1AlarmProfileQSes = _E1AlarmProfileQSes_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 10, 2, 1, 3),
    _E1AlarmProfileQSes_Type()
)
e1AlarmProfileQSes.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    e1AlarmProfileQSes.setStatus("current")


class _E1AlarmProfileQUas_Type(Integer32):
    """Custom type e1AlarmProfileQUas based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_E1AlarmProfileQUas_Type.__name__ = "Integer32"
_E1AlarmProfileQUas_Object = MibTableColumn
e1AlarmProfileQUas = _E1AlarmProfileQUas_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 10, 2, 1, 4),
    _E1AlarmProfileQUas_Type()
)
e1AlarmProfileQUas.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    e1AlarmProfileQUas.setStatus("current")


class _E1AlarmProfileDayEs_Type(Integer32):
    """Custom type e1AlarmProfileDayEs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_E1AlarmProfileDayEs_Type.__name__ = "Integer32"
_E1AlarmProfileDayEs_Object = MibTableColumn
e1AlarmProfileDayEs = _E1AlarmProfileDayEs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 10, 2, 1, 5),
    _E1AlarmProfileDayEs_Type()
)
e1AlarmProfileDayEs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    e1AlarmProfileDayEs.setStatus("current")


class _E1AlarmProfileDaySes_Type(Integer32):
    """Custom type e1AlarmProfileDaySes based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_E1AlarmProfileDaySes_Type.__name__ = "Integer32"
_E1AlarmProfileDaySes_Object = MibTableColumn
e1AlarmProfileDaySes = _E1AlarmProfileDaySes_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 10, 2, 1, 6),
    _E1AlarmProfileDaySes_Type()
)
e1AlarmProfileDaySes.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    e1AlarmProfileDaySes.setStatus("current")


class _E1AlarmProfileDayUas_Type(Integer32):
    """Custom type e1AlarmProfileDayUas based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_E1AlarmProfileDayUas_Type.__name__ = "Integer32"
_E1AlarmProfileDayUas_Object = MibTableColumn
e1AlarmProfileDayUas = _E1AlarmProfileDayUas_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 10, 2, 1, 7),
    _E1AlarmProfileDayUas_Type()
)
e1AlarmProfileDayUas.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    e1AlarmProfileDayUas.setStatus("current")
_E1AlarmProfileRowStatus_Type = RowStatus
_E1AlarmProfileRowStatus_Object = MibTableColumn
e1AlarmProfileRowStatus = _E1AlarmProfileRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 10, 2, 1, 8),
    _E1AlarmProfileRowStatus_Type()
)
e1AlarmProfileRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    e1AlarmProfileRowStatus.setStatus("current")
_Vdsl2Profile_ObjectIdentity = ObjectIdentity
vdsl2Profile = _Vdsl2Profile_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11)
)
_MaxNumOfVdsl2TemplateProfiles_Type = Integer32
_MaxNumOfVdsl2TemplateProfiles_Object = MibScalar
maxNumOfVdsl2TemplateProfiles = _MaxNumOfVdsl2TemplateProfiles_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 1),
    _MaxNumOfVdsl2TemplateProfiles_Type()
)
maxNumOfVdsl2TemplateProfiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfVdsl2TemplateProfiles.setStatus("current")
_MaxNumOfVdsl2LineProfiles_Type = Integer32
_MaxNumOfVdsl2LineProfiles_Object = MibScalar
maxNumOfVdsl2LineProfiles = _MaxNumOfVdsl2LineProfiles_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 2),
    _MaxNumOfVdsl2LineProfiles_Type()
)
maxNumOfVdsl2LineProfiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfVdsl2LineProfiles.setStatus("current")
_MaxNumOfVdsl2ChanProfiles_Type = Integer32
_MaxNumOfVdsl2ChanProfiles_Object = MibScalar
maxNumOfVdsl2ChanProfiles = _MaxNumOfVdsl2ChanProfiles_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 3),
    _MaxNumOfVdsl2ChanProfiles_Type()
)
maxNumOfVdsl2ChanProfiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfVdsl2ChanProfiles.setStatus("current")
_MaxNumOfVdsl2AlarmTemplateProfiles_Type = Integer32
_MaxNumOfVdsl2AlarmTemplateProfiles_Object = MibScalar
maxNumOfVdsl2AlarmTemplateProfiles = _MaxNumOfVdsl2AlarmTemplateProfiles_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 4),
    _MaxNumOfVdsl2AlarmTemplateProfiles_Type()
)
maxNumOfVdsl2AlarmTemplateProfiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfVdsl2AlarmTemplateProfiles.setStatus("current")
_MaxNumOfVdsl2AlarmLineProfiles_Type = Integer32
_MaxNumOfVdsl2AlarmLineProfiles_Object = MibScalar
maxNumOfVdsl2AlarmLineProfiles = _MaxNumOfVdsl2AlarmLineProfiles_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 5),
    _MaxNumOfVdsl2AlarmLineProfiles_Type()
)
maxNumOfVdsl2AlarmLineProfiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfVdsl2AlarmLineProfiles.setStatus("current")
_MaxNumOfVdsl2AlarmChanProfiles_Type = Integer32
_MaxNumOfVdsl2AlarmChanProfiles_Object = MibScalar
maxNumOfVdsl2AlarmChanProfiles = _MaxNumOfVdsl2AlarmChanProfiles_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 6),
    _MaxNumOfVdsl2AlarmChanProfiles_Type()
)
maxNumOfVdsl2AlarmChanProfiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfVdsl2AlarmChanProfiles.setStatus("current")
_Vdsl2LineConfProfileExtendedTable_Object = MibTable
vdsl2LineConfProfileExtendedTable = _Vdsl2LineConfProfileExtendedTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 7)
)
if mibBuilder.loadTexts:
    vdsl2LineConfProfileExtendedTable.setStatus("current")
_Vdsl2LineConfProfileExtendedEntry_Object = MibTableRow
vdsl2LineConfProfileExtendedEntry = _Vdsl2LineConfProfileExtendedEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 7, 1)
)
vdsl2LineConfProfileExtendedEntry.setIndexNames(
    (0, "VDSL2-LINE-MIB", "xdsl2LConfProfProfileName"),
)
if mibBuilder.loadTexts:
    vdsl2LineConfProfileExtendedEntry.setStatus("current")


class _Vdsl2LineProfDpboEPsdID_Type(Integer32):
    """Custom type vdsl2LineProfDpboEPsdID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("psd-co", 1),
          ("psd-flat", 2),
          ("psd-cab-ansi", 3),
          ("psd-cab-etsi", 4),
          ("psd-exch-etsi", 5),
          ("psd-exch-ansi", 6))
    )


_Vdsl2LineProfDpboEPsdID_Type.__name__ = "Integer32"
_Vdsl2LineProfDpboEPsdID_Object = MibTableColumn
vdsl2LineProfDpboEPsdID = _Vdsl2LineProfDpboEPsdID_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 7, 1, 1),
    _Vdsl2LineProfDpboEPsdID_Type()
)
vdsl2LineProfDpboEPsdID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LineProfDpboEPsdID.setStatus("current")


class _Vdsl2LineProfBitSwapDs_Type(Integer32):
    """Custom type vdsl2LineProfBitSwapDs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_Vdsl2LineProfBitSwapDs_Type.__name__ = "Integer32"
_Vdsl2LineProfBitSwapDs_Object = MibTableColumn
vdsl2LineProfBitSwapDs = _Vdsl2LineProfBitSwapDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 7, 1, 2),
    _Vdsl2LineProfBitSwapDs_Type()
)
vdsl2LineProfBitSwapDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LineProfBitSwapDs.setStatus("current")


class _Vdsl2LineProfBitSwapUs_Type(Integer32):
    """Custom type vdsl2LineProfBitSwapUs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_Vdsl2LineProfBitSwapUs_Type.__name__ = "Integer32"
_Vdsl2LineProfBitSwapUs_Object = MibTableColumn
vdsl2LineProfBitSwapUs = _Vdsl2LineProfBitSwapUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 7, 1, 3),
    _Vdsl2LineProfBitSwapUs_Type()
)
vdsl2LineProfBitSwapUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LineProfBitSwapUs.setStatus("current")
_Vdsl2LineProfProfileName_Type = DisplayString
_Vdsl2LineProfProfileName_Object = MibTableColumn
vdsl2LineProfProfileName = _Vdsl2LineProfProfileName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 7, 1, 4),
    _Vdsl2LineProfProfileName_Type()
)
vdsl2LineProfProfileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdsl2LineProfProfileName.setStatus("current")


class _Vdsl2LineProfDynamicDepthEnableDs_Type(Integer32):
    """Custom type vdsl2LineProfDynamicDepthEnableDs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_Vdsl2LineProfDynamicDepthEnableDs_Type.__name__ = "Integer32"
_Vdsl2LineProfDynamicDepthEnableDs_Object = MibTableColumn
vdsl2LineProfDynamicDepthEnableDs = _Vdsl2LineProfDynamicDepthEnableDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 7, 1, 5),
    _Vdsl2LineProfDynamicDepthEnableDs_Type()
)
vdsl2LineProfDynamicDepthEnableDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LineProfDynamicDepthEnableDs.setStatus("current")


class _Vdsl2LineProfDynamicDepthEnableUs_Type(Integer32):
    """Custom type vdsl2LineProfDynamicDepthEnableUs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_Vdsl2LineProfDynamicDepthEnableUs_Type.__name__ = "Integer32"
_Vdsl2LineProfDynamicDepthEnableUs_Object = MibTableColumn
vdsl2LineProfDynamicDepthEnableUs = _Vdsl2LineProfDynamicDepthEnableUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 7, 1, 6),
    _Vdsl2LineProfDynamicDepthEnableUs_Type()
)
vdsl2LineProfDynamicDepthEnableUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LineProfDynamicDepthEnableUs.setStatus("current")
_Vdsl2LineProfSosTimeDs_Type = Unsigned32
_Vdsl2LineProfSosTimeDs_Object = MibTableColumn
vdsl2LineProfSosTimeDs = _Vdsl2LineProfSosTimeDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 7, 1, 7),
    _Vdsl2LineProfSosTimeDs_Type()
)
vdsl2LineProfSosTimeDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LineProfSosTimeDs.setStatus("current")
_Vdsl2LineProfSosTimeUs_Type = Unsigned32
_Vdsl2LineProfSosTimeUs_Object = MibTableColumn
vdsl2LineProfSosTimeUs = _Vdsl2LineProfSosTimeUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 7, 1, 8),
    _Vdsl2LineProfSosTimeUs_Type()
)
vdsl2LineProfSosTimeUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LineProfSosTimeUs.setStatus("current")
_Vdsl2LineProfSosCrcDs_Type = Unsigned32
_Vdsl2LineProfSosCrcDs_Object = MibTableColumn
vdsl2LineProfSosCrcDs = _Vdsl2LineProfSosCrcDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 7, 1, 9),
    _Vdsl2LineProfSosCrcDs_Type()
)
vdsl2LineProfSosCrcDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LineProfSosCrcDs.setStatus("current")
_Vdsl2LineProfSosCrcUs_Type = Unsigned32
_Vdsl2LineProfSosCrcUs_Object = MibTableColumn
vdsl2LineProfSosCrcUs = _Vdsl2LineProfSosCrcUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 7, 1, 10),
    _Vdsl2LineProfSosCrcUs_Type()
)
vdsl2LineProfSosCrcUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LineProfSosCrcUs.setStatus("current")
_Vdsl2LineProfSosNToneDs_Type = Unsigned32
_Vdsl2LineProfSosNToneDs_Object = MibTableColumn
vdsl2LineProfSosNToneDs = _Vdsl2LineProfSosNToneDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 7, 1, 11),
    _Vdsl2LineProfSosNToneDs_Type()
)
vdsl2LineProfSosNToneDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LineProfSosNToneDs.setStatus("current")
_Vdsl2LineProfSosNToneUs_Type = Unsigned32
_Vdsl2LineProfSosNToneUs_Object = MibTableColumn
vdsl2LineProfSosNToneUs = _Vdsl2LineProfSosNToneUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 7, 1, 12),
    _Vdsl2LineProfSosNToneUs_Type()
)
vdsl2LineProfSosNToneUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LineProfSosNToneUs.setStatus("current")
_Vdsl2LineProfSosMaxDs_Type = Unsigned32
_Vdsl2LineProfSosMaxDs_Object = MibTableColumn
vdsl2LineProfSosMaxDs = _Vdsl2LineProfSosMaxDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 7, 1, 13),
    _Vdsl2LineProfSosMaxDs_Type()
)
vdsl2LineProfSosMaxDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LineProfSosMaxDs.setStatus("current")
_Vdsl2LineProfSosMaxUs_Type = Unsigned32
_Vdsl2LineProfSosMaxUs_Object = MibTableColumn
vdsl2LineProfSosMaxUs = _Vdsl2LineProfSosMaxUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 7, 1, 14),
    _Vdsl2LineProfSosMaxUs_Type()
)
vdsl2LineProfSosMaxUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LineProfSosMaxUs.setStatus("current")


class _Vdsl2LineProfSosMultiStepDs_Type(Integer32):
    """Custom type vdsl2LineProfSosMultiStepDs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("noLimit", 0),
          ("gsos256", 2),
          ("gsos512", 3),
          ("gsos1024", 4))
    )


_Vdsl2LineProfSosMultiStepDs_Type.__name__ = "Integer32"
_Vdsl2LineProfSosMultiStepDs_Object = MibTableColumn
vdsl2LineProfSosMultiStepDs = _Vdsl2LineProfSosMultiStepDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 7, 1, 15),
    _Vdsl2LineProfSosMultiStepDs_Type()
)
vdsl2LineProfSosMultiStepDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LineProfSosMultiStepDs.setStatus("current")


class _Vdsl2LineProfSosMultiStepUs_Type(Integer32):
    """Custom type vdsl2LineProfSosMultiStepUs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("noLimit", 0),
          ("gsos256", 2),
          ("gsos512", 3),
          ("gsos1024", 4))
    )


_Vdsl2LineProfSosMultiStepUs_Type.__name__ = "Integer32"
_Vdsl2LineProfSosMultiStepUs_Object = MibTableColumn
vdsl2LineProfSosMultiStepUs = _Vdsl2LineProfSosMultiStepUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 7, 1, 16),
    _Vdsl2LineProfSosMultiStepUs_Type()
)
vdsl2LineProfSosMultiStepUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LineProfSosMultiStepUs.setStatus("current")


class _Vdsl2LineProfRocEnableDs_Type(Integer32):
    """Custom type vdsl2LineProfRocEnableDs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_Vdsl2LineProfRocEnableDs_Type.__name__ = "Integer32"
_Vdsl2LineProfRocEnableDs_Object = MibTableColumn
vdsl2LineProfRocEnableDs = _Vdsl2LineProfRocEnableDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 7, 1, 17),
    _Vdsl2LineProfRocEnableDs_Type()
)
vdsl2LineProfRocEnableDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LineProfRocEnableDs.setStatus("current")


class _Vdsl2LineProfRocEnableUs_Type(Integer32):
    """Custom type vdsl2LineProfRocEnableUs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_Vdsl2LineProfRocEnableUs_Type.__name__ = "Integer32"
_Vdsl2LineProfRocEnableUs_Object = MibTableColumn
vdsl2LineProfRocEnableUs = _Vdsl2LineProfRocEnableUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 7, 1, 18),
    _Vdsl2LineProfRocEnableUs_Type()
)
vdsl2LineProfRocEnableUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LineProfRocEnableUs.setStatus("current")
_Vdsl2LineProfRocSnrmDs_Type = Unsigned32
_Vdsl2LineProfRocSnrmDs_Object = MibTableColumn
vdsl2LineProfRocSnrmDs = _Vdsl2LineProfRocSnrmDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 7, 1, 19),
    _Vdsl2LineProfRocSnrmDs_Type()
)
vdsl2LineProfRocSnrmDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LineProfRocSnrmDs.setStatus("current")
_Vdsl2LineProfRocSnrmUs_Type = Unsigned32
_Vdsl2LineProfRocSnrmUs_Object = MibTableColumn
vdsl2LineProfRocSnrmUs = _Vdsl2LineProfRocSnrmUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 7, 1, 20),
    _Vdsl2LineProfRocSnrmUs_Type()
)
vdsl2LineProfRocSnrmUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LineProfRocSnrmUs.setStatus("current")
_Vdsl2LineProfRocMinInpDs_Type = Unsigned32
_Vdsl2LineProfRocMinInpDs_Object = MibTableColumn
vdsl2LineProfRocMinInpDs = _Vdsl2LineProfRocMinInpDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 7, 1, 21),
    _Vdsl2LineProfRocMinInpDs_Type()
)
vdsl2LineProfRocMinInpDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LineProfRocMinInpDs.setStatus("current")
_Vdsl2LineProfRocMinInpUs_Type = Unsigned32
_Vdsl2LineProfRocMinInpUs_Object = MibTableColumn
vdsl2LineProfRocMinInpUs = _Vdsl2LineProfRocMinInpUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 7, 1, 22),
    _Vdsl2LineProfRocMinInpUs_Type()
)
vdsl2LineProfRocMinInpUs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LineProfRocMinInpUs.setStatus("current")


class _Vdsl2LineProfDpboType_Type(Integer32):
    """Custom type vdsl2LineProfDpboType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("g9971", 1),
          ("t-com", 2))
    )


_Vdsl2LineProfDpboType_Type.__name__ = "Integer32"
_Vdsl2LineProfDpboType_Object = MibTableColumn
vdsl2LineProfDpboType = _Vdsl2LineProfDpboType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 7, 1, 23),
    _Vdsl2LineProfDpboType_Type()
)
vdsl2LineProfDpboType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LineProfDpboType.setStatus("current")


class _Vdsl2LineProfDpboEselMin_Type(Integer32):
    """Custom type vdsl2LineProfDpboEselMin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 511),
    )


_Vdsl2LineProfDpboEselMin_Type.__name__ = "Integer32"
_Vdsl2LineProfDpboEselMin_Object = MibTableColumn
vdsl2LineProfDpboEselMin = _Vdsl2LineProfDpboEselMin_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 7, 1, 24),
    _Vdsl2LineProfDpboEselMin_Type()
)
vdsl2LineProfDpboEselMin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LineProfDpboEselMin.setStatus("current")
if mibBuilder.loadTexts:
    vdsl2LineProfDpboEselMin.setUnits("0.5 dB")


class _Vdsl2LineProfCompatible_Type(Integer32):
    """Custom type vdsl2LineProfCompatible based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("adsl2", 2),
          ("adsl2Plus", 3))
    )


_Vdsl2LineProfCompatible_Type.__name__ = "Integer32"
_Vdsl2LineProfCompatible_Object = MibTableColumn
vdsl2LineProfCompatible = _Vdsl2LineProfCompatible_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 7, 1, 25),
    _Vdsl2LineProfCompatible_Type()
)
vdsl2LineProfCompatible.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LineProfCompatible.setStatus("current")


class _Vdsl2LineProfTransmissionType_Type(Bits):
    """Custom type vdsl2LineProfTransmissionType based on Bits"""
    namedValues = NamedValues(
        *(("vdsl2", 0),
          ("adsl2Plus", 1),
          ("adsl2", 2),
          ("gdmt", 3),
          ("t1413", 4),
          ("glite", 5),
          ("annexM", 6),
          ("annexL", 7))
    )

_Vdsl2LineProfTransmissionType_Type.__name__ = "Bits"
_Vdsl2LineProfTransmissionType_Object = MibTableColumn
vdsl2LineProfTransmissionType = _Vdsl2LineProfTransmissionType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 7, 1, 26),
    _Vdsl2LineProfTransmissionType_Type()
)
vdsl2LineProfTransmissionType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LineProfTransmissionType.setStatus("current")
_Vdsl2ChanConfProfileExtendedTable_Object = MibTable
vdsl2ChanConfProfileExtendedTable = _Vdsl2ChanConfProfileExtendedTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8)
)
if mibBuilder.loadTexts:
    vdsl2ChanConfProfileExtendedTable.setStatus("current")
_Vdsl2ChanConfProfileExtendedEntry_Object = MibTableRow
vdsl2ChanConfProfileExtendedEntry = _Vdsl2ChanConfProfileExtendedEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8, 1)
)
vdsl2ChanConfProfileExtendedEntry.setIndexNames(
    (0, "VDSL2-LINE-MIB", "xdsl2ChConfProfProfileName"),
)
if mibBuilder.loadTexts:
    vdsl2ChanConfProfileExtendedEntry.setStatus("current")


class _Vdsl2ChanConfProfphyRds_Type(Integer32):
    """Custom type vdsl2ChanConfProfphyRds based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2),
          ("auto", 3))
    )


_Vdsl2ChanConfProfphyRds_Type.__name__ = "Integer32"
_Vdsl2ChanConfProfphyRds_Object = MibTableColumn
vdsl2ChanConfProfphyRds = _Vdsl2ChanConfProfphyRds_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8, 1, 1),
    _Vdsl2ChanConfProfphyRds_Type()
)
vdsl2ChanConfProfphyRds.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2ChanConfProfphyRds.setStatus("current")


class _Vdsl2ChanConfProfphyRus_Type(Integer32):
    """Custom type vdsl2ChanConfProfphyRus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2),
          ("auto", 3))
    )


_Vdsl2ChanConfProfphyRus_Type.__name__ = "Integer32"
_Vdsl2ChanConfProfphyRus_Object = MibTableColumn
vdsl2ChanConfProfphyRus = _Vdsl2ChanConfProfphyRus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8, 1, 2),
    _Vdsl2ChanConfProfphyRus_Type()
)
vdsl2ChanConfProfphyRus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2ChanConfProfphyRus.setStatus("current")
_Vdsl2ChanConfProfProfileName_Type = DisplayString
_Vdsl2ChanConfProfProfileName_Object = MibTableColumn
vdsl2ChanConfProfProfileName = _Vdsl2ChanConfProfProfileName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8, 1, 3),
    _Vdsl2ChanConfProfProfileName_Type()
)
vdsl2ChanConfProfProfileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdsl2ChanConfProfProfileName.setStatus("current")
_Vdsl2ChanConfProfGinpRtxModeDs_Type = Xdsl2ConfigRtxMode
_Vdsl2ChanConfProfGinpRtxModeDs_Object = MibTableColumn
vdsl2ChanConfProfGinpRtxModeDs = _Vdsl2ChanConfProfGinpRtxModeDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8, 1, 4),
    _Vdsl2ChanConfProfGinpRtxModeDs_Type()
)
vdsl2ChanConfProfGinpRtxModeDs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2ChanConfProfGinpRtxModeDs.setStatus("current")
_Vdsl2ChanConfProfGinpRtxModeUs_Type = Xdsl2ConfigRtxMode
_Vdsl2ChanConfProfGinpRtxModeUs_Object = MibTableColumn
vdsl2ChanConfProfGinpRtxModeUs = _Vdsl2ChanConfProfGinpRtxModeUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8, 1, 5),
    _Vdsl2ChanConfProfGinpRtxModeUs_Type()
)
vdsl2ChanConfProfGinpRtxModeUs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2ChanConfProfGinpRtxModeUs.setStatus("current")
_Vdsl2ChanConfProfGinpEtrMaxDs_Type = Unsigned32
_Vdsl2ChanConfProfGinpEtrMaxDs_Object = MibTableColumn
vdsl2ChanConfProfGinpEtrMaxDs = _Vdsl2ChanConfProfGinpEtrMaxDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8, 1, 6),
    _Vdsl2ChanConfProfGinpEtrMaxDs_Type()
)
vdsl2ChanConfProfGinpEtrMaxDs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2ChanConfProfGinpEtrMaxDs.setStatus("current")
_Vdsl2ChanConfProfGinpEtrMaxUs_Type = Unsigned32
_Vdsl2ChanConfProfGinpEtrMaxUs_Object = MibTableColumn
vdsl2ChanConfProfGinpEtrMaxUs = _Vdsl2ChanConfProfGinpEtrMaxUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8, 1, 7),
    _Vdsl2ChanConfProfGinpEtrMaxUs_Type()
)
vdsl2ChanConfProfGinpEtrMaxUs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2ChanConfProfGinpEtrMaxUs.setStatus("current")
_Vdsl2ChanConfProfGinpEtrMinDs_Type = Unsigned32
_Vdsl2ChanConfProfGinpEtrMinDs_Object = MibTableColumn
vdsl2ChanConfProfGinpEtrMinDs = _Vdsl2ChanConfProfGinpEtrMinDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8, 1, 8),
    _Vdsl2ChanConfProfGinpEtrMinDs_Type()
)
vdsl2ChanConfProfGinpEtrMinDs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2ChanConfProfGinpEtrMinDs.setStatus("current")
_Vdsl2ChanConfProfGinpEtrMinUs_Type = Unsigned32
_Vdsl2ChanConfProfGinpEtrMinUs_Object = MibTableColumn
vdsl2ChanConfProfGinpEtrMinUs = _Vdsl2ChanConfProfGinpEtrMinUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8, 1, 9),
    _Vdsl2ChanConfProfGinpEtrMinUs_Type()
)
vdsl2ChanConfProfGinpEtrMinUs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2ChanConfProfGinpEtrMinUs.setStatus("current")
_Vdsl2ChanConfProfGinpNdrMaxDs_Type = Unsigned32
_Vdsl2ChanConfProfGinpNdrMaxDs_Object = MibTableColumn
vdsl2ChanConfProfGinpNdrMaxDs = _Vdsl2ChanConfProfGinpNdrMaxDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8, 1, 10),
    _Vdsl2ChanConfProfGinpNdrMaxDs_Type()
)
vdsl2ChanConfProfGinpNdrMaxDs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2ChanConfProfGinpNdrMaxDs.setStatus("current")
_Vdsl2ChanConfProfGinpNdrMaxUs_Type = Unsigned32
_Vdsl2ChanConfProfGinpNdrMaxUs_Object = MibTableColumn
vdsl2ChanConfProfGinpNdrMaxUs = _Vdsl2ChanConfProfGinpNdrMaxUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8, 1, 11),
    _Vdsl2ChanConfProfGinpNdrMaxUs_Type()
)
vdsl2ChanConfProfGinpNdrMaxUs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2ChanConfProfGinpNdrMaxUs.setStatus("current")
_Vdsl2ChanConfProfGinpShineRatioDs_Type = Unsigned32
_Vdsl2ChanConfProfGinpShineRatioDs_Object = MibTableColumn
vdsl2ChanConfProfGinpShineRatioDs = _Vdsl2ChanConfProfGinpShineRatioDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8, 1, 12),
    _Vdsl2ChanConfProfGinpShineRatioDs_Type()
)
vdsl2ChanConfProfGinpShineRatioDs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2ChanConfProfGinpShineRatioDs.setStatus("current")
_Vdsl2ChanConfProfGinpShineRatioUs_Type = Unsigned32
_Vdsl2ChanConfProfGinpShineRatioUs_Object = MibTableColumn
vdsl2ChanConfProfGinpShineRatioUs = _Vdsl2ChanConfProfGinpShineRatioUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8, 1, 13),
    _Vdsl2ChanConfProfGinpShineRatioUs_Type()
)
vdsl2ChanConfProfGinpShineRatioUs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2ChanConfProfGinpShineRatioUs.setStatus("current")
_Vdsl2ChanConfProfGinpLeftrThresholdDs_Type = Unsigned32
_Vdsl2ChanConfProfGinpLeftrThresholdDs_Object = MibTableColumn
vdsl2ChanConfProfGinpLeftrThresholdDs = _Vdsl2ChanConfProfGinpLeftrThresholdDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8, 1, 14),
    _Vdsl2ChanConfProfGinpLeftrThresholdDs_Type()
)
vdsl2ChanConfProfGinpLeftrThresholdDs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2ChanConfProfGinpLeftrThresholdDs.setStatus("current")
_Vdsl2ChanConfProfGinpLeftrThresholdUs_Type = Unsigned32
_Vdsl2ChanConfProfGinpLeftrThresholdUs_Object = MibTableColumn
vdsl2ChanConfProfGinpLeftrThresholdUs = _Vdsl2ChanConfProfGinpLeftrThresholdUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8, 1, 15),
    _Vdsl2ChanConfProfGinpLeftrThresholdUs_Type()
)
vdsl2ChanConfProfGinpLeftrThresholdUs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2ChanConfProfGinpLeftrThresholdUs.setStatus("current")
_Vdsl2ChanConfProfGinpMaxDelayDs_Type = Unsigned32
_Vdsl2ChanConfProfGinpMaxDelayDs_Object = MibTableColumn
vdsl2ChanConfProfGinpMaxDelayDs = _Vdsl2ChanConfProfGinpMaxDelayDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8, 1, 16),
    _Vdsl2ChanConfProfGinpMaxDelayDs_Type()
)
vdsl2ChanConfProfGinpMaxDelayDs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2ChanConfProfGinpMaxDelayDs.setStatus("current")
_Vdsl2ChanConfProfGinpMaxDelayUs_Type = Unsigned32
_Vdsl2ChanConfProfGinpMaxDelayUs_Object = MibTableColumn
vdsl2ChanConfProfGinpMaxDelayUs = _Vdsl2ChanConfProfGinpMaxDelayUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8, 1, 17),
    _Vdsl2ChanConfProfGinpMaxDelayUs_Type()
)
vdsl2ChanConfProfGinpMaxDelayUs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2ChanConfProfGinpMaxDelayUs.setStatus("current")
_Vdsl2ChanConfProfGinpMinDelayDs_Type = Unsigned32
_Vdsl2ChanConfProfGinpMinDelayDs_Object = MibTableColumn
vdsl2ChanConfProfGinpMinDelayDs = _Vdsl2ChanConfProfGinpMinDelayDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8, 1, 18),
    _Vdsl2ChanConfProfGinpMinDelayDs_Type()
)
vdsl2ChanConfProfGinpMinDelayDs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2ChanConfProfGinpMinDelayDs.setStatus("current")
_Vdsl2ChanConfProfGinpMinDelayUs_Type = Unsigned32
_Vdsl2ChanConfProfGinpMinDelayUs_Object = MibTableColumn
vdsl2ChanConfProfGinpMinDelayUs = _Vdsl2ChanConfProfGinpMinDelayUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8, 1, 19),
    _Vdsl2ChanConfProfGinpMinDelayUs_Type()
)
vdsl2ChanConfProfGinpMinDelayUs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2ChanConfProfGinpMinDelayUs.setStatus("current")
_Vdsl2ChanConfProfGinpInpMinDs_Type = Unsigned32
_Vdsl2ChanConfProfGinpInpMinDs_Object = MibTableColumn
vdsl2ChanConfProfGinpInpMinDs = _Vdsl2ChanConfProfGinpInpMinDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8, 1, 20),
    _Vdsl2ChanConfProfGinpInpMinDs_Type()
)
vdsl2ChanConfProfGinpInpMinDs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2ChanConfProfGinpInpMinDs.setStatus("current")
_Vdsl2ChanConfProfGinpInpMinUs_Type = Unsigned32
_Vdsl2ChanConfProfGinpInpMinUs_Object = MibTableColumn
vdsl2ChanConfProfGinpInpMinUs = _Vdsl2ChanConfProfGinpInpMinUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8, 1, 21),
    _Vdsl2ChanConfProfGinpInpMinUs_Type()
)
vdsl2ChanConfProfGinpInpMinUs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2ChanConfProfGinpInpMinUs.setStatus("current")
_Vdsl2ChanConfProfGinpReinCfgInpDs_Type = Unsigned32
_Vdsl2ChanConfProfGinpReinCfgInpDs_Object = MibTableColumn
vdsl2ChanConfProfGinpReinCfgInpDs = _Vdsl2ChanConfProfGinpReinCfgInpDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8, 1, 22),
    _Vdsl2ChanConfProfGinpReinCfgInpDs_Type()
)
vdsl2ChanConfProfGinpReinCfgInpDs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2ChanConfProfGinpReinCfgInpDs.setStatus("current")
_Vdsl2ChanConfProfGinpReinCfgInpUs_Type = Unsigned32
_Vdsl2ChanConfProfGinpReinCfgInpUs_Object = MibTableColumn
vdsl2ChanConfProfGinpReinCfgInpUs = _Vdsl2ChanConfProfGinpReinCfgInpUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8, 1, 23),
    _Vdsl2ChanConfProfGinpReinCfgInpUs_Type()
)
vdsl2ChanConfProfGinpReinCfgInpUs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2ChanConfProfGinpReinCfgInpUs.setStatus("current")
_Vdsl2ChanConfProfGinpReinCfgFreqDs_Type = Unsigned32
_Vdsl2ChanConfProfGinpReinCfgFreqDs_Object = MibTableColumn
vdsl2ChanConfProfGinpReinCfgFreqDs = _Vdsl2ChanConfProfGinpReinCfgFreqDs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8, 1, 24),
    _Vdsl2ChanConfProfGinpReinCfgFreqDs_Type()
)
vdsl2ChanConfProfGinpReinCfgFreqDs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2ChanConfProfGinpReinCfgFreqDs.setStatus("current")
_Vdsl2ChanConfProfGinpReinCfgFreqUs_Type = Unsigned32
_Vdsl2ChanConfProfGinpReinCfgFreqUs_Object = MibTableColumn
vdsl2ChanConfProfGinpReinCfgFreqUs = _Vdsl2ChanConfProfGinpReinCfgFreqUs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8, 1, 25),
    _Vdsl2ChanConfProfGinpReinCfgFreqUs_Type()
)
vdsl2ChanConfProfGinpReinCfgFreqUs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2ChanConfProfGinpReinCfgFreqUs.setStatus("current")
_Vdsl2ChanConfProfSosMinRateB0Ds_Type = Unsigned32
_Vdsl2ChanConfProfSosMinRateB0Ds_Object = MibTableColumn
vdsl2ChanConfProfSosMinRateB0Ds = _Vdsl2ChanConfProfSosMinRateB0Ds_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8, 1, 26),
    _Vdsl2ChanConfProfSosMinRateB0Ds_Type()
)
vdsl2ChanConfProfSosMinRateB0Ds.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2ChanConfProfSosMinRateB0Ds.setStatus("current")
_Vdsl2ChanConfProfSosMinRateB0Us_Type = Unsigned32
_Vdsl2ChanConfProfSosMinRateB0Us_Object = MibTableColumn
vdsl2ChanConfProfSosMinRateB0Us = _Vdsl2ChanConfProfSosMinRateB0Us_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 8, 1, 27),
    _Vdsl2ChanConfProfSosMinRateB0Us_Type()
)
vdsl2ChanConfProfSosMinRateB0Us.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vdsl2ChanConfProfSosMinRateB0Us.setStatus("current")
_Vdsl2LineAlarmConfProfileExtendedTable_Object = MibTable
vdsl2LineAlarmConfProfileExtendedTable = _Vdsl2LineAlarmConfProfileExtendedTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 9)
)
if mibBuilder.loadTexts:
    vdsl2LineAlarmConfProfileExtendedTable.setStatus("current")
_Vdsl2LineAlarmConfProfileExtendedEntry_Object = MibTableRow
vdsl2LineAlarmConfProfileExtendedEntry = _Vdsl2LineAlarmConfProfileExtendedEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 9, 1)
)
vdsl2LineAlarmConfProfileExtendedEntry.setIndexNames(
    (0, "VDSL2-LINE-MIB", "xdsl2LineAlarmConfProfileName"),
)
if mibBuilder.loadTexts:
    vdsl2LineAlarmConfProfileExtendedEntry.setStatus("current")
_Xdsl2LineAlarmConfProfileXtucThresh15MinLofs_Type = Unsigned32
_Xdsl2LineAlarmConfProfileXtucThresh15MinLofs_Object = MibTableColumn
xdsl2LineAlarmConfProfileXtucThresh15MinLofs = _Xdsl2LineAlarmConfProfileXtucThresh15MinLofs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 9, 1, 1),
    _Xdsl2LineAlarmConfProfileXtucThresh15MinLofs_Type()
)
xdsl2LineAlarmConfProfileXtucThresh15MinLofs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xdsl2LineAlarmConfProfileXtucThresh15MinLofs.setStatus("current")
_Xdsl2LineAlarmConfProfileXturThresh15MinLofs_Type = Unsigned32
_Xdsl2LineAlarmConfProfileXturThresh15MinLofs_Object = MibTableColumn
xdsl2LineAlarmConfProfileXturThresh15MinLofs = _Xdsl2LineAlarmConfProfileXturThresh15MinLofs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 9, 1, 2),
    _Xdsl2LineAlarmConfProfileXturThresh15MinLofs_Type()
)
xdsl2LineAlarmConfProfileXturThresh15MinLofs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xdsl2LineAlarmConfProfileXturThresh15MinLofs.setStatus("current")
_Xdsl2LineAlarmConfProfileThresh15MinLprs_Type = Unsigned32
_Xdsl2LineAlarmConfProfileThresh15MinLprs_Object = MibTableColumn
xdsl2LineAlarmConfProfileThresh15MinLprs = _Xdsl2LineAlarmConfProfileThresh15MinLprs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 9, 1, 3),
    _Xdsl2LineAlarmConfProfileThresh15MinLprs_Type()
)
xdsl2LineAlarmConfProfileThresh15MinLprs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xdsl2LineAlarmConfProfileThresh15MinLprs.setStatus("current")
_Xdsl2LineAlarmConfProfileProfileName_Type = DisplayString
_Xdsl2LineAlarmConfProfileProfileName_Object = MibTableColumn
xdsl2LineAlarmConfProfileProfileName = _Xdsl2LineAlarmConfProfileProfileName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 9, 1, 4),
    _Xdsl2LineAlarmConfProfileProfileName_Type()
)
xdsl2LineAlarmConfProfileProfileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2LineAlarmConfProfileProfileName.setStatus("current")
_Xdsl2LineAlarmConfProfileXtucThresh15MinLols_Type = Unsigned32
_Xdsl2LineAlarmConfProfileXtucThresh15MinLols_Object = MibTableColumn
xdsl2LineAlarmConfProfileXtucThresh15MinLols = _Xdsl2LineAlarmConfProfileXtucThresh15MinLols_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 9, 1, 5),
    _Xdsl2LineAlarmConfProfileXtucThresh15MinLols_Type()
)
xdsl2LineAlarmConfProfileXtucThresh15MinLols.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xdsl2LineAlarmConfProfileXtucThresh15MinLols.setStatus("current")
_Vdsl2LineConfTempExtendedTable_Object = MibTable
vdsl2LineConfTempExtendedTable = _Vdsl2LineConfTempExtendedTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 10)
)
if mibBuilder.loadTexts:
    vdsl2LineConfTempExtendedTable.setStatus("current")
_Vdsl2LineConfTempExtendedEntry_Object = MibTableRow
vdsl2LineConfTempExtendedEntry = _Vdsl2LineConfTempExtendedEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 10, 1)
)
vdsl2LineConfTempExtendedEntry.setIndexNames(
    (0, "VDSL2-LINE-MIB", "xdsl2LConfTempTemplateName"),
)
if mibBuilder.loadTexts:
    vdsl2LineConfTempExtendedEntry.setStatus("current")
_Vdsl2LineConfTempTemplateName_Type = DisplayString
_Vdsl2LineConfTempTemplateName_Object = MibTableColumn
vdsl2LineConfTempTemplateName = _Vdsl2LineConfTempTemplateName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 10, 1, 1),
    _Vdsl2LineConfTempTemplateName_Type()
)
vdsl2LineConfTempTemplateName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdsl2LineConfTempTemplateName.setStatus("current")
_Vdsl2LineConfTempTemplatePortMap_Type = PortList
_Vdsl2LineConfTempTemplatePortMap_Object = MibTableColumn
vdsl2LineConfTempTemplatePortMap = _Vdsl2LineConfTempTemplatePortMap_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 10, 1, 2),
    _Vdsl2LineConfTempTemplatePortMap_Type()
)
vdsl2LineConfTempTemplatePortMap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdsl2LineConfTempTemplatePortMap.setStatus("current")
_Vdsl2LineConfTempInmProfile_Type = DisplayString
_Vdsl2LineConfTempInmProfile_Object = MibTableColumn
vdsl2LineConfTempInmProfile = _Vdsl2LineConfTempInmProfile_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 10, 1, 3),
    _Vdsl2LineConfTempInmProfile_Type()
)
vdsl2LineConfTempInmProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vdsl2LineConfTempInmProfile.setStatus("current")
_Vdsl2AlarmConfTempExtendedTable_Object = MibTable
vdsl2AlarmConfTempExtendedTable = _Vdsl2AlarmConfTempExtendedTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 11)
)
if mibBuilder.loadTexts:
    vdsl2AlarmConfTempExtendedTable.setStatus("current")
_Vdsl2AlarmConfTempExtendedEntry_Object = MibTableRow
vdsl2AlarmConfTempExtendedEntry = _Vdsl2AlarmConfTempExtendedEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 11, 1)
)
vdsl2AlarmConfTempExtendedEntry.setIndexNames(
    (0, "VDSL2-LINE-MIB", "xdsl2LAlarmConfTempTemplateName"),
)
if mibBuilder.loadTexts:
    vdsl2AlarmConfTempExtendedEntry.setStatus("current")
_Vdsl2AlarmConfTempTemplateName_Type = DisplayString
_Vdsl2AlarmConfTempTemplateName_Object = MibTableColumn
vdsl2AlarmConfTempTemplateName = _Vdsl2AlarmConfTempTemplateName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 11, 1, 1),
    _Vdsl2AlarmConfTempTemplateName_Type()
)
vdsl2AlarmConfTempTemplateName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdsl2AlarmConfTempTemplateName.setStatus("current")
_Vdsl2ChanAlarmConfProfileExtendedTable_Object = MibTable
vdsl2ChanAlarmConfProfileExtendedTable = _Vdsl2ChanAlarmConfProfileExtendedTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 12)
)
if mibBuilder.loadTexts:
    vdsl2ChanAlarmConfProfileExtendedTable.setStatus("current")
_Vdsl2ChanAlarmConfProfileExtendedEntry_Object = MibTableRow
vdsl2ChanAlarmConfProfileExtendedEntry = _Vdsl2ChanAlarmConfProfileExtendedEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 12, 1)
)
vdsl2ChanAlarmConfProfileExtendedEntry.setIndexNames(
    (0, "VDSL2-LINE-MIB", "xdsl2ChAlarmConfProfileName"),
)
if mibBuilder.loadTexts:
    vdsl2ChanAlarmConfProfileExtendedEntry.setStatus("current")
_Vdsl2ChanAlarmConfProfProfileName_Type = DisplayString
_Vdsl2ChanAlarmConfProfProfileName_Object = MibTableColumn
vdsl2ChanAlarmConfProfProfileName = _Vdsl2ChanAlarmConfProfProfileName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 12, 1, 1),
    _Vdsl2ChanAlarmConfProfProfileName_Type()
)
vdsl2ChanAlarmConfProfProfileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdsl2ChanAlarmConfProfProfileName.setStatus("current")
_MaxNumOfVdsl2InmProfiles_Type = Integer32
_MaxNumOfVdsl2InmProfiles_Object = MibScalar
maxNumOfVdsl2InmProfiles = _MaxNumOfVdsl2InmProfiles_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 13),
    _MaxNumOfVdsl2InmProfiles_Type()
)
maxNumOfVdsl2InmProfiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfVdsl2InmProfiles.setStatus("current")
_Vdsl2InmConfProfileExtendedTable_Object = MibTable
vdsl2InmConfProfileExtendedTable = _Vdsl2InmConfProfileExtendedTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 14)
)
if mibBuilder.loadTexts:
    vdsl2InmConfProfileExtendedTable.setStatus("current")
_Vdsl2InmConfProfileExtendedEntry_Object = MibTableRow
vdsl2InmConfProfileExtendedEntry = _Vdsl2InmConfProfileExtendedEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 14, 1)
)
vdsl2InmConfProfileExtendedEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "xdsl2InmConfProfProfileName"),
)
if mibBuilder.loadTexts:
    vdsl2InmConfProfileExtendedEntry.setStatus("current")


class _Xdsl2InmConfProfProfileName_Type(DisplayString):
    """Custom type xdsl2InmConfProfProfileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_Xdsl2InmConfProfProfileName_Type.__name__ = "DisplayString"
_Xdsl2InmConfProfProfileName_Object = MibTableColumn
xdsl2InmConfProfProfileName = _Xdsl2InmConfProfProfileName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 14, 1, 1),
    _Xdsl2InmConfProfProfileName_Type()
)
xdsl2InmConfProfProfileName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xdsl2InmConfProfProfileName.setStatus("current")


class _Xdsl2InmConfProfVtucInpEq_Type(Unsigned32):
    """Custom type xdsl2InmConfProfVtucInpEq based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_Xdsl2InmConfProfVtucInpEq_Type.__name__ = "Unsigned32"
_Xdsl2InmConfProfVtucInpEq_Object = MibTableColumn
xdsl2InmConfProfVtucInpEq = _Xdsl2InmConfProfVtucInpEq_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 14, 1, 2),
    _Xdsl2InmConfProfVtucInpEq_Type()
)
xdsl2InmConfProfVtucInpEq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xdsl2InmConfProfVtucInpEq.setStatus("current")


class _Xdsl2InmConfProfVturInpEq_Type(Unsigned32):
    """Custom type xdsl2InmConfProfVturInpEq based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_Xdsl2InmConfProfVturInpEq_Type.__name__ = "Unsigned32"
_Xdsl2InmConfProfVturInpEq_Object = MibTableColumn
xdsl2InmConfProfVturInpEq = _Xdsl2InmConfProfVturInpEq_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 14, 1, 3),
    _Xdsl2InmConfProfVturInpEq_Type()
)
xdsl2InmConfProfVturInpEq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xdsl2InmConfProfVturInpEq.setStatus("current")


class _Xdsl2InmConfProfVtucCC_Type(Unsigned32):
    """Custom type xdsl2InmConfProfVtucCC based on Unsigned32"""
    defaultValue = 0


_Xdsl2InmConfProfVtucCC_Type.__name__ = "Unsigned32"
_Xdsl2InmConfProfVtucCC_Object = MibTableColumn
xdsl2InmConfProfVtucCC = _Xdsl2InmConfProfVtucCC_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 14, 1, 4),
    _Xdsl2InmConfProfVtucCC_Type()
)
xdsl2InmConfProfVtucCC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xdsl2InmConfProfVtucCC.setStatus("current")


class _Xdsl2InmConfProfVturCC_Type(Unsigned32):
    """Custom type xdsl2InmConfProfVturCC based on Unsigned32"""
    defaultValue = 0


_Xdsl2InmConfProfVturCC_Type.__name__ = "Unsigned32"
_Xdsl2InmConfProfVturCC_Object = MibTableColumn
xdsl2InmConfProfVturCC = _Xdsl2InmConfProfVturCC_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 14, 1, 5),
    _Xdsl2InmConfProfVturCC_Type()
)
xdsl2InmConfProfVturCC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xdsl2InmConfProfVturCC.setStatus("current")


class _Xdsl2InmConfProfVtucIATO_Type(Unsigned32):
    """Custom type xdsl2InmConfProfVtucIATO based on Unsigned32"""
    defaultValue = 3


_Xdsl2InmConfProfVtucIATO_Type.__name__ = "Unsigned32"
_Xdsl2InmConfProfVtucIATO_Object = MibTableColumn
xdsl2InmConfProfVtucIATO = _Xdsl2InmConfProfVtucIATO_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 14, 1, 6),
    _Xdsl2InmConfProfVtucIATO_Type()
)
xdsl2InmConfProfVtucIATO.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xdsl2InmConfProfVtucIATO.setStatus("current")


class _Xdsl2InmConfProfVturIATO_Type(Unsigned32):
    """Custom type xdsl2InmConfProfVturIATO based on Unsigned32"""
    defaultValue = 3


_Xdsl2InmConfProfVturIATO_Type.__name__ = "Unsigned32"
_Xdsl2InmConfProfVturIATO_Object = MibTableColumn
xdsl2InmConfProfVturIATO = _Xdsl2InmConfProfVturIATO_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 14, 1, 7),
    _Xdsl2InmConfProfVturIATO_Type()
)
xdsl2InmConfProfVturIATO.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xdsl2InmConfProfVturIATO.setStatus("current")


class _Xdsl2InmConfProfVtucIATS_Type(Unsigned32):
    """Custom type xdsl2InmConfProfVtucIATS based on Unsigned32"""
    defaultValue = 0


_Xdsl2InmConfProfVtucIATS_Type.__name__ = "Unsigned32"
_Xdsl2InmConfProfVtucIATS_Object = MibTableColumn
xdsl2InmConfProfVtucIATS = _Xdsl2InmConfProfVtucIATS_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 14, 1, 8),
    _Xdsl2InmConfProfVtucIATS_Type()
)
xdsl2InmConfProfVtucIATS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xdsl2InmConfProfVtucIATS.setStatus("current")


class _Xdsl2InmConfProfVturIATS_Type(Unsigned32):
    """Custom type xdsl2InmConfProfVturIATS based on Unsigned32"""
    defaultValue = 0


_Xdsl2InmConfProfVturIATS_Type.__name__ = "Unsigned32"
_Xdsl2InmConfProfVturIATS_Object = MibTableColumn
xdsl2InmConfProfVturIATS = _Xdsl2InmConfProfVturIATS_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 14, 1, 9),
    _Xdsl2InmConfProfVturIATS_Type()
)
xdsl2InmConfProfVturIATS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xdsl2InmConfProfVturIATS.setStatus("current")
_Xdsl2InmConfProfRowStatus_Type = RowStatus
_Xdsl2InmConfProfRowStatus_Object = MibTableColumn
xdsl2InmConfProfRowStatus = _Xdsl2InmConfProfRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 14, 1, 10),
    _Xdsl2InmConfProfRowStatus_Type()
)
xdsl2InmConfProfRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xdsl2InmConfProfRowStatus.setStatus("current")


class _Xdsl2InmConfProfVtucISDBUS_Type(Integer32):
    """Custom type xdsl2InmConfProfVtucISDBUS based on Integer32"""
    defaultValue = 0


_Xdsl2InmConfProfVtucISDBUS_Type.__name__ = "Integer32"
_Xdsl2InmConfProfVtucISDBUS_Object = MibTableColumn
xdsl2InmConfProfVtucISDBUS = _Xdsl2InmConfProfVtucISDBUS_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 11, 14, 1, 11),
    _Xdsl2InmConfProfVtucISDBUS_Type()
)
xdsl2InmConfProfVtucISDBUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xdsl2InmConfProfVtucISDBUS.setStatus("current")
_QueueRateLimitProfile_ObjectIdentity = ObjectIdentity
queueRateLimitProfile = _QueueRateLimitProfile_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 12)
)
_MaxNumOfQueueRateLimitProfiles_Type = Integer32
_MaxNumOfQueueRateLimitProfiles_Object = MibScalar
maxNumOfQueueRateLimitProfiles = _MaxNumOfQueueRateLimitProfiles_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 12, 1),
    _MaxNumOfQueueRateLimitProfiles_Type()
)
maxNumOfQueueRateLimitProfiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfQueueRateLimitProfiles.setStatus("current")
_QueueRateLimitProfileTable_Object = MibTable
queueRateLimitProfileTable = _QueueRateLimitProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 12, 2)
)
if mibBuilder.loadTexts:
    queueRateLimitProfileTable.setStatus("current")
_QueueRateLimitProfileEntry_Object = MibTableRow
queueRateLimitProfileEntry = _QueueRateLimitProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 12, 2, 1)
)
queueRateLimitProfileEntry.setIndexNames(
    (1, "ZYXEL-IES5000-MIB", "queueRateLimitProfileName"),
)
if mibBuilder.loadTexts:
    queueRateLimitProfileEntry.setStatus("current")


class _QueueRateLimitProfileName_Type(DisplayString):
    """Custom type queueRateLimitProfileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_QueueRateLimitProfileName_Type.__name__ = "DisplayString"
_QueueRateLimitProfileName_Object = MibTableColumn
queueRateLimitProfileName = _QueueRateLimitProfileName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 12, 2, 1, 1),
    _QueueRateLimitProfileName_Type()
)
queueRateLimitProfileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    queueRateLimitProfileName.setStatus("current")


class _QueueRateLimitProfileQueue0CIR_Type(Integer32):
    """Custom type queueRateLimitProfileQueue0CIR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99968),
    )


_QueueRateLimitProfileQueue0CIR_Type.__name__ = "Integer32"
_QueueRateLimitProfileQueue0CIR_Object = MibTableColumn
queueRateLimitProfileQueue0CIR = _QueueRateLimitProfileQueue0CIR_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 12, 2, 1, 2),
    _QueueRateLimitProfileQueue0CIR_Type()
)
queueRateLimitProfileQueue0CIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    queueRateLimitProfileQueue0CIR.setStatus("current")


class _QueueRateLimitProfileQueue0PIR_Type(Integer32):
    """Custom type queueRateLimitProfileQueue0PIR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99968),
    )


_QueueRateLimitProfileQueue0PIR_Type.__name__ = "Integer32"
_QueueRateLimitProfileQueue0PIR_Object = MibTableColumn
queueRateLimitProfileQueue0PIR = _QueueRateLimitProfileQueue0PIR_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 12, 2, 1, 3),
    _QueueRateLimitProfileQueue0PIR_Type()
)
queueRateLimitProfileQueue0PIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    queueRateLimitProfileQueue0PIR.setStatus("current")


class _QueueRateLimitProfileQueue1CIR_Type(Integer32):
    """Custom type queueRateLimitProfileQueue1CIR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99968),
    )


_QueueRateLimitProfileQueue1CIR_Type.__name__ = "Integer32"
_QueueRateLimitProfileQueue1CIR_Object = MibTableColumn
queueRateLimitProfileQueue1CIR = _QueueRateLimitProfileQueue1CIR_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 12, 2, 1, 4),
    _QueueRateLimitProfileQueue1CIR_Type()
)
queueRateLimitProfileQueue1CIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    queueRateLimitProfileQueue1CIR.setStatus("current")


class _QueueRateLimitProfileQueue1PIR_Type(Integer32):
    """Custom type queueRateLimitProfileQueue1PIR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99968),
    )


_QueueRateLimitProfileQueue1PIR_Type.__name__ = "Integer32"
_QueueRateLimitProfileQueue1PIR_Object = MibTableColumn
queueRateLimitProfileQueue1PIR = _QueueRateLimitProfileQueue1PIR_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 12, 2, 1, 5),
    _QueueRateLimitProfileQueue1PIR_Type()
)
queueRateLimitProfileQueue1PIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    queueRateLimitProfileQueue1PIR.setStatus("current")


class _QueueRateLimitProfileQueue2CIR_Type(Integer32):
    """Custom type queueRateLimitProfileQueue2CIR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99968),
    )


_QueueRateLimitProfileQueue2CIR_Type.__name__ = "Integer32"
_QueueRateLimitProfileQueue2CIR_Object = MibTableColumn
queueRateLimitProfileQueue2CIR = _QueueRateLimitProfileQueue2CIR_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 12, 2, 1, 6),
    _QueueRateLimitProfileQueue2CIR_Type()
)
queueRateLimitProfileQueue2CIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    queueRateLimitProfileQueue2CIR.setStatus("current")


class _QueueRateLimitProfileQueue2PIR_Type(Integer32):
    """Custom type queueRateLimitProfileQueue2PIR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99968),
    )


_QueueRateLimitProfileQueue2PIR_Type.__name__ = "Integer32"
_QueueRateLimitProfileQueue2PIR_Object = MibTableColumn
queueRateLimitProfileQueue2PIR = _QueueRateLimitProfileQueue2PIR_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 12, 2, 1, 7),
    _QueueRateLimitProfileQueue2PIR_Type()
)
queueRateLimitProfileQueue2PIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    queueRateLimitProfileQueue2PIR.setStatus("current")


class _QueueRateLimitProfileQueue3CIR_Type(Integer32):
    """Custom type queueRateLimitProfileQueue3CIR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99968),
    )


_QueueRateLimitProfileQueue3CIR_Type.__name__ = "Integer32"
_QueueRateLimitProfileQueue3CIR_Object = MibTableColumn
queueRateLimitProfileQueue3CIR = _QueueRateLimitProfileQueue3CIR_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 12, 2, 1, 8),
    _QueueRateLimitProfileQueue3CIR_Type()
)
queueRateLimitProfileQueue3CIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    queueRateLimitProfileQueue3CIR.setStatus("current")


class _QueueRateLimitProfileQueue3PIR_Type(Integer32):
    """Custom type queueRateLimitProfileQueue3PIR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99968),
    )


_QueueRateLimitProfileQueue3PIR_Type.__name__ = "Integer32"
_QueueRateLimitProfileQueue3PIR_Object = MibTableColumn
queueRateLimitProfileQueue3PIR = _QueueRateLimitProfileQueue3PIR_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 12, 2, 1, 9),
    _QueueRateLimitProfileQueue3PIR_Type()
)
queueRateLimitProfileQueue3PIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    queueRateLimitProfileQueue3PIR.setStatus("current")


class _QueueRateLimitProfileQueue4CIR_Type(Integer32):
    """Custom type queueRateLimitProfileQueue4CIR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99968),
    )


_QueueRateLimitProfileQueue4CIR_Type.__name__ = "Integer32"
_QueueRateLimitProfileQueue4CIR_Object = MibTableColumn
queueRateLimitProfileQueue4CIR = _QueueRateLimitProfileQueue4CIR_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 12, 2, 1, 10),
    _QueueRateLimitProfileQueue4CIR_Type()
)
queueRateLimitProfileQueue4CIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    queueRateLimitProfileQueue4CIR.setStatus("current")


class _QueueRateLimitProfileQueue4PIR_Type(Integer32):
    """Custom type queueRateLimitProfileQueue4PIR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99968),
    )


_QueueRateLimitProfileQueue4PIR_Type.__name__ = "Integer32"
_QueueRateLimitProfileQueue4PIR_Object = MibTableColumn
queueRateLimitProfileQueue4PIR = _QueueRateLimitProfileQueue4PIR_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 12, 2, 1, 11),
    _QueueRateLimitProfileQueue4PIR_Type()
)
queueRateLimitProfileQueue4PIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    queueRateLimitProfileQueue4PIR.setStatus("current")


class _QueueRateLimitProfileQueue5CIR_Type(Integer32):
    """Custom type queueRateLimitProfileQueue5CIR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99968),
    )


_QueueRateLimitProfileQueue5CIR_Type.__name__ = "Integer32"
_QueueRateLimitProfileQueue5CIR_Object = MibTableColumn
queueRateLimitProfileQueue5CIR = _QueueRateLimitProfileQueue5CIR_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 12, 2, 1, 12),
    _QueueRateLimitProfileQueue5CIR_Type()
)
queueRateLimitProfileQueue5CIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    queueRateLimitProfileQueue5CIR.setStatus("current")


class _QueueRateLimitProfileQueue5PIR_Type(Integer32):
    """Custom type queueRateLimitProfileQueue5PIR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99968),
    )


_QueueRateLimitProfileQueue5PIR_Type.__name__ = "Integer32"
_QueueRateLimitProfileQueue5PIR_Object = MibTableColumn
queueRateLimitProfileQueue5PIR = _QueueRateLimitProfileQueue5PIR_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 12, 2, 1, 13),
    _QueueRateLimitProfileQueue5PIR_Type()
)
queueRateLimitProfileQueue5PIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    queueRateLimitProfileQueue5PIR.setStatus("current")


class _QueueRateLimitProfileQueue6CIR_Type(Integer32):
    """Custom type queueRateLimitProfileQueue6CIR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99968),
    )


_QueueRateLimitProfileQueue6CIR_Type.__name__ = "Integer32"
_QueueRateLimitProfileQueue6CIR_Object = MibTableColumn
queueRateLimitProfileQueue6CIR = _QueueRateLimitProfileQueue6CIR_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 12, 2, 1, 14),
    _QueueRateLimitProfileQueue6CIR_Type()
)
queueRateLimitProfileQueue6CIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    queueRateLimitProfileQueue6CIR.setStatus("current")


class _QueueRateLimitProfileQueue6PIR_Type(Integer32):
    """Custom type queueRateLimitProfileQueue6PIR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99968),
    )


_QueueRateLimitProfileQueue6PIR_Type.__name__ = "Integer32"
_QueueRateLimitProfileQueue6PIR_Object = MibTableColumn
queueRateLimitProfileQueue6PIR = _QueueRateLimitProfileQueue6PIR_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 12, 2, 1, 15),
    _QueueRateLimitProfileQueue6PIR_Type()
)
queueRateLimitProfileQueue6PIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    queueRateLimitProfileQueue6PIR.setStatus("current")


class _QueueRateLimitProfileQueue7CIR_Type(Integer32):
    """Custom type queueRateLimitProfileQueue7CIR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99968),
    )


_QueueRateLimitProfileQueue7CIR_Type.__name__ = "Integer32"
_QueueRateLimitProfileQueue7CIR_Object = MibTableColumn
queueRateLimitProfileQueue7CIR = _QueueRateLimitProfileQueue7CIR_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 12, 2, 1, 16),
    _QueueRateLimitProfileQueue7CIR_Type()
)
queueRateLimitProfileQueue7CIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    queueRateLimitProfileQueue7CIR.setStatus("current")


class _QueueRateLimitProfileQueue7PIR_Type(Integer32):
    """Custom type queueRateLimitProfileQueue7PIR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99968),
    )


_QueueRateLimitProfileQueue7PIR_Type.__name__ = "Integer32"
_QueueRateLimitProfileQueue7PIR_Object = MibTableColumn
queueRateLimitProfileQueue7PIR = _QueueRateLimitProfileQueue7PIR_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 12, 2, 1, 17),
    _QueueRateLimitProfileQueue7PIR_Type()
)
queueRateLimitProfileQueue7PIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    queueRateLimitProfileQueue7PIR.setStatus("current")
_QueueRateLimitProfileRowStatus_Type = RowStatus
_QueueRateLimitProfileRowStatus_Object = MibTableColumn
queueRateLimitProfileRowStatus = _QueueRateLimitProfileRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 12, 2, 1, 18),
    _QueueRateLimitProfileRowStatus_Type()
)
queueRateLimitProfileRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    queueRateLimitProfileRowStatus.setStatus("current")
_Ipqos2Profile_ObjectIdentity = ObjectIdentity
ipqos2Profile = _Ipqos2Profile_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13)
)
_MaxNumOfIpqos2Profiles_Type = Integer32
_MaxNumOfIpqos2Profiles_Object = MibScalar
maxNumOfIpqos2Profiles = _MaxNumOfIpqos2Profiles_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 1),
    _MaxNumOfIpqos2Profiles_Type()
)
maxNumOfIpqos2Profiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfIpqos2Profiles.setStatus("current")
_Ipqos2ProfileTable_Object = MibTable
ipqos2ProfileTable = _Ipqos2ProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2)
)
if mibBuilder.loadTexts:
    ipqos2ProfileTable.setStatus("current")
_Ipqos2ProfileEntry_Object = MibTableRow
ipqos2ProfileEntry = _Ipqos2ProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1)
)
ipqos2ProfileEntry.setIndexNames(
    (1, "ZYXEL-IES5000-MIB", "ipqos2ProfileName"),
)
if mibBuilder.loadTexts:
    ipqos2ProfileEntry.setStatus("current")


class _Ipqos2ProfileName_Type(DisplayString):
    """Custom type ipqos2ProfileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_Ipqos2ProfileName_Type.__name__ = "DisplayString"
_Ipqos2ProfileName_Object = MibTableColumn
ipqos2ProfileName = _Ipqos2ProfileName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 1),
    _Ipqos2ProfileName_Type()
)
ipqos2ProfileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipqos2ProfileName.setStatus("current")


class _Ipqos2ProfileAlgorithm_Type(Integer32):
    """Custom type ipqos2ProfileAlgorithm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )


_Ipqos2ProfileAlgorithm_Type.__name__ = "Integer32"
_Ipqos2ProfileAlgorithm_Object = MibTableColumn
ipqos2ProfileAlgorithm = _Ipqos2ProfileAlgorithm_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 2),
    _Ipqos2ProfileAlgorithm_Type()
)
ipqos2ProfileAlgorithm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqos2ProfileAlgorithm.setStatus("current")


class _Ipqos2ProfileVcLevel_Type(Integer32):
    """Custom type ipqos2ProfileVcLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Ipqos2ProfileVcLevel_Type.__name__ = "Integer32"
_Ipqos2ProfileVcLevel_Object = MibTableColumn
ipqos2ProfileVcLevel = _Ipqos2ProfileVcLevel_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 3),
    _Ipqos2ProfileVcLevel_Type()
)
ipqos2ProfileVcLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqos2ProfileVcLevel.setStatus("current")


class _Ipqos2ProfileVcMaxRate_Type(Integer32):
    """Custom type ipqos2ProfileVcMaxRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(32, 32000),
    )


_Ipqos2ProfileVcMaxRate_Type.__name__ = "Integer32"
_Ipqos2ProfileVcMaxRate_Object = MibTableColumn
ipqos2ProfileVcMaxRate = _Ipqos2ProfileVcMaxRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 4),
    _Ipqos2ProfileVcMaxRate_Type()
)
ipqos2ProfileVcMaxRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqos2ProfileVcMaxRate.setStatus("current")


class _Ipqos2ProfileVcDepth_Type(Integer32):
    """Custom type ipqos2ProfileVcDepth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(30, 255),
    )


_Ipqos2ProfileVcDepth_Type.__name__ = "Integer32"
_Ipqos2ProfileVcDepth_Object = MibTableColumn
ipqos2ProfileVcDepth = _Ipqos2ProfileVcDepth_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 5),
    _Ipqos2ProfileVcDepth_Type()
)
ipqos2ProfileVcDepth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqos2ProfileVcDepth.setStatus("current")


class _Ipqos2ProfileQueue0Weight_Type(Integer32):
    """Custom type ipqos2ProfileQueue0Weight based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 50),
    )


_Ipqos2ProfileQueue0Weight_Type.__name__ = "Integer32"
_Ipqos2ProfileQueue0Weight_Object = MibTableColumn
ipqos2ProfileQueue0Weight = _Ipqos2ProfileQueue0Weight_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 6),
    _Ipqos2ProfileQueue0Weight_Type()
)
ipqos2ProfileQueue0Weight.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqos2ProfileQueue0Weight.setStatus("current")


class _Ipqos2ProfileQueue0MaxRate_Type(Integer32):
    """Custom type ipqos2ProfileQueue0MaxRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(32, 32000),
    )


_Ipqos2ProfileQueue0MaxRate_Type.__name__ = "Integer32"
_Ipqos2ProfileQueue0MaxRate_Object = MibTableColumn
ipqos2ProfileQueue0MaxRate = _Ipqos2ProfileQueue0MaxRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 7),
    _Ipqos2ProfileQueue0MaxRate_Type()
)
ipqos2ProfileQueue0MaxRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqos2ProfileQueue0MaxRate.setStatus("current")


class _Ipqos2ProfileQueue0Depth_Type(Integer32):
    """Custom type ipqos2ProfileQueue0Depth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(30, 255),
    )


_Ipqos2ProfileQueue0Depth_Type.__name__ = "Integer32"
_Ipqos2ProfileQueue0Depth_Object = MibTableColumn
ipqos2ProfileQueue0Depth = _Ipqos2ProfileQueue0Depth_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 8),
    _Ipqos2ProfileQueue0Depth_Type()
)
ipqos2ProfileQueue0Depth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqos2ProfileQueue0Depth.setStatus("current")


class _Ipqos2ProfileQueue1Weight_Type(Integer32):
    """Custom type ipqos2ProfileQueue1Weight based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 50),
    )


_Ipqos2ProfileQueue1Weight_Type.__name__ = "Integer32"
_Ipqos2ProfileQueue1Weight_Object = MibTableColumn
ipqos2ProfileQueue1Weight = _Ipqos2ProfileQueue1Weight_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 9),
    _Ipqos2ProfileQueue1Weight_Type()
)
ipqos2ProfileQueue1Weight.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqos2ProfileQueue1Weight.setStatus("current")


class _Ipqos2ProfileQueue1MaxRate_Type(Integer32):
    """Custom type ipqos2ProfileQueue1MaxRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(32, 32000),
    )


_Ipqos2ProfileQueue1MaxRate_Type.__name__ = "Integer32"
_Ipqos2ProfileQueue1MaxRate_Object = MibTableColumn
ipqos2ProfileQueue1MaxRate = _Ipqos2ProfileQueue1MaxRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 10),
    _Ipqos2ProfileQueue1MaxRate_Type()
)
ipqos2ProfileQueue1MaxRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqos2ProfileQueue1MaxRate.setStatus("current")


class _Ipqos2ProfileQueue1Depth_Type(Integer32):
    """Custom type ipqos2ProfileQueue1Depth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(30, 255),
    )


_Ipqos2ProfileQueue1Depth_Type.__name__ = "Integer32"
_Ipqos2ProfileQueue1Depth_Object = MibTableColumn
ipqos2ProfileQueue1Depth = _Ipqos2ProfileQueue1Depth_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 11),
    _Ipqos2ProfileQueue1Depth_Type()
)
ipqos2ProfileQueue1Depth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqos2ProfileQueue1Depth.setStatus("current")


class _Ipqos2ProfileQueue2Weight_Type(Integer32):
    """Custom type ipqos2ProfileQueue2Weight based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 50),
    )


_Ipqos2ProfileQueue2Weight_Type.__name__ = "Integer32"
_Ipqos2ProfileQueue2Weight_Object = MibTableColumn
ipqos2ProfileQueue2Weight = _Ipqos2ProfileQueue2Weight_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 12),
    _Ipqos2ProfileQueue2Weight_Type()
)
ipqos2ProfileQueue2Weight.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqos2ProfileQueue2Weight.setStatus("current")


class _Ipqos2ProfileQueue2MaxRate_Type(Integer32):
    """Custom type ipqos2ProfileQueue2MaxRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(32, 32000),
    )


_Ipqos2ProfileQueue2MaxRate_Type.__name__ = "Integer32"
_Ipqos2ProfileQueue2MaxRate_Object = MibTableColumn
ipqos2ProfileQueue2MaxRate = _Ipqos2ProfileQueue2MaxRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 13),
    _Ipqos2ProfileQueue2MaxRate_Type()
)
ipqos2ProfileQueue2MaxRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqos2ProfileQueue2MaxRate.setStatus("current")


class _Ipqos2ProfileQueue2Depth_Type(Integer32):
    """Custom type ipqos2ProfileQueue2Depth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(30, 255),
    )


_Ipqos2ProfileQueue2Depth_Type.__name__ = "Integer32"
_Ipqos2ProfileQueue2Depth_Object = MibTableColumn
ipqos2ProfileQueue2Depth = _Ipqos2ProfileQueue2Depth_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 14),
    _Ipqos2ProfileQueue2Depth_Type()
)
ipqos2ProfileQueue2Depth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqos2ProfileQueue2Depth.setStatus("current")


class _Ipqos2ProfileQueue3Weight_Type(Integer32):
    """Custom type ipqos2ProfileQueue3Weight based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 50),
    )


_Ipqos2ProfileQueue3Weight_Type.__name__ = "Integer32"
_Ipqos2ProfileQueue3Weight_Object = MibTableColumn
ipqos2ProfileQueue3Weight = _Ipqos2ProfileQueue3Weight_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 15),
    _Ipqos2ProfileQueue3Weight_Type()
)
ipqos2ProfileQueue3Weight.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqos2ProfileQueue3Weight.setStatus("current")


class _Ipqos2ProfileQueue3MaxRate_Type(Integer32):
    """Custom type ipqos2ProfileQueue3MaxRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(32, 32000),
    )


_Ipqos2ProfileQueue3MaxRate_Type.__name__ = "Integer32"
_Ipqos2ProfileQueue3MaxRate_Object = MibTableColumn
ipqos2ProfileQueue3MaxRate = _Ipqos2ProfileQueue3MaxRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 16),
    _Ipqos2ProfileQueue3MaxRate_Type()
)
ipqos2ProfileQueue3MaxRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqos2ProfileQueue3MaxRate.setStatus("current")


class _Ipqos2ProfileQueue3Depth_Type(Integer32):
    """Custom type ipqos2ProfileQueue3Depth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(30, 255),
    )


_Ipqos2ProfileQueue3Depth_Type.__name__ = "Integer32"
_Ipqos2ProfileQueue3Depth_Object = MibTableColumn
ipqos2ProfileQueue3Depth = _Ipqos2ProfileQueue3Depth_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 17),
    _Ipqos2ProfileQueue3Depth_Type()
)
ipqos2ProfileQueue3Depth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqos2ProfileQueue3Depth.setStatus("current")


class _Ipqos2ProfileQueue4Weight_Type(Integer32):
    """Custom type ipqos2ProfileQueue4Weight based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 50),
    )


_Ipqos2ProfileQueue4Weight_Type.__name__ = "Integer32"
_Ipqos2ProfileQueue4Weight_Object = MibTableColumn
ipqos2ProfileQueue4Weight = _Ipqos2ProfileQueue4Weight_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 18),
    _Ipqos2ProfileQueue4Weight_Type()
)
ipqos2ProfileQueue4Weight.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqos2ProfileQueue4Weight.setStatus("current")


class _Ipqos2ProfileQueue4MaxRate_Type(Integer32):
    """Custom type ipqos2ProfileQueue4MaxRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(32, 32000),
    )


_Ipqos2ProfileQueue4MaxRate_Type.__name__ = "Integer32"
_Ipqos2ProfileQueue4MaxRate_Object = MibTableColumn
ipqos2ProfileQueue4MaxRate = _Ipqos2ProfileQueue4MaxRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 19),
    _Ipqos2ProfileQueue4MaxRate_Type()
)
ipqos2ProfileQueue4MaxRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqos2ProfileQueue4MaxRate.setStatus("current")


class _Ipqos2ProfileQueue4Depth_Type(Integer32):
    """Custom type ipqos2ProfileQueue4Depth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(30, 255),
    )


_Ipqos2ProfileQueue4Depth_Type.__name__ = "Integer32"
_Ipqos2ProfileQueue4Depth_Object = MibTableColumn
ipqos2ProfileQueue4Depth = _Ipqos2ProfileQueue4Depth_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 20),
    _Ipqos2ProfileQueue4Depth_Type()
)
ipqos2ProfileQueue4Depth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqos2ProfileQueue4Depth.setStatus("current")


class _Ipqos2ProfileQueue5Weight_Type(Integer32):
    """Custom type ipqos2ProfileQueue5Weight based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 50),
    )


_Ipqos2ProfileQueue5Weight_Type.__name__ = "Integer32"
_Ipqos2ProfileQueue5Weight_Object = MibTableColumn
ipqos2ProfileQueue5Weight = _Ipqos2ProfileQueue5Weight_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 21),
    _Ipqos2ProfileQueue5Weight_Type()
)
ipqos2ProfileQueue5Weight.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqos2ProfileQueue5Weight.setStatus("current")


class _Ipqos2ProfileQueue5MaxRate_Type(Integer32):
    """Custom type ipqos2ProfileQueue5MaxRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(32, 32000),
    )


_Ipqos2ProfileQueue5MaxRate_Type.__name__ = "Integer32"
_Ipqos2ProfileQueue5MaxRate_Object = MibTableColumn
ipqos2ProfileQueue5MaxRate = _Ipqos2ProfileQueue5MaxRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 22),
    _Ipqos2ProfileQueue5MaxRate_Type()
)
ipqos2ProfileQueue5MaxRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqos2ProfileQueue5MaxRate.setStatus("current")


class _Ipqos2ProfileQueue5Depth_Type(Integer32):
    """Custom type ipqos2ProfileQueue5Depth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(30, 255),
    )


_Ipqos2ProfileQueue5Depth_Type.__name__ = "Integer32"
_Ipqos2ProfileQueue5Depth_Object = MibTableColumn
ipqos2ProfileQueue5Depth = _Ipqos2ProfileQueue5Depth_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 23),
    _Ipqos2ProfileQueue5Depth_Type()
)
ipqos2ProfileQueue5Depth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqos2ProfileQueue5Depth.setStatus("current")


class _Ipqos2ProfileQueue6Weight_Type(Integer32):
    """Custom type ipqos2ProfileQueue6Weight based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 50),
    )


_Ipqos2ProfileQueue6Weight_Type.__name__ = "Integer32"
_Ipqos2ProfileQueue6Weight_Object = MibTableColumn
ipqos2ProfileQueue6Weight = _Ipqos2ProfileQueue6Weight_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 24),
    _Ipqos2ProfileQueue6Weight_Type()
)
ipqos2ProfileQueue6Weight.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqos2ProfileQueue6Weight.setStatus("current")


class _Ipqos2ProfileQueue6MaxRate_Type(Integer32):
    """Custom type ipqos2ProfileQueue6MaxRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(32, 32000),
    )


_Ipqos2ProfileQueue6MaxRate_Type.__name__ = "Integer32"
_Ipqos2ProfileQueue6MaxRate_Object = MibTableColumn
ipqos2ProfileQueue6MaxRate = _Ipqos2ProfileQueue6MaxRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 25),
    _Ipqos2ProfileQueue6MaxRate_Type()
)
ipqos2ProfileQueue6MaxRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqos2ProfileQueue6MaxRate.setStatus("current")


class _Ipqos2ProfileQueue6Depth_Type(Integer32):
    """Custom type ipqos2ProfileQueue6Depth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(30, 255),
    )


_Ipqos2ProfileQueue6Depth_Type.__name__ = "Integer32"
_Ipqos2ProfileQueue6Depth_Object = MibTableColumn
ipqos2ProfileQueue6Depth = _Ipqos2ProfileQueue6Depth_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 26),
    _Ipqos2ProfileQueue6Depth_Type()
)
ipqos2ProfileQueue6Depth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqos2ProfileQueue6Depth.setStatus("current")


class _Ipqos2ProfileQueue7Weight_Type(Integer32):
    """Custom type ipqos2ProfileQueue7Weight based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 50),
    )


_Ipqos2ProfileQueue7Weight_Type.__name__ = "Integer32"
_Ipqos2ProfileQueue7Weight_Object = MibTableColumn
ipqos2ProfileQueue7Weight = _Ipqos2ProfileQueue7Weight_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 27),
    _Ipqos2ProfileQueue7Weight_Type()
)
ipqos2ProfileQueue7Weight.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqos2ProfileQueue7Weight.setStatus("current")


class _Ipqos2ProfileQueue7MaxRate_Type(Integer32):
    """Custom type ipqos2ProfileQueue7MaxRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(32, 32000),
    )


_Ipqos2ProfileQueue7MaxRate_Type.__name__ = "Integer32"
_Ipqos2ProfileQueue7MaxRate_Object = MibTableColumn
ipqos2ProfileQueue7MaxRate = _Ipqos2ProfileQueue7MaxRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 28),
    _Ipqos2ProfileQueue7MaxRate_Type()
)
ipqos2ProfileQueue7MaxRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqos2ProfileQueue7MaxRate.setStatus("current")


class _Ipqos2ProfileQueue7Depth_Type(Integer32):
    """Custom type ipqos2ProfileQueue7Depth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(30, 255),
    )


_Ipqos2ProfileQueue7Depth_Type.__name__ = "Integer32"
_Ipqos2ProfileQueue7Depth_Object = MibTableColumn
ipqos2ProfileQueue7Depth = _Ipqos2ProfileQueue7Depth_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 29),
    _Ipqos2ProfileQueue7Depth_Type()
)
ipqos2ProfileQueue7Depth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipqos2ProfileQueue7Depth.setStatus("current")
_Ipqos2ProfileRowStatus_Type = RowStatus
_Ipqos2ProfileRowStatus_Object = MibTableColumn
ipqos2ProfileRowStatus = _Ipqos2ProfileRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 9, 13, 2, 1, 30),
    _Ipqos2ProfileRowStatus_Type()
)
ipqos2ProfileRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipqos2ProfileRowStatus.setStatus("current")
_Switch_ObjectIdentity = ObjectIdentity
switch = _Switch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10)
)
_ManagementVLANId_Type = VlanIndex
_ManagementVLANId_Object = MibScalar
managementVLANId = _ManagementVLANId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 1),
    _ManagementVLANId_Type()
)
managementVLANId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    managementVLANId.setStatus("current")
_MaxNumOfStaticVlans_Type = Integer32
_MaxNumOfStaticVlans_Object = MibScalar
maxNumOfStaticVlans = _MaxNumOfStaticVlans_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 2),
    _MaxNumOfStaticVlans_Type()
)
maxNumOfStaticVlans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfStaticVlans.setStatus("current")
_Enetport_ObjectIdentity = ObjectIdentity
enetport = _Enetport_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 3)
)
_EnetPortTable_Object = MibTable
enetPortTable = _EnetPortTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 3, 1)
)
if mibBuilder.loadTexts:
    enetPortTable.setStatus("current")
_EnetPortEntry_Object = MibTableRow
enetPortEntry = _EnetPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 3, 1, 1)
)
enetPortEntry.setIndexNames(
    (0, "BRIDGE-MIB", "dot1dBasePort"),
)
if mibBuilder.loadTexts:
    enetPortEntry.setStatus("current")


class _EnetPortSpeed_Type(Integer32):
    """Custom type enetPortSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("e1000M-fullduplex", 2),
          ("e100M-fullduplex", 3),
          ("e100M-halfduplex", 4),
          ("e10M-fullduplex", 5),
          ("e10M-halfduplex", 6),
          ("e10G-fullduplex", 7))
    )


_EnetPortSpeed_Type.__name__ = "Integer32"
_EnetPortSpeed_Object = MibTableColumn
enetPortSpeed = _EnetPortSpeed_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 3, 1, 1, 1),
    _EnetPortSpeed_Type()
)
enetPortSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    enetPortSpeed.setStatus("current")


class _EnetPortFlowControl_Type(Integer32):
    """Custom type enetPortFlowControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_EnetPortFlowControl_Type.__name__ = "Integer32"
_EnetPortFlowControl_Object = MibTableColumn
enetPortFlowControl = _EnetPortFlowControl_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 3, 1, 1, 2),
    _EnetPortFlowControl_Type()
)
enetPortFlowControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    enetPortFlowControl.setStatus("current")


class _EnetPortMode_Type(Integer32):
    """Custom type enetPortMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("uplink", 1),
          ("subtending", 2))
    )


_EnetPortMode_Type.__name__ = "Integer32"
_EnetPortMode_Object = MibTableColumn
enetPortMode = _EnetPortMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 3, 1, 1, 3),
    _EnetPortMode_Type()
)
enetPortMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    enetPortMode.setStatus("current")


class _EnetPortVLANTrunkEnable_Type(Integer32):
    """Custom type enetPortVLANTrunkEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_EnetPortVLANTrunkEnable_Type.__name__ = "Integer32"
_EnetPortVLANTrunkEnable_Object = MibTableColumn
enetPortVLANTrunkEnable = _EnetPortVLANTrunkEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 3, 1, 1, 4),
    _EnetPortVLANTrunkEnable_Type()
)
enetPortVLANTrunkEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    enetPortVLANTrunkEnable.setStatus("current")


class _EnetPortDscpEnable_Type(Integer32):
    """Custom type enetPortDscpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_EnetPortDscpEnable_Type.__name__ = "Integer32"
_EnetPortDscpEnable_Object = MibTableColumn
enetPortDscpEnable = _EnetPortDscpEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 3, 1, 1, 5),
    _EnetPortDscpEnable_Type()
)
enetPortDscpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    enetPortDscpEnable.setStatus("current")
_EnetPortTpid_Type = Integer32
_EnetPortTpid_Object = MibTableColumn
enetPortTpid = _EnetPortTpid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 3, 1, 1, 6),
    _EnetPortTpid_Type()
)
enetPortTpid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    enetPortTpid.setStatus("current")
_EnetPortSfpTable_Object = MibTable
enetPortSfpTable = _EnetPortSfpTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 3, 2)
)
if mibBuilder.loadTexts:
    enetPortSfpTable.setStatus("current")
_EnetPortSfpEntry_Object = MibTableRow
enetPortSfpEntry = _EnetPortSfpEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 3, 2, 1)
)
enetPortSfpEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    enetPortSfpEntry.setStatus("current")
_SfpTempLow_Type = Integer32
_SfpTempLow_Object = MibTableColumn
sfpTempLow = _SfpTempLow_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 3, 2, 1, 1),
    _SfpTempLow_Type()
)
sfpTempLow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sfpTempLow.setStatus("current")
_SfpTempHigh_Type = Integer32
_SfpTempHigh_Object = MibTableColumn
sfpTempHigh = _SfpTempHigh_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 3, 2, 1, 2),
    _SfpTempHigh_Type()
)
sfpTempHigh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sfpTempHigh.setStatus("current")
_SfpVccLow_Type = Integer32
_SfpVccLow_Object = MibTableColumn
sfpVccLow = _SfpVccLow_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 3, 2, 1, 3),
    _SfpVccLow_Type()
)
sfpVccLow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sfpVccLow.setStatus("current")
_SfpVccHigh_Type = Integer32
_SfpVccHigh_Object = MibTableColumn
sfpVccHigh = _SfpVccHigh_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 3, 2, 1, 4),
    _SfpVccHigh_Type()
)
sfpVccHigh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sfpVccHigh.setStatus("current")
_SfpTxBiasLow_Type = Integer32
_SfpTxBiasLow_Object = MibTableColumn
sfpTxBiasLow = _SfpTxBiasLow_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 3, 2, 1, 5),
    _SfpTxBiasLow_Type()
)
sfpTxBiasLow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sfpTxBiasLow.setStatus("current")
_SfpTxBiasHigh_Type = Integer32
_SfpTxBiasHigh_Object = MibTableColumn
sfpTxBiasHigh = _SfpTxBiasHigh_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 3, 2, 1, 6),
    _SfpTxBiasHigh_Type()
)
sfpTxBiasHigh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sfpTxBiasHigh.setStatus("current")
_SfpTxPowerLow_Type = Integer32
_SfpTxPowerLow_Object = MibTableColumn
sfpTxPowerLow = _SfpTxPowerLow_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 3, 2, 1, 7),
    _SfpTxPowerLow_Type()
)
sfpTxPowerLow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sfpTxPowerLow.setStatus("current")
_SfpTxPowerHigh_Type = Integer32
_SfpTxPowerHigh_Object = MibTableColumn
sfpTxPowerHigh = _SfpTxPowerHigh_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 3, 2, 1, 8),
    _SfpTxPowerHigh_Type()
)
sfpTxPowerHigh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sfpTxPowerHigh.setStatus("current")
_SfpRxPowerLow_Type = Integer32
_SfpRxPowerLow_Object = MibTableColumn
sfpRxPowerLow = _SfpRxPowerLow_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 3, 2, 1, 9),
    _SfpRxPowerLow_Type()
)
sfpRxPowerLow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sfpRxPowerLow.setStatus("current")
_SfpRxPowerHigh_Type = Integer32
_SfpRxPowerHigh_Object = MibTableColumn
sfpRxPowerHigh = _SfpRxPowerHigh_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 3, 2, 1, 10),
    _SfpRxPowerHigh_Type()
)
sfpRxPowerHigh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sfpRxPowerHigh.setStatus("current")
_Bandwidth_ObjectIdentity = ObjectIdentity
bandwidth = _Bandwidth_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 4)
)
_BwPortTable_Object = MibTable
bwPortTable = _BwPortTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 4, 1)
)
if mibBuilder.loadTexts:
    bwPortTable.setStatus("current")
_BwPortEntry_Object = MibTableRow
bwPortEntry = _BwPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 4, 1, 1)
)
bwPortEntry.setIndexNames(
    (0, "BRIDGE-MIB", "dot1dBasePort"),
)
if mibBuilder.loadTexts:
    bwPortEntry.setStatus("current")


class _BwPortEnable_Type(Integer32):
    """Custom type bwPortEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_BwPortEnable_Type.__name__ = "Integer32"
_BwPortEnable_Object = MibTableColumn
bwPortEnable = _BwPortEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 4, 1, 1, 1),
    _BwPortEnable_Type()
)
bwPortEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bwPortEnable.setStatus("current")


class _BwPortIngressRate_Type(Integer32):
    """Custom type bwPortIngressRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_BwPortIngressRate_Type.__name__ = "Integer32"
_BwPortIngressRate_Object = MibTableColumn
bwPortIngressRate = _BwPortIngressRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 4, 1, 1, 2),
    _BwPortIngressRate_Type()
)
bwPortIngressRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bwPortIngressRate.setStatus("current")
if mibBuilder.loadTexts:
    bwPortIngressRate.setUnits("Mbps")


class _BwPortEgressRate_Type(Integer32):
    """Custom type bwPortEgressRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_BwPortEgressRate_Type.__name__ = "Integer32"
_BwPortEgressRate_Object = MibTableColumn
bwPortEgressRate = _BwPortEgressRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 4, 1, 1, 3),
    _BwPortEgressRate_Type()
)
bwPortEgressRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bwPortEgressRate.setStatus("current")
if mibBuilder.loadTexts:
    bwPortEgressRate.setUnits("Mbps")
_Qschedule_ObjectIdentity = ObjectIdentity
qschedule = _Qschedule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 5)
)
_QschedulePortTable_Object = MibTable
qschedulePortTable = _QschedulePortTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 5, 1)
)
if mibBuilder.loadTexts:
    qschedulePortTable.setStatus("current")
_QschedulePortEntry_Object = MibTableRow
qschedulePortEntry = _QschedulePortEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 5, 1, 1)
)
qschedulePortEntry.setIndexNames(
    (0, "BRIDGE-MIB", "dot1dBasePort"),
)
if mibBuilder.loadTexts:
    qschedulePortEntry.setStatus("current")


class _QschedulePortType_Type(Integer32):
    """Custom type qschedulePortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("spq", 1),
          ("wrr", 2))
    )


_QschedulePortType_Type.__name__ = "Integer32"
_QschedulePortType_Object = MibTableColumn
qschedulePortType = _QschedulePortType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 5, 1, 1, 1),
    _QschedulePortType_Type()
)
qschedulePortType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qschedulePortType.setStatus("current")
_QueueWeightTable_Object = MibTable
queueWeightTable = _QueueWeightTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 5, 2)
)
if mibBuilder.loadTexts:
    queueWeightTable.setStatus("current")
_QueueWeightEntry_Object = MibTableRow
queueWeightEntry = _QueueWeightEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 5, 2, 1)
)
queueWeightEntry.setIndexNames(
    (0, "BRIDGE-MIB", "dot1dBasePort"),
    (0, "P-BRIDGE-MIB", "dot1dTrafficClass"),
)
if mibBuilder.loadTexts:
    queueWeightEntry.setStatus("current")


class _QueueWeight_Type(Integer32):
    """Custom type queueWeight based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_QueueWeight_Type.__name__ = "Integer32"
_QueueWeight_Object = MibTableColumn
queueWeight = _QueueWeight_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 5, 2, 1, 1),
    _QueueWeight_Type()
)
queueWeight.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    queueWeight.setStatus("current")
_Dot3ad_ObjectIdentity = ObjectIdentity
dot3ad = _Dot3ad_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 6)
)
_Dot3adTable_Object = MibTable
dot3adTable = _Dot3adTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 6, 1)
)
if mibBuilder.loadTexts:
    dot3adTable.setStatus("current")
_Dot3adEntry_Object = MibTableRow
dot3adEntry = _Dot3adEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 6, 1, 1)
)
dot3adEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "dot3adGroupId"),
)
if mibBuilder.loadTexts:
    dot3adEntry.setStatus("current")
_Dot3adGroupId_Type = Integer32
_Dot3adGroupId_Object = MibTableColumn
dot3adGroupId = _Dot3adGroupId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 6, 1, 1, 1),
    _Dot3adGroupId_Type()
)
dot3adGroupId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot3adGroupId.setStatus("current")


class _Dot3adEnable_Type(Integer32):
    """Custom type dot3adEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("enableWithLacp", 2),
          ("disable", 3))
    )


_Dot3adEnable_Type.__name__ = "Integer32"
_Dot3adEnable_Object = MibTableColumn
dot3adEnable = _Dot3adEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 6, 1, 1, 2),
    _Dot3adEnable_Type()
)
dot3adEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dot3adEnable.setStatus("current")
_Dot3adGroupName_Type = DisplayString
_Dot3adGroupName_Object = MibTableColumn
dot3adGroupName = _Dot3adGroupName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 6, 1, 1, 3),
    _Dot3adGroupName_Type()
)
dot3adGroupName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot3adGroupName.setStatus("current")
_Dot3adGroupPortList_Type = PortList
_Dot3adGroupPortList_Object = MibTableColumn
dot3adGroupPortList = _Dot3adGroupPortList_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 6, 1, 1, 4),
    _Dot3adGroupPortList_Type()
)
dot3adGroupPortList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot3adGroupPortList.setStatus("current")


class _LacpPriority_Type(Integer32):
    """Custom type lacpPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_LacpPriority_Type.__name__ = "Integer32"
_LacpPriority_Object = MibScalar
lacpPriority = _LacpPriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 6, 2),
    _LacpPriority_Type()
)
lacpPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lacpPriority.setStatus("current")


class _LacpTimeout_Type(Integer32):
    """Custom type lacpTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("shorttimeout", 1),
          ("longtimeout", 2))
    )


_LacpTimeout_Type.__name__ = "Integer32"
_LacpTimeout_Object = MibScalar
lacpTimeout = _LacpTimeout_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 6, 3),
    _LacpTimeout_Type()
)
lacpTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lacpTimeout.setStatus("current")
_PortTrunkingTable_Object = MibTable
portTrunkingTable = _PortTrunkingTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 6, 4)
)
if mibBuilder.loadTexts:
    portTrunkingTable.setStatus("current")
_PortTrunkingEntry_Object = MibTableRow
portTrunkingEntry = _PortTrunkingEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 6, 4, 1)
)
portTrunkingEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "portTrunkingGroupId"),
)
if mibBuilder.loadTexts:
    portTrunkingEntry.setStatus("current")
_PortTrunkingGroupId_Type = Integer32
_PortTrunkingGroupId_Object = MibTableColumn
portTrunkingGroupId = _PortTrunkingGroupId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 6, 4, 1, 1),
    _PortTrunkingGroupId_Type()
)
portTrunkingGroupId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portTrunkingGroupId.setStatus("current")


class _PortTrunkingStatus_Type(Integer32):
    """Custom type portTrunkingStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("up", 1),
          ("down", 2))
    )


_PortTrunkingStatus_Type.__name__ = "Integer32"
_PortTrunkingStatus_Object = MibTableColumn
portTrunkingStatus = _PortTrunkingStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 6, 4, 1, 2),
    _PortTrunkingStatus_Type()
)
portTrunkingStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portTrunkingStatus.setStatus("current")
_PortTrunkingPortList_Type = PortList
_PortTrunkingPortList_Object = MibTableColumn
portTrunkingPortList = _PortTrunkingPortList_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 6, 4, 1, 3),
    _PortTrunkingPortList_Type()
)
portTrunkingPortList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portTrunkingPortList.setStatus("current")
_AggPortTable_Object = MibTable
aggPortTable = _AggPortTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 6, 5)
)
if mibBuilder.loadTexts:
    aggPortTable.setStatus("current")
_AggPortEntry_Object = MibTableRow
aggPortEntry = _AggPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 6, 5, 1)
)
aggPortEntry.setIndexNames(
    (0, "BRIDGE-MIB", "dot1dBasePort"),
)
if mibBuilder.loadTexts:
    aggPortEntry.setStatus("current")


class _AggPortJoin_Type(Integer32):
    """Custom type aggPortJoin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disjoin", 0),
          ("joinTrunkingGroup1", 1),
          ("joinTrunkingGroup2", 2),
          ("joinTrunkingGroup3", 3),
          ("joinTrunkingGroup4", 4))
    )


_AggPortJoin_Type.__name__ = "Integer32"
_AggPortJoin_Object = MibTableColumn
aggPortJoin = _AggPortJoin_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 6, 5, 1, 1),
    _AggPortJoin_Type()
)
aggPortJoin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aggPortJoin.setStatus("current")
_ElcPortTrunkingTable_Object = MibTable
elcPortTrunkingTable = _ElcPortTrunkingTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 6, 6)
)
if mibBuilder.loadTexts:
    elcPortTrunkingTable.setStatus("current")
_ElcPortTrunkingEntry_Object = MibTableRow
elcPortTrunkingEntry = _ElcPortTrunkingEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 6, 6, 1)
)
elcPortTrunkingEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "elcPortTrunkingSlot"),
    (0, "ZYXEL-IES5000-MIB", "elcPortTrunkingGroupId"),
)
if mibBuilder.loadTexts:
    elcPortTrunkingEntry.setStatus("current")
_ElcPortTrunkingSlot_Type = Integer32
_ElcPortTrunkingSlot_Object = MibTableColumn
elcPortTrunkingSlot = _ElcPortTrunkingSlot_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 6, 6, 1, 1),
    _ElcPortTrunkingSlot_Type()
)
elcPortTrunkingSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    elcPortTrunkingSlot.setStatus("current")
_ElcPortTrunkingGroupId_Type = Integer32
_ElcPortTrunkingGroupId_Object = MibTableColumn
elcPortTrunkingGroupId = _ElcPortTrunkingGroupId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 6, 6, 1, 2),
    _ElcPortTrunkingGroupId_Type()
)
elcPortTrunkingGroupId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    elcPortTrunkingGroupId.setStatus("current")


class _ElcPortTrunkingStatus_Type(Integer32):
    """Custom type elcPortTrunkingStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("up", 1),
          ("down", 2))
    )


_ElcPortTrunkingStatus_Type.__name__ = "Integer32"
_ElcPortTrunkingStatus_Object = MibTableColumn
elcPortTrunkingStatus = _ElcPortTrunkingStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 6, 6, 1, 3),
    _ElcPortTrunkingStatus_Type()
)
elcPortTrunkingStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    elcPortTrunkingStatus.setStatus("current")
_ElcPortTrunkingPortList_Type = PortList
_ElcPortTrunkingPortList_Object = MibTableColumn
elcPortTrunkingPortList = _ElcPortTrunkingPortList_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 6, 6, 1, 4),
    _ElcPortTrunkingPortList_Type()
)
elcPortTrunkingPortList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    elcPortTrunkingPortList.setStatus("current")
_Stp_ObjectIdentity = ObjectIdentity
stp = _Stp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 7)
)


class _RstpEnable_Type(Integer32):
    """Custom type rstpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_RstpEnable_Type.__name__ = "Integer32"
_RstpEnable_Object = MibScalar
rstpEnable = _RstpEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 7, 1),
    _RstpEnable_Type()
)
rstpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rstpEnable.setStatus("current")
_BcastCtrl_ObjectIdentity = ObjectIdentity
bcastCtrl = _BcastCtrl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 8)
)
_BctrlPortTable_Object = MibTable
bctrlPortTable = _BctrlPortTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 8, 1)
)
if mibBuilder.loadTexts:
    bctrlPortTable.setStatus("current")
_BctrlPortEntry_Object = MibTableRow
bctrlPortEntry = _BctrlPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 8, 1, 1)
)
bctrlPortEntry.setIndexNames(
    (0, "BRIDGE-MIB", "dot1dBasePort"),
)
if mibBuilder.loadTexts:
    bctrlPortEntry.setStatus("current")


class _BctrlPortBcastEnable_Type(Integer32):
    """Custom type bctrlPortBcastEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_BctrlPortBcastEnable_Type.__name__ = "Integer32"
_BctrlPortBcastEnable_Object = MibTableColumn
bctrlPortBcastEnable = _BctrlPortBcastEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 8, 1, 1, 1),
    _BctrlPortBcastEnable_Type()
)
bctrlPortBcastEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bctrlPortBcastEnable.setStatus("current")


class _BctrlPortMcastEnable_Type(Integer32):
    """Custom type bctrlPortMcastEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_BctrlPortMcastEnable_Type.__name__ = "Integer32"
_BctrlPortMcastEnable_Object = MibTableColumn
bctrlPortMcastEnable = _BctrlPortMcastEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 8, 1, 1, 2),
    _BctrlPortMcastEnable_Type()
)
bctrlPortMcastEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bctrlPortMcastEnable.setStatus("current")


class _BctrlPortUcastEnable_Type(Integer32):
    """Custom type bctrlPortUcastEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_BctrlPortUcastEnable_Type.__name__ = "Integer32"
_BctrlPortUcastEnable_Object = MibTableColumn
bctrlPortUcastEnable = _BctrlPortUcastEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 8, 1, 1, 3),
    _BctrlPortUcastEnable_Type()
)
bctrlPortUcastEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bctrlPortUcastEnable.setStatus("current")


class _BctrlPortBcastThresh_Type(Integer32):
    """Custom type bctrlPortBcastThresh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 262143),
    )


_BctrlPortBcastThresh_Type.__name__ = "Integer32"
_BctrlPortBcastThresh_Object = MibTableColumn
bctrlPortBcastThresh = _BctrlPortBcastThresh_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 8, 1, 1, 4),
    _BctrlPortBcastThresh_Type()
)
bctrlPortBcastThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bctrlPortBcastThresh.setStatus("current")
if mibBuilder.loadTexts:
    bctrlPortBcastThresh.setUnits("packets per second")


class _BctrlPortMcastThresh_Type(Integer32):
    """Custom type bctrlPortMcastThresh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 262143),
    )


_BctrlPortMcastThresh_Type.__name__ = "Integer32"
_BctrlPortMcastThresh_Object = MibTableColumn
bctrlPortMcastThresh = _BctrlPortMcastThresh_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 8, 1, 1, 5),
    _BctrlPortMcastThresh_Type()
)
bctrlPortMcastThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bctrlPortMcastThresh.setStatus("current")
if mibBuilder.loadTexts:
    bctrlPortMcastThresh.setUnits("packets per second")


class _BctrlPortUcastThresh_Type(Integer32):
    """Custom type bctrlPortUcastThresh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 262143),
    )


_BctrlPortUcastThresh_Type.__name__ = "Integer32"
_BctrlPortUcastThresh_Object = MibTableColumn
bctrlPortUcastThresh = _BctrlPortUcastThresh_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 8, 1, 1, 6),
    _BctrlPortUcastThresh_Type()
)
bctrlPortUcastThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bctrlPortUcastThresh.setStatus("current")
if mibBuilder.loadTexts:
    bctrlPortUcastThresh.setUnits("packets per second")
_PortIsolation_ObjectIdentity = ObjectIdentity
portIsolation = _PortIsolation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 9)
)


class _PortIsolationEnable_Type(Integer32):
    """Custom type portIsolationEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_PortIsolationEnable_Type.__name__ = "Integer32"
_PortIsolationEnable_Object = MibScalar
portIsolationEnable = _PortIsolationEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 9, 1),
    _PortIsolationEnable_Type()
)
portIsolationEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portIsolationEnable.setStatus("current")
_Dscp_ObjectIdentity = ObjectIdentity
dscp = _Dscp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 10)
)
_DscpMappingPortTable_Object = MibTable
dscpMappingPortTable = _DscpMappingPortTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 10, 1)
)
if mibBuilder.loadTexts:
    dscpMappingPortTable.setStatus("current")
_DscpMappingPortEntry_Object = MibTableRow
dscpMappingPortEntry = _DscpMappingPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 10, 1, 1)
)
dscpMappingPortEntry.setIndexNames(
    (0, "BRIDGE-MIB", "dot1dBasePort"),
    (0, "ZYXEL-IES5000-MIB", "dscpMappingPortSrcCodePoint"),
)
if mibBuilder.loadTexts:
    dscpMappingPortEntry.setStatus("current")
_DscpMappingPortSrcCodePoint_Type = Integer32
_DscpMappingPortSrcCodePoint_Object = MibTableColumn
dscpMappingPortSrcCodePoint = _DscpMappingPortSrcCodePoint_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 10, 1, 1, 1),
    _DscpMappingPortSrcCodePoint_Type()
)
dscpMappingPortSrcCodePoint.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dscpMappingPortSrcCodePoint.setStatus("current")


class _DscpMappingPortMapCodePoint_Type(Integer32):
    """Custom type dscpMappingPortMapCodePoint based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_DscpMappingPortMapCodePoint_Type.__name__ = "Integer32"
_DscpMappingPortMapCodePoint_Object = MibTableColumn
dscpMappingPortMapCodePoint = _DscpMappingPortMapCodePoint_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 10, 1, 1, 2),
    _DscpMappingPortMapCodePoint_Type()
)
dscpMappingPortMapCodePoint.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dscpMappingPortMapCodePoint.setStatus("current")


class _DscpMappingPortMapPriority_Type(Integer32):
    """Custom type dscpMappingPortMapPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_DscpMappingPortMapPriority_Type.__name__ = "Integer32"
_DscpMappingPortMapPriority_Object = MibTableColumn
dscpMappingPortMapPriority = _DscpMappingPortMapPriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 10, 1, 1, 3),
    _DscpMappingPortMapPriority_Type()
)
dscpMappingPortMapPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dscpMappingPortMapPriority.setStatus("current")
_Mstp_ObjectIdentity = ObjectIdentity
mstp = _Mstp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11)
)


class _MstpEnable_Type(Integer32):
    """Custom type mstpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_MstpEnable_Type.__name__ = "Integer32"
_MstpEnable_Object = MibScalar
mstpEnable = _MstpEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 1),
    _MstpEnable_Type()
)
mstpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstpEnable.setStatus("current")


class _MstpProtocolVersion_Type(Integer32):
    """Custom type mstpProtocolVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("forceDot1w", 2),
          ("autoDot1s", 3))
    )


_MstpProtocolVersion_Type.__name__ = "Integer32"
_MstpProtocolVersion_Object = MibScalar
mstpProtocolVersion = _MstpProtocolVersion_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 2),
    _MstpProtocolVersion_Type()
)
mstpProtocolVersion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstpProtocolVersion.setStatus("current")


class _MstpBridgeMaxAge_Type(Timeout):
    """Custom type mstpBridgeMaxAge based on Timeout"""
    subtypeSpec = Timeout.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(600, 4000),
    )


_MstpBridgeMaxAge_Type.__name__ = "Timeout"
_MstpBridgeMaxAge_Object = MibScalar
mstpBridgeMaxAge = _MstpBridgeMaxAge_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 3),
    _MstpBridgeMaxAge_Type()
)
mstpBridgeMaxAge.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstpBridgeMaxAge.setStatus("current")


class _MstpBridgeHelloTime_Type(Timeout):
    """Custom type mstpBridgeHelloTime based on Timeout"""
    subtypeSpec = Timeout.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 1000),
    )


_MstpBridgeHelloTime_Type.__name__ = "Timeout"
_MstpBridgeHelloTime_Object = MibScalar
mstpBridgeHelloTime = _MstpBridgeHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 4),
    _MstpBridgeHelloTime_Type()
)
mstpBridgeHelloTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstpBridgeHelloTime.setStatus("current")


class _MstpBridgeForwardDelay_Type(Timeout):
    """Custom type mstpBridgeForwardDelay based on Timeout"""
    subtypeSpec = Timeout.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(400, 3000),
    )


_MstpBridgeForwardDelay_Type.__name__ = "Timeout"
_MstpBridgeForwardDelay_Object = MibScalar
mstpBridgeForwardDelay = _MstpBridgeForwardDelay_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 5),
    _MstpBridgeForwardDelay_Type()
)
mstpBridgeForwardDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstpBridgeForwardDelay.setStatus("current")


class _MstpMaxHops_Type(Integer32):
    """Custom type mstpMaxHops based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_MstpMaxHops_Type.__name__ = "Integer32"
_MstpMaxHops_Object = MibScalar
mstpMaxHops = _MstpMaxHops_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 6),
    _MstpMaxHops_Type()
)
mstpMaxHops.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstpMaxHops.setStatus("current")


class _MstpCfgName_Type(DisplayString):
    """Custom type mstpCfgName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_MstpCfgName_Type.__name__ = "DisplayString"
_MstpCfgName_Object = MibScalar
mstpCfgName = _MstpCfgName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 7),
    _MstpCfgName_Type()
)
mstpCfgName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstpCfgName.setStatus("current")


class _MstpCfgRevLevel_Type(Integer32):
    """Custom type mstpCfgRevLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_MstpCfgRevLevel_Type.__name__ = "Integer32"
_MstpCfgRevLevel_Object = MibScalar
mstpCfgRevLevel = _MstpCfgRevLevel_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 8),
    _MstpCfgRevLevel_Type()
)
mstpCfgRevLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstpCfgRevLevel.setStatus("current")


class _MstpCfgDigest_Type(OctetString):
    """Custom type mstpCfgDigest based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )
    fixed_length = 16


_MstpCfgDigest_Type.__name__ = "OctetString"
_MstpCfgDigest_Object = MibScalar
mstpCfgDigest = _MstpCfgDigest_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 9),
    _MstpCfgDigest_Type()
)
mstpCfgDigest.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpCfgDigest.setStatus("current")
_MstpMapTable_Object = MibTable
mstpMapTable = _MstpMapTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 10)
)
if mibBuilder.loadTexts:
    mstpMapTable.setStatus("current")
_MstpMapEntry_Object = MibTableRow
mstpMapEntry = _MstpMapEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 10, 1)
)
mstpMapEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "mstpMapIndex"),
)
if mibBuilder.loadTexts:
    mstpMapEntry.setStatus("current")
_MstpMapIndex_Type = Integer32
_MstpMapIndex_Object = MibTableColumn
mstpMapIndex = _MstpMapIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 10, 1, 1),
    _MstpMapIndex_Type()
)
mstpMapIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpMapIndex.setStatus("current")


class _MstpMapVlans1k_Type(OctetString):
    """Custom type mstpMapVlans1k based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_MstpMapVlans1k_Type.__name__ = "OctetString"
_MstpMapVlans1k_Object = MibTableColumn
mstpMapVlans1k = _MstpMapVlans1k_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 10, 1, 2),
    _MstpMapVlans1k_Type()
)
mstpMapVlans1k.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstpMapVlans1k.setStatus("current")


class _MstpMapVlans2k_Type(OctetString):
    """Custom type mstpMapVlans2k based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_MstpMapVlans2k_Type.__name__ = "OctetString"
_MstpMapVlans2k_Object = MibTableColumn
mstpMapVlans2k = _MstpMapVlans2k_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 10, 1, 3),
    _MstpMapVlans2k_Type()
)
mstpMapVlans2k.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstpMapVlans2k.setStatus("current")


class _MstpMapVlans3k_Type(OctetString):
    """Custom type mstpMapVlans3k based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_MstpMapVlans3k_Type.__name__ = "OctetString"
_MstpMapVlans3k_Object = MibTableColumn
mstpMapVlans3k = _MstpMapVlans3k_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 10, 1, 4),
    _MstpMapVlans3k_Type()
)
mstpMapVlans3k.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstpMapVlans3k.setStatus("current")


class _MstpMapVlans4k_Type(OctetString):
    """Custom type mstpMapVlans4k based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_MstpMapVlans4k_Type.__name__ = "OctetString"
_MstpMapVlans4k_Object = MibTableColumn
mstpMapVlans4k = _MstpMapVlans4k_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 10, 1, 5),
    _MstpMapVlans4k_Type()
)
mstpMapVlans4k.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstpMapVlans4k.setStatus("current")
_MstpVlanTable_Object = MibTable
mstpVlanTable = _MstpVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 11)
)
if mibBuilder.loadTexts:
    mstpVlanTable.setStatus("current")
_MstpVlanEntry_Object = MibTableRow
mstpVlanEntry = _MstpVlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 11, 1)
)
mstpVlanEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "mstpVlanIndex"),
)
if mibBuilder.loadTexts:
    mstpVlanEntry.setStatus("current")
_MstpVlanIndex_Type = VlanIndex
_MstpVlanIndex_Object = MibTableColumn
mstpVlanIndex = _MstpVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 11, 1, 1),
    _MstpVlanIndex_Type()
)
mstpVlanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpVlanIndex.setStatus("current")
_MstpVlanMstIndex_Type = Integer32
_MstpVlanMstIndex_Object = MibTableColumn
mstpVlanMstIndex = _MstpVlanMstIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 11, 1, 2),
    _MstpVlanMstIndex_Type()
)
mstpVlanMstIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpVlanMstIndex.setStatus("current")
_MstpPortTable_Object = MibTable
mstpPortTable = _MstpPortTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 12)
)
if mibBuilder.loadTexts:
    mstpPortTable.setStatus("current")
_MstpPortEntry_Object = MibTableRow
mstpPortEntry = _MstpPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 12, 1)
)
mstpPortEntry.setIndexNames(
    (0, "BRIDGE-MIB", "dot1dBasePort"),
)
if mibBuilder.loadTexts:
    mstpPortEntry.setStatus("current")


class _MstpPortAdminEdgePort_Type(Integer32):
    """Custom type mstpPortAdminEdgePort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_MstpPortAdminEdgePort_Type.__name__ = "Integer32"
_MstpPortAdminEdgePort_Object = MibTableColumn
mstpPortAdminEdgePort = _MstpPortAdminEdgePort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 12, 1, 1),
    _MstpPortAdminEdgePort_Type()
)
mstpPortAdminEdgePort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstpPortAdminEdgePort.setStatus("current")


class _MstpPortAdminPointToPoint_Type(Integer32):
    """Custom type mstpPortAdminPointToPoint based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("forceTrue", 2),
          ("forceFalse", 3))
    )


_MstpPortAdminPointToPoint_Type.__name__ = "Integer32"
_MstpPortAdminPointToPoint_Object = MibTableColumn
mstpPortAdminPointToPoint = _MstpPortAdminPointToPoint_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 12, 1, 2),
    _MstpPortAdminPointToPoint_Type()
)
mstpPortAdminPointToPoint.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstpPortAdminPointToPoint.setStatus("current")
_MstpXstTable_Object = MibTable
mstpXstTable = _MstpXstTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 13)
)
if mibBuilder.loadTexts:
    mstpXstTable.setStatus("current")
_MstpXstEntry_Object = MibTableRow
mstpXstEntry = _MstpXstEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 13, 1)
)
mstpXstEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "mstpXstId"),
)
if mibBuilder.loadTexts:
    mstpXstEntry.setStatus("current")
_MstpXstId_Type = Integer32
_MstpXstId_Object = MibTableColumn
mstpXstId = _MstpXstId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 13, 1, 1),
    _MstpXstId_Type()
)
mstpXstId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpXstId.setStatus("current")


class _MstpXstBridgePriority_Type(Integer32):
    """Custom type mstpXstBridgePriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 61440),
    )


_MstpXstBridgePriority_Type.__name__ = "Integer32"
_MstpXstBridgePriority_Object = MibTableColumn
mstpXstBridgePriority = _MstpXstBridgePriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 13, 1, 2),
    _MstpXstBridgePriority_Type()
)
mstpXstBridgePriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstpXstBridgePriority.setStatus("current")
_MstpXstPortTable_Object = MibTable
mstpXstPortTable = _MstpXstPortTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 14)
)
if mibBuilder.loadTexts:
    mstpXstPortTable.setStatus("current")
_MstpXstPortEntry_Object = MibTableRow
mstpXstPortEntry = _MstpXstPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 14, 1)
)
mstpXstPortEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "mstpXstPortXstId"),
    (0, "ZYXEL-IES5000-MIB", "mstpXstPortIndex"),
)
if mibBuilder.loadTexts:
    mstpXstPortEntry.setStatus("current")
_MstpXstPortXstId_Type = Integer32
_MstpXstPortXstId_Object = MibTableColumn
mstpXstPortXstId = _MstpXstPortXstId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 14, 1, 1),
    _MstpXstPortXstId_Type()
)
mstpXstPortXstId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpXstPortXstId.setStatus("current")
_MstpXstPortIndex_Type = Integer32
_MstpXstPortIndex_Object = MibTableColumn
mstpXstPortIndex = _MstpXstPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 14, 1, 2),
    _MstpXstPortIndex_Type()
)
mstpXstPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpXstPortIndex.setStatus("current")


class _MstpXstPortEnable_Type(Integer32):
    """Custom type mstpXstPortEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_MstpXstPortEnable_Type.__name__ = "Integer32"
_MstpXstPortEnable_Object = MibTableColumn
mstpXstPortEnable = _MstpXstPortEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 14, 1, 3),
    _MstpXstPortEnable_Type()
)
mstpXstPortEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstpXstPortEnable.setStatus("current")


class _MstpXstPortPriority_Type(Integer32):
    """Custom type mstpXstPortPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_MstpXstPortPriority_Type.__name__ = "Integer32"
_MstpXstPortPriority_Object = MibTableColumn
mstpXstPortPriority = _MstpXstPortPriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 14, 1, 4),
    _MstpXstPortPriority_Type()
)
mstpXstPortPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstpXstPortPriority.setStatus("current")


class _MstpXstPortAdminPathCost_Type(Integer32):
    """Custom type mstpXstPortAdminPathCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 200000000),
    )


_MstpXstPortAdminPathCost_Type.__name__ = "Integer32"
_MstpXstPortAdminPathCost_Object = MibTableColumn
mstpXstPortAdminPathCost = _MstpXstPortAdminPathCost_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 11, 14, 1, 5),
    _MstpXstPortAdminPathCost_Type()
)
mstpXstPortAdminPathCost.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstpXstPortAdminPathCost.setStatus("current")
_VlanIsolation_ObjectIdentity = ObjectIdentity
vlanIsolation = _VlanIsolation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 12)
)
_VlanIsolationTable_Object = MibTable
vlanIsolationTable = _VlanIsolationTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 12, 1)
)
if mibBuilder.loadTexts:
    vlanIsolationTable.setStatus("current")
_VlanIsolationEntry_Object = MibTableRow
vlanIsolationEntry = _VlanIsolationEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 12, 1, 1)
)
vlanIsolationEntry.setIndexNames(
    (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"),
)
if mibBuilder.loadTexts:
    vlanIsolationEntry.setStatus("current")
_VlanIsolationRowStatus_Type = RowStatus
_VlanIsolationRowStatus_Object = MibTableColumn
vlanIsolationRowStatus = _VlanIsolationRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 12, 1, 1, 1),
    _VlanIsolationRowStatus_Type()
)
vlanIsolationRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vlanIsolationRowStatus.setStatus("current")
_Mac_ObjectIdentity = ObjectIdentity
mac = _Mac_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 13)
)
_MacAgingTime_Type = Integer32
_MacAgingTime_Object = MibScalar
macAgingTime = _MacAgingTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 13, 1),
    _MacAgingTime_Type()
)
macAgingTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macAgingTime.setStatus("current")
if mibBuilder.loadTexts:
    macAgingTime.setUnits("seconds")
_Cfm_ObjectIdentity = ObjectIdentity
cfm = _Cfm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 14)
)
_CfmLoopbackPortTable_Object = MibTable
cfmLoopbackPortTable = _CfmLoopbackPortTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 14, 1)
)
if mibBuilder.loadTexts:
    cfmLoopbackPortTable.setStatus("current")
_CfmLoopbackPortEntry_Object = MibTableRow
cfmLoopbackPortEntry = _CfmLoopbackPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 14, 1, 1)
)
cfmLoopbackPortEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    cfmLoopbackPortEntry.setStatus("current")


class _CfmLoopbackPortState_Type(Integer32):
    """Custom type cfmLoopbackPortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_CfmLoopbackPortState_Type.__name__ = "Integer32"
_CfmLoopbackPortState_Object = MibTableColumn
cfmLoopbackPortState = _CfmLoopbackPortState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 14, 1, 1, 1),
    _CfmLoopbackPortState_Type()
)
cfmLoopbackPortState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cfmLoopbackPortState.setStatus("current")
_CfmMIPTable_Object = MibTable
cfmMIPTable = _CfmMIPTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 14, 2)
)
if mibBuilder.loadTexts:
    cfmMIPTable.setStatus("current")
_CfmMIPEntry_Object = MibTableRow
cfmMIPEntry = _CfmMIPEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 14, 2, 1)
)
cfmMIPEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "cfmLevel"),
    (0, "ZYXEL-IES5000-MIB", "cfmVlanID"),
    (0, "ZYXEL-IES5000-MIB", "cfmPort"),
)
if mibBuilder.loadTexts:
    cfmMIPEntry.setStatus("current")
_CfmLevel_Type = Integer32
_CfmLevel_Object = MibTableColumn
cfmLevel = _CfmLevel_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 14, 2, 1, 1),
    _CfmLevel_Type()
)
cfmLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfmLevel.setStatus("current")
_CfmVlanID_Type = Integer32
_CfmVlanID_Object = MibTableColumn
cfmVlanID = _CfmVlanID_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 14, 2, 1, 2),
    _CfmVlanID_Type()
)
cfmVlanID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfmVlanID.setStatus("current")
_CfmPort_Type = Integer32
_CfmPort_Object = MibTableColumn
cfmPort = _CfmPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 14, 2, 1, 3),
    _CfmPort_Type()
)
cfmPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfmPort.setStatus("current")
_CfmMIPRowStatus_Type = RowStatus
_CfmMIPRowStatus_Object = MibTableColumn
cfmMIPRowStatus = _CfmMIPRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 14, 2, 1, 4),
    _CfmMIPRowStatus_Type()
)
cfmMIPRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    cfmMIPRowStatus.setStatus("current")
_CfmMIPMacAddress_Type = MacAddress
_CfmMIPMacAddress_Object = MibTableColumn
cfmMIPMacAddress = _CfmMIPMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 14, 2, 1, 5),
    _CfmMIPMacAddress_Type()
)
cfmMIPMacAddress.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    cfmMIPMacAddress.setStatus("current")


class _CfmActionEnableStatus_Type(Integer32):
    """Custom type cfmActionEnableStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_CfmActionEnableStatus_Type.__name__ = "Integer32"
_CfmActionEnableStatus_Object = MibScalar
cfmActionEnableStatus = _CfmActionEnableStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 14, 3),
    _CfmActionEnableStatus_Type()
)
cfmActionEnableStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cfmActionEnableStatus.setStatus("current")


class _CfmMode_Type(Integer32):
    """Custom type cfmMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dot1ag", 1),
          ("y1731", 2))
    )


_CfmMode_Type.__name__ = "Integer32"
_CfmMode_Object = MibScalar
cfmMode = _CfmMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 14, 4),
    _CfmMode_Type()
)
cfmMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cfmMode.setStatus("current")


class _CfmMIPRespondMcastLbm_Type(Integer32):
    """Custom type cfmMIPRespondMcastLbm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_CfmMIPRespondMcastLbm_Type.__name__ = "Integer32"
_CfmMIPRespondMcastLbm_Object = MibScalar
cfmMIPRespondMcastLbm = _CfmMIPRespondMcastLbm_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 14, 5),
    _CfmMIPRespondMcastLbm_Type()
)
cfmMIPRespondMcastLbm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cfmMIPRespondMcastLbm.setStatus("current")


class _CfmLoopbackTimeout_Type(Integer32):
    """Custom type cfmLoopbackTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 86400),
    )


_CfmLoopbackTimeout_Type.__name__ = "Integer32"
_CfmLoopbackTimeout_Object = MibScalar
cfmLoopbackTimeout = _CfmLoopbackTimeout_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 14, 6),
    _CfmLoopbackTimeout_Type()
)
cfmLoopbackTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cfmLoopbackTimeout.setStatus("current")
_CfmLbrTable_Object = MibTable
cfmLbrTable = _CfmLbrTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 14, 7)
)
if mibBuilder.loadTexts:
    cfmLbrTable.setStatus("current")
_CfmLbrEntry_Object = MibTableRow
cfmLbrEntry = _CfmLbrEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 14, 7, 1)
)
cfmLbrEntry.setIndexNames(
    (0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"),
    (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"),
    (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"),
    (0, "ZYXEL-IES5000-MIB", "cfmLbrSeqNumber"),
    (0, "ZYXEL-IES5000-MIB", "cfmLbrReceiveOrder"),
)
if mibBuilder.loadTexts:
    cfmLbrEntry.setStatus("current")


class _CfmLbrSeqNumber_Type(Unsigned32):
    """Custom type cfmLbrSeqNumber based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_CfmLbrSeqNumber_Type.__name__ = "Unsigned32"
_CfmLbrSeqNumber_Object = MibTableColumn
cfmLbrSeqNumber = _CfmLbrSeqNumber_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 14, 7, 1, 1),
    _CfmLbrSeqNumber_Type()
)
cfmLbrSeqNumber.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cfmLbrSeqNumber.setStatus("current")


class _CfmLbrReceiveOrder_Type(Unsigned32):
    """Custom type cfmLbrReceiveOrder based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_CfmLbrReceiveOrder_Type.__name__ = "Unsigned32"
_CfmLbrReceiveOrder_Object = MibTableColumn
cfmLbrReceiveOrder = _CfmLbrReceiveOrder_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 14, 7, 1, 2),
    _CfmLbrReceiveOrder_Type()
)
cfmLbrReceiveOrder.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cfmLbrReceiveOrder.setStatus("current")
_CfmLbrSrcMac_Type = MacAddress
_CfmLbrSrcMac_Object = MibTableColumn
cfmLbrSrcMac = _CfmLbrSrcMac_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 14, 7, 1, 3),
    _CfmLbrSrcMac_Type()
)
cfmLbrSrcMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfmLbrSrcMac.setStatus("current")
_Oam_ObjectIdentity = ObjectIdentity
oam = _Oam_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 15)
)
_RemoteLoopbackTable_Object = MibTable
remoteLoopbackTable = _RemoteLoopbackTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 15, 1)
)
if mibBuilder.loadTexts:
    remoteLoopbackTable.setStatus("current")
_RemoteLoopbackEntry_Object = MibTableRow
remoteLoopbackEntry = _RemoteLoopbackEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 15, 1, 1)
)
remoteLoopbackEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    remoteLoopbackEntry.setStatus("current")


class _RemoteLoopbackEnable_Type(Integer32):
    """Custom type remoteLoopbackEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_RemoteLoopbackEnable_Type.__name__ = "Integer32"
_RemoteLoopbackEnable_Object = MibTableColumn
remoteLoopbackEnable = _RemoteLoopbackEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 15, 1, 1, 1),
    _RemoteLoopbackEnable_Type()
)
remoteLoopbackEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteLoopbackEnable.setStatus("current")
_Vlanpriority_ObjectIdentity = ObjectIdentity
vlanpriority = _Vlanpriority_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 16)
)


class _VlanpriorityEnable_Type(Integer32):
    """Custom type vlanpriorityEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_VlanpriorityEnable_Type.__name__ = "Integer32"
_VlanpriorityEnable_Object = MibScalar
vlanpriorityEnable = _VlanpriorityEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 16, 1),
    _VlanpriorityEnable_Type()
)
vlanpriorityEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanpriorityEnable.setStatus("current")
_VlanpriorityTable_Object = MibTable
vlanpriorityTable = _VlanpriorityTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 16, 2)
)
if mibBuilder.loadTexts:
    vlanpriorityTable.setStatus("current")
_VlanpriorityEntry_Object = MibTableRow
vlanpriorityEntry = _VlanpriorityEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 16, 2, 1)
)
vlanpriorityEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "vlanpriorityVid"),
)
if mibBuilder.loadTexts:
    vlanpriorityEntry.setStatus("current")


class _VlanpriorityVid_Type(Integer32):
    """Custom type vlanpriorityVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_VlanpriorityVid_Type.__name__ = "Integer32"
_VlanpriorityVid_Object = MibTableColumn
vlanpriorityVid = _VlanpriorityVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 16, 2, 1, 1),
    _VlanpriorityVid_Type()
)
vlanpriorityVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanpriorityVid.setStatus("current")


class _VlanpriorityPri_Type(Integer32):
    """Custom type vlanpriorityPri based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_VlanpriorityPri_Type.__name__ = "Integer32"
_VlanpriorityPri_Object = MibTableColumn
vlanpriorityPri = _VlanpriorityPri_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 16, 2, 1, 2),
    _VlanpriorityPri_Type()
)
vlanpriorityPri.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanpriorityPri.setStatus("current")
_VlanpriorityRowStatus_Type = RowStatus
_VlanpriorityRowStatus_Object = MibTableColumn
vlanpriorityRowStatus = _VlanpriorityRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 16, 2, 1, 3),
    _VlanpriorityRowStatus_Type()
)
vlanpriorityRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanpriorityRowStatus.setStatus("current")
_Mirror_ObjectIdentity = ObjectIdentity
mirror = _Mirror_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 17)
)


class _MirrorEnable_Type(Integer32):
    """Custom type mirrorEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_MirrorEnable_Type.__name__ = "Integer32"
_MirrorEnable_Object = MibScalar
mirrorEnable = _MirrorEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 17, 1),
    _MirrorEnable_Type()
)
mirrorEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mirrorEnable.setStatus("current")
_MirrorMonitorPort_Type = Integer32
_MirrorMonitorPort_Object = MibScalar
mirrorMonitorPort = _MirrorMonitorPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 17, 2),
    _MirrorMonitorPort_Type()
)
mirrorMonitorPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mirrorMonitorPort.setStatus("current")
_MirrorPortTable_Object = MibTable
mirrorPortTable = _MirrorPortTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 17, 3)
)
if mibBuilder.loadTexts:
    mirrorPortTable.setStatus("current")
_MirrorPortEntry_Object = MibTableRow
mirrorPortEntry = _MirrorPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 17, 3, 1)
)
mirrorPortEntry.setIndexNames(
    (0, "BRIDGE-MIB", "dot1dBasePort"),
)
if mibBuilder.loadTexts:
    mirrorPortEntry.setStatus("current")


class _MirrorPortDirection_Type(Integer32):
    """Custom type mirrorPortDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ingress", 1),
          ("egress", 2),
          ("both", 3),
          ("none", 4))
    )


_MirrorPortDirection_Type.__name__ = "Integer32"
_MirrorPortDirection_Object = MibTableColumn
mirrorPortDirection = _MirrorPortDirection_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 17, 3, 1, 1),
    _MirrorPortDirection_Type()
)
mirrorPortDirection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mirrorPortDirection.setStatus("current")
_Lldp_ObjectIdentity = ObjectIdentity
lldp = _Lldp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 18)
)


class _LldpEnable_Type(Integer32):
    """Custom type lldpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_LldpEnable_Type.__name__ = "Integer32"
_LldpEnable_Object = MibScalar
lldpEnable = _LldpEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 10, 18, 1),
    _LldpEnable_Type()
)
lldpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lldpEnable.setStatus("current")
_Sys_ObjectIdentity = ObjectIdentity
sys = _Sys_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11)
)
_SysState_ObjectIdentity = ObjectIdentity
sysState = _SysState_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 1)
)
_SystemStatus_Type = Integer32
_SystemStatus_Object = MibScalar
systemStatus = _SystemStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 1, 1),
    _SystemStatus_Type()
)
systemStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemStatus.setStatus("current")
_LedStatus_ObjectIdentity = ObjectIdentity
ledStatus = _LedStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 1, 2)
)


class _LedAlarmStatus_Type(Integer32):
    """Custom type ledAlarmStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_LedAlarmStatus_Type.__name__ = "Integer32"
_LedAlarmStatus_Object = MibScalar
ledAlarmStatus = _LedAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 1, 2, 1),
    _LedAlarmStatus_Type()
)
ledAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledAlarmStatus.setStatus("current")
_ChassisStats_ObjectIdentity = ObjectIdentity
chassisStats = _ChassisStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 1, 3)
)
_DcPowerStatus_Type = Integer32
_DcPowerStatus_Object = MibScalar
dcPowerStatus = _DcPowerStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 1, 3, 1),
    _DcPowerStatus_Type()
)
dcPowerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcPowerStatus.setStatus("current")
_ExtAlarmStatus_Type = Integer32
_ExtAlarmStatus_Object = MibScalar
extAlarmStatus = _ExtAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 1, 4),
    _ExtAlarmStatus_Type()
)
extAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extAlarmStatus.setStatus("current")
_SysOperation_ObjectIdentity = ObjectIdentity
sysOperation = _SysOperation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 2)
)
_SysTarget_Type = Integer32
_SysTarget_Object = MibScalar
sysTarget = _SysTarget_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 2, 1),
    _SysTarget_Type()
)
sysTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysTarget.setStatus("current")
_SysOps_Type = Integer32
_SysOps_Object = MibScalar
sysOps = _SysOps_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 2, 2),
    _SysOps_Type()
)
sysOps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysOps.setStatus("current")


class _SysRebootTime_Type(Integer32):
    """Custom type sysRebootTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_SysRebootTime_Type.__name__ = "Integer32"
_SysRebootTime_Object = MibScalar
sysRebootTime = _SysRebootTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 2, 3),
    _SysRebootTime_Type()
)
sysRebootTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysRebootTime.setStatus("current")
if mibBuilder.loadTexts:
    sysRebootTime.setUnits("seconds")
_HwMonitor_ObjectIdentity = ObjectIdentity
hwMonitor = _HwMonitor_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3)
)
_FanRpmTable_Object = MibTable
fanRpmTable = _FanRpmTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 1)
)
if mibBuilder.loadTexts:
    fanRpmTable.setStatus("current")
_FanRpmEntry_Object = MibTableRow
fanRpmEntry = _FanRpmEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 1, 1)
)
fanRpmEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "chassisId"),
    (0, "ZYXEL-IES5000-MIB", "fanRpmIndex"),
)
if mibBuilder.loadTexts:
    fanRpmEntry.setStatus("current")
_FanRpmIndex_Type = Integer32
_FanRpmIndex_Object = MibTableColumn
fanRpmIndex = _FanRpmIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 1, 1, 1),
    _FanRpmIndex_Type()
)
fanRpmIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fanRpmIndex.setStatus("current")
_FanRpmCurValue_Type = Integer32
_FanRpmCurValue_Object = MibTableColumn
fanRpmCurValue = _FanRpmCurValue_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 1, 1, 2),
    _FanRpmCurValue_Type()
)
fanRpmCurValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fanRpmCurValue.setStatus("current")
_FanRpmMaxValue_Type = Integer32
_FanRpmMaxValue_Object = MibTableColumn
fanRpmMaxValue = _FanRpmMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 1, 1, 3),
    _FanRpmMaxValue_Type()
)
fanRpmMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fanRpmMaxValue.setStatus("current")
_FanRpmMinValue_Type = Integer32
_FanRpmMinValue_Object = MibTableColumn
fanRpmMinValue = _FanRpmMinValue_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 1, 1, 4),
    _FanRpmMinValue_Type()
)
fanRpmMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fanRpmMinValue.setStatus("current")
_FanRpmLowThresh_Type = Integer32
_FanRpmLowThresh_Object = MibTableColumn
fanRpmLowThresh = _FanRpmLowThresh_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 1, 1, 5),
    _FanRpmLowThresh_Type()
)
fanRpmLowThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fanRpmLowThresh.setStatus("current")
_FanRpmDescr_Type = DisplayString
_FanRpmDescr_Object = MibTableColumn
fanRpmDescr = _FanRpmDescr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 1, 1, 6),
    _FanRpmDescr_Type()
)
fanRpmDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fanRpmDescr.setStatus("current")
_FanRpmHighThresh_Type = Integer32
_FanRpmHighThresh_Object = MibTableColumn
fanRpmHighThresh = _FanRpmHighThresh_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 1, 1, 7),
    _FanRpmHighThresh_Type()
)
fanRpmHighThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fanRpmHighThresh.setStatus("current")
_VoltageTable_Object = MibTable
voltageTable = _VoltageTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 2)
)
if mibBuilder.loadTexts:
    voltageTable.setStatus("current")
_VoltageEntry_Object = MibTableRow
voltageEntry = _VoltageEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 2, 1)
)
voltageEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "chassisId"),
    (0, "ZYXEL-IES5000-MIB", "slotId"),
    (0, "ZYXEL-IES5000-MIB", "voltageIndex"),
)
if mibBuilder.loadTexts:
    voltageEntry.setStatus("current")
_VoltageIndex_Type = Integer32
_VoltageIndex_Object = MibTableColumn
voltageIndex = _VoltageIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 2, 1, 1),
    _VoltageIndex_Type()
)
voltageIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageIndex.setStatus("current")
_VoltageCurValue_Type = Integer32
_VoltageCurValue_Object = MibTableColumn
voltageCurValue = _VoltageCurValue_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 2, 1, 2),
    _VoltageCurValue_Type()
)
voltageCurValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageCurValue.setStatus("current")
if mibBuilder.loadTexts:
    voltageCurValue.setUnits("milli-voltage")
_VoltageMaxValue_Type = Integer32
_VoltageMaxValue_Object = MibTableColumn
voltageMaxValue = _VoltageMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 2, 1, 3),
    _VoltageMaxValue_Type()
)
voltageMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    voltageMaxValue.setUnits("milli-voltage")
_VoltageMinValue_Type = Integer32
_VoltageMinValue_Object = MibTableColumn
voltageMinValue = _VoltageMinValue_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 2, 1, 4),
    _VoltageMinValue_Type()
)
voltageMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageMinValue.setStatus("current")
if mibBuilder.loadTexts:
    voltageMinValue.setUnits("milli-voltage")
_VoltageNominalValue_Type = Integer32
_VoltageNominalValue_Object = MibTableColumn
voltageNominalValue = _VoltageNominalValue_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 2, 1, 5),
    _VoltageNominalValue_Type()
)
voltageNominalValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageNominalValue.setStatus("current")
if mibBuilder.loadTexts:
    voltageNominalValue.setUnits("milli-voltage")
_VoltageLowThresh_Type = Integer32
_VoltageLowThresh_Object = MibTableColumn
voltageLowThresh = _VoltageLowThresh_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 2, 1, 6),
    _VoltageLowThresh_Type()
)
voltageLowThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voltageLowThresh.setStatus("current")
if mibBuilder.loadTexts:
    voltageLowThresh.setUnits("milli-voltage")
_VoltageDescr_Type = DisplayString
_VoltageDescr_Object = MibTableColumn
voltageDescr = _VoltageDescr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 2, 1, 7),
    _VoltageDescr_Type()
)
voltageDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageDescr.setStatus("current")
_VoltageHighThresh_Type = Integer32
_VoltageHighThresh_Object = MibTableColumn
voltageHighThresh = _VoltageHighThresh_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 2, 1, 8),
    _VoltageHighThresh_Type()
)
voltageHighThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voltageHighThresh.setStatus("current")
if mibBuilder.loadTexts:
    voltageHighThresh.setUnits("milli-voltage")
_TemperatureTable_Object = MibTable
temperatureTable = _TemperatureTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 3)
)
if mibBuilder.loadTexts:
    temperatureTable.setStatus("current")
_TemperatureEntry_Object = MibTableRow
temperatureEntry = _TemperatureEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 3, 1)
)
temperatureEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "chassisId"),
    (0, "ZYXEL-IES5000-MIB", "slotId"),
    (0, "ZYXEL-IES5000-MIB", "temperatureIndex"),
)
if mibBuilder.loadTexts:
    temperatureEntry.setStatus("current")
_TemperatureIndex_Type = Integer32
_TemperatureIndex_Object = MibTableColumn
temperatureIndex = _TemperatureIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 3, 1, 1),
    _TemperatureIndex_Type()
)
temperatureIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureIndex.setStatus("current")
_TemperatureCurValue_Type = Integer32
_TemperatureCurValue_Object = MibTableColumn
temperatureCurValue = _TemperatureCurValue_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 3, 1, 2),
    _TemperatureCurValue_Type()
)
temperatureCurValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCurValue.setStatus("current")
if mibBuilder.loadTexts:
    temperatureCurValue.setUnits("Celsius")
_TemperatureMaxValue_Type = Integer32
_TemperatureMaxValue_Object = MibTableColumn
temperatureMaxValue = _TemperatureMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 3, 1, 3),
    _TemperatureMaxValue_Type()
)
temperatureMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    temperatureMaxValue.setUnits("Celsius")
_TemperatureMinValue_Type = Integer32
_TemperatureMinValue_Object = MibTableColumn
temperatureMinValue = _TemperatureMinValue_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 3, 1, 4),
    _TemperatureMinValue_Type()
)
temperatureMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureMinValue.setStatus("current")
if mibBuilder.loadTexts:
    temperatureMinValue.setUnits("Celsius")
_TemperatureHighThresh_Type = Integer32
_TemperatureHighThresh_Object = MibTableColumn
temperatureHighThresh = _TemperatureHighThresh_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 3, 1, 5),
    _TemperatureHighThresh_Type()
)
temperatureHighThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    temperatureHighThresh.setStatus("current")
if mibBuilder.loadTexts:
    temperatureHighThresh.setUnits("Celsius")
_TemperatureDescr_Type = DisplayString
_TemperatureDescr_Object = MibTableColumn
temperatureDescr = _TemperatureDescr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 3, 1, 6),
    _TemperatureDescr_Type()
)
temperatureDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureDescr.setStatus("current")
_TemperatureLowThresh_Type = Integer32
_TemperatureLowThresh_Object = MibTableColumn
temperatureLowThresh = _TemperatureLowThresh_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 3, 1, 7),
    _TemperatureLowThresh_Type()
)
temperatureLowThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    temperatureLowThresh.setStatus("current")
if mibBuilder.loadTexts:
    temperatureLowThresh.setUnits("Celsius")
_CpuUtilizationTable_Object = MibTable
cpuUtilizationTable = _CpuUtilizationTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 4)
)
if mibBuilder.loadTexts:
    cpuUtilizationTable.setStatus("current")
_CpuUtilizationEntry_Object = MibTableRow
cpuUtilizationEntry = _CpuUtilizationEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 4, 1)
)
cpuUtilizationEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "chassisId"),
    (0, "ZYXEL-IES5000-MIB", "slotId"),
    (0, "ZYXEL-IES5000-MIB", "cpuIndex"),
)
if mibBuilder.loadTexts:
    cpuUtilizationEntry.setStatus("current")
_CpuIndex_Type = Integer32
_CpuIndex_Object = MibTableColumn
cpuIndex = _CpuIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 4, 1, 1),
    _CpuIndex_Type()
)
cpuIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpuIndex.setStatus("current")
_CpuCurValue_Type = Integer32
_CpuCurValue_Object = MibTableColumn
cpuCurValue = _CpuCurValue_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 4, 1, 2),
    _CpuCurValue_Type()
)
cpuCurValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpuCurValue.setStatus("current")
if mibBuilder.loadTexts:
    cpuCurValue.setUnits("Percent")
_CpuMaxValue_Type = Integer32
_CpuMaxValue_Object = MibTableColumn
cpuMaxValue = _CpuMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 4, 1, 3),
    _CpuMaxValue_Type()
)
cpuMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpuMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    cpuMaxValue.setUnits("Percent")
_CpuHighThresh_Type = Integer32
_CpuHighThresh_Object = MibTableColumn
cpuHighThresh = _CpuHighThresh_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 4, 1, 4),
    _CpuHighThresh_Type()
)
cpuHighThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpuHighThresh.setStatus("current")
if mibBuilder.loadTexts:
    cpuHighThresh.setUnits("Percent")
_CpuDescr_Type = DisplayString
_CpuDescr_Object = MibTableColumn
cpuDescr = _CpuDescr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 4, 1, 5),
    _CpuDescr_Type()
)
cpuDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpuDescr.setStatus("current")
_PacketBufferUsageTable_Object = MibTable
packetBufferUsageTable = _PacketBufferUsageTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 5)
)
if mibBuilder.loadTexts:
    packetBufferUsageTable.setStatus("current")
_PacketBufferUsageEntry_Object = MibTableRow
packetBufferUsageEntry = _PacketBufferUsageEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 5, 1)
)
packetBufferUsageEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "chassisId"),
    (0, "ZYXEL-IES5000-MIB", "slotId"),
    (0, "ZYXEL-IES5000-MIB", "packetBufferIndex"),
)
if mibBuilder.loadTexts:
    packetBufferUsageEntry.setStatus("current")
_PacketBufferIndex_Type = Integer32
_PacketBufferIndex_Object = MibTableColumn
packetBufferIndex = _PacketBufferIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 5, 1, 1),
    _PacketBufferIndex_Type()
)
packetBufferIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    packetBufferIndex.setStatus("current")
_PacketBufferCurValue_Type = Integer32
_PacketBufferCurValue_Object = MibTableColumn
packetBufferCurValue = _PacketBufferCurValue_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 5, 1, 2),
    _PacketBufferCurValue_Type()
)
packetBufferCurValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    packetBufferCurValue.setStatus("current")
if mibBuilder.loadTexts:
    packetBufferCurValue.setUnits("Percent")
_PacketBufferMaxValue_Type = Integer32
_PacketBufferMaxValue_Object = MibTableColumn
packetBufferMaxValue = _PacketBufferMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 5, 1, 3),
    _PacketBufferMaxValue_Type()
)
packetBufferMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    packetBufferMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    packetBufferMaxValue.setUnits("Percent")
_PacketBufferHighThresh_Type = Integer32
_PacketBufferHighThresh_Object = MibTableColumn
packetBufferHighThresh = _PacketBufferHighThresh_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 5, 1, 4),
    _PacketBufferHighThresh_Type()
)
packetBufferHighThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    packetBufferHighThresh.setStatus("current")
if mibBuilder.loadTexts:
    packetBufferHighThresh.setUnits("Percent")
_PacketBufferDescr_Type = DisplayString
_PacketBufferDescr_Object = MibTableColumn
packetBufferDescr = _PacketBufferDescr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 5, 1, 5),
    _PacketBufferDescr_Type()
)
packetBufferDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    packetBufferDescr.setStatus("current")
_MemoryUsageTable_Object = MibTable
memoryUsageTable = _MemoryUsageTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 6)
)
if mibBuilder.loadTexts:
    memoryUsageTable.setStatus("current")
_MemoryUsageEntry_Object = MibTableRow
memoryUsageEntry = _MemoryUsageEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 6, 1)
)
memoryUsageEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "chassisId"),
    (0, "ZYXEL-IES5000-MIB", "slotId"),
    (0, "ZYXEL-IES5000-MIB", "memoryIndex"),
)
if mibBuilder.loadTexts:
    memoryUsageEntry.setStatus("current")
_MemoryIndex_Type = Integer32
_MemoryIndex_Object = MibTableColumn
memoryIndex = _MemoryIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 6, 1, 1),
    _MemoryIndex_Type()
)
memoryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memoryIndex.setStatus("current")
_MemoryCurValue_Type = Integer32
_MemoryCurValue_Object = MibTableColumn
memoryCurValue = _MemoryCurValue_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 6, 1, 2),
    _MemoryCurValue_Type()
)
memoryCurValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memoryCurValue.setStatus("current")
if mibBuilder.loadTexts:
    memoryCurValue.setUnits("Percent")
_MemoryMaxValue_Type = Integer32
_MemoryMaxValue_Object = MibTableColumn
memoryMaxValue = _MemoryMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 6, 1, 3),
    _MemoryMaxValue_Type()
)
memoryMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memoryMaxValue.setStatus("current")
if mibBuilder.loadTexts:
    memoryMaxValue.setUnits("Percent")
_MemoryHighThresh_Type = Integer32
_MemoryHighThresh_Object = MibTableColumn
memoryHighThresh = _MemoryHighThresh_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 6, 1, 4),
    _MemoryHighThresh_Type()
)
memoryHighThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memoryHighThresh.setStatus("current")
if mibBuilder.loadTexts:
    memoryHighThresh.setUnits("Percent")
_MemoryDescr_Type = DisplayString
_MemoryDescr_Object = MibTableColumn
memoryDescr = _MemoryDescr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 3, 6, 1, 5),
    _MemoryDescr_Type()
)
memoryDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memoryDescr.setStatus("current")
_TimeSetup_ObjectIdentity = ObjectIdentity
timeSetup = _TimeSetup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 4)
)


class _TimeServerMode_Type(Integer32):
    """Custom type timeServerMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("daytime", 2),
          ("time", 3),
          ("ntp", 4))
    )


_TimeServerMode_Type.__name__ = "Integer32"
_TimeServerMode_Object = MibScalar
timeServerMode = _TimeServerMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 4, 1),
    _TimeServerMode_Type()
)
timeServerMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    timeServerMode.setStatus("current")
_TimeServerIP_Type = IpAddress
_TimeServerIP_Object = MibScalar
timeServerIP = _TimeServerIP_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 4, 2),
    _TimeServerIP_Type()
)
timeServerIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    timeServerIP.setStatus("current")
_SystemTime_Type = DisplayString
_SystemTime_Object = MibScalar
systemTime = _SystemTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 4, 3),
    _SystemTime_Type()
)
systemTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemTime.setStatus("current")
_SystemDate_Type = DisplayString
_SystemDate_Object = MibScalar
systemDate = _SystemDate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 4, 4),
    _SystemDate_Type()
)
systemDate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemDate.setStatus("current")


class _SystemTimeZone_Type(Integer32):
    """Custom type systemTimeZone based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33)
        )
    )
    namedValues = NamedValues(
        *(("utc-minus-1200", 1),
          ("utc-minus-1100", 2),
          ("utc-minus-1000", 3),
          ("utc-minus-0900", 4),
          ("utc-minus-0800", 5),
          ("utc-minus-0700", 6),
          ("utc-minus-0600", 7),
          ("utc-minus-0500", 8),
          ("utc-minus-0400", 9),
          ("utc-minus-0300", 10),
          ("utc-minus-0200", 11),
          ("utc-minus-0100", 12),
          ("utc", 13),
          ("utc-plus-0100", 14),
          ("utc-plus-0200", 15),
          ("utc-plus-0300", 16),
          ("utc-plus-0400", 17),
          ("utc-plus-0500", 18),
          ("utc-plus-0600", 19),
          ("utc-plus-0700", 20),
          ("utc-plus-0800", 21),
          ("utc-plus-0900", 22),
          ("utc-plus-1000", 23),
          ("utc-plus-1100", 24),
          ("utc-plus-1200", 25),
          ("utc-minus-0330", 26),
          ("utc-plus-0330", 27),
          ("utc-plus-0430", 28),
          ("utc-plus-0530", 29),
          ("utc-plus-0545", 30),
          ("utc-plus-0630", 31),
          ("utc-plus-0930", 32),
          ("utc-plus-1300", 33))
    )


_SystemTimeZone_Type.__name__ = "Integer32"
_SystemTimeZone_Object = MibScalar
systemTimeZone = _SystemTimeZone_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 4, 5),
    _SystemTimeZone_Type()
)
systemTimeZone.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemTimeZone.setStatus("current")
_TimeServerSync_Type = Integer32
_TimeServerSync_Object = MibScalar
timeServerSync = _TimeServerSync_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 4, 6),
    _TimeServerSync_Type()
)
timeServerSync.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    timeServerSync.setStatus("current")
_DayLightSaving_ObjectIdentity = ObjectIdentity
dayLightSaving = _DayLightSaving_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 4, 7)
)


class _DayLightSavingAdminStatus_Type(Integer32):
    """Custom type dayLightSavingAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_DayLightSavingAdminStatus_Type.__name__ = "Integer32"
_DayLightSavingAdminStatus_Object = MibScalar
dayLightSavingAdminStatus = _DayLightSavingAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 4, 7, 1),
    _DayLightSavingAdminStatus_Type()
)
dayLightSavingAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dayLightSavingAdminStatus.setStatus("current")
_DayLightSavingStartTime_ObjectIdentity = ObjectIdentity
dayLightSavingStartTime = _DayLightSavingStartTime_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 4, 7, 2)
)


class _DayLightSavingStartMonth_Type(Integer32):
    """Custom type dayLightSavingStartMonth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("jan", 1),
          ("feb", 2),
          ("mar", 3),
          ("apr", 4),
          ("may", 5),
          ("jun", 6),
          ("jul", 7),
          ("aug", 8),
          ("sep", 9),
          ("oct", 10),
          ("nov", 11),
          ("dec", 12))
    )


_DayLightSavingStartMonth_Type.__name__ = "Integer32"
_DayLightSavingStartMonth_Object = MibScalar
dayLightSavingStartMonth = _DayLightSavingStartMonth_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 4, 7, 2, 1),
    _DayLightSavingStartMonth_Type()
)
dayLightSavingStartMonth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dayLightSavingStartMonth.setStatus("current")


class _DayLightSavingStartWeek_Type(Integer32):
    """Custom type dayLightSavingStartWeek based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("first", 1),
          ("second", 2),
          ("third", 3),
          ("fourth", 4),
          ("last", 5))
    )


_DayLightSavingStartWeek_Type.__name__ = "Integer32"
_DayLightSavingStartWeek_Object = MibScalar
dayLightSavingStartWeek = _DayLightSavingStartWeek_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 4, 7, 2, 2),
    _DayLightSavingStartWeek_Type()
)
dayLightSavingStartWeek.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dayLightSavingStartWeek.setStatus("current")


class _DayLightSavingStartWday_Type(Integer32):
    """Custom type dayLightSavingStartWday based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("sun", 1),
          ("mon", 2),
          ("tus", 3),
          ("wed", 4),
          ("thu", 5),
          ("fri", 6),
          ("sat", 7))
    )


_DayLightSavingStartWday_Type.__name__ = "Integer32"
_DayLightSavingStartWday_Object = MibScalar
dayLightSavingStartWday = _DayLightSavingStartWday_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 4, 7, 2, 3),
    _DayLightSavingStartWday_Type()
)
dayLightSavingStartWday.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dayLightSavingStartWday.setStatus("current")


class _DayLightSavingStartHour_Type(Integer32):
    """Custom type dayLightSavingStartHour based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 24),
    )


_DayLightSavingStartHour_Type.__name__ = "Integer32"
_DayLightSavingStartHour_Object = MibScalar
dayLightSavingStartHour = _DayLightSavingStartHour_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 4, 7, 2, 4),
    _DayLightSavingStartHour_Type()
)
dayLightSavingStartHour.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dayLightSavingStartHour.setStatus("current")
_DayLightSavingEndTime_ObjectIdentity = ObjectIdentity
dayLightSavingEndTime = _DayLightSavingEndTime_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 4, 7, 3)
)


class _DayLightSavingEndMonth_Type(Integer32):
    """Custom type dayLightSavingEndMonth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("jan", 1),
          ("feb", 2),
          ("mar", 3),
          ("apr", 4),
          ("may", 5),
          ("jun", 6),
          ("jul", 7),
          ("aug", 8),
          ("sep", 9),
          ("oct", 10),
          ("nov", 11),
          ("dec", 12))
    )


_DayLightSavingEndMonth_Type.__name__ = "Integer32"
_DayLightSavingEndMonth_Object = MibScalar
dayLightSavingEndMonth = _DayLightSavingEndMonth_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 4, 7, 3, 1),
    _DayLightSavingEndMonth_Type()
)
dayLightSavingEndMonth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dayLightSavingEndMonth.setStatus("current")


class _DayLightSavingEndWeek_Type(Integer32):
    """Custom type dayLightSavingEndWeek based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("first", 1),
          ("second", 2),
          ("third", 3),
          ("fourth", 4),
          ("last", 5))
    )


_DayLightSavingEndWeek_Type.__name__ = "Integer32"
_DayLightSavingEndWeek_Object = MibScalar
dayLightSavingEndWeek = _DayLightSavingEndWeek_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 4, 7, 3, 2),
    _DayLightSavingEndWeek_Type()
)
dayLightSavingEndWeek.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dayLightSavingEndWeek.setStatus("current")


class _DayLightSavingEndWday_Type(Integer32):
    """Custom type dayLightSavingEndWday based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("sun", 1),
          ("mon", 2),
          ("tus", 3),
          ("wed", 4),
          ("thu", 5),
          ("fri", 6),
          ("sat", 7))
    )


_DayLightSavingEndWday_Type.__name__ = "Integer32"
_DayLightSavingEndWday_Object = MibScalar
dayLightSavingEndWday = _DayLightSavingEndWday_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 4, 7, 3, 3),
    _DayLightSavingEndWday_Type()
)
dayLightSavingEndWday.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dayLightSavingEndWday.setStatus("current")


class _DayLightSavingEndHour_Type(Integer32):
    """Custom type dayLightSavingEndHour based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 24),
    )


_DayLightSavingEndHour_Type.__name__ = "Integer32"
_DayLightSavingEndHour_Object = MibScalar
dayLightSavingEndHour = _DayLightSavingEndHour_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 4, 7, 3, 4),
    _DayLightSavingEndHour_Type()
)
dayLightSavingEndHour.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dayLightSavingEndHour.setStatus("current")
_TimeServerInetAddrType_Type = InetAddressType
_TimeServerInetAddrType_Object = MibScalar
timeServerInetAddrType = _TimeServerInetAddrType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 4, 8),
    _TimeServerInetAddrType_Type()
)
timeServerInetAddrType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    timeServerInetAddrType.setStatus("current")
_TimeServerInetAddr_Type = InetAddress
_TimeServerInetAddr_Object = MibScalar
timeServerInetAddr = _TimeServerInetAddr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 4, 9),
    _TimeServerInetAddr_Type()
)
timeServerInetAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    timeServerInetAddr.setStatus("current")
_AccessCtrl_ObjectIdentity = ObjectIdentity
accessCtrl = _AccessCtrl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 5)
)
_AccessCtrlTable_Object = MibTable
accessCtrlTable = _AccessCtrlTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 5, 1)
)
if mibBuilder.loadTexts:
    accessCtrlTable.setStatus("current")
_AccessCtrlEntry_Object = MibTableRow
accessCtrlEntry = _AccessCtrlEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 5, 1, 1)
)
accessCtrlEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "accessCtrlService"),
)
if mibBuilder.loadTexts:
    accessCtrlEntry.setStatus("current")


class _AccessCtrlService_Type(Integer32):
    """Custom type accessCtrlService based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("telnet", 1),
          ("ftp", 2),
          ("web", 3),
          ("icmp", 4),
          ("ssh", 5),
          ("snmp", 6),
          ("https", 7))
    )


_AccessCtrlService_Type.__name__ = "Integer32"
_AccessCtrlService_Object = MibTableColumn
accessCtrlService = _AccessCtrlService_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 5, 1, 1, 1),
    _AccessCtrlService_Type()
)
accessCtrlService.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    accessCtrlService.setStatus("current")


class _AccessCtrlEnable_Type(Integer32):
    """Custom type accessCtrlEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AccessCtrlEnable_Type.__name__ = "Integer32"
_AccessCtrlEnable_Object = MibTableColumn
accessCtrlEnable = _AccessCtrlEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 5, 1, 1, 2),
    _AccessCtrlEnable_Type()
)
accessCtrlEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    accessCtrlEnable.setStatus("current")
_AccessCtrlPort_Type = Integer32
_AccessCtrlPort_Object = MibTableColumn
accessCtrlPort = _AccessCtrlPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 5, 1, 1, 3),
    _AccessCtrlPort_Type()
)
accessCtrlPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    accessCtrlPort.setStatus("current")
_SecuredClientTable_Object = MibTable
securedClientTable = _SecuredClientTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 5, 2)
)
if mibBuilder.loadTexts:
    securedClientTable.setStatus("current")
_SecuredClientEntry_Object = MibTableRow
securedClientEntry = _SecuredClientEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 5, 2, 1)
)
securedClientEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "securedClientIndex"),
)
if mibBuilder.loadTexts:
    securedClientEntry.setStatus("current")
_SecuredClientIndex_Type = Integer32
_SecuredClientIndex_Object = MibTableColumn
securedClientIndex = _SecuredClientIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 5, 2, 1, 1),
    _SecuredClientIndex_Type()
)
securedClientIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    securedClientIndex.setStatus("current")
_SecuredClientStartIp_Type = IpAddress
_SecuredClientStartIp_Object = MibTableColumn
securedClientStartIp = _SecuredClientStartIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 5, 2, 1, 2),
    _SecuredClientStartIp_Type()
)
securedClientStartIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    securedClientStartIp.setStatus("current")
_SecuredClientEndIp_Type = IpAddress
_SecuredClientEndIp_Object = MibTableColumn
securedClientEndIp = _SecuredClientEndIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 5, 2, 1, 3),
    _SecuredClientEndIp_Type()
)
securedClientEndIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    securedClientEndIp.setStatus("current")
_SecuredClientService_Type = Integer32
_SecuredClientService_Object = MibTableColumn
securedClientService = _SecuredClientService_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 5, 2, 1, 4),
    _SecuredClientService_Type()
)
securedClientService.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    securedClientService.setStatus("current")


class _SecuredClientEnable_Type(Integer32):
    """Custom type securedClientEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SecuredClientEnable_Type.__name__ = "Integer32"
_SecuredClientEnable_Object = MibTableColumn
securedClientEnable = _SecuredClientEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 5, 2, 1, 5),
    _SecuredClientEnable_Type()
)
securedClientEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    securedClientEnable.setStatus("current")
_SecuredClientInetTable_Object = MibTable
securedClientInetTable = _SecuredClientInetTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 5, 3)
)
if mibBuilder.loadTexts:
    securedClientInetTable.setStatus("current")
_SecuredClientInetEntry_Object = MibTableRow
securedClientInetEntry = _SecuredClientInetEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 5, 3, 1)
)
securedClientInetEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "securedClientInetIndex"),
)
if mibBuilder.loadTexts:
    securedClientInetEntry.setStatus("current")
_SecuredClientInetIndex_Type = Integer32
_SecuredClientInetIndex_Object = MibTableColumn
securedClientInetIndex = _SecuredClientInetIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 5, 3, 1, 1),
    _SecuredClientInetIndex_Type()
)
securedClientInetIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    securedClientInetIndex.setStatus("current")
_SecuredClientInetAddrType_Type = InetAddressType
_SecuredClientInetAddrType_Object = MibTableColumn
securedClientInetAddrType = _SecuredClientInetAddrType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 5, 3, 1, 2),
    _SecuredClientInetAddrType_Type()
)
securedClientInetAddrType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    securedClientInetAddrType.setStatus("current")
_SecuredClientInetAddr_Type = InetAddress
_SecuredClientInetAddr_Object = MibTableColumn
securedClientInetAddr = _SecuredClientInetAddr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 5, 3, 1, 3),
    _SecuredClientInetAddr_Type()
)
securedClientInetAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    securedClientInetAddr.setStatus("current")
_SecuredClientInetMask_Type = Integer32
_SecuredClientInetMask_Object = MibTableColumn
securedClientInetMask = _SecuredClientInetMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 5, 3, 1, 4),
    _SecuredClientInetMask_Type()
)
securedClientInetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    securedClientInetMask.setStatus("current")
_SecuredClientInetService_Type = Integer32
_SecuredClientInetService_Object = MibTableColumn
securedClientInetService = _SecuredClientInetService_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 5, 3, 1, 5),
    _SecuredClientInetService_Type()
)
securedClientInetService.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    securedClientInetService.setStatus("current")


class _SecuredClientInetEnable_Type(Integer32):
    """Custom type securedClientInetEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SecuredClientInetEnable_Type.__name__ = "Integer32"
_SecuredClientInetEnable_Object = MibTableColumn
securedClientInetEnable = _SecuredClientInetEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 5, 3, 1, 6),
    _SecuredClientInetEnable_Type()
)
securedClientInetEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    securedClientInetEnable.setStatus("current")
_Syslog_ObjectIdentity = ObjectIdentity
syslog = _Syslog_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 6)
)


class _SyslogEnable_Type(Integer32):
    """Custom type syslogEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SyslogEnable_Type.__name__ = "Integer32"
_SyslogEnable_Object = MibScalar
syslogEnable = _SyslogEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 6, 1),
    _SyslogEnable_Type()
)
syslogEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    syslogEnable.setStatus("current")
_SyslogTable_Object = MibTable
syslogTable = _SyslogTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 6, 2)
)
if mibBuilder.loadTexts:
    syslogTable.setStatus("current")
_SyslogEntry_Object = MibTableRow
syslogEntry = _SyslogEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 6, 2, 1)
)
syslogEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "syslogFacility"),
)
if mibBuilder.loadTexts:
    syslogEntry.setStatus("current")


class _SyslogFacility_Type(Integer32):
    """Custom type syslogFacility based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("local0", 0),
          ("local1", 1),
          ("local2", 2),
          ("local3", 3),
          ("local4", 4),
          ("local5", 5),
          ("local6", 6),
          ("local7", 7))
    )


_SyslogFacility_Type.__name__ = "Integer32"
_SyslogFacility_Object = MibTableColumn
syslogFacility = _SyslogFacility_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 6, 2, 1, 1),
    _SyslogFacility_Type()
)
syslogFacility.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    syslogFacility.setStatus("current")
_SyslogServer_Type = IpAddress
_SyslogServer_Object = MibTableColumn
syslogServer = _SyslogServer_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 6, 2, 1, 2),
    _SyslogServer_Type()
)
syslogServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    syslogServer.setStatus("current")
_SyslogServerInetAddrType_Type = InetAddressType
_SyslogServerInetAddrType_Object = MibTableColumn
syslogServerInetAddrType = _SyslogServerInetAddrType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 6, 2, 1, 3),
    _SyslogServerInetAddrType_Type()
)
syslogServerInetAddrType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    syslogServerInetAddrType.setStatus("current")
_SyslogServerInetAddr_Type = InetAddress
_SyslogServerInetAddr_Object = MibTableColumn
syslogServerInetAddr = _SyslogServerInetAddr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 6, 2, 1, 4),
    _SyslogServerInetAddr_Type()
)
syslogServerInetAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    syslogServerInetAddr.setStatus("current")
_Snmp_ObjectIdentity = ObjectIdentity
snmp = _Snmp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 7)
)
_TrapDestTable_Object = MibTable
trapDestTable = _TrapDestTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 7, 1)
)
if mibBuilder.loadTexts:
    trapDestTable.setStatus("current")
_TrapDestEntry_Object = MibTableRow
trapDestEntry = _TrapDestEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 7, 1, 1)
)
trapDestEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "trapDestIndex"),
)
if mibBuilder.loadTexts:
    trapDestEntry.setStatus("current")
_TrapDestIndex_Type = Integer32
_TrapDestIndex_Object = MibTableColumn
trapDestIndex = _TrapDestIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 7, 1, 1, 1),
    _TrapDestIndex_Type()
)
trapDestIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trapDestIndex.setStatus("current")
_TrapDestIp_Type = IpAddress
_TrapDestIp_Object = MibTableColumn
trapDestIp = _TrapDestIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 7, 1, 1, 2),
    _TrapDestIp_Type()
)
trapDestIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    trapDestIp.setStatus("current")
_TrapDestPort_Type = Integer32
_TrapDestPort_Object = MibTableColumn
trapDestPort = _TrapDestPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 7, 1, 1, 3),
    _TrapDestPort_Type()
)
trapDestPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    trapDestPort.setStatus("current")


class _TrapDestSnmpVersion_Type(Integer32):
    """Custom type trapDestSnmpVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("v1", 1),
          ("v2c", 2),
          ("v3", 3))
    )


_TrapDestSnmpVersion_Type.__name__ = "Integer32"
_TrapDestSnmpVersion_Object = MibTableColumn
trapDestSnmpVersion = _TrapDestSnmpVersion_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 7, 1, 1, 4),
    _TrapDestSnmpVersion_Type()
)
trapDestSnmpVersion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    trapDestSnmpVersion.setStatus("current")
_TrapDestUserName_Type = DisplayString
_TrapDestUserName_Object = MibTableColumn
trapDestUserName = _TrapDestUserName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 7, 1, 1, 5),
    _TrapDestUserName_Type()
)
trapDestUserName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    trapDestUserName.setStatus("current")
_TrapDestInetAddrType_Type = InetAddressType
_TrapDestInetAddrType_Object = MibTableColumn
trapDestInetAddrType = _TrapDestInetAddrType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 7, 1, 1, 6),
    _TrapDestInetAddrType_Type()
)
trapDestInetAddrType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    trapDestInetAddrType.setStatus("current")
_TrapDestInetAddr_Type = InetAddress
_TrapDestInetAddr_Object = MibTableColumn
trapDestInetAddr = _TrapDestInetAddr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 7, 1, 1, 7),
    _TrapDestInetAddr_Type()
)
trapDestInetAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    trapDestInetAddr.setStatus("current")


class _SnmpGetCommunity_Type(DisplayString):
    """Custom type snmpGetCommunity based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_SnmpGetCommunity_Type.__name__ = "DisplayString"
_SnmpGetCommunity_Object = MibScalar
snmpGetCommunity = _SnmpGetCommunity_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 7, 2),
    _SnmpGetCommunity_Type()
)
snmpGetCommunity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpGetCommunity.setStatus("current")


class _SnmpSetCommunity_Type(DisplayString):
    """Custom type snmpSetCommunity based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_SnmpSetCommunity_Type.__name__ = "DisplayString"
_SnmpSetCommunity_Object = MibScalar
snmpSetCommunity = _SnmpSetCommunity_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 7, 3),
    _SnmpSetCommunity_Type()
)
snmpSetCommunity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpSetCommunity.setStatus("current")


class _SnmpTrapCommunity_Type(DisplayString):
    """Custom type snmpTrapCommunity based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_SnmpTrapCommunity_Type.__name__ = "DisplayString"
_SnmpTrapCommunity_Object = MibScalar
snmpTrapCommunity = _SnmpTrapCommunity_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 7, 4),
    _SnmpTrapCommunity_Type()
)
snmpTrapCommunity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpTrapCommunity.setStatus("current")
_SnmpUserTable_Object = MibTable
snmpUserTable = _SnmpUserTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 7, 5)
)
if mibBuilder.loadTexts:
    snmpUserTable.setStatus("current")
_SnmpUserEntry_Object = MibTableRow
snmpUserEntry = _SnmpUserEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 7, 5, 1)
)
snmpUserEntry.setIndexNames(
    (1, "ZYXEL-IES5000-MIB", "snmpUserName"),
)
if mibBuilder.loadTexts:
    snmpUserEntry.setStatus("current")
_SnmpUserName_Type = DisplayString
_SnmpUserName_Object = MibTableColumn
snmpUserName = _SnmpUserName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 7, 5, 1, 1),
    _SnmpUserName_Type()
)
snmpUserName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    snmpUserName.setStatus("current")


class _SnmpUserSecurityLevel_Type(Integer32):
    """Custom type snmpUserSecurityLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAuthNoPriv", 1),
          ("authNoPriv", 2),
          ("authPriv", 3))
    )


_SnmpUserSecurityLevel_Type.__name__ = "Integer32"
_SnmpUserSecurityLevel_Object = MibTableColumn
snmpUserSecurityLevel = _SnmpUserSecurityLevel_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 7, 5, 1, 2),
    _SnmpUserSecurityLevel_Type()
)
snmpUserSecurityLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpUserSecurityLevel.setStatus("current")


class _SnmpUserAuthProtocol_Type(Integer32):
    """Custom type snmpUserAuthProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("md5", 1),
          ("sha", 2))
    )


_SnmpUserAuthProtocol_Type.__name__ = "Integer32"
_SnmpUserAuthProtocol_Object = MibTableColumn
snmpUserAuthProtocol = _SnmpUserAuthProtocol_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 7, 5, 1, 3),
    _SnmpUserAuthProtocol_Type()
)
snmpUserAuthProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpUserAuthProtocol.setStatus("current")


class _SnmpUserPrivProtocol_Type(Integer32):
    """Custom type snmpUserPrivProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("des", 1),
          ("aes", 2))
    )


_SnmpUserPrivProtocol_Type.__name__ = "Integer32"
_SnmpUserPrivProtocol_Object = MibTableColumn
snmpUserPrivProtocol = _SnmpUserPrivProtocol_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 7, 5, 1, 4),
    _SnmpUserPrivProtocol_Type()
)
snmpUserPrivProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpUserPrivProtocol.setStatus("current")


class _SnmpVersion_Type(Integer32):
    """Custom type snmpVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("v2c", 1),
          ("v3", 2),
          ("v3v2c", 3))
    )


_SnmpVersion_Type.__name__ = "Integer32"
_SnmpVersion_Object = MibScalar
snmpVersion = _SnmpVersion_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 7, 6),
    _SnmpVersion_Type()
)
snmpVersion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpVersion.setStatus("current")
_User_ObjectIdentity = ObjectIdentity
user = _User_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 8)
)
_UserTable_Object = MibTable
userTable = _UserTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 8, 5)
)
if mibBuilder.loadTexts:
    userTable.setStatus("current")
_UserEntry_Object = MibTableRow
userEntry = _UserEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 8, 5, 1)
)
userEntry.setIndexNames(
    (1, "ZYXEL-IES5000-MIB", "userName"),
)
if mibBuilder.loadTexts:
    userEntry.setStatus("current")
_UserName_Type = DisplayString
_UserName_Object = MibTableColumn
userName = _UserName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 8, 5, 1, 1),
    _UserName_Type()
)
userName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    userName.setStatus("current")
_UserPassword_Type = DisplayString
_UserPassword_Object = MibTableColumn
userPassword = _UserPassword_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 8, 5, 1, 2),
    _UserPassword_Type()
)
userPassword.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    userPassword.setStatus("current")


class _UserPriviledge_Type(Integer32):
    """Custom type userPriviledge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 14),
    )


_UserPriviledge_Type.__name__ = "Integer32"
_UserPriviledge_Object = MibTableColumn
userPriviledge = _UserPriviledge_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 8, 5, 1, 3),
    _UserPriviledge_Type()
)
userPriviledge.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    userPriviledge.setStatus("current")
_UserRowStatus_Type = RowStatus
_UserRowStatus_Object = MibTableColumn
userRowStatus = _UserRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 8, 5, 1, 4),
    _UserRowStatus_Type()
)
userRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    userRowStatus.setStatus("current")
_Aaa_ObjectIdentity = ObjectIdentity
aaa = _Aaa_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9)
)
_Auth_ObjectIdentity = ObjectIdentity
auth = _Auth_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 1)
)


class _LoginMethod1_Type(Integer32):
    """Custom type loginMethod1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("local", 1),
          ("radius", 2),
          ("tacacsplus", 3))
    )


_LoginMethod1_Type.__name__ = "Integer32"
_LoginMethod1_Object = MibScalar
loginMethod1 = _LoginMethod1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 1, 1),
    _LoginMethod1_Type()
)
loginMethod1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    loginMethod1.setStatus("current")


class _LoginMethod2_Type(Integer32):
    """Custom type loginMethod2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("local", 1),
          ("radius", 2),
          ("tacacsplus", 3))
    )


_LoginMethod2_Type.__name__ = "Integer32"
_LoginMethod2_Object = MibScalar
loginMethod2 = _LoginMethod2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 1, 2),
    _LoginMethod2_Type()
)
loginMethod2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    loginMethod2.setStatus("current")


class _LoginMethod3_Type(Integer32):
    """Custom type loginMethod3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("local", 1),
          ("radius", 2),
          ("tacacsplus", 3))
    )


_LoginMethod3_Type.__name__ = "Integer32"
_LoginMethod3_Object = MibScalar
loginMethod3 = _LoginMethod3_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 1, 3),
    _LoginMethod3_Type()
)
loginMethod3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    loginMethod3.setStatus("current")


class _EnableMethod1_Type(Integer32):
    """Custom type enableMethod1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("tacacsplus", 2))
    )


_EnableMethod1_Type.__name__ = "Integer32"
_EnableMethod1_Object = MibScalar
enableMethod1 = _EnableMethod1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 1, 4),
    _EnableMethod1_Type()
)
enableMethod1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    enableMethod1.setStatus("current")


class _EnableMethod2_Type(Integer32):
    """Custom type enableMethod2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("enable", 1),
          ("tacacsplus", 2))
    )


_EnableMethod2_Type.__name__ = "Integer32"
_EnableMethod2_Object = MibScalar
enableMethod2 = _EnableMethod2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 1, 5),
    _EnableMethod2_Type()
)
enableMethod2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    enableMethod2.setStatus("current")


class _LoginTryCont_Type(Integer32):
    """Custom type loginTryCont based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_LoginTryCont_Type.__name__ = "Integer32"
_LoginTryCont_Object = MibScalar
loginTryCont = _LoginTryCont_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 1, 6),
    _LoginTryCont_Type()
)
loginTryCont.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    loginTryCont.setStatus("current")
_Acct_ObjectIdentity = ObjectIdentity
acct = _Acct_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 2)
)


class _SystemActive_Type(Integer32):
    """Custom type systemActive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SystemActive_Type.__name__ = "Integer32"
_SystemActive_Object = MibScalar
systemActive = _SystemActive_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 2, 1),
    _SystemActive_Type()
)
systemActive.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemActive.setStatus("current")


class _SystemMethod_Type(Integer32):
    """Custom type systemMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("radius", 1),
          ("tacacsplus", 2))
    )


_SystemMethod_Type.__name__ = "Integer32"
_SystemMethod_Object = MibScalar
systemMethod = _SystemMethod_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 2, 2),
    _SystemMethod_Type()
)
systemMethod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemMethod.setStatus("current")


class _SystemBroadcast_Type(Integer32):
    """Custom type systemBroadcast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SystemBroadcast_Type.__name__ = "Integer32"
_SystemBroadcast_Object = MibScalar
systemBroadcast = _SystemBroadcast_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 2, 3),
    _SystemBroadcast_Type()
)
systemBroadcast.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemBroadcast.setStatus("current")


class _ExecActive_Type(Integer32):
    """Custom type execActive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_ExecActive_Type.__name__ = "Integer32"
_ExecActive_Object = MibScalar
execActive = _ExecActive_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 2, 4),
    _ExecActive_Type()
)
execActive.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    execActive.setStatus("current")


class _ExecMethod_Type(Integer32):
    """Custom type execMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("radius", 1),
          ("tacacsplus", 2))
    )


_ExecMethod_Type.__name__ = "Integer32"
_ExecMethod_Object = MibScalar
execMethod = _ExecMethod_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 2, 5),
    _ExecMethod_Type()
)
execMethod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    execMethod.setStatus("current")


class _ExecMode_Type(Integer32):
    """Custom type execMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("start-stop", 1),
          ("stop-only", 2))
    )


_ExecMode_Type.__name__ = "Integer32"
_ExecMode_Object = MibScalar
execMode = _ExecMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 2, 6),
    _ExecMode_Type()
)
execMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    execMode.setStatus("current")


class _ExecBroadcast_Type(Integer32):
    """Custom type execBroadcast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_ExecBroadcast_Type.__name__ = "Integer32"
_ExecBroadcast_Object = MibScalar
execBroadcast = _ExecBroadcast_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 2, 7),
    _ExecBroadcast_Type()
)
execBroadcast.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    execBroadcast.setStatus("current")


class _CommandsActive_Type(Integer32):
    """Custom type commandsActive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_CommandsActive_Type.__name__ = "Integer32"
_CommandsActive_Object = MibScalar
commandsActive = _CommandsActive_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 2, 8),
    _CommandsActive_Type()
)
commandsActive.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    commandsActive.setStatus("current")


class _CommandsPrivilege_Type(Integer32):
    """Custom type commandsPrivilege based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 14),
    )


_CommandsPrivilege_Type.__name__ = "Integer32"
_CommandsPrivilege_Object = MibScalar
commandsPrivilege = _CommandsPrivilege_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 2, 9),
    _CommandsPrivilege_Type()
)
commandsPrivilege.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    commandsPrivilege.setStatus("current")


class _CommandsBroadcast_Type(Integer32):
    """Custom type commandsBroadcast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_CommandsBroadcast_Type.__name__ = "Integer32"
_CommandsBroadcast_Object = MibScalar
commandsBroadcast = _CommandsBroadcast_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 2, 10),
    _CommandsBroadcast_Type()
)
commandsBroadcast.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    commandsBroadcast.setStatus("current")


class _UpdatePeriod_Type(Unsigned32):
    """Custom type updatePeriod based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_UpdatePeriod_Type.__name__ = "Unsigned32"
_UpdatePeriod_Object = MibScalar
updatePeriod = _UpdatePeriod_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 2, 11),
    _UpdatePeriod_Type()
)
updatePeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    updatePeriod.setStatus("current")
_Radius_ObjectIdentity = ObjectIdentity
radius = _Radius_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 3)
)
_RadiusAuth_ObjectIdentity = ObjectIdentity
radiusAuth = _RadiusAuth_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 3, 1)
)


class _RadiusAuthRedundantMode_Type(Integer32):
    """Custom type radiusAuthRedundantMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("index-priority", 1),
          ("round-robin", 2))
    )


_RadiusAuthRedundantMode_Type.__name__ = "Integer32"
_RadiusAuthRedundantMode_Object = MibScalar
radiusAuthRedundantMode = _RadiusAuthRedundantMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 3, 1, 1),
    _RadiusAuthRedundantMode_Type()
)
radiusAuthRedundantMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusAuthRedundantMode.setStatus("current")


class _RadiusAuthTimeoutPeriod_Type(Integer32):
    """Custom type radiusAuthTimeoutPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RadiusAuthTimeoutPeriod_Type.__name__ = "Integer32"
_RadiusAuthTimeoutPeriod_Object = MibScalar
radiusAuthTimeoutPeriod = _RadiusAuthTimeoutPeriod_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 3, 1, 2),
    _RadiusAuthTimeoutPeriod_Type()
)
radiusAuthTimeoutPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusAuthTimeoutPeriod.setStatus("current")
_RadiusAuthServerTable_Object = MibTable
radiusAuthServerTable = _RadiusAuthServerTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 3, 1, 3)
)
if mibBuilder.loadTexts:
    radiusAuthServerTable.setStatus("current")
_RadiusAuthServerEntry_Object = MibTableRow
radiusAuthServerEntry = _RadiusAuthServerEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 3, 1, 3, 1)
)
radiusAuthServerEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "radiusAuthServerIndex"),
)
if mibBuilder.loadTexts:
    radiusAuthServerEntry.setStatus("current")


class _RadiusAuthServerIndex_Type(Integer32):
    """Custom type radiusAuthServerIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_RadiusAuthServerIndex_Type.__name__ = "Integer32"
_RadiusAuthServerIndex_Object = MibTableColumn
radiusAuthServerIndex = _RadiusAuthServerIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 3, 1, 3, 1, 1),
    _RadiusAuthServerIndex_Type()
)
radiusAuthServerIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radiusAuthServerIndex.setStatus("current")
_RadiusAuthServerIP_Type = IpAddress
_RadiusAuthServerIP_Object = MibTableColumn
radiusAuthServerIP = _RadiusAuthServerIP_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 3, 1, 3, 1, 2),
    _RadiusAuthServerIP_Type()
)
radiusAuthServerIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusAuthServerIP.setStatus("current")
_RadiusAuthServerPort_Type = Integer32
_RadiusAuthServerPort_Object = MibTableColumn
radiusAuthServerPort = _RadiusAuthServerPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 3, 1, 3, 1, 3),
    _RadiusAuthServerPort_Type()
)
radiusAuthServerPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusAuthServerPort.setStatus("current")
_RadiusAuthServerSecret_Type = DisplayString
_RadiusAuthServerSecret_Object = MibTableColumn
radiusAuthServerSecret = _RadiusAuthServerSecret_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 3, 1, 3, 1, 4),
    _RadiusAuthServerSecret_Type()
)
radiusAuthServerSecret.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusAuthServerSecret.setStatus("current")
_RadiusAcct_ObjectIdentity = ObjectIdentity
radiusAcct = _RadiusAcct_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 3, 2)
)


class _RadiusAcctTimeoutPeriod_Type(Integer32):
    """Custom type radiusAcctTimeoutPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RadiusAcctTimeoutPeriod_Type.__name__ = "Integer32"
_RadiusAcctTimeoutPeriod_Object = MibScalar
radiusAcctTimeoutPeriod = _RadiusAcctTimeoutPeriod_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 3, 2, 1),
    _RadiusAcctTimeoutPeriod_Type()
)
radiusAcctTimeoutPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusAcctTimeoutPeriod.setStatus("current")
_RadiusAcctServerTable_Object = MibTable
radiusAcctServerTable = _RadiusAcctServerTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 3, 2, 2)
)
if mibBuilder.loadTexts:
    radiusAcctServerTable.setStatus("current")
_RadiusAcctServerEntry_Object = MibTableRow
radiusAcctServerEntry = _RadiusAcctServerEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 3, 2, 2, 1)
)
radiusAcctServerEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "radiusAcctServerIndex"),
)
if mibBuilder.loadTexts:
    radiusAcctServerEntry.setStatus("current")


class _RadiusAcctServerIndex_Type(Integer32):
    """Custom type radiusAcctServerIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_RadiusAcctServerIndex_Type.__name__ = "Integer32"
_RadiusAcctServerIndex_Object = MibTableColumn
radiusAcctServerIndex = _RadiusAcctServerIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 3, 2, 2, 1, 1),
    _RadiusAcctServerIndex_Type()
)
radiusAcctServerIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radiusAcctServerIndex.setStatus("current")
_RadiusAcctServerIP_Type = IpAddress
_RadiusAcctServerIP_Object = MibTableColumn
radiusAcctServerIP = _RadiusAcctServerIP_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 3, 2, 2, 1, 2),
    _RadiusAcctServerIP_Type()
)
radiusAcctServerIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusAcctServerIP.setStatus("current")
_RadiusAcctServerPort_Type = Integer32
_RadiusAcctServerPort_Object = MibTableColumn
radiusAcctServerPort = _RadiusAcctServerPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 3, 2, 2, 1, 3),
    _RadiusAcctServerPort_Type()
)
radiusAcctServerPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusAcctServerPort.setStatus("current")
_RadiusAcctServerSecret_Type = DisplayString
_RadiusAcctServerSecret_Object = MibTableColumn
radiusAcctServerSecret = _RadiusAcctServerSecret_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 3, 2, 2, 1, 4),
    _RadiusAcctServerSecret_Type()
)
radiusAcctServerSecret.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusAcctServerSecret.setStatus("current")


class _RadiusAcctRedundantMode_Type(Integer32):
    """Custom type radiusAcctRedundantMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("index-priority", 1),
          ("round-robin", 2))
    )


_RadiusAcctRedundantMode_Type.__name__ = "Integer32"
_RadiusAcctRedundantMode_Object = MibScalar
radiusAcctRedundantMode = _RadiusAcctRedundantMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 3, 2, 3),
    _RadiusAcctRedundantMode_Type()
)
radiusAcctRedundantMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusAcctRedundantMode.setStatus("current")
_Tacacsplus_ObjectIdentity = ObjectIdentity
tacacsplus = _Tacacsplus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 4)
)
_TacacsplusAuth_ObjectIdentity = ObjectIdentity
tacacsplusAuth = _TacacsplusAuth_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 4, 1)
)


class _TacacsplusAuthRedundantMode_Type(Integer32):
    """Custom type tacacsplusAuthRedundantMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("index-priority", 1),
          ("round-robin", 2))
    )


_TacacsplusAuthRedundantMode_Type.__name__ = "Integer32"
_TacacsplusAuthRedundantMode_Object = MibScalar
tacacsplusAuthRedundantMode = _TacacsplusAuthRedundantMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 4, 1, 1),
    _TacacsplusAuthRedundantMode_Type()
)
tacacsplusAuthRedundantMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacacsplusAuthRedundantMode.setStatus("current")


class _TacacsplusAuthTimeoutPeriod_Type(Integer32):
    """Custom type tacacsplusAuthTimeoutPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_TacacsplusAuthTimeoutPeriod_Type.__name__ = "Integer32"
_TacacsplusAuthTimeoutPeriod_Object = MibScalar
tacacsplusAuthTimeoutPeriod = _TacacsplusAuthTimeoutPeriod_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 4, 1, 2),
    _TacacsplusAuthTimeoutPeriod_Type()
)
tacacsplusAuthTimeoutPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacacsplusAuthTimeoutPeriod.setStatus("current")
_TacacsplusAuthServerTable_Object = MibTable
tacacsplusAuthServerTable = _TacacsplusAuthServerTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 4, 1, 3)
)
if mibBuilder.loadTexts:
    tacacsplusAuthServerTable.setStatus("current")
_TacacsplusAuthServerEntry_Object = MibTableRow
tacacsplusAuthServerEntry = _TacacsplusAuthServerEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 4, 1, 3, 1)
)
tacacsplusAuthServerEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "tacscsplusAuthServerIndex"),
)
if mibBuilder.loadTexts:
    tacacsplusAuthServerEntry.setStatus("current")


class _TacscsplusAuthServerIndex_Type(Integer32):
    """Custom type tacscsplusAuthServerIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_TacscsplusAuthServerIndex_Type.__name__ = "Integer32"
_TacscsplusAuthServerIndex_Object = MibTableColumn
tacscsplusAuthServerIndex = _TacscsplusAuthServerIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 4, 1, 3, 1, 1),
    _TacscsplusAuthServerIndex_Type()
)
tacscsplusAuthServerIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacscsplusAuthServerIndex.setStatus("current")
_TacscsplusAuthServerIP_Type = IpAddress
_TacscsplusAuthServerIP_Object = MibTableColumn
tacscsplusAuthServerIP = _TacscsplusAuthServerIP_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 4, 1, 3, 1, 2),
    _TacscsplusAuthServerIP_Type()
)
tacscsplusAuthServerIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacscsplusAuthServerIP.setStatus("current")
_TacscsplusAuthServerPort_Type = Integer32
_TacscsplusAuthServerPort_Object = MibTableColumn
tacscsplusAuthServerPort = _TacscsplusAuthServerPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 4, 1, 3, 1, 3),
    _TacscsplusAuthServerPort_Type()
)
tacscsplusAuthServerPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacscsplusAuthServerPort.setStatus("current")
_TacscsplusAuthServerSecret_Type = DisplayString
_TacscsplusAuthServerSecret_Object = MibTableColumn
tacscsplusAuthServerSecret = _TacscsplusAuthServerSecret_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 4, 1, 3, 1, 4),
    _TacscsplusAuthServerSecret_Type()
)
tacscsplusAuthServerSecret.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacscsplusAuthServerSecret.setStatus("current")
_TacacsplusAcct_ObjectIdentity = ObjectIdentity
tacacsplusAcct = _TacacsplusAcct_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 4, 2)
)


class _TacacsplusAcctTimeoutPeriod_Type(Integer32):
    """Custom type tacacsplusAcctTimeoutPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_TacacsplusAcctTimeoutPeriod_Type.__name__ = "Integer32"
_TacacsplusAcctTimeoutPeriod_Object = MibScalar
tacacsplusAcctTimeoutPeriod = _TacacsplusAcctTimeoutPeriod_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 4, 2, 1),
    _TacacsplusAcctTimeoutPeriod_Type()
)
tacacsplusAcctTimeoutPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacacsplusAcctTimeoutPeriod.setStatus("current")
_TacacsplusAcctServerTable_Object = MibTable
tacacsplusAcctServerTable = _TacacsplusAcctServerTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 4, 2, 2)
)
if mibBuilder.loadTexts:
    tacacsplusAcctServerTable.setStatus("current")
_TacacsplusAcctServerEntry_Object = MibTableRow
tacacsplusAcctServerEntry = _TacacsplusAcctServerEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 4, 2, 2, 1)
)
tacacsplusAcctServerEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "tacacsplusAcctServerIndex"),
)
if mibBuilder.loadTexts:
    tacacsplusAcctServerEntry.setStatus("current")


class _TacacsplusAcctServerIndex_Type(Integer32):
    """Custom type tacacsplusAcctServerIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_TacacsplusAcctServerIndex_Type.__name__ = "Integer32"
_TacacsplusAcctServerIndex_Object = MibTableColumn
tacacsplusAcctServerIndex = _TacacsplusAcctServerIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 4, 2, 2, 1, 1),
    _TacacsplusAcctServerIndex_Type()
)
tacacsplusAcctServerIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacacsplusAcctServerIndex.setStatus("current")
_TacacsplusAcctServerIP_Type = IpAddress
_TacacsplusAcctServerIP_Object = MibTableColumn
tacacsplusAcctServerIP = _TacacsplusAcctServerIP_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 4, 2, 2, 1, 2),
    _TacacsplusAcctServerIP_Type()
)
tacacsplusAcctServerIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacacsplusAcctServerIP.setStatus("current")
_TacacsplusAcctServerPort_Type = Integer32
_TacacsplusAcctServerPort_Object = MibTableColumn
tacacsplusAcctServerPort = _TacacsplusAcctServerPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 4, 2, 2, 1, 3),
    _TacacsplusAcctServerPort_Type()
)
tacacsplusAcctServerPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacacsplusAcctServerPort.setStatus("current")
_TacacsplusAcctServerSecret_Type = DisplayString
_TacacsplusAcctServerSecret_Object = MibTableColumn
tacacsplusAcctServerSecret = _TacacsplusAcctServerSecret_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 4, 2, 2, 1, 4),
    _TacacsplusAcctServerSecret_Type()
)
tacacsplusAcctServerSecret.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacacsplusAcctServerSecret.setStatus("current")


class _TacacsplusAcctRedundantMode_Type(Integer32):
    """Custom type tacacsplusAcctRedundantMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("index-priority", 1),
          ("round-robin", 2))
    )


_TacacsplusAcctRedundantMode_Type.__name__ = "Integer32"
_TacacsplusAcctRedundantMode_Object = MibScalar
tacacsplusAcctRedundantMode = _TacacsplusAcctRedundantMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 4, 2, 3),
    _TacacsplusAcctRedundantMode_Type()
)
tacacsplusAcctRedundantMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacacsplusAcctRedundantMode.setStatus("current")
_TacacsplusAuthor_ObjectIdentity = ObjectIdentity
tacacsplusAuthor = _TacacsplusAuthor_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 4, 3)
)


class _TacacsplusAuthorRedundantMode_Type(Integer32):
    """Custom type tacacsplusAuthorRedundantMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("index-priority", 1),
          ("round-robin", 2))
    )


_TacacsplusAuthorRedundantMode_Type.__name__ = "Integer32"
_TacacsplusAuthorRedundantMode_Object = MibScalar
tacacsplusAuthorRedundantMode = _TacacsplusAuthorRedundantMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 4, 3, 1),
    _TacacsplusAuthorRedundantMode_Type()
)
tacacsplusAuthorRedundantMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacacsplusAuthorRedundantMode.setStatus("current")


class _TacacsplusAuthorTimeoutPeriod_Type(Integer32):
    """Custom type tacacsplusAuthorTimeoutPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_TacacsplusAuthorTimeoutPeriod_Type.__name__ = "Integer32"
_TacacsplusAuthorTimeoutPeriod_Object = MibScalar
tacacsplusAuthorTimeoutPeriod = _TacacsplusAuthorTimeoutPeriod_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 4, 3, 2),
    _TacacsplusAuthorTimeoutPeriod_Type()
)
tacacsplusAuthorTimeoutPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacacsplusAuthorTimeoutPeriod.setStatus("current")
_TacacsplusAuthorServerTable_Object = MibTable
tacacsplusAuthorServerTable = _TacacsplusAuthorServerTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 4, 3, 3)
)
if mibBuilder.loadTexts:
    tacacsplusAuthorServerTable.setStatus("current")
_TacacsplusAuthorServerEntry_Object = MibTableRow
tacacsplusAuthorServerEntry = _TacacsplusAuthorServerEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 4, 3, 3, 1)
)
tacacsplusAuthorServerEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "tacscsplusAuthorServerIndex"),
)
if mibBuilder.loadTexts:
    tacacsplusAuthorServerEntry.setStatus("current")


class _TacscsplusAuthorServerIndex_Type(Integer32):
    """Custom type tacscsplusAuthorServerIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_TacscsplusAuthorServerIndex_Type.__name__ = "Integer32"
_TacscsplusAuthorServerIndex_Object = MibTableColumn
tacscsplusAuthorServerIndex = _TacscsplusAuthorServerIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 4, 3, 3, 1, 1),
    _TacscsplusAuthorServerIndex_Type()
)
tacscsplusAuthorServerIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacscsplusAuthorServerIndex.setStatus("current")
_TacscsplusAuthorServerIP_Type = IpAddress
_TacscsplusAuthorServerIP_Object = MibTableColumn
tacscsplusAuthorServerIP = _TacscsplusAuthorServerIP_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 4, 3, 3, 1, 2),
    _TacscsplusAuthorServerIP_Type()
)
tacscsplusAuthorServerIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacscsplusAuthorServerIP.setStatus("current")
_TacscsplusAuthorServerPort_Type = Integer32
_TacscsplusAuthorServerPort_Object = MibTableColumn
tacscsplusAuthorServerPort = _TacscsplusAuthorServerPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 4, 3, 3, 1, 3),
    _TacscsplusAuthorServerPort_Type()
)
tacscsplusAuthorServerPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacscsplusAuthorServerPort.setStatus("current")
_TacscsplusAuthorServerSecret_Type = DisplayString
_TacscsplusAuthorServerSecret_Object = MibTableColumn
tacscsplusAuthorServerSecret = _TacscsplusAuthorServerSecret_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 4, 3, 3, 1, 4),
    _TacscsplusAuthorServerSecret_Type()
)
tacscsplusAuthorServerSecret.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacscsplusAuthorServerSecret.setStatus("current")
_Author_ObjectIdentity = ObjectIdentity
author = _Author_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 5)
)
_AuthorCmdMethodTable_Object = MibTable
authorCmdMethodTable = _AuthorCmdMethodTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 5, 1)
)
if mibBuilder.loadTexts:
    authorCmdMethodTable.setStatus("current")
_AuthorCmdMethodEntry_Object = MibTableRow
authorCmdMethodEntry = _AuthorCmdMethodEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 5, 1, 1)
)
authorCmdMethodEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    authorCmdMethodEntry.setStatus("current")


class _AuthorCmdMethod_Type(Integer32):
    """Custom type authorCmdMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("local", 2),
          ("tacacsPlus", 3),
          ("tacacsPlus-then-none", 4),
          ("tacacsPlus-then-local", 5))
    )


_AuthorCmdMethod_Type.__name__ = "Integer32"
_AuthorCmdMethod_Object = MibTableColumn
authorCmdMethod = _AuthorCmdMethod_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 5, 1, 1, 1),
    _AuthorCmdMethod_Type()
)
authorCmdMethod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    authorCmdMethod.setStatus("current")


class _AuthorExec_Type(Integer32):
    """Custom type authorExec based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_AuthorExec_Type.__name__ = "Integer32"
_AuthorExec_Object = MibScalar
authorExec = _AuthorExec_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 9, 5, 2),
    _AuthorExec_Type()
)
authorExec.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    authorExec.setStatus("current")
_Session_ObjectIdentity = ObjectIdentity
session = _Session_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 10)
)
_SessionTimeOut_Type = Integer32
_SessionTimeOut_Object = MibScalar
sessionTimeOut = _SessionTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 10, 1),
    _SessionTimeOut_Type()
)
sessionTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sessionTimeOut.setStatus("current")
_SessionLoginMessage_Type = DisplayString
_SessionLoginMessage_Object = MibScalar
sessionLoginMessage = _SessionLoginMessage_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 10, 2),
    _SessionLoginMessage_Type()
)
sessionLoginMessage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sessionLoginMessage.setStatus("current")
_Bootimage_ObjectIdentity = ObjectIdentity
bootimage = _Bootimage_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 11)
)


class _SysBootImage_Type(Integer32):
    """Custom type sysBootImage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("image1", 1),
          ("image2", 2))
    )


_SysBootImage_Type.__name__ = "Integer32"
_SysBootImage_Object = MibScalar
sysBootImage = _SysBootImage_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 11, 11, 1),
    _SysBootImage_Type()
)
sysBootImage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysBootImage.setStatus("current")
_Trap_ObjectIdentity = ObjectIdentity
trap = _Trap_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12)
)
_Object_ObjectIdentity = ObjectIdentity
object = _Object_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1)
)
_Eqpt48VPowerIndex_Type = Integer32
_Eqpt48VPowerIndex_Object = MibScalar
eqpt48VPowerIndex = _Eqpt48VPowerIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 1),
    _Eqpt48VPowerIndex_Type()
)
eqpt48VPowerIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eqpt48VPowerIndex.setStatus("current")
_EqptAlarmInputIndex_Type = Integer32
_EqptAlarmInputIndex_Object = MibScalar
eqptAlarmInputIndex = _EqptAlarmInputIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 2),
    _EqptAlarmInputIndex_Type()
)
eqptAlarmInputIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eqptAlarmInputIndex.setStatus("current")
_EqptDslDeviceIndex_Type = Integer32
_EqptDslDeviceIndex_Object = MibScalar
eqptDslDeviceIndex = _EqptDslDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 3),
    _EqptDslDeviceIndex_Type()
)
eqptDslDeviceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eqptDslDeviceIndex.setStatus("current")
_EqptShdslSubDeviceIndex_Type = Integer32
_EqptShdslSubDeviceIndex_Object = MibScalar
eqptShdslSubDeviceIndex = _EqptShdslSubDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 4),
    _EqptShdslSubDeviceIndex_Type()
)
eqptShdslSubDeviceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eqptShdslSubDeviceIndex.setStatus("current")
_SysUser_Type = DisplayString
_SysUser_Object = MibScalar
sysUser = _SysUser_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 5),
    _SysUser_Type()
)
sysUser.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysUser.setStatus("current")


class _SysAccessPoint_Type(Integer32):
    """Custom type sysAccessPoint based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("console", 1),
          ("telnet", 2),
          ("ftp", 3),
          ("web", 4),
          ("ssh", 5))
    )


_SysAccessPoint_Type.__name__ = "Integer32"
_SysAccessPoint_Object = MibScalar
sysAccessPoint = _SysAccessPoint_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 6),
    _SysAccessPoint_Type()
)
sysAccessPoint.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysAccessPoint.setStatus("current")
_SysAccessPointIndex_Type = Integer32
_SysAccessPointIndex_Object = MibScalar
sysAccessPointIndex = _SysAccessPointIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 7),
    _SysAccessPointIndex_Type()
)
sysAccessPointIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysAccessPointIndex.setStatus("current")
_SysUserLoginIp_Type = IpAddress
_SysUserLoginIp_Object = MibScalar
sysUserLoginIp = _SysUserLoginIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 8),
    _SysUserLoginIp_Type()
)
sysUserLoginIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysUserLoginIp.setStatus("current")


class _EqptLTResetSource_Type(Integer32):
    """Custom type eqptLTResetSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("user", 1),
          ("nt", 2))
    )


_EqptLTResetSource_Type.__name__ = "Integer32"
_EqptLTResetSource_Object = MibScalar
eqptLTResetSource = _EqptLTResetSource_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 9),
    _EqptLTResetSource_Type()
)
eqptLTResetSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eqptLTResetSource.setStatus("current")
_SysProfSyncIpAddress_Type = IpAddress
_SysProfSyncIpAddress_Object = MibScalar
sysProfSyncIpAddress = _SysProfSyncIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 10),
    _SysProfSyncIpAddress_Type()
)
sysProfSyncIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysProfSyncIpAddress.setStatus("current")
_SysMacAntiSpoofOrig_Type = Integer32
_SysMacAntiSpoofOrig_Object = MibScalar
sysMacAntiSpoofOrig = _SysMacAntiSpoofOrig_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 11),
    _SysMacAntiSpoofOrig_Type()
)
sysMacAntiSpoofOrig.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysMacAntiSpoofOrig.setStatus("current")
_SysMacAntiSpoofNew_Type = Integer32
_SysMacAntiSpoofNew_Object = MibScalar
sysMacAntiSpoofNew = _SysMacAntiSpoofNew_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 12),
    _SysMacAntiSpoofNew_Type()
)
sysMacAntiSpoofNew.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysMacAntiSpoofNew.setStatus("current")
_SysMacAntiSpoofMac_Type = DisplayString
_SysMacAntiSpoofMac_Object = MibScalar
sysMacAntiSpoofMac = _SysMacAntiSpoofMac_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 13),
    _SysMacAntiSpoofMac_Type()
)
sysMacAntiSpoofMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysMacAntiSpoofMac.setStatus("current")


class _IntfCfmCcmErrorCause_Type(Integer32):
    """Custom type intfCfmCcmErrorCause based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("noDefect", 1),
          ("rdiReceived", 2),
          ("macDownReceivedFromDownMEP", 3),
          ("lostConnectionToRemoteMEP", 4),
          ("configurationError", 5),
          ("maintenanceDomainCrossConnect", 6))
    )


_IntfCfmCcmErrorCause_Type.__name__ = "Integer32"
_IntfCfmCcmErrorCause_Object = MibScalar
intfCfmCcmErrorCause = _IntfCfmCcmErrorCause_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 14),
    _IntfCfmCcmErrorCause_Type()
)
intfCfmCcmErrorCause.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intfCfmCcmErrorCause.setStatus("current")


class _E1AlarmStatus_Type(Integer32):
    """Custom type e1AlarmStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("set", 1),
          ("clear", 2))
    )


_E1AlarmStatus_Type.__name__ = "Integer32"
_E1AlarmStatus_Object = MibScalar
e1AlarmStatus = _E1AlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 15),
    _E1AlarmStatus_Type()
)
e1AlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1AlarmStatus.setStatus("current")
_E1AlarmCurrentValue_Type = Integer32
_E1AlarmCurrentValue_Object = MibScalar
e1AlarmCurrentValue = _E1AlarmCurrentValue_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 16),
    _E1AlarmCurrentValue_Type()
)
e1AlarmCurrentValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1AlarmCurrentValue.setStatus("current")
_E1AlarmThreshold_Type = Integer32
_E1AlarmThreshold_Object = MibScalar
e1AlarmThreshold = _E1AlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 17),
    _E1AlarmThreshold_Type()
)
e1AlarmThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1AlarmThreshold.setStatus("current")
_DslMacAntiSpoofOrig_Type = Integer32
_DslMacAntiSpoofOrig_Object = MibScalar
dslMacAntiSpoofOrig = _DslMacAntiSpoofOrig_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 18),
    _DslMacAntiSpoofOrig_Type()
)
dslMacAntiSpoofOrig.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dslMacAntiSpoofOrig.setStatus("current")
_DslMacAntiSpoofMac_Type = DisplayString
_DslMacAntiSpoofMac_Object = MibScalar
dslMacAntiSpoofMac = _DslMacAntiSpoofMac_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 19),
    _DslMacAntiSpoofMac_Type()
)
dslMacAntiSpoofMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dslMacAntiSpoofMac.setStatus("current")


class _VopTermPhoneState_Type(Integer32):
    """Custom type vopTermPhoneState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("on-hook", 1),
          ("off-hook", 2),
          ("ringing", 3),
          ("testing", 4),
          ("power-cut-down", 5),
          ("fault", 6),
          ("bad", 7),
          ("uninitialized", 8),
          ("unknown", 9))
    )


_VopTermPhoneState_Type.__name__ = "Integer32"
_VopTermPhoneState_Object = MibScalar
vopTermPhoneState = _VopTermPhoneState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 20),
    _VopTermPhoneState_Type()
)
vopTermPhoneState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vopTermPhoneState.setStatus("current")
_VopRingTimerSegment_Type = Integer32
_VopRingTimerSegment_Object = MibScalar
vopRingTimerSegment = _VopRingTimerSegment_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 21),
    _VopRingTimerSegment_Type()
)
vopRingTimerSegment.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vopRingTimerSegment.setStatus("current")
_VopRingTimerId_Type = Integer32
_VopRingTimerId_Object = MibScalar
vopRingTimerId = _VopRingTimerId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 22),
    _VopRingTimerId_Type()
)
vopRingTimerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vopRingTimerId.setStatus("current")


class _VopDscCodecType_Type(Integer32):
    """Custom type vopDscCodecType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              255)
        )
    )
    namedValues = NamedValues(
        *(("g711a", 0),
          ("g711mu", 1),
          ("g723", 2),
          ("g726-16", 3),
          ("g726-24", 4),
          ("g726-32", 5),
          ("g726-40", 6),
          ("g729ab", 7),
          ("unused", 255))
    )


_VopDscCodecType_Type.__name__ = "Integer32"
_VopDscCodecType_Object = MibScalar
vopDscCodecType = _VopDscCodecType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 23),
    _VopDscCodecType_Type()
)
vopDscCodecType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vopDscCodecType.setStatus("current")
_VopMcMediaId_Type = Integer32
_VopMcMediaId_Object = MibScalar
vopMcMediaId = _VopMcMediaId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 24),
    _VopMcMediaId_Type()
)
vopMcMediaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vopMcMediaId.setStatus("current")
_VopMcPort_Type = Integer32
_VopMcPort_Object = MibScalar
vopMcPort = _VopMcPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 25),
    _VopMcPort_Type()
)
vopMcPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vopMcPort.setStatus("current")


class _VopDropCallType_Type(Integer32):
    """Custom type vopDropCallType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("long-term", 0),
          ("short-term", 1))
    )


_VopDropCallType_Type.__name__ = "Integer32"
_VopDropCallType_Object = MibScalar
vopDropCallType = _VopDropCallType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 26),
    _VopDropCallType_Type()
)
vopDropCallType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vopDropCallType.setStatus("current")
_SysUserLoginInetAddrType_Type = InetAddressType
_SysUserLoginInetAddrType_Object = MibScalar
sysUserLoginInetAddrType = _SysUserLoginInetAddrType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 27),
    _SysUserLoginInetAddrType_Type()
)
sysUserLoginInetAddrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysUserLoginInetAddrType.setStatus("current")
_SysUserLoginInetAddr_Type = InetAddress
_SysUserLoginInetAddr_Object = MibScalar
sysUserLoginInetAddr = _SysUserLoginInetAddr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 28),
    _SysUserLoginInetAddr_Type()
)
sysUserLoginInetAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysUserLoginInetAddr.setStatus("current")
_VopDeviceId_Type = Integer32
_VopDeviceId_Object = MibScalar
vopDeviceId = _VopDeviceId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 29),
    _VopDeviceId_Type()
)
vopDeviceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vopDeviceId.setStatus("current")
_VopBatteryNum_Type = Integer32
_VopBatteryNum_Object = MibScalar
vopBatteryNum = _VopBatteryNum_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 30),
    _VopBatteryNum_Type()
)
vopBatteryNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vopBatteryNum.setStatus("current")
_VopRingerShortCount_Type = Integer32
_VopRingerShortCount_Object = MibScalar
vopRingerShortCount = _VopRingerShortCount_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 31),
    _VopRingerShortCount_Type()
)
vopRingerShortCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vopRingerShortCount.setStatus("current")
_VopMgcIP_Type = IpAddress
_VopMgcIP_Object = MibScalar
vopMgcIP = _VopMgcIP_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 32),
    _VopMgcIP_Type()
)
vopMgcIP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vopMgcIP.setStatus("current")
_EqptSptMstiInstanceId_Type = Integer32
_EqptSptMstiInstanceId_Object = MibScalar
eqptSptMstiInstanceId = _EqptSptMstiInstanceId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 33),
    _EqptSptMstiInstanceId_Type()
)
eqptSptMstiInstanceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eqptSptMstiInstanceId.setStatus("current")


class _EqptSptPortStateOrig_Type(Integer32):
    """Custom type eqptSptPortStateOrig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("discarding", 0),
          ("learning", 1),
          ("forwarding", 2))
    )


_EqptSptPortStateOrig_Type.__name__ = "Integer32"
_EqptSptPortStateOrig_Object = MibScalar
eqptSptPortStateOrig = _EqptSptPortStateOrig_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 34),
    _EqptSptPortStateOrig_Type()
)
eqptSptPortStateOrig.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eqptSptPortStateOrig.setStatus("current")


class _EqptSptPortStateNew_Type(Integer32):
    """Custom type eqptSptPortStateNew based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("discarding", 0),
          ("learning", 1),
          ("forwarding", 2))
    )


_EqptSptPortStateNew_Type.__name__ = "Integer32"
_EqptSptPortStateNew_Object = MibScalar
eqptSptPortStateNew = _EqptSptPortStateNew_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 35),
    _EqptSptPortStateNew_Type()
)
eqptSptPortStateNew.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eqptSptPortStateNew.setStatus("current")


class _EqptSptPortRoleOrig_Type(Integer32):
    """Custom type eqptSptPortRoleOrig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("alternated", 1),
          ("backup", 2),
          ("root", 3),
          ("designated", 4),
          ("master", 5),
          ("nonStp", 6))
    )


_EqptSptPortRoleOrig_Type.__name__ = "Integer32"
_EqptSptPortRoleOrig_Object = MibScalar
eqptSptPortRoleOrig = _EqptSptPortRoleOrig_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 36),
    _EqptSptPortRoleOrig_Type()
)
eqptSptPortRoleOrig.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eqptSptPortRoleOrig.setStatus("current")


class _EqptSptPortRoleNew_Type(Integer32):
    """Custom type eqptSptPortRoleNew based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("alternated", 1),
          ("backup", 2),
          ("root", 3),
          ("designated", 4),
          ("master", 5),
          ("nonStp", 6))
    )


_EqptSptPortRoleNew_Type.__name__ = "Integer32"
_EqptSptPortRoleNew_Object = MibScalar
eqptSptPortRoleNew = _EqptSptPortRoleNew_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 1, 37),
    _EqptSptPortRoleNew_Type()
)
eqptSptPortRoleNew.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eqptSptPortRoleNew.setStatus("current")
_Dsl_ObjectIdentity = ObjectIdentity
dsl = _Dsl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 2)
)
_Equipment_ObjectIdentity = ObjectIdentity
equipment = _Equipment_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3)
)
_Systrap_ObjectIdentity = ObjectIdentity
systrap = _Systrap_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 4)
)
_Enet_ObjectIdentity = ObjectIdentity
enet = _Enet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 5)
)
_Interface_ObjectIdentity = ObjectIdentity
interface = _Interface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 6)
)
_Tdm_ObjectIdentity = ObjectIdentity
tdm = _Tdm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 7)
)
_Voiptrap_ObjectIdentity = ObjectIdentity
voiptrap = _Voiptrap_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8)
)
_Statistics_ObjectIdentity = ObjectIdentity
statistics = _Statistics_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13)
)
_DhcpStats_ObjectIdentity = ObjectIdentity
dhcpStats = _DhcpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 1)
)
_DhcpSnoopIpTable_Object = MibTable
dhcpSnoopIpTable = _DhcpSnoopIpTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 1, 1)
)
if mibBuilder.loadTexts:
    dhcpSnoopIpTable.setStatus("current")
_DhcpSnoopIpEntry_Object = MibTableRow
dhcpSnoopIpEntry = _DhcpSnoopIpEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 1, 1, 1)
)
dhcpSnoopIpEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "dhcpSnoopIp"),
)
if mibBuilder.loadTexts:
    dhcpSnoopIpEntry.setStatus("current")
_DhcpSnoopIp_Type = IpAddress
_DhcpSnoopIp_Object = MibTableColumn
dhcpSnoopIp = _DhcpSnoopIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 1, 1, 1, 1),
    _DhcpSnoopIp_Type()
)
dhcpSnoopIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopIp.setStatus("current")
_DhcpSnoopMac_Type = PhysAddress
_DhcpSnoopMac_Object = MibTableColumn
dhcpSnoopMac = _DhcpSnoopMac_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 1, 1, 1, 2),
    _DhcpSnoopMac_Type()
)
dhcpSnoopMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopMac.setStatus("current")
_DhcpSnoopVid_Type = VlanIndex
_DhcpSnoopVid_Object = MibTableColumn
dhcpSnoopVid = _DhcpSnoopVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 1, 1, 1, 3),
    _DhcpSnoopVid_Type()
)
dhcpSnoopVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopVid.setStatus("current")
_DhcpSnoopCounterTable_Object = MibTable
dhcpSnoopCounterTable = _DhcpSnoopCounterTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 1, 2)
)
if mibBuilder.loadTexts:
    dhcpSnoopCounterTable.setStatus("current")
_DhcpSnoopCounterEntry_Object = MibTableRow
dhcpSnoopCounterEntry = _DhcpSnoopCounterEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 1, 2, 1)
)
dhcpSnoopCounterEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    dhcpSnoopCounterEntry.setStatus("current")
_DhcpDiscovery_Type = Counter64
_DhcpDiscovery_Object = MibTableColumn
dhcpDiscovery = _DhcpDiscovery_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 1, 2, 1, 1),
    _DhcpDiscovery_Type()
)
dhcpDiscovery.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpDiscovery.setStatus("current")
_DhcpOffer_Type = Counter64
_DhcpOffer_Object = MibTableColumn
dhcpOffer = _DhcpOffer_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 1, 2, 1, 2),
    _DhcpOffer_Type()
)
dhcpOffer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpOffer.setStatus("current")
_DhcpRequest_Type = Counter64
_DhcpRequest_Object = MibTableColumn
dhcpRequest = _DhcpRequest_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 1, 2, 1, 3),
    _DhcpRequest_Type()
)
dhcpRequest.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpRequest.setStatus("current")
_DhcpAck_Type = Counter64
_DhcpAck_Object = MibTableColumn
dhcpAck = _DhcpAck_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 1, 2, 1, 4),
    _DhcpAck_Type()
)
dhcpAck.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpAck.setStatus("current")
_DhcpAckBySnoopFull_Type = Counter64
_DhcpAckBySnoopFull_Object = MibTableColumn
dhcpAckBySnoopFull = _DhcpAckBySnoopFull_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 1, 2, 1, 5),
    _DhcpAckBySnoopFull_Type()
)
dhcpAckBySnoopFull.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpAckBySnoopFull.setStatus("current")
_Dhcpv6Solicit_Type = Counter64
_Dhcpv6Solicit_Object = MibTableColumn
dhcpv6Solicit = _Dhcpv6Solicit_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 1, 2, 1, 6),
    _Dhcpv6Solicit_Type()
)
dhcpv6Solicit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpv6Solicit.setStatus("current")
_Dhcpv6Advertise_Type = Counter64
_Dhcpv6Advertise_Object = MibTableColumn
dhcpv6Advertise = _Dhcpv6Advertise_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 1, 2, 1, 7),
    _Dhcpv6Advertise_Type()
)
dhcpv6Advertise.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpv6Advertise.setStatus("current")
_Dhcpv6Request_Type = Counter64
_Dhcpv6Request_Object = MibTableColumn
dhcpv6Request = _Dhcpv6Request_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 1, 2, 1, 8),
    _Dhcpv6Request_Type()
)
dhcpv6Request.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpv6Request.setStatus("current")
_Dhcpv6Reply_Type = Counter64
_Dhcpv6Reply_Object = MibTableColumn
dhcpv6Reply = _Dhcpv6Reply_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 1, 2, 1, 9),
    _Dhcpv6Reply_Type()
)
dhcpv6Reply.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpv6Reply.setStatus("current")
_Dhcpv6Renew_Type = Counter64
_Dhcpv6Renew_Object = MibTableColumn
dhcpv6Renew = _Dhcpv6Renew_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 1, 2, 1, 10),
    _Dhcpv6Renew_Type()
)
dhcpv6Renew.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpv6Renew.setStatus("current")
_Dhcpv6Rebind_Type = Counter64
_Dhcpv6Rebind_Object = MibTableColumn
dhcpv6Rebind = _Dhcpv6Rebind_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 1, 2, 1, 11),
    _Dhcpv6Rebind_Type()
)
dhcpv6Rebind.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpv6Rebind.setStatus("current")
_Dhcpv6Release_Type = Counter64
_Dhcpv6Release_Object = MibTableColumn
dhcpv6Release = _Dhcpv6Release_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 1, 2, 1, 12),
    _Dhcpv6Release_Type()
)
dhcpv6Release.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpv6Release.setStatus("current")
_Dhcpv6RelayFwd_Type = Counter64
_Dhcpv6RelayFwd_Object = MibTableColumn
dhcpv6RelayFwd = _Dhcpv6RelayFwd_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 1, 2, 1, 13),
    _Dhcpv6RelayFwd_Type()
)
dhcpv6RelayFwd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpv6RelayFwd.setStatus("current")
_Dhcpv6RelayReply_Type = Counter64
_Dhcpv6RelayReply_Object = MibTableColumn
dhcpv6RelayReply = _Dhcpv6RelayReply_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 1, 2, 1, 14),
    _Dhcpv6RelayReply_Type()
)
dhcpv6RelayReply.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpv6RelayReply.setStatus("current")
_Dhcpv6SnoopIpTable_Object = MibTable
dhcpv6SnoopIpTable = _Dhcpv6SnoopIpTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 1, 3)
)
if mibBuilder.loadTexts:
    dhcpv6SnoopIpTable.setStatus("current")
_Dhcpv6SnoopIpEntry_Object = MibTableRow
dhcpv6SnoopIpEntry = _Dhcpv6SnoopIpEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 1, 3, 1)
)
dhcpv6SnoopIpEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "dhcpv6SnoopInetAddrType"),
    (0, "ZYXEL-IES5000-MIB", "dhcpv6SnoopInetAddr"),
)
if mibBuilder.loadTexts:
    dhcpv6SnoopIpEntry.setStatus("current")
_Dhcpv6SnoopInetAddrType_Type = InetAddressType
_Dhcpv6SnoopInetAddrType_Object = MibTableColumn
dhcpv6SnoopInetAddrType = _Dhcpv6SnoopInetAddrType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 1, 3, 1, 1),
    _Dhcpv6SnoopInetAddrType_Type()
)
dhcpv6SnoopInetAddrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpv6SnoopInetAddrType.setStatus("current")
_Dhcpv6SnoopInetAddr_Type = InetAddress
_Dhcpv6SnoopInetAddr_Object = MibTableColumn
dhcpv6SnoopInetAddr = _Dhcpv6SnoopInetAddr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 1, 3, 1, 2),
    _Dhcpv6SnoopInetAddr_Type()
)
dhcpv6SnoopInetAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpv6SnoopInetAddr.setStatus("current")
_Dhcpv6SnoopMac_Type = PhysAddress
_Dhcpv6SnoopMac_Object = MibTableColumn
dhcpv6SnoopMac = _Dhcpv6SnoopMac_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 1, 3, 1, 3),
    _Dhcpv6SnoopMac_Type()
)
dhcpv6SnoopMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpv6SnoopMac.setStatus("current")
_Dhcpv6SnoopVid_Type = VlanIndex
_Dhcpv6SnoopVid_Object = MibTableColumn
dhcpv6SnoopVid = _Dhcpv6SnoopVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 1, 3, 1, 4),
    _Dhcpv6SnoopVid_Type()
)
dhcpv6SnoopVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpv6SnoopVid.setStatus("current")
_IgmpStats_ObjectIdentity = ObjectIdentity
igmpStats = _IgmpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2)
)
_IgmpQueryCntTotal_Type = Counter32
_IgmpQueryCntTotal_Object = MibScalar
igmpQueryCntTotal = _IgmpQueryCntTotal_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 1),
    _IgmpQueryCntTotal_Type()
)
igmpQueryCntTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpQueryCntTotal.setStatus("current")
_IgmpReportCntTotal_Type = Counter32
_IgmpReportCntTotal_Object = MibScalar
igmpReportCntTotal = _IgmpReportCntTotal_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 2),
    _IgmpReportCntTotal_Type()
)
igmpReportCntTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpReportCntTotal.setStatus("current")
_IgmpLeaveCntTotal_Type = Counter32
_IgmpLeaveCntTotal_Object = MibScalar
igmpLeaveCntTotal = _IgmpLeaveCntTotal_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 3),
    _IgmpLeaveCntTotal_Type()
)
igmpLeaveCntTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpLeaveCntTotal.setStatus("current")
_IgmpNumOfActiveGroups_Type = Integer32
_IgmpNumOfActiveGroups_Object = MibScalar
igmpNumOfActiveGroups = _IgmpNumOfActiveGroups_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 4),
    _IgmpNumOfActiveGroups_Type()
)
igmpNumOfActiveGroups.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpNumOfActiveGroups.setStatus("current")
_IgmpGroupTable_Object = MibTable
igmpGroupTable = _IgmpGroupTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 5)
)
if mibBuilder.loadTexts:
    igmpGroupTable.setStatus("current")
_IgmpGroupEntry_Object = MibTableRow
igmpGroupEntry = _IgmpGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 5, 1)
)
igmpGroupEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "igmpGroupVid"),
    (0, "ZYXEL-IES5000-MIB", "igmpGroupIp"),
)
if mibBuilder.loadTexts:
    igmpGroupEntry.setStatus("current")
_IgmpGroupVid_Type = VlanIndex
_IgmpGroupVid_Object = MibTableColumn
igmpGroupVid = _IgmpGroupVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 5, 1, 1),
    _IgmpGroupVid_Type()
)
igmpGroupVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpGroupVid.setStatus("current")
_IgmpGroupIp_Type = IpAddress
_IgmpGroupIp_Object = MibTableColumn
igmpGroupIp = _IgmpGroupIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 5, 1, 2),
    _IgmpGroupIp_Type()
)
igmpGroupIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpGroupIp.setStatus("current")
_IgmpGroupNumOfMembers_Type = Integer32
_IgmpGroupNumOfMembers_Object = MibTableColumn
igmpGroupNumOfMembers = _IgmpGroupNumOfMembers_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 5, 1, 3),
    _IgmpGroupNumOfMembers_Type()
)
igmpGroupNumOfMembers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpGroupNumOfMembers.setStatus("current")
_IgmpGroupMemberPorts_Type = PortList
_IgmpGroupMemberPorts_Object = MibTableColumn
igmpGroupMemberPorts = _IgmpGroupMemberPorts_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 5, 1, 4),
    _IgmpGroupMemberPorts_Type()
)
igmpGroupMemberPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpGroupMemberPorts.setStatus("current")
_IgmpGroupPortTable_Object = MibTable
igmpGroupPortTable = _IgmpGroupPortTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 6)
)
if mibBuilder.loadTexts:
    igmpGroupPortTable.setStatus("current")
_IgmpGroupPortEntry_Object = MibTableRow
igmpGroupPortEntry = _IgmpGroupPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 6, 1)
)
igmpGroupPortEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "igmpGroupPortVid"),
    (0, "ZYXEL-IES5000-MIB", "igmpGroupPortIp"),
    (0, "ZYXEL-IES5000-MIB", "igmpGroupPortSourceIp"),
)
if mibBuilder.loadTexts:
    igmpGroupPortEntry.setStatus("current")
_IgmpGroupPortVid_Type = VlanIndex
_IgmpGroupPortVid_Object = MibTableColumn
igmpGroupPortVid = _IgmpGroupPortVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 6, 1, 1),
    _IgmpGroupPortVid_Type()
)
igmpGroupPortVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpGroupPortVid.setStatus("current")
_IgmpGroupPortIp_Type = IpAddress
_IgmpGroupPortIp_Object = MibTableColumn
igmpGroupPortIp = _IgmpGroupPortIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 6, 1, 2),
    _IgmpGroupPortIp_Type()
)
igmpGroupPortIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpGroupPortIp.setStatus("current")
_IgmpGroupPortSourceIp_Type = IpAddress
_IgmpGroupPortSourceIp_Object = MibTableColumn
igmpGroupPortSourceIp = _IgmpGroupPortSourceIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 6, 1, 3),
    _IgmpGroupPortSourceIp_Type()
)
igmpGroupPortSourceIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpGroupPortSourceIp.setStatus("current")
_IgmpPortCtrlPduTable_Object = MibTable
igmpPortCtrlPduTable = _IgmpPortCtrlPduTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 7)
)
if mibBuilder.loadTexts:
    igmpPortCtrlPduTable.setStatus("current")
_IgmpPortCtrlPduEntry_Object = MibTableRow
igmpPortCtrlPduEntry = _IgmpPortCtrlPduEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 7, 1)
)
igmpPortCtrlPduEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    igmpPortCtrlPduEntry.setStatus("current")
_IgmpPortCtrlPduQueryCnt_Type = Counter32
_IgmpPortCtrlPduQueryCnt_Object = MibTableColumn
igmpPortCtrlPduQueryCnt = _IgmpPortCtrlPduQueryCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 7, 1, 1),
    _IgmpPortCtrlPduQueryCnt_Type()
)
igmpPortCtrlPduQueryCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpPortCtrlPduQueryCnt.setStatus("current")
_IgmpPortCtrlPduReportCnt_Type = Counter32
_IgmpPortCtrlPduReportCnt_Object = MibTableColumn
igmpPortCtrlPduReportCnt = _IgmpPortCtrlPduReportCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 7, 1, 2),
    _IgmpPortCtrlPduReportCnt_Type()
)
igmpPortCtrlPduReportCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpPortCtrlPduReportCnt.setStatus("current")
_IgmpPortCtrlPduLeaveCnt_Type = Counter32
_IgmpPortCtrlPduLeaveCnt_Object = MibTableColumn
igmpPortCtrlPduLeaveCnt = _IgmpPortCtrlPduLeaveCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 7, 1, 3),
    _IgmpPortCtrlPduLeaveCnt_Type()
)
igmpPortCtrlPduLeaveCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpPortCtrlPduLeaveCnt.setStatus("current")
_IgmpPortNumOfActiveGroups_Type = Integer32
_IgmpPortNumOfActiveGroups_Object = MibTableColumn
igmpPortNumOfActiveGroups = _IgmpPortNumOfActiveGroups_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 7, 1, 4),
    _IgmpPortNumOfActiveGroups_Type()
)
igmpPortNumOfActiveGroups.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpPortNumOfActiveGroups.setStatus("current")
_IgmpPortCtrlPduV2SuccessJoinCnt_Type = Counter32
_IgmpPortCtrlPduV2SuccessJoinCnt_Object = MibTableColumn
igmpPortCtrlPduV2SuccessJoinCnt = _IgmpPortCtrlPduV2SuccessJoinCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 7, 1, 5),
    _IgmpPortCtrlPduV2SuccessJoinCnt_Type()
)
igmpPortCtrlPduV2SuccessJoinCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpPortCtrlPduV2SuccessJoinCnt.setStatus("current")
_IgmpPortCtrlPduV2UnsuccJoinCnt_Type = Counter32
_IgmpPortCtrlPduV2UnsuccJoinCnt_Object = MibTableColumn
igmpPortCtrlPduV2UnsuccJoinCnt = _IgmpPortCtrlPduV2UnsuccJoinCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 7, 1, 6),
    _IgmpPortCtrlPduV2UnsuccJoinCnt_Type()
)
igmpPortCtrlPduV2UnsuccJoinCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpPortCtrlPduV2UnsuccJoinCnt.setStatus("current")
_IgmpPortCtrlPduGenQryCnt_Type = Counter32
_IgmpPortCtrlPduGenQryCnt_Object = MibTableColumn
igmpPortCtrlPduGenQryCnt = _IgmpPortCtrlPduGenQryCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 7, 1, 7),
    _IgmpPortCtrlPduGenQryCnt_Type()
)
igmpPortCtrlPduGenQryCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpPortCtrlPduGenQryCnt.setStatus("current")
_IgmpPortCtrlPduSpecQryCnt_Type = Counter32
_IgmpPortCtrlPduSpecQryCnt_Object = MibTableColumn
igmpPortCtrlPduSpecQryCnt = _IgmpPortCtrlPduSpecQryCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 7, 1, 8),
    _IgmpPortCtrlPduSpecQryCnt_Type()
)
igmpPortCtrlPduSpecQryCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpPortCtrlPduSpecQryCnt.setStatus("current")
_IgmpPortCtrlPduV3SuccessReportCnt_Type = Counter32
_IgmpPortCtrlPduV3SuccessReportCnt_Object = MibTableColumn
igmpPortCtrlPduV3SuccessReportCnt = _IgmpPortCtrlPduV3SuccessReportCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 7, 1, 9),
    _IgmpPortCtrlPduV3SuccessReportCnt_Type()
)
igmpPortCtrlPduV3SuccessReportCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpPortCtrlPduV3SuccessReportCnt.setStatus("current")
_IgmpPortCtrlPduV3UnsuccReportCnt_Type = Counter32
_IgmpPortCtrlPduV3UnsuccReportCnt_Object = MibTableColumn
igmpPortCtrlPduV3UnsuccReportCnt = _IgmpPortCtrlPduV3UnsuccReportCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 7, 1, 10),
    _IgmpPortCtrlPduV3UnsuccReportCnt_Type()
)
igmpPortCtrlPduV3UnsuccReportCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpPortCtrlPduV3UnsuccReportCnt.setStatus("current")
_IgmpPortCtrlPduInvalidCnt_Type = Counter32
_IgmpPortCtrlPduInvalidCnt_Object = MibTableColumn
igmpPortCtrlPduInvalidCnt = _IgmpPortCtrlPduInvalidCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 7, 1, 11),
    _IgmpPortCtrlPduInvalidCnt_Type()
)
igmpPortCtrlPduInvalidCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpPortCtrlPduInvalidCnt.setStatus("current")
_IgmpVlanStatsTable_Object = MibTable
igmpVlanStatsTable = _IgmpVlanStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 8)
)
if mibBuilder.loadTexts:
    igmpVlanStatsTable.setStatus("current")
_IgmpVlanStatsEntry_Object = MibTableRow
igmpVlanStatsEntry = _IgmpVlanStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 8, 1)
)
igmpVlanStatsEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "igmpVlanStatsVlanIndex"),
)
if mibBuilder.loadTexts:
    igmpVlanStatsEntry.setStatus("current")
_IgmpVlanStatsVlanIndex_Type = VlanIndex
_IgmpVlanStatsVlanIndex_Object = MibTableColumn
igmpVlanStatsVlanIndex = _IgmpVlanStatsVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 8, 1, 1),
    _IgmpVlanStatsVlanIndex_Type()
)
igmpVlanStatsVlanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpVlanStatsVlanIndex.setStatus("current")
_IgmpVlanStatsQueryCnt_Type = Counter32
_IgmpVlanStatsQueryCnt_Object = MibTableColumn
igmpVlanStatsQueryCnt = _IgmpVlanStatsQueryCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 8, 1, 2),
    _IgmpVlanStatsQueryCnt_Type()
)
igmpVlanStatsQueryCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpVlanStatsQueryCnt.setStatus("current")
_IgmpVlanStatsReportCnt_Type = Counter32
_IgmpVlanStatsReportCnt_Object = MibTableColumn
igmpVlanStatsReportCnt = _IgmpVlanStatsReportCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 8, 1, 3),
    _IgmpVlanStatsReportCnt_Type()
)
igmpVlanStatsReportCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpVlanStatsReportCnt.setStatus("current")
_IgmpVlanStatsLeaveCnt_Type = Counter32
_IgmpVlanStatsLeaveCnt_Object = MibTableColumn
igmpVlanStatsLeaveCnt = _IgmpVlanStatsLeaveCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 8, 1, 4),
    _IgmpVlanStatsLeaveCnt_Type()
)
igmpVlanStatsLeaveCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpVlanStatsLeaveCnt.setStatus("current")
_IgmpVlanStatsNumOfActiveGroups_Type = Integer32
_IgmpVlanStatsNumOfActiveGroups_Object = MibTableColumn
igmpVlanStatsNumOfActiveGroups = _IgmpVlanStatsNumOfActiveGroups_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 8, 1, 5),
    _IgmpVlanStatsNumOfActiveGroups_Type()
)
igmpVlanStatsNumOfActiveGroups.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpVlanStatsNumOfActiveGroups.setStatus("current")
_IgmpVlanStatsQueryPort_Type = Integer32
_IgmpVlanStatsQueryPort_Object = MibTableColumn
igmpVlanStatsQueryPort = _IgmpVlanStatsQueryPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 8, 1, 6),
    _IgmpVlanStatsQueryPort_Type()
)
igmpVlanStatsQueryPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpVlanStatsQueryPort.setStatus("current")
_IgmpVlanStatsQuerierIp_Type = IpAddress
_IgmpVlanStatsQuerierIp_Object = MibTableColumn
igmpVlanStatsQuerierIp = _IgmpVlanStatsQuerierIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 8, 1, 7),
    _IgmpVlanStatsQuerierIp_Type()
)
igmpVlanStatsQuerierIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpVlanStatsQuerierIp.setStatus("current")
_IgmpVlanStatsUnsuccessReportCnt_Type = Counter32
_IgmpVlanStatsUnsuccessReportCnt_Object = MibTableColumn
igmpVlanStatsUnsuccessReportCnt = _IgmpVlanStatsUnsuccessReportCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 8, 1, 8),
    _IgmpVlanStatsUnsuccessReportCnt_Type()
)
igmpVlanStatsUnsuccessReportCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpVlanStatsUnsuccessReportCnt.setStatus("current")
_IgmpVlanStatsSuccessReportCnt_Type = Counter32
_IgmpVlanStatsSuccessReportCnt_Object = MibTableColumn
igmpVlanStatsSuccessReportCnt = _IgmpVlanStatsSuccessReportCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 8, 1, 9),
    _IgmpVlanStatsSuccessReportCnt_Type()
)
igmpVlanStatsSuccessReportCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpVlanStatsSuccessReportCnt.setStatus("current")
_IgmpVlanStatsGeneralQueryInCnt_Type = Counter32
_IgmpVlanStatsGeneralQueryInCnt_Object = MibTableColumn
igmpVlanStatsGeneralQueryInCnt = _IgmpVlanStatsGeneralQueryInCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 8, 1, 10),
    _IgmpVlanStatsGeneralQueryInCnt_Type()
)
igmpVlanStatsGeneralQueryInCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpVlanStatsGeneralQueryInCnt.setStatus("current")
_IgmpVlanStatsGeneralQueryOutCnt_Type = Counter32
_IgmpVlanStatsGeneralQueryOutCnt_Object = MibTableColumn
igmpVlanStatsGeneralQueryOutCnt = _IgmpVlanStatsGeneralQueryOutCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 8, 1, 11),
    _IgmpVlanStatsGeneralQueryOutCnt_Type()
)
igmpVlanStatsGeneralQueryOutCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpVlanStatsGeneralQueryOutCnt.setStatus("current")
_IgmpVlanStatsSpecificQueryInCnt_Type = Counter32
_IgmpVlanStatsSpecificQueryInCnt_Object = MibTableColumn
igmpVlanStatsSpecificQueryInCnt = _IgmpVlanStatsSpecificQueryInCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 8, 1, 12),
    _IgmpVlanStatsSpecificQueryInCnt_Type()
)
igmpVlanStatsSpecificQueryInCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpVlanStatsSpecificQueryInCnt.setStatus("current")
_IgmpVlanStatsSpecificQueryOutCnt_Type = Counter32
_IgmpVlanStatsSpecificQueryOutCnt_Object = MibTableColumn
igmpVlanStatsSpecificQueryOutCnt = _IgmpVlanStatsSpecificQueryOutCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 8, 1, 13),
    _IgmpVlanStatsSpecificQueryOutCnt_Type()
)
igmpVlanStatsSpecificQueryOutCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpVlanStatsSpecificQueryOutCnt.setStatus("current")
_IgmpQueryOutCnt_Type = Counter32
_IgmpQueryOutCnt_Object = MibScalar
igmpQueryOutCnt = _IgmpQueryOutCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 9),
    _IgmpQueryOutCnt_Type()
)
igmpQueryOutCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpQueryOutCnt.setStatus("current")
_IgmpReportOutCnt_Type = Counter32
_IgmpReportOutCnt_Object = MibScalar
igmpReportOutCnt = _IgmpReportOutCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 10),
    _IgmpReportOutCnt_Type()
)
igmpReportOutCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpReportOutCnt.setStatus("current")
_IgmpLeaveOutCnt_Type = Counter32
_IgmpLeaveOutCnt_Object = MibScalar
igmpLeaveOutCnt = _IgmpLeaveOutCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 11),
    _IgmpLeaveOutCnt_Type()
)
igmpLeaveOutCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpLeaveOutCnt.setStatus("current")
_IgmpQueryDropCnt_Type = Counter32
_IgmpQueryDropCnt_Object = MibScalar
igmpQueryDropCnt = _IgmpQueryDropCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 12),
    _IgmpQueryDropCnt_Type()
)
igmpQueryDropCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpQueryDropCnt.setStatus("current")
_IgmpReportDropCnt_Type = Counter32
_IgmpReportDropCnt_Object = MibScalar
igmpReportDropCnt = _IgmpReportDropCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 13),
    _IgmpReportDropCnt_Type()
)
igmpReportDropCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpReportDropCnt.setStatus("current")
_IgmpLeaveDropCnt_Type = Counter32
_IgmpLeaveDropCnt_Object = MibScalar
igmpLeaveDropCnt = _IgmpLeaveDropCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 2, 14),
    _IgmpLeaveDropCnt_Type()
)
igmpLeaveDropCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpLeaveDropCnt.setStatus("current")
_MacStats_ObjectIdentity = ObjectIdentity
macStats = _MacStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 3)
)
_MacDisplayTarget_Type = Integer32
_MacDisplayTarget_Object = MibScalar
macDisplayTarget = _MacDisplayTarget_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 3, 1),
    _MacDisplayTarget_Type()
)
macDisplayTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macDisplayTarget.setStatus("current")
_MacTable_Object = MibTable
macTable = _MacTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 3, 2)
)
if mibBuilder.loadTexts:
    macTable.setStatus("current")
_MacEntry_Object = MibTableRow
macEntry = _MacEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 3, 2, 1)
)
macEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "macAddress"),
)
if mibBuilder.loadTexts:
    macEntry.setStatus("current")
_MacAddress_Type = MacAddress
_MacAddress_Object = MibTableColumn
macAddress = _MacAddress_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 3, 2, 1, 1),
    _MacAddress_Type()
)
macAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macAddress.setStatus("current")
_MacPort_Type = Integer32
_MacPort_Object = MibTableColumn
macPort = _MacPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 3, 2, 1, 2),
    _MacPort_Type()
)
macPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macPort.setStatus("current")


class _MacStatus_Type(Integer32):
    """Custom type macStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("invalid", 2),
          ("learned", 3),
          ("self", 4),
          ("mgmt", 5))
    )


_MacStatus_Type.__name__ = "Integer32"
_MacStatus_Object = MibTableColumn
macStatus = _MacStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 3, 2, 1, 3),
    _MacStatus_Type()
)
macStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macStatus.setStatus("current")
_MacFlush_Type = Integer32
_MacFlush_Object = MibScalar
macFlush = _MacFlush_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 3, 3),
    _MacFlush_Type()
)
macFlush.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macFlush.setStatus("current")
_AdslStats_ObjectIdentity = ObjectIdentity
adslStats = _AdslStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4)
)
_AdslLineStatsAtucNumOfSubcarriersPerPort_Type = Integer32
_AdslLineStatsAtucNumOfSubcarriersPerPort_Object = MibScalar
adslLineStatsAtucNumOfSubcarriersPerPort = _AdslLineStatsAtucNumOfSubcarriersPerPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 1),
    _AdslLineStatsAtucNumOfSubcarriersPerPort_Type()
)
adslLineStatsAtucNumOfSubcarriersPerPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLineStatsAtucNumOfSubcarriersPerPort.setStatus("current")
_AdslLineStatsAturNumOfSubcarriersPerPort_Type = Integer32
_AdslLineStatsAturNumOfSubcarriersPerPort_Object = MibScalar
adslLineStatsAturNumOfSubcarriersPerPort = _AdslLineStatsAturNumOfSubcarriersPerPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 2),
    _AdslLineStatsAturNumOfSubcarriersPerPort_Type()
)
adslLineStatsAturNumOfSubcarriersPerPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLineStatsAturNumOfSubcarriersPerPort.setStatus("current")
_AdslLineStatsTable_Object = MibTable
adslLineStatsTable = _AdslLineStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 3)
)
if mibBuilder.loadTexts:
    adslLineStatsTable.setStatus("current")
_AdslLineStatsEntry_Object = MibTableRow
adslLineStatsEntry = _AdslLineStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 3, 1)
)
adslLineStatsEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    adslLineStatsEntry.setStatus("current")
_AdslLineStatsAtucHlog1_Type = OctetString
_AdslLineStatsAtucHlog1_Object = MibTableColumn
adslLineStatsAtucHlog1 = _AdslLineStatsAtucHlog1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 3, 1, 1),
    _AdslLineStatsAtucHlog1_Type()
)
adslLineStatsAtucHlog1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLineStatsAtucHlog1.setStatus("current")
_AdslLineStatsAtucHlog2_Type = OctetString
_AdslLineStatsAtucHlog2_Object = MibTableColumn
adslLineStatsAtucHlog2 = _AdslLineStatsAtucHlog2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 3, 1, 2),
    _AdslLineStatsAtucHlog2_Type()
)
adslLineStatsAtucHlog2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLineStatsAtucHlog2.setStatus("current")
_AdslLineStatsAturHlog_Type = OctetString
_AdslLineStatsAturHlog_Object = MibTableColumn
adslLineStatsAturHlog = _AdslLineStatsAturHlog_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 3, 1, 3),
    _AdslLineStatsAturHlog_Type()
)
adslLineStatsAturHlog.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLineStatsAturHlog.setStatus("current")
_AdslLineStatsAtucQln1_Type = OctetString
_AdslLineStatsAtucQln1_Object = MibTableColumn
adslLineStatsAtucQln1 = _AdslLineStatsAtucQln1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 3, 1, 4),
    _AdslLineStatsAtucQln1_Type()
)
adslLineStatsAtucQln1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLineStatsAtucQln1.setStatus("current")
_AdslLineStatsAtucQln2_Type = OctetString
_AdslLineStatsAtucQln2_Object = MibTableColumn
adslLineStatsAtucQln2 = _AdslLineStatsAtucQln2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 3, 1, 5),
    _AdslLineStatsAtucQln2_Type()
)
adslLineStatsAtucQln2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLineStatsAtucQln2.setStatus("current")
_AdslLineStatsAturQln_Type = OctetString
_AdslLineStatsAturQln_Object = MibTableColumn
adslLineStatsAturQln = _AdslLineStatsAturQln_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 3, 1, 6),
    _AdslLineStatsAturQln_Type()
)
adslLineStatsAturQln.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLineStatsAturQln.setStatus("current")
_AdslLineStatsAtucTssi1_Type = OctetString
_AdslLineStatsAtucTssi1_Object = MibTableColumn
adslLineStatsAtucTssi1 = _AdslLineStatsAtucTssi1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 3, 1, 7),
    _AdslLineStatsAtucTssi1_Type()
)
adslLineStatsAtucTssi1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLineStatsAtucTssi1.setStatus("current")
_AdslLineStatsAtucTssi2_Type = OctetString
_AdslLineStatsAtucTssi2_Object = MibTableColumn
adslLineStatsAtucTssi2 = _AdslLineStatsAtucTssi2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 3, 1, 8),
    _AdslLineStatsAtucTssi2_Type()
)
adslLineStatsAtucTssi2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLineStatsAtucTssi2.setStatus("current")
_AdslLineStatsAturTssi_Type = OctetString
_AdslLineStatsAturTssi_Object = MibTableColumn
adslLineStatsAturTssi = _AdslLineStatsAturTssi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 3, 1, 9),
    _AdslLineStatsAturTssi_Type()
)
adslLineStatsAturTssi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLineStatsAturTssi.setStatus("current")
_AdslLineStatsAtucGain1_Type = OctetString
_AdslLineStatsAtucGain1_Object = MibTableColumn
adslLineStatsAtucGain1 = _AdslLineStatsAtucGain1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 3, 1, 10),
    _AdslLineStatsAtucGain1_Type()
)
adslLineStatsAtucGain1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLineStatsAtucGain1.setStatus("current")
_AdslLineStatsAtucGain2_Type = OctetString
_AdslLineStatsAtucGain2_Object = MibTableColumn
adslLineStatsAtucGain2 = _AdslLineStatsAtucGain2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 3, 1, 11),
    _AdslLineStatsAtucGain2_Type()
)
adslLineStatsAtucGain2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLineStatsAtucGain2.setStatus("current")
_AdslLineStatsAturGain_Type = OctetString
_AdslLineStatsAturGain_Object = MibTableColumn
adslLineStatsAturGain = _AdslLineStatsAturGain_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 3, 1, 12),
    _AdslLineStatsAturGain_Type()
)
adslLineStatsAturGain.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLineStatsAturGain.setStatus("current")
_AdslLineStatsAtucBits1_Type = OctetString
_AdslLineStatsAtucBits1_Object = MibTableColumn
adslLineStatsAtucBits1 = _AdslLineStatsAtucBits1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 3, 1, 13),
    _AdslLineStatsAtucBits1_Type()
)
adslLineStatsAtucBits1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLineStatsAtucBits1.setStatus("current")
_AdslLineStatsAtucBits2_Type = OctetString
_AdslLineStatsAtucBits2_Object = MibTableColumn
adslLineStatsAtucBits2 = _AdslLineStatsAtucBits2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 3, 1, 14),
    _AdslLineStatsAtucBits2_Type()
)
adslLineStatsAtucBits2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLineStatsAtucBits2.setStatus("current")
_AdslLineStatsAturBits_Type = OctetString
_AdslLineStatsAturBits_Object = MibTableColumn
adslLineStatsAturBits = _AdslLineStatsAturBits_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 3, 1, 15),
    _AdslLineStatsAturBits_Type()
)
adslLineStatsAturBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLineStatsAturBits.setStatus("current")
_AdslLinePerfTable_Object = MibTable
adslLinePerfTable = _AdslLinePerfTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 4)
)
if mibBuilder.loadTexts:
    adslLinePerfTable.setStatus("current")
_AdslLinePerfEntry_Object = MibTableRow
adslLinePerfEntry = _AdslLinePerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 4, 1)
)
adslLinePerfEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    adslLinePerfEntry.setStatus("current")
_AdslLinePerfAtucCrcFast_Type = Counter32
_AdslLinePerfAtucCrcFast_Object = MibTableColumn
adslLinePerfAtucCrcFast = _AdslLinePerfAtucCrcFast_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 4, 1, 1),
    _AdslLinePerfAtucCrcFast_Type()
)
adslLinePerfAtucCrcFast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLinePerfAtucCrcFast.setStatus("current")
_AdslLinePerfAturCrcFast_Type = Counter32
_AdslLinePerfAturCrcFast_Object = MibTableColumn
adslLinePerfAturCrcFast = _AdslLinePerfAturCrcFast_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 4, 1, 2),
    _AdslLinePerfAturCrcFast_Type()
)
adslLinePerfAturCrcFast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLinePerfAturCrcFast.setStatus("current")
_AdslLinePerfAtucFecFast_Type = Counter32
_AdslLinePerfAtucFecFast_Object = MibTableColumn
adslLinePerfAtucFecFast = _AdslLinePerfAtucFecFast_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 4, 1, 3),
    _AdslLinePerfAtucFecFast_Type()
)
adslLinePerfAtucFecFast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLinePerfAtucFecFast.setStatus("current")
_AdslLinePerfAturFecFast_Type = Counter32
_AdslLinePerfAturFecFast_Object = MibTableColumn
adslLinePerfAturFecFast = _AdslLinePerfAturFecFast_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 4, 1, 4),
    _AdslLinePerfAturFecFast_Type()
)
adslLinePerfAturFecFast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLinePerfAturFecFast.setStatus("current")
_AdslLinePerfAtucCrcInterleave_Type = Counter32
_AdslLinePerfAtucCrcInterleave_Object = MibTableColumn
adslLinePerfAtucCrcInterleave = _AdslLinePerfAtucCrcInterleave_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 4, 1, 5),
    _AdslLinePerfAtucCrcInterleave_Type()
)
adslLinePerfAtucCrcInterleave.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLinePerfAtucCrcInterleave.setStatus("current")
_AdslLinePerfAturCrcInterleave_Type = Counter32
_AdslLinePerfAturCrcInterleave_Object = MibTableColumn
adslLinePerfAturCrcInterleave = _AdslLinePerfAturCrcInterleave_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 4, 1, 6),
    _AdslLinePerfAturCrcInterleave_Type()
)
adslLinePerfAturCrcInterleave.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLinePerfAturCrcInterleave.setStatus("current")
_AdslLinePerfAtucFecInterleave_Type = Counter32
_AdslLinePerfAtucFecInterleave_Object = MibTableColumn
adslLinePerfAtucFecInterleave = _AdslLinePerfAtucFecInterleave_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 4, 1, 7),
    _AdslLinePerfAtucFecInterleave_Type()
)
adslLinePerfAtucFecInterleave.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLinePerfAtucFecInterleave.setStatus("current")
_AdslLinePerfAturFecInterleave_Type = Counter32
_AdslLinePerfAturFecInterleave_Object = MibTableColumn
adslLinePerfAturFecInterleave = _AdslLinePerfAturFecInterleave_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 4, 1, 8),
    _AdslLinePerfAturFecInterleave_Type()
)
adslLinePerfAturFecInterleave.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLinePerfAturFecInterleave.setStatus("current")
_AdslLinePerfAtucEs_Type = Counter32
_AdslLinePerfAtucEs_Object = MibTableColumn
adslLinePerfAtucEs = _AdslLinePerfAtucEs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 4, 1, 9),
    _AdslLinePerfAtucEs_Type()
)
adslLinePerfAtucEs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLinePerfAtucEs.setStatus("current")
_AdslLinePerfAturEs_Type = Counter32
_AdslLinePerfAturEs_Object = MibTableColumn
adslLinePerfAturEs = _AdslLinePerfAturEs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 4, 1, 10),
    _AdslLinePerfAturEs_Type()
)
adslLinePerfAturEs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLinePerfAturEs.setStatus("current")
_AdslLinePerfAtucSes_Type = Counter32
_AdslLinePerfAtucSes_Object = MibTableColumn
adslLinePerfAtucSes = _AdslLinePerfAtucSes_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 4, 1, 11),
    _AdslLinePerfAtucSes_Type()
)
adslLinePerfAtucSes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLinePerfAtucSes.setStatus("current")
_AdslLinePerfAturSes_Type = Counter32
_AdslLinePerfAturSes_Object = MibTableColumn
adslLinePerfAturSes = _AdslLinePerfAturSes_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 4, 1, 12),
    _AdslLinePerfAturSes_Type()
)
adslLinePerfAturSes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLinePerfAturSes.setStatus("current")
_AdslLinePerfAtucUas_Type = Counter32
_AdslLinePerfAtucUas_Object = MibTableColumn
adslLinePerfAtucUas = _AdslLinePerfAtucUas_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 4, 1, 13),
    _AdslLinePerfAtucUas_Type()
)
adslLinePerfAtucUas.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLinePerfAtucUas.setStatus("current")
_AdslLinePerfAturUas_Type = Counter32
_AdslLinePerfAturUas_Object = MibTableColumn
adslLinePerfAturUas = _AdslLinePerfAturUas_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 4, 1, 14),
    _AdslLinePerfAturUas_Type()
)
adslLinePerfAturUas.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLinePerfAturUas.setStatus("current")
_AdslLinePerfAtucLofs_Type = Counter32
_AdslLinePerfAtucLofs_Object = MibTableColumn
adslLinePerfAtucLofs = _AdslLinePerfAtucLofs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 4, 1, 15),
    _AdslLinePerfAtucLofs_Type()
)
adslLinePerfAtucLofs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLinePerfAtucLofs.setStatus("current")
_AdslLinePerfAturLofs_Type = Counter32
_AdslLinePerfAturLofs_Object = MibTableColumn
adslLinePerfAturLofs = _AdslLinePerfAturLofs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 4, 1, 16),
    _AdslLinePerfAturLofs_Type()
)
adslLinePerfAturLofs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLinePerfAturLofs.setStatus("current")
_AdslLinePerfAtucLoss_Type = Counter32
_AdslLinePerfAtucLoss_Object = MibTableColumn
adslLinePerfAtucLoss = _AdslLinePerfAtucLoss_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 4, 1, 17),
    _AdslLinePerfAtucLoss_Type()
)
adslLinePerfAtucLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLinePerfAtucLoss.setStatus("current")
_AdslLinePerfAturLoss_Type = Counter32
_AdslLinePerfAturLoss_Object = MibTableColumn
adslLinePerfAturLoss = _AdslLinePerfAturLoss_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 4, 1, 18),
    _AdslLinePerfAturLoss_Type()
)
adslLinePerfAturLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLinePerfAturLoss.setStatus("current")
_AdslLinePerfAtucLprs_Type = Counter32
_AdslLinePerfAtucLprs_Object = MibTableColumn
adslLinePerfAtucLprs = _AdslLinePerfAtucLprs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 4, 1, 19),
    _AdslLinePerfAtucLprs_Type()
)
adslLinePerfAtucLprs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLinePerfAtucLprs.setStatus("current")
_AdslLinePerfAturLprs_Type = Counter32
_AdslLinePerfAturLprs_Object = MibTableColumn
adslLinePerfAturLprs = _AdslLinePerfAturLprs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 4, 4, 1, 20),
    _AdslLinePerfAturLprs_Type()
)
adslLinePerfAturLprs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    adslLinePerfAturLprs.setStatus("current")
_ShdslStats_ObjectIdentity = ObjectIdentity
shdslStats = _ShdslStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 5)
)
_ShdslLinePerfTable_Object = MibTable
shdslLinePerfTable = _ShdslLinePerfTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 5, 1)
)
if mibBuilder.loadTexts:
    shdslLinePerfTable.setStatus("current")
_ShdslLinePerfEntry_Object = MibTableRow
shdslLinePerfEntry = _ShdslLinePerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 5, 1, 1)
)
shdslLinePerfEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    shdslLinePerfEntry.setStatus("current")
_ShdslLinePerfEs_Type = Counter32
_ShdslLinePerfEs_Object = MibTableColumn
shdslLinePerfEs = _ShdslLinePerfEs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 5, 1, 1, 1),
    _ShdslLinePerfEs_Type()
)
shdslLinePerfEs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    shdslLinePerfEs.setStatus("current")
_ShdslLinePerfSes_Type = Counter32
_ShdslLinePerfSes_Object = MibTableColumn
shdslLinePerfSes = _ShdslLinePerfSes_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 5, 1, 1, 2),
    _ShdslLinePerfSes_Type()
)
shdslLinePerfSes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    shdslLinePerfSes.setStatus("current")
_ShdslLinePerfCrc_Type = Counter32
_ShdslLinePerfCrc_Object = MibTableColumn
shdslLinePerfCrc = _ShdslLinePerfCrc_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 5, 1, 1, 3),
    _ShdslLinePerfCrc_Type()
)
shdslLinePerfCrc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    shdslLinePerfCrc.setStatus("current")
_ShdslLinePerfLosws_Type = Counter32
_ShdslLinePerfLosws_Object = MibTableColumn
shdslLinePerfLosws = _ShdslLinePerfLosws_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 5, 1, 1, 4),
    _ShdslLinePerfLosws_Type()
)
shdslLinePerfLosws.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    shdslLinePerfLosws.setStatus("current")
_ShdslLinePerfUas_Type = Counter32
_ShdslLinePerfUas_Object = MibTableColumn
shdslLinePerfUas = _ShdslLinePerfUas_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 5, 1, 1, 5),
    _ShdslLinePerfUas_Type()
)
shdslLinePerfUas.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    shdslLinePerfUas.setStatus("current")
_ShdslLinePerfSegmentAnomalies_Type = Counter32
_ShdslLinePerfSegmentAnomalies_Object = MibTableColumn
shdslLinePerfSegmentAnomalies = _ShdslLinePerfSegmentAnomalies_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 5, 1, 1, 6),
    _ShdslLinePerfSegmentAnomalies_Type()
)
shdslLinePerfSegmentAnomalies.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    shdslLinePerfSegmentAnomalies.setStatus("current")
_ShdslLinePerfSegmentDefect_Type = Counter32
_ShdslLinePerfSegmentDefect_Object = MibTableColumn
shdslLinePerfSegmentDefect = _ShdslLinePerfSegmentDefect_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 5, 1, 1, 7),
    _ShdslLinePerfSegmentDefect_Type()
)
shdslLinePerfSegmentDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    shdslLinePerfSegmentDefect.setStatus("current")
_ShdslPerfCurrTable_Object = MibTable
shdslPerfCurrTable = _ShdslPerfCurrTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 5, 2)
)
if mibBuilder.loadTexts:
    shdslPerfCurrTable.setStatus("current")
_ShdslPerfCurrEntry_Object = MibTableRow
shdslPerfCurrEntry = _ShdslPerfCurrEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 5, 2, 1)
)
shdslPerfCurrEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    shdslPerfCurrEntry.setStatus("current")
_ShdslPerfCurrSturLPR_Type = Counter32
_ShdslPerfCurrSturLPR_Object = MibTableColumn
shdslPerfCurrSturLPR = _ShdslPerfCurrSturLPR_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 5, 2, 1, 1),
    _ShdslPerfCurrSturLPR_Type()
)
shdslPerfCurrSturLPR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    shdslPerfCurrSturLPR.setStatus("current")
_IpStats_ObjectIdentity = ObjectIdentity
ipStats = _IpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 6)
)
_IpInterfaceTable_Object = MibTable
ipInterfaceTable = _IpInterfaceTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 6, 1)
)
if mibBuilder.loadTexts:
    ipInterfaceTable.setStatus("current")
_IpInterfaceEntry_Object = MibTableRow
ipInterfaceEntry = _IpInterfaceEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 6, 1, 1)
)
ipInterfaceEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "ipInterface"),
)
if mibBuilder.loadTexts:
    ipInterfaceEntry.setStatus("current")
_IpInterface_Type = Integer32
_IpInterface_Object = MibTableColumn
ipInterface = _IpInterface_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 6, 1, 1, 1),
    _IpInterface_Type()
)
ipInterface.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInterface.setStatus("current")
_IpAddress_Type = IpAddress
_IpAddress_Object = MibTableColumn
ipAddress = _IpAddress_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 6, 1, 1, 2),
    _IpAddress_Type()
)
ipAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipAddress.setStatus("current")
_IpNetmask_Type = IpAddress
_IpNetmask_Object = MibTableColumn
ipNetmask = _IpNetmask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 6, 1, 1, 3),
    _IpNetmask_Type()
)
ipNetmask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNetmask.setStatus("current")
_IpBroadcast_Type = IpAddress
_IpBroadcast_Object = MibTableColumn
ipBroadcast = _IpBroadcast_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 6, 1, 1, 4),
    _IpBroadcast_Type()
)
ipBroadcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipBroadcast.setStatus("current")
_IpMtu_Type = Integer32
_IpMtu_Object = MibTableColumn
ipMtu = _IpMtu_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 6, 1, 1, 5),
    _IpMtu_Type()
)
ipMtu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipMtu.setStatus("current")
_IpVid_Type = VlanIndex
_IpVid_Object = MibTableColumn
ipVid = _IpVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 6, 1, 1, 6),
    _IpVid_Type()
)
ipVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipVid.setStatus("current")
_IpInOctet_Type = Counter32
_IpInOctet_Object = MibTableColumn
ipInOctet = _IpInOctet_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 6, 1, 1, 7),
    _IpInOctet_Type()
)
ipInOctet.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInOctet.setStatus("current")
_IpInUnicast_Type = Counter32
_IpInUnicast_Object = MibTableColumn
ipInUnicast = _IpInUnicast_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 6, 1, 1, 8),
    _IpInUnicast_Type()
)
ipInUnicast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInUnicast.setStatus("current")
_IpInMulticast_Type = Counter32
_IpInMulticast_Object = MibTableColumn
ipInMulticast = _IpInMulticast_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 6, 1, 1, 9),
    _IpInMulticast_Type()
)
ipInMulticast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInMulticast.setStatus("current")
_IpInDiscard_Type = Counter32
_IpInDiscard_Object = MibTableColumn
ipInDiscard = _IpInDiscard_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 6, 1, 1, 10),
    _IpInDiscard_Type()
)
ipInDiscard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInDiscard.setStatus("current")
_IpInError_Type = Counter32
_IpInError_Object = MibTableColumn
ipInError = _IpInError_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 6, 1, 1, 11),
    _IpInError_Type()
)
ipInError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInError.setStatus("current")
_IpInUnknown_Type = Counter32
_IpInUnknown_Object = MibTableColumn
ipInUnknown = _IpInUnknown_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 6, 1, 1, 12),
    _IpInUnknown_Type()
)
ipInUnknown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInUnknown.setStatus("current")
_IpOutOctet_Type = Counter32
_IpOutOctet_Object = MibTableColumn
ipOutOctet = _IpOutOctet_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 6, 1, 1, 13),
    _IpOutOctet_Type()
)
ipOutOctet.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOutOctet.setStatus("current")
_IpOutUnicast_Type = Counter32
_IpOutUnicast_Object = MibTableColumn
ipOutUnicast = _IpOutUnicast_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 6, 1, 1, 14),
    _IpOutUnicast_Type()
)
ipOutUnicast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOutUnicast.setStatus("current")
_IpOutMulticast_Type = Counter32
_IpOutMulticast_Object = MibTableColumn
ipOutMulticast = _IpOutMulticast_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 6, 1, 1, 15),
    _IpOutMulticast_Type()
)
ipOutMulticast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOutMulticast.setStatus("current")
_IpOutDiscard_Type = Counter32
_IpOutDiscard_Object = MibTableColumn
ipOutDiscard = _IpOutDiscard_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 6, 1, 1, 16),
    _IpOutDiscard_Type()
)
ipOutDiscard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOutDiscard.setStatus("current")
_IpOutError_Type = Counter32
_IpOutError_Object = MibTableColumn
ipOutError = _IpOutError_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 6, 1, 1, 17),
    _IpOutError_Type()
)
ipOutError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOutError.setStatus("current")
_MstpStats_ObjectIdentity = ObjectIdentity
mstpStats = _MstpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7)
)
_MstpExternalRootId_Type = BridgeId
_MstpExternalRootId_Object = MibScalar
mstpExternalRootId = _MstpExternalRootId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 1),
    _MstpExternalRootId_Type()
)
mstpExternalRootId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpExternalRootId.setStatus("current")
_MstpExternalRootCost_Type = Integer32
_MstpExternalRootCost_Object = MibScalar
mstpExternalRootCost = _MstpExternalRootCost_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 2),
    _MstpExternalRootCost_Type()
)
mstpExternalRootCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpExternalRootCost.setStatus("current")
_MstpExternalRootPortId_Type = OctetString
_MstpExternalRootPortId_Object = MibScalar
mstpExternalRootPortId = _MstpExternalRootPortId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 3),
    _MstpExternalRootPortId_Type()
)
mstpExternalRootPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpExternalRootPortId.setStatus("current")
_MstpExternalRootMaxAge_Type = Timeout
_MstpExternalRootMaxAge_Object = MibScalar
mstpExternalRootMaxAge = _MstpExternalRootMaxAge_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 4),
    _MstpExternalRootMaxAge_Type()
)
mstpExternalRootMaxAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpExternalRootMaxAge.setStatus("current")
_MstpExternalRootHelloTime_Type = Timeout
_MstpExternalRootHelloTime_Object = MibScalar
mstpExternalRootHelloTime = _MstpExternalRootHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 5),
    _MstpExternalRootHelloTime_Type()
)
mstpExternalRootHelloTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpExternalRootHelloTime.setStatus("current")
_MstpExternalRootForwardDelay_Type = Timeout
_MstpExternalRootForwardDelay_Object = MibScalar
mstpExternalRootForwardDelay = _MstpExternalRootForwardDelay_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 6),
    _MstpExternalRootForwardDelay_Type()
)
mstpExternalRootForwardDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpExternalRootForwardDelay.setStatus("current")
_MstpPortStatsTable_Object = MibTable
mstpPortStatsTable = _MstpPortStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 7)
)
if mibBuilder.loadTexts:
    mstpPortStatsTable.setStatus("current")
_MstpPortStatsEntry_Object = MibTableRow
mstpPortStatsEntry = _MstpPortStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 7, 1)
)
mstpPortStatsEntry.setIndexNames(
    (0, "BRIDGE-MIB", "dot1dBasePort"),
)
if mibBuilder.loadTexts:
    mstpPortStatsEntry.setStatus("current")
_MstpPortStatsExternalRootId_Type = BridgeId
_MstpPortStatsExternalRootId_Object = MibTableColumn
mstpPortStatsExternalRootId = _MstpPortStatsExternalRootId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 7, 1, 1),
    _MstpPortStatsExternalRootId_Type()
)
mstpPortStatsExternalRootId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpPortStatsExternalRootId.setStatus("current")
_MstpPortStatsExternalRootCost_Type = Integer32
_MstpPortStatsExternalRootCost_Object = MibTableColumn
mstpPortStatsExternalRootCost = _MstpPortStatsExternalRootCost_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 7, 1, 2),
    _MstpPortStatsExternalRootCost_Type()
)
mstpPortStatsExternalRootCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpPortStatsExternalRootCost.setStatus("current")
_MstpPortStatsExternalPortCost_Type = Integer32
_MstpPortStatsExternalPortCost_Object = MibTableColumn
mstpPortStatsExternalPortCost = _MstpPortStatsExternalPortCost_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 7, 1, 3),
    _MstpPortStatsExternalPortCost_Type()
)
mstpPortStatsExternalPortCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpPortStatsExternalPortCost.setStatus("current")


class _MstpPortStatsOperEdgePort_Type(Integer32):
    """Custom type mstpPortStatsOperEdgePort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_MstpPortStatsOperEdgePort_Type.__name__ = "Integer32"
_MstpPortStatsOperEdgePort_Object = MibTableColumn
mstpPortStatsOperEdgePort = _MstpPortStatsOperEdgePort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 7, 1, 4),
    _MstpPortStatsOperEdgePort_Type()
)
mstpPortStatsOperEdgePort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpPortStatsOperEdgePort.setStatus("current")


class _MstpPortStatsOperPoint2Point_Type(Integer32):
    """Custom type mstpPortStatsOperPoint2Point based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_MstpPortStatsOperPoint2Point_Type.__name__ = "Integer32"
_MstpPortStatsOperPoint2Point_Object = MibTableColumn
mstpPortStatsOperPoint2Point = _MstpPortStatsOperPoint2Point_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 7, 1, 5),
    _MstpPortStatsOperPoint2Point_Type()
)
mstpPortStatsOperPoint2Point.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpPortStatsOperPoint2Point.setStatus("current")


class _MstpPortStatsMACOperational_Type(Integer32):
    """Custom type mstpPortStatsMACOperational based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_MstpPortStatsMACOperational_Type.__name__ = "Integer32"
_MstpPortStatsMACOperational_Object = MibTableColumn
mstpPortStatsMACOperational = _MstpPortStatsMACOperational_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 7, 1, 6),
    _MstpPortStatsMACOperational_Type()
)
mstpPortStatsMACOperational.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpPortStatsMACOperational.setStatus("current")


class _MstpPortStatsRecvInternal_Type(Integer32):
    """Custom type mstpPortStatsRecvInternal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_MstpPortStatsRecvInternal_Type.__name__ = "Integer32"
_MstpPortStatsRecvInternal_Object = MibTableColumn
mstpPortStatsRecvInternal = _MstpPortStatsRecvInternal_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 7, 1, 7),
    _MstpPortStatsRecvInternal_Type()
)
mstpPortStatsRecvInternal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpPortStatsRecvInternal.setStatus("current")
_MstpPortStatsRxStpCfgBPDU_Type = Counter32
_MstpPortStatsRxStpCfgBPDU_Object = MibTableColumn
mstpPortStatsRxStpCfgBPDU = _MstpPortStatsRxStpCfgBPDU_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 7, 1, 8),
    _MstpPortStatsRxStpCfgBPDU_Type()
)
mstpPortStatsRxStpCfgBPDU.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpPortStatsRxStpCfgBPDU.setStatus("current")
_MstpPortStatsRxStpTcnBPDU_Type = Counter32
_MstpPortStatsRxStpTcnBPDU_Object = MibTableColumn
mstpPortStatsRxStpTcnBPDU = _MstpPortStatsRxStpTcnBPDU_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 7, 1, 9),
    _MstpPortStatsRxStpTcnBPDU_Type()
)
mstpPortStatsRxStpTcnBPDU.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpPortStatsRxStpTcnBPDU.setStatus("current")
_MstpPortStatsRxRstpBPDU_Type = Counter32
_MstpPortStatsRxRstpBPDU_Object = MibTableColumn
mstpPortStatsRxRstpBPDU = _MstpPortStatsRxRstpBPDU_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 7, 1, 10),
    _MstpPortStatsRxRstpBPDU_Type()
)
mstpPortStatsRxRstpBPDU.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpPortStatsRxRstpBPDU.setStatus("current")
_MstpPortStatsRxMstpBPDU_Type = Counter32
_MstpPortStatsRxMstpBPDU_Object = MibTableColumn
mstpPortStatsRxMstpBPDU = _MstpPortStatsRxMstpBPDU_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 7, 1, 11),
    _MstpPortStatsRxMstpBPDU_Type()
)
mstpPortStatsRxMstpBPDU.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpPortStatsRxMstpBPDU.setStatus("current")
_MstpXstStatsTable_Object = MibTable
mstpXstStatsTable = _MstpXstStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 8)
)
if mibBuilder.loadTexts:
    mstpXstStatsTable.setStatus("current")
_MstpXstStatsEntry_Object = MibTableRow
mstpXstStatsEntry = _MstpXstStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 8, 1)
)
mstpXstStatsEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "mstpXstId"),
)
if mibBuilder.loadTexts:
    mstpXstStatsEntry.setStatus("current")
_MstpXstStatsBridgeId_Type = BridgeId
_MstpXstStatsBridgeId_Object = MibTableColumn
mstpXstStatsBridgeId = _MstpXstStatsBridgeId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 8, 1, 1),
    _MstpXstStatsBridgeId_Type()
)
mstpXstStatsBridgeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpXstStatsBridgeId.setStatus("current")
_MstpXstStatsTimeSinceTopologyChange_Type = TimeTicks
_MstpXstStatsTimeSinceTopologyChange_Object = MibTableColumn
mstpXstStatsTimeSinceTopologyChange = _MstpXstStatsTimeSinceTopologyChange_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 8, 1, 2),
    _MstpXstStatsTimeSinceTopologyChange_Type()
)
mstpXstStatsTimeSinceTopologyChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpXstStatsTimeSinceTopologyChange.setStatus("current")
_MstpXstStatsTopologyChangesCount_Type = Counter32
_MstpXstStatsTopologyChangesCount_Object = MibTableColumn
mstpXstStatsTopologyChangesCount = _MstpXstStatsTopologyChangesCount_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 8, 1, 3),
    _MstpXstStatsTopologyChangesCount_Type()
)
mstpXstStatsTopologyChangesCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpXstStatsTopologyChangesCount.setStatus("current")
_MstpXstStatsInternalRootPortId_Type = OctetString
_MstpXstStatsInternalRootPortId_Object = MibTableColumn
mstpXstStatsInternalRootPortId = _MstpXstStatsInternalRootPortId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 8, 1, 4),
    _MstpXstStatsInternalRootPortId_Type()
)
mstpXstStatsInternalRootPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpXstStatsInternalRootPortId.setStatus("current")
_MstpXstStatsInternalRootId_Type = BridgeId
_MstpXstStatsInternalRootId_Object = MibTableColumn
mstpXstStatsInternalRootId = _MstpXstStatsInternalRootId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 8, 1, 5),
    _MstpXstStatsInternalRootId_Type()
)
mstpXstStatsInternalRootId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpXstStatsInternalRootId.setStatus("current")
_MstpXstStatsInternalRootCost_Type = Integer32
_MstpXstStatsInternalRootCost_Object = MibTableColumn
mstpXstStatsInternalRootCost = _MstpXstStatsInternalRootCost_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 8, 1, 6),
    _MstpXstStatsInternalRootCost_Type()
)
mstpXstStatsInternalRootCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpXstStatsInternalRootCost.setStatus("current")
_MstpXstPortStatsTable_Object = MibTable
mstpXstPortStatsTable = _MstpXstPortStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 9)
)
if mibBuilder.loadTexts:
    mstpXstPortStatsTable.setStatus("current")
_MstpXstPortStatsEntry_Object = MibTableRow
mstpXstPortStatsEntry = _MstpXstPortStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 9, 1)
)
mstpXstPortStatsEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "mstpXstId"),
    (0, "ZYXEL-IES5000-MIB", "mstpXstPortIndex"),
)
if mibBuilder.loadTexts:
    mstpXstPortStatsEntry.setStatus("current")
_MstpXstPortStatsUptime_Type = TimeTicks
_MstpXstPortStatsUptime_Object = MibTableColumn
mstpXstPortStatsUptime = _MstpXstPortStatsUptime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 9, 1, 1),
    _MstpXstPortStatsUptime_Type()
)
mstpXstPortStatsUptime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpXstPortStatsUptime.setStatus("current")
_MstpXstPortStatsPortId_Type = OctetString
_MstpXstPortStatsPortId_Object = MibTableColumn
mstpXstPortStatsPortId = _MstpXstPortStatsPortId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 9, 1, 2),
    _MstpXstPortStatsPortId_Type()
)
mstpXstPortStatsPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpXstPortStatsPortId.setStatus("current")


class _MstpXstPortStatsState_Type(Integer32):
    """Custom type mstpXstPortStatsState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("discarding", 2),
          ("learning", 3),
          ("forwarding", 4),
          ("unknown", 5))
    )


_MstpXstPortStatsState_Type.__name__ = "Integer32"
_MstpXstPortStatsState_Object = MibTableColumn
mstpXstPortStatsState = _MstpXstPortStatsState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 9, 1, 3),
    _MstpXstPortStatsState_Type()
)
mstpXstPortStatsState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpXstPortStatsState.setStatus("current")
_MstpXstPortStatsDesignatedBridgeId_Type = BridgeId
_MstpXstPortStatsDesignatedBridgeId_Object = MibTableColumn
mstpXstPortStatsDesignatedBridgeId = _MstpXstPortStatsDesignatedBridgeId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 9, 1, 4),
    _MstpXstPortStatsDesignatedBridgeId_Type()
)
mstpXstPortStatsDesignatedBridgeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpXstPortStatsDesignatedBridgeId.setStatus("current")
_MstpXstPortStatsDesignatedPortId_Type = OctetString
_MstpXstPortStatsDesignatedPortId_Object = MibTableColumn
mstpXstPortStatsDesignatedPortId = _MstpXstPortStatsDesignatedPortId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 9, 1, 5),
    _MstpXstPortStatsDesignatedPortId_Type()
)
mstpXstPortStatsDesignatedPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpXstPortStatsDesignatedPortId.setStatus("current")
_MstpXstPortStatsInternalPortCost_Type = Integer32
_MstpXstPortStatsInternalPortCost_Object = MibTableColumn
mstpXstPortStatsInternalPortCost = _MstpXstPortStatsInternalPortCost_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 9, 1, 6),
    _MstpXstPortStatsInternalPortCost_Type()
)
mstpXstPortStatsInternalPortCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpXstPortStatsInternalPortCost.setStatus("current")
_MstpXstPortStatsInternalRootId_Type = BridgeId
_MstpXstPortStatsInternalRootId_Object = MibTableColumn
mstpXstPortStatsInternalRootId = _MstpXstPortStatsInternalRootId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 7, 9, 1, 7),
    _MstpXstPortStatsInternalRootId_Type()
)
mstpXstPortStatsInternalRootId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpXstPortStatsInternalRootId.setStatus("current")
_VdslStats_ObjectIdentity = ObjectIdentity
vdslStats = _VdslStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8)
)
_VdslLinePerfTable_Object = MibTable
vdslLinePerfTable = _VdslLinePerfTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1)
)
if mibBuilder.loadTexts:
    vdslLinePerfTable.setStatus("current")
_VdslLinePerfEntry_Object = MibTableRow
vdslLinePerfEntry = _VdslLinePerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1)
)
vdslLinePerfEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    vdslLinePerfEntry.setStatus("current")
_VdslLinePerfVtucCrc_Type = Counter32
_VdslLinePerfVtucCrc_Object = MibTableColumn
vdslLinePerfVtucCrc = _VdslLinePerfVtucCrc_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 1),
    _VdslLinePerfVtucCrc_Type()
)
vdslLinePerfVtucCrc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVtucCrc.setStatus("current")
_VdslLinePerfVturCrc_Type = Counter32
_VdslLinePerfVturCrc_Object = MibTableColumn
vdslLinePerfVturCrc = _VdslLinePerfVturCrc_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 2),
    _VdslLinePerfVturCrc_Type()
)
vdslLinePerfVturCrc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVturCrc.setStatus("current")
_VdslLinePerfVtucFec_Type = Counter32
_VdslLinePerfVtucFec_Object = MibTableColumn
vdslLinePerfVtucFec = _VdslLinePerfVtucFec_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 3),
    _VdslLinePerfVtucFec_Type()
)
vdslLinePerfVtucFec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVtucFec.setStatus("current")
_VdslLinePerfVturFec_Type = Counter32
_VdslLinePerfVturFec_Object = MibTableColumn
vdslLinePerfVturFec = _VdslLinePerfVturFec_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 4),
    _VdslLinePerfVturFec_Type()
)
vdslLinePerfVturFec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVturFec.setStatus("current")
_VdslLinePerfVtucLofs_Type = Counter32
_VdslLinePerfVtucLofs_Object = MibTableColumn
vdslLinePerfVtucLofs = _VdslLinePerfVtucLofs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 5),
    _VdslLinePerfVtucLofs_Type()
)
vdslLinePerfVtucLofs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVtucLofs.setStatus("current")
_VdslLinePerfVturLofs_Type = Counter32
_VdslLinePerfVturLofs_Object = MibTableColumn
vdslLinePerfVturLofs = _VdslLinePerfVturLofs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 6),
    _VdslLinePerfVturLofs_Type()
)
vdslLinePerfVturLofs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVturLofs.setStatus("current")
_VdslLinePerfVtucLoss_Type = Counter32
_VdslLinePerfVtucLoss_Object = MibTableColumn
vdslLinePerfVtucLoss = _VdslLinePerfVtucLoss_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 7),
    _VdslLinePerfVtucLoss_Type()
)
vdslLinePerfVtucLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVtucLoss.setStatus("current")
_VdslLinePerfVturLoss_Type = Counter32
_VdslLinePerfVturLoss_Object = MibTableColumn
vdslLinePerfVturLoss = _VdslLinePerfVturLoss_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 8),
    _VdslLinePerfVturLoss_Type()
)
vdslLinePerfVturLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVturLoss.setStatus("current")
_VdslLinePerfVtucLprs_Type = Counter32
_VdslLinePerfVtucLprs_Object = MibTableColumn
vdslLinePerfVtucLprs = _VdslLinePerfVtucLprs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 9),
    _VdslLinePerfVtucLprs_Type()
)
vdslLinePerfVtucLprs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVtucLprs.setStatus("current")
_VdslLinePerfVturLprs_Type = Counter32
_VdslLinePerfVturLprs_Object = MibTableColumn
vdslLinePerfVturLprs = _VdslLinePerfVturLprs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 10),
    _VdslLinePerfVturLprs_Type()
)
vdslLinePerfVturLprs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVturLprs.setStatus("current")
_VdslLinePerfVtucLols_Type = Counter32
_VdslLinePerfVtucLols_Object = MibTableColumn
vdslLinePerfVtucLols = _VdslLinePerfVtucLols_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 11),
    _VdslLinePerfVtucLols_Type()
)
vdslLinePerfVtucLols.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVtucLols.setStatus("current")
_VdslLinePerfVturLols_Type = Counter32
_VdslLinePerfVturLols_Object = MibTableColumn
vdslLinePerfVturLols = _VdslLinePerfVturLols_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 12),
    _VdslLinePerfVturLols_Type()
)
vdslLinePerfVturLols.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVturLols.setStatus("current")
_VdslLinePerfVtucESs_Type = Counter32
_VdslLinePerfVtucESs_Object = MibTableColumn
vdslLinePerfVtucESs = _VdslLinePerfVtucESs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 13),
    _VdslLinePerfVtucESs_Type()
)
vdslLinePerfVtucESs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVtucESs.setStatus("current")
_VdslLinePerfVturESs_Type = Counter32
_VdslLinePerfVturESs_Object = MibTableColumn
vdslLinePerfVturESs = _VdslLinePerfVturESs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 14),
    _VdslLinePerfVturESs_Type()
)
vdslLinePerfVturESs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVturESs.setStatus("current")
_VdslLinePerfVtucSESs_Type = Counter32
_VdslLinePerfVtucSESs_Object = MibTableColumn
vdslLinePerfVtucSESs = _VdslLinePerfVtucSESs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 15),
    _VdslLinePerfVtucSESs_Type()
)
vdslLinePerfVtucSESs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVtucSESs.setStatus("current")
_VdslLinePerfVturSESs_Type = Counter32
_VdslLinePerfVturSESs_Object = MibTableColumn
vdslLinePerfVturSESs = _VdslLinePerfVturSESs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 16),
    _VdslLinePerfVturSESs_Type()
)
vdslLinePerfVturSESs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVturSESs.setStatus("current")
_VdslLinePerfVtucUASs_Type = Counter32
_VdslLinePerfVtucUASs_Object = MibTableColumn
vdslLinePerfVtucUASs = _VdslLinePerfVtucUASs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 17),
    _VdslLinePerfVtucUASs_Type()
)
vdslLinePerfVtucUASs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVtucUASs.setStatus("current")
_VdslLinePerfVturUASs_Type = Counter32
_VdslLinePerfVturUASs_Object = MibTableColumn
vdslLinePerfVturUASs = _VdslLinePerfVturUASs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 18),
    _VdslLinePerfVturUASs_Type()
)
vdslLinePerfVturUASs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVturUASs.setStatus("current")
_VdslLinePerfInmVtucEqInp_Type = Counter32
_VdslLinePerfInmVtucEqInp_Object = MibTableColumn
vdslLinePerfInmVtucEqInp = _VdslLinePerfInmVtucEqInp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 19),
    _VdslLinePerfInmVtucEqInp_Type()
)
vdslLinePerfInmVtucEqInp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfInmVtucEqInp.setStatus("current")
_VdslLinePerfInmVturEqInp_Type = Counter32
_VdslLinePerfInmVturEqInp_Object = MibTableColumn
vdslLinePerfInmVturEqInp = _VdslLinePerfInmVturEqInp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 20),
    _VdslLinePerfInmVturEqInp_Type()
)
vdslLinePerfInmVturEqInp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfInmVturEqInp.setStatus("current")
_VdslLinePerfInmVtucIAT_Type = Counter32
_VdslLinePerfInmVtucIAT_Object = MibTableColumn
vdslLinePerfInmVtucIAT = _VdslLinePerfInmVtucIAT_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 21),
    _VdslLinePerfInmVtucIAT_Type()
)
vdslLinePerfInmVtucIAT.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfInmVtucIAT.setStatus("current")
_VdslLinePerfInmVturIAT_Type = Counter32
_VdslLinePerfInmVturIAT_Object = MibTableColumn
vdslLinePerfInmVturIAT = _VdslLinePerfInmVturIAT_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 22),
    _VdslLinePerfInmVturIAT_Type()
)
vdslLinePerfInmVturIAT.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfInmVturIAT.setStatus("current")
_VdslLinePerfInmVtucME_Type = Counter32
_VdslLinePerfInmVtucME_Object = MibTableColumn
vdslLinePerfInmVtucME = _VdslLinePerfInmVtucME_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 23),
    _VdslLinePerfInmVtucME_Type()
)
vdslLinePerfInmVtucME.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfInmVtucME.setStatus("current")
_VdslLinePerfInmVturME_Type = Counter32
_VdslLinePerfInmVturME_Object = MibTableColumn
vdslLinePerfInmVturME = _VdslLinePerfInmVturME_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 24),
    _VdslLinePerfInmVturME_Type()
)
vdslLinePerfInmVturME.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfInmVturME.setStatus("current")
_VdslLinePerfVtucRx_Type = Unsigned32
_VdslLinePerfVtucRx_Object = MibTableColumn
vdslLinePerfVtucRx = _VdslLinePerfVtucRx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 25),
    _VdslLinePerfVtucRx_Type()
)
vdslLinePerfVtucRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVtucRx.setStatus("current")
_VdslLinePerfVturRx_Type = Unsigned32
_VdslLinePerfVturRx_Object = MibTableColumn
vdslLinePerfVturRx = _VdslLinePerfVturRx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 26),
    _VdslLinePerfVturRx_Type()
)
vdslLinePerfVturRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVturRx.setStatus("current")
_VdslLinePerfVtucRxCorrected_Type = Unsigned32
_VdslLinePerfVtucRxCorrected_Object = MibTableColumn
vdslLinePerfVtucRxCorrected = _VdslLinePerfVtucRxCorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 27),
    _VdslLinePerfVtucRxCorrected_Type()
)
vdslLinePerfVtucRxCorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVtucRxCorrected.setStatus("current")
_VdslLinePerfVturRxCorrected_Type = Unsigned32
_VdslLinePerfVturRxCorrected_Object = MibTableColumn
vdslLinePerfVturRxCorrected = _VdslLinePerfVturRxCorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 28),
    _VdslLinePerfVturRxCorrected_Type()
)
vdslLinePerfVturRxCorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVturRxCorrected.setStatus("current")
_VdslLinePerfVtucRxUncorrected_Type = Unsigned32
_VdslLinePerfVtucRxUncorrected_Object = MibTableColumn
vdslLinePerfVtucRxUncorrected = _VdslLinePerfVtucRxUncorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 29),
    _VdslLinePerfVtucRxUncorrected_Type()
)
vdslLinePerfVtucRxUncorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVtucRxUncorrected.setStatus("current")
_VdslLinePerfVturRxUncorrected_Type = Unsigned32
_VdslLinePerfVturRxUncorrected_Object = MibTableColumn
vdslLinePerfVturRxUncorrected = _VdslLinePerfVturRxUncorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 30),
    _VdslLinePerfVturRxUncorrected_Type()
)
vdslLinePerfVturRxUncorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVturRxUncorrected.setStatus("current")
_VdslLinePerfVtucLEFTRs_Type = Unsigned32
_VdslLinePerfVtucLEFTRs_Object = MibTableColumn
vdslLinePerfVtucLEFTRs = _VdslLinePerfVtucLEFTRs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 31),
    _VdslLinePerfVtucLEFTRs_Type()
)
vdslLinePerfVtucLEFTRs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVtucLEFTRs.setStatus("current")
_VdslLinePerfVturLEFTRs_Type = Unsigned32
_VdslLinePerfVturLEFTRs_Object = MibTableColumn
vdslLinePerfVturLEFTRs = _VdslLinePerfVturLEFTRs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 32),
    _VdslLinePerfVturLEFTRs_Type()
)
vdslLinePerfVturLEFTRs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVturLEFTRs.setStatus("current")
_VdslLinePerfVtucErrFreeBits_Type = Unsigned32
_VdslLinePerfVtucErrFreeBits_Object = MibTableColumn
vdslLinePerfVtucErrFreeBits = _VdslLinePerfVtucErrFreeBits_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 33),
    _VdslLinePerfVtucErrFreeBits_Type()
)
vdslLinePerfVtucErrFreeBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVtucErrFreeBits.setStatus("current")
_VdslLinePerfVturErrFreeBits_Type = Unsigned32
_VdslLinePerfVturErrFreeBits_Object = MibTableColumn
vdslLinePerfVturErrFreeBits = _VdslLinePerfVturErrFreeBits_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 34),
    _VdslLinePerfVturErrFreeBits_Type()
)
vdslLinePerfVturErrFreeBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVturErrFreeBits.setStatus("current")
_VdslLinePerfVtucMinEftr_Type = Counter32
_VdslLinePerfVtucMinEftr_Object = MibTableColumn
vdslLinePerfVtucMinEftr = _VdslLinePerfVtucMinEftr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 35),
    _VdslLinePerfVtucMinEftr_Type()
)
vdslLinePerfVtucMinEftr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVtucMinEftr.setStatus("current")
_VdslLinePerfVturMinEftr_Type = Counter32
_VdslLinePerfVturMinEftr_Object = MibTableColumn
vdslLinePerfVturMinEftr = _VdslLinePerfVturMinEftr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 1, 1, 36),
    _VdslLinePerfVturMinEftr_Type()
)
vdslLinePerfVturMinEftr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfVturMinEftr.setStatus("current")
_VdslLineStatsTable_Object = MibTable
vdslLineStatsTable = _VdslLineStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2)
)
if mibBuilder.loadTexts:
    vdslLineStatsTable.setStatus("current")
_VdslLineStatsEntry_Object = MibTableRow
vdslLineStatsEntry = _VdslLineStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1)
)
vdslLineStatsEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    vdslLineStatsEntry.setStatus("current")
_VdslLineStatsVtucBits1_Type = OctetString
_VdslLineStatsVtucBits1_Object = MibTableColumn
vdslLineStatsVtucBits1 = _VdslLineStatsVtucBits1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 1),
    _VdslLineStatsVtucBits1_Type()
)
vdslLineStatsVtucBits1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVtucBits1.setStatus("current")
_VdslLineStatsVtucBits2_Type = OctetString
_VdslLineStatsVtucBits2_Object = MibTableColumn
vdslLineStatsVtucBits2 = _VdslLineStatsVtucBits2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 2),
    _VdslLineStatsVtucBits2_Type()
)
vdslLineStatsVtucBits2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVtucBits2.setStatus("current")
_VdslLineStatsVtucBits3_Type = OctetString
_VdslLineStatsVtucBits3_Object = MibTableColumn
vdslLineStatsVtucBits3 = _VdslLineStatsVtucBits3_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 3),
    _VdslLineStatsVtucBits3_Type()
)
vdslLineStatsVtucBits3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVtucBits3.setStatus("current")
_VdslLineStatsVtucBits4_Type = OctetString
_VdslLineStatsVtucBits4_Object = MibTableColumn
vdslLineStatsVtucBits4 = _VdslLineStatsVtucBits4_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 4),
    _VdslLineStatsVtucBits4_Type()
)
vdslLineStatsVtucBits4.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVtucBits4.setStatus("current")
_VdslLineStatsVturBits1_Type = OctetString
_VdslLineStatsVturBits1_Object = MibTableColumn
vdslLineStatsVturBits1 = _VdslLineStatsVturBits1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 5),
    _VdslLineStatsVturBits1_Type()
)
vdslLineStatsVturBits1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVturBits1.setStatus("current")
_VdslLineStatsVturBits2_Type = OctetString
_VdslLineStatsVturBits2_Object = MibTableColumn
vdslLineStatsVturBits2 = _VdslLineStatsVturBits2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 6),
    _VdslLineStatsVturBits2_Type()
)
vdslLineStatsVturBits2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVturBits2.setStatus("current")
_VdslLineStatsVturBits3_Type = OctetString
_VdslLineStatsVturBits3_Object = MibTableColumn
vdslLineStatsVturBits3 = _VdslLineStatsVturBits3_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 7),
    _VdslLineStatsVturBits3_Type()
)
vdslLineStatsVturBits3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVturBits3.setStatus("current")
_VdslLineStatsVturBits4_Type = OctetString
_VdslLineStatsVturBits4_Object = MibTableColumn
vdslLineStatsVturBits4 = _VdslLineStatsVturBits4_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 8),
    _VdslLineStatsVturBits4_Type()
)
vdslLineStatsVturBits4.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVturBits4.setStatus("current")
_VdslLineStatsVtucGain1_Type = OctetString
_VdslLineStatsVtucGain1_Object = MibTableColumn
vdslLineStatsVtucGain1 = _VdslLineStatsVtucGain1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 9),
    _VdslLineStatsVtucGain1_Type()
)
vdslLineStatsVtucGain1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVtucGain1.setStatus("current")
_VdslLineStatsVtucGain2_Type = OctetString
_VdslLineStatsVtucGain2_Object = MibTableColumn
vdslLineStatsVtucGain2 = _VdslLineStatsVtucGain2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 10),
    _VdslLineStatsVtucGain2_Type()
)
vdslLineStatsVtucGain2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVtucGain2.setStatus("current")
_VdslLineStatsVtucGain3_Type = OctetString
_VdslLineStatsVtucGain3_Object = MibTableColumn
vdslLineStatsVtucGain3 = _VdslLineStatsVtucGain3_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 11),
    _VdslLineStatsVtucGain3_Type()
)
vdslLineStatsVtucGain3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVtucGain3.setStatus("current")
_VdslLineStatsVtucGain4_Type = OctetString
_VdslLineStatsVtucGain4_Object = MibTableColumn
vdslLineStatsVtucGain4 = _VdslLineStatsVtucGain4_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 12),
    _VdslLineStatsVtucGain4_Type()
)
vdslLineStatsVtucGain4.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVtucGain4.setStatus("current")
_VdslLineStatsVtucGain5_Type = OctetString
_VdslLineStatsVtucGain5_Object = MibTableColumn
vdslLineStatsVtucGain5 = _VdslLineStatsVtucGain5_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 13),
    _VdslLineStatsVtucGain5_Type()
)
vdslLineStatsVtucGain5.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVtucGain5.setStatus("current")
_VdslLineStatsVtucGain6_Type = OctetString
_VdslLineStatsVtucGain6_Object = MibTableColumn
vdslLineStatsVtucGain6 = _VdslLineStatsVtucGain6_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 14),
    _VdslLineStatsVtucGain6_Type()
)
vdslLineStatsVtucGain6.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVtucGain6.setStatus("current")
_VdslLineStatsVtucGain7_Type = OctetString
_VdslLineStatsVtucGain7_Object = MibTableColumn
vdslLineStatsVtucGain7 = _VdslLineStatsVtucGain7_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 15),
    _VdslLineStatsVtucGain7_Type()
)
vdslLineStatsVtucGain7.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVtucGain7.setStatus("current")
_VdslLineStatsVtucGain8_Type = OctetString
_VdslLineStatsVtucGain8_Object = MibTableColumn
vdslLineStatsVtucGain8 = _VdslLineStatsVtucGain8_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 16),
    _VdslLineStatsVtucGain8_Type()
)
vdslLineStatsVtucGain8.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVtucGain8.setStatus("current")
_VdslLineStatsVturGain1_Type = OctetString
_VdslLineStatsVturGain1_Object = MibTableColumn
vdslLineStatsVturGain1 = _VdslLineStatsVturGain1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 17),
    _VdslLineStatsVturGain1_Type()
)
vdslLineStatsVturGain1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVturGain1.setStatus("current")
_VdslLineStatsVturGain2_Type = OctetString
_VdslLineStatsVturGain2_Object = MibTableColumn
vdslLineStatsVturGain2 = _VdslLineStatsVturGain2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 18),
    _VdslLineStatsVturGain2_Type()
)
vdslLineStatsVturGain2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVturGain2.setStatus("current")
_VdslLineStatsVturGain3_Type = OctetString
_VdslLineStatsVturGain3_Object = MibTableColumn
vdslLineStatsVturGain3 = _VdslLineStatsVturGain3_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 19),
    _VdslLineStatsVturGain3_Type()
)
vdslLineStatsVturGain3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVturGain3.setStatus("current")
_VdslLineStatsVturGain4_Type = OctetString
_VdslLineStatsVturGain4_Object = MibTableColumn
vdslLineStatsVturGain4 = _VdslLineStatsVturGain4_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 20),
    _VdslLineStatsVturGain4_Type()
)
vdslLineStatsVturGain4.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVturGain4.setStatus("current")
_VdslLineStatsVturGain5_Type = OctetString
_VdslLineStatsVturGain5_Object = MibTableColumn
vdslLineStatsVturGain5 = _VdslLineStatsVturGain5_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 21),
    _VdslLineStatsVturGain5_Type()
)
vdslLineStatsVturGain5.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVturGain5.setStatus("current")
_VdslLineStatsVturGain6_Type = OctetString
_VdslLineStatsVturGain6_Object = MibTableColumn
vdslLineStatsVturGain6 = _VdslLineStatsVturGain6_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 22),
    _VdslLineStatsVturGain6_Type()
)
vdslLineStatsVturGain6.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVturGain6.setStatus("current")
_VdslLineStatsVturGain7_Type = OctetString
_VdslLineStatsVturGain7_Object = MibTableColumn
vdslLineStatsVturGain7 = _VdslLineStatsVturGain7_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 23),
    _VdslLineStatsVturGain7_Type()
)
vdslLineStatsVturGain7.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVturGain7.setStatus("current")
_VdslLineStatsVturGain8_Type = OctetString
_VdslLineStatsVturGain8_Object = MibTableColumn
vdslLineStatsVturGain8 = _VdslLineStatsVturGain8_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 24),
    _VdslLineStatsVturGain8_Type()
)
vdslLineStatsVturGain8.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVturGain8.setStatus("current")
_VdslLineStatsVtucHlog_Type = OctetString
_VdslLineStatsVtucHlog_Object = MibTableColumn
vdslLineStatsVtucHlog = _VdslLineStatsVtucHlog_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 25),
    _VdslLineStatsVtucHlog_Type()
)
vdslLineStatsVtucHlog.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVtucHlog.setStatus("current")
_VdslLineStatsVturHlog_Type = OctetString
_VdslLineStatsVturHlog_Object = MibTableColumn
vdslLineStatsVturHlog = _VdslLineStatsVturHlog_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 26),
    _VdslLineStatsVturHlog_Type()
)
vdslLineStatsVturHlog.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVturHlog.setStatus("current")
_VdslLineStatsVtucQln_Type = OctetString
_VdslLineStatsVtucQln_Object = MibTableColumn
vdslLineStatsVtucQln = _VdslLineStatsVtucQln_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 27),
    _VdslLineStatsVtucQln_Type()
)
vdslLineStatsVtucQln.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVtucQln.setStatus("current")
_VdslLineStatsVturQln_Type = OctetString
_VdslLineStatsVturQln_Object = MibTableColumn
vdslLineStatsVturQln = _VdslLineStatsVturQln_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 28),
    _VdslLineStatsVturQln_Type()
)
vdslLineStatsVturQln.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVturQln.setStatus("current")
_VdslLineStatsVtucSnr_Type = OctetString
_VdslLineStatsVtucSnr_Object = MibTableColumn
vdslLineStatsVtucSnr = _VdslLineStatsVtucSnr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 29),
    _VdslLineStatsVtucSnr_Type()
)
vdslLineStatsVtucSnr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVtucSnr.setStatus("current")
_VdslLineStatsVturSnr_Type = OctetString
_VdslLineStatsVturSnr_Object = MibTableColumn
vdslLineStatsVturSnr = _VdslLineStatsVturSnr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 30),
    _VdslLineStatsVturSnr_Type()
)
vdslLineStatsVturSnr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVturSnr.setStatus("current")
_VdslLineStatsVtucTssi_Type = OctetString
_VdslLineStatsVtucTssi_Object = MibTableColumn
vdslLineStatsVtucTssi = _VdslLineStatsVtucTssi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 31),
    _VdslLineStatsVtucTssi_Type()
)
vdslLineStatsVtucTssi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVtucTssi.setStatus("current")
_VdslLineStatsVturTssi_Type = OctetString
_VdslLineStatsVturTssi_Object = MibTableColumn
vdslLineStatsVturTssi = _VdslLineStatsVturTssi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 32),
    _VdslLineStatsVturTssi_Type()
)
vdslLineStatsVturTssi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVturTssi.setStatus("current")


class _VdslLineStatsProtocol_Type(Integer32):
    """Custom type vdslLineStatsProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("vdsl-8a", 2),
          ("vdsl-8b", 3),
          ("vdsl-8c", 4),
          ("vdsl-8d", 5),
          ("vdsl-12a", 6),
          ("vdsl-12b", 7),
          ("vdsl-17a", 8),
          ("vdsl-30a", 9),
          ("adsl2plus", 10))
    )


_VdslLineStatsProtocol_Type.__name__ = "Integer32"
_VdslLineStatsProtocol_Object = MibTableColumn
vdslLineStatsProtocol = _VdslLineStatsProtocol_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 33),
    _VdslLineStatsProtocol_Type()
)
vdslLineStatsProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsProtocol.setStatus("current")


class _VdslLineStatsUsCodingMode_Type(Integer32):
    """Custom type vdslLineStatsUsCodingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("trellis", 2),
          ("reedSolomon", 3),
          ("trellisAndReedSolomon", 4))
    )


_VdslLineStatsUsCodingMode_Type.__name__ = "Integer32"
_VdslLineStatsUsCodingMode_Object = MibTableColumn
vdslLineStatsUsCodingMode = _VdslLineStatsUsCodingMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 34),
    _VdslLineStatsUsCodingMode_Type()
)
vdslLineStatsUsCodingMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsUsCodingMode.setStatus("current")


class _VdslLineStatsDsCodingMode_Type(Integer32):
    """Custom type vdslLineStatsDsCodingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("trellis", 2),
          ("reedSolomon", 3),
          ("trellisAndReedSolomon", 4))
    )


_VdslLineStatsDsCodingMode_Type.__name__ = "Integer32"
_VdslLineStatsDsCodingMode_Object = MibTableColumn
vdslLineStatsDsCodingMode = _VdslLineStatsDsCodingMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 35),
    _VdslLineStatsDsCodingMode_Type()
)
vdslLineStatsDsCodingMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsDsCodingMode.setStatus("current")
_VdslLineStatsVtucHlogGroupSize_Type = Integer32
_VdslLineStatsVtucHlogGroupSize_Object = MibTableColumn
vdslLineStatsVtucHlogGroupSize = _VdslLineStatsVtucHlogGroupSize_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 36),
    _VdslLineStatsVtucHlogGroupSize_Type()
)
vdslLineStatsVtucHlogGroupSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVtucHlogGroupSize.setStatus("current")
_VdslLineStatsVturHlogGroupSize_Type = Integer32
_VdslLineStatsVturHlogGroupSize_Object = MibTableColumn
vdslLineStatsVturHlogGroupSize = _VdslLineStatsVturHlogGroupSize_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 37),
    _VdslLineStatsVturHlogGroupSize_Type()
)
vdslLineStatsVturHlogGroupSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVturHlogGroupSize.setStatus("current")
_VdslLineStatsVtucQlnGroupSize_Type = Integer32
_VdslLineStatsVtucQlnGroupSize_Object = MibTableColumn
vdslLineStatsVtucQlnGroupSize = _VdslLineStatsVtucQlnGroupSize_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 38),
    _VdslLineStatsVtucQlnGroupSize_Type()
)
vdslLineStatsVtucQlnGroupSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVtucQlnGroupSize.setStatus("current")
_VdslLineStatsVturQlnGroupSize_Type = Integer32
_VdslLineStatsVturQlnGroupSize_Object = MibTableColumn
vdslLineStatsVturQlnGroupSize = _VdslLineStatsVturQlnGroupSize_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 39),
    _VdslLineStatsVturQlnGroupSize_Type()
)
vdslLineStatsVturQlnGroupSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVturQlnGroupSize.setStatus("current")
_VdslLineStatsVtucSnrGroupSize_Type = Integer32
_VdslLineStatsVtucSnrGroupSize_Object = MibTableColumn
vdslLineStatsVtucSnrGroupSize = _VdslLineStatsVtucSnrGroupSize_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 40),
    _VdslLineStatsVtucSnrGroupSize_Type()
)
vdslLineStatsVtucSnrGroupSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVtucSnrGroupSize.setStatus("current")
_VdslLineStatsVturSnrGroupSize_Type = Integer32
_VdslLineStatsVturSnrGroupSize_Object = MibTableColumn
vdslLineStatsVturSnrGroupSize = _VdslLineStatsVturSnrGroupSize_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 41),
    _VdslLineStatsVturSnrGroupSize_Type()
)
vdslLineStatsVturSnrGroupSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVturSnrGroupSize.setStatus("current")
_VdslLineStatsVtucRxPower_Type = Integer32
_VdslLineStatsVtucRxPower_Object = MibTableColumn
vdslLineStatsVtucRxPower = _VdslLineStatsVtucRxPower_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 42),
    _VdslLineStatsVtucRxPower_Type()
)
vdslLineStatsVtucRxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVtucRxPower.setStatus("current")
_VdslLineStatsVturRxPower_Type = Integer32
_VdslLineStatsVturRxPower_Object = MibTableColumn
vdslLineStatsVturRxPower = _VdslLineStatsVturRxPower_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 43),
    _VdslLineStatsVturRxPower_Type()
)
vdslLineStatsVturRxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVturRxPower.setStatus("current")
_VdslLineStatsVtucSnrMargin_Type = Integer32
_VdslLineStatsVtucSnrMargin_Object = MibTableColumn
vdslLineStatsVtucSnrMargin = _VdslLineStatsVtucSnrMargin_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 44),
    _VdslLineStatsVtucSnrMargin_Type()
)
vdslLineStatsVtucSnrMargin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVtucSnrMargin.setStatus("current")
_VdslLineStatsVturSnrMargin_Type = Integer32
_VdslLineStatsVturSnrMargin_Object = MibTableColumn
vdslLineStatsVturSnrMargin = _VdslLineStatsVturSnrMargin_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 45),
    _VdslLineStatsVturSnrMargin_Type()
)
vdslLineStatsVturSnrMargin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVturSnrMargin.setStatus("current")
_VdslLineStatsVtucSigAtten_Type = Integer32
_VdslLineStatsVtucSigAtten_Object = MibTableColumn
vdslLineStatsVtucSigAtten = _VdslLineStatsVtucSigAtten_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 46),
    _VdslLineStatsVtucSigAtten_Type()
)
vdslLineStatsVtucSigAtten.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVtucSigAtten.setStatus("current")
_VdslLineStatsVturSigAtten_Type = Integer32
_VdslLineStatsVturSigAtten_Object = MibTableColumn
vdslLineStatsVturSigAtten = _VdslLineStatsVturSigAtten_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 47),
    _VdslLineStatsVturSigAtten_Type()
)
vdslLineStatsVturSigAtten.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVturSigAtten.setStatus("current")
_VdslLineStatsVtucLineAtten_Type = Integer32
_VdslLineStatsVtucLineAtten_Object = MibTableColumn
vdslLineStatsVtucLineAtten = _VdslLineStatsVtucLineAtten_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 48),
    _VdslLineStatsVtucLineAtten_Type()
)
vdslLineStatsVtucLineAtten.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVtucLineAtten.setStatus("current")
_VdslLineStatsVturLineAtten_Type = Integer32
_VdslLineStatsVturLineAtten_Object = MibTableColumn
vdslLineStatsVturLineAtten = _VdslLineStatsVturLineAtten_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 2, 1, 49),
    _VdslLineStatsVturLineAtten_Type()
)
vdslLineStatsVturLineAtten.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineStatsVturLineAtten.setStatus("current")
_VdslLineUsBandPlanTable_Object = MibTable
vdslLineUsBandPlanTable = _VdslLineUsBandPlanTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 3)
)
if mibBuilder.loadTexts:
    vdslLineUsBandPlanTable.setStatus("current")
_VdslLineUsBandPlanEntry_Object = MibTableRow
vdslLineUsBandPlanEntry = _VdslLineUsBandPlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 3, 1)
)
vdslLineUsBandPlanEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "vdslLineUsBandId"),
)
if mibBuilder.loadTexts:
    vdslLineUsBandPlanEntry.setStatus("current")
_VdslLineUsBandId_Type = Integer32
_VdslLineUsBandId_Object = MibTableColumn
vdslLineUsBandId = _VdslLineUsBandId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 3, 1, 1),
    _VdslLineUsBandId_Type()
)
vdslLineUsBandId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineUsBandId.setStatus("current")
_VdslLineUsBandStartToneId_Type = Integer32
_VdslLineUsBandStartToneId_Object = MibTableColumn
vdslLineUsBandStartToneId = _VdslLineUsBandStartToneId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 3, 1, 2),
    _VdslLineUsBandStartToneId_Type()
)
vdslLineUsBandStartToneId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineUsBandStartToneId.setStatus("current")
_VdslLineUsBandStopToneId_Type = Integer32
_VdslLineUsBandStopToneId_Object = MibTableColumn
vdslLineUsBandStopToneId = _VdslLineUsBandStopToneId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 3, 1, 3),
    _VdslLineUsBandStopToneId_Type()
)
vdslLineUsBandStopToneId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineUsBandStopToneId.setStatus("current")
_VdslLineDsBandPlanTable_Object = MibTable
vdslLineDsBandPlanTable = _VdslLineDsBandPlanTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 4)
)
if mibBuilder.loadTexts:
    vdslLineDsBandPlanTable.setStatus("current")
_VdslLineDsBandPlanEntry_Object = MibTableRow
vdslLineDsBandPlanEntry = _VdslLineDsBandPlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 4, 1)
)
vdslLineDsBandPlanEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "vdslLineDsBandId"),
)
if mibBuilder.loadTexts:
    vdslLineDsBandPlanEntry.setStatus("current")
_VdslLineDsBandId_Type = Integer32
_VdslLineDsBandId_Object = MibTableColumn
vdslLineDsBandId = _VdslLineDsBandId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 4, 1, 1),
    _VdslLineDsBandId_Type()
)
vdslLineDsBandId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineDsBandId.setStatus("current")
_VdslLineDsBandStartToneId_Type = Integer32
_VdslLineDsBandStartToneId_Object = MibTableColumn
vdslLineDsBandStartToneId = _VdslLineDsBandStartToneId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 4, 1, 2),
    _VdslLineDsBandStartToneId_Type()
)
vdslLineDsBandStartToneId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineDsBandStartToneId.setStatus("current")
_VdslLineDsBandStopToneId_Type = Integer32
_VdslLineDsBandStopToneId_Object = MibTableColumn
vdslLineDsBandStopToneId = _VdslLineDsBandStopToneId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 4, 1, 3),
    _VdslLineDsBandStopToneId_Type()
)
vdslLineDsBandStopToneId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineDsBandStopToneId.setStatus("current")
_VdslLineUsResultMaskTable_Object = MibTable
vdslLineUsResultMaskTable = _VdslLineUsResultMaskTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 5)
)
if mibBuilder.loadTexts:
    vdslLineUsResultMaskTable.setStatus("current")
_VdslLineUsResultMaskEntry_Object = MibTableRow
vdslLineUsResultMaskEntry = _VdslLineUsResultMaskEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 5, 1)
)
vdslLineUsResultMaskEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "vdslLineUsMaskId"),
)
if mibBuilder.loadTexts:
    vdslLineUsResultMaskEntry.setStatus("current")
_VdslLineUsMaskId_Type = Integer32
_VdslLineUsMaskId_Object = MibTableColumn
vdslLineUsMaskId = _VdslLineUsMaskId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 5, 1, 1),
    _VdslLineUsMaskId_Type()
)
vdslLineUsMaskId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineUsMaskId.setStatus("current")
_VdslLineUsMaskTone_Type = Integer32
_VdslLineUsMaskTone_Object = MibTableColumn
vdslLineUsMaskTone = _VdslLineUsMaskTone_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 5, 1, 2),
    _VdslLineUsMaskTone_Type()
)
vdslLineUsMaskTone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineUsMaskTone.setStatus("current")
_VdslLineUsMaskPsd_Type = Integer32
_VdslLineUsMaskPsd_Object = MibTableColumn
vdslLineUsMaskPsd = _VdslLineUsMaskPsd_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 5, 1, 3),
    _VdslLineUsMaskPsd_Type()
)
vdslLineUsMaskPsd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineUsMaskPsd.setStatus("current")
_VdslLineDsResultMaskTable_Object = MibTable
vdslLineDsResultMaskTable = _VdslLineDsResultMaskTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 6)
)
if mibBuilder.loadTexts:
    vdslLineDsResultMaskTable.setStatus("current")
_VdslLineDsResultMaskEntry_Object = MibTableRow
vdslLineDsResultMaskEntry = _VdslLineDsResultMaskEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 6, 1)
)
vdslLineDsResultMaskEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "vdslLineDsMaskId"),
)
if mibBuilder.loadTexts:
    vdslLineDsResultMaskEntry.setStatus("current")
_VdslLineDsMaskId_Type = Integer32
_VdslLineDsMaskId_Object = MibTableColumn
vdslLineDsMaskId = _VdslLineDsMaskId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 6, 1, 1),
    _VdslLineDsMaskId_Type()
)
vdslLineDsMaskId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineDsMaskId.setStatus("current")
_VdslLineDsMaskTone_Type = Integer32
_VdslLineDsMaskTone_Object = MibTableColumn
vdslLineDsMaskTone = _VdslLineDsMaskTone_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 6, 1, 2),
    _VdslLineDsMaskTone_Type()
)
vdslLineDsMaskTone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineDsMaskTone.setStatus("current")
_VdslLineDsMaskPsd_Type = Integer32
_VdslLineDsMaskPsd_Object = MibTableColumn
vdslLineDsMaskPsd = _VdslLineDsMaskPsd_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 6, 1, 3),
    _VdslLineDsMaskPsd_Type()
)
vdslLineDsMaskPsd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLineDsMaskPsd.setStatus("current")
_VdslLinePerfCurrTable_Object = MibTable
vdslLinePerfCurrTable = _VdslLinePerfCurrTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7)
)
if mibBuilder.loadTexts:
    vdslLinePerfCurrTable.setStatus("current")
_VdslLinePerfCurrEntry_Object = MibTableRow
vdslLinePerfCurrEntry = _VdslLinePerfCurrEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1)
)
vdslLinePerfCurrEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    vdslLinePerfCurrEntry.setStatus("current")
_VdslLinePerfCurrInmVtucEqInp_Type = Counter32
_VdslLinePerfCurrInmVtucEqInp_Object = MibTableColumn
vdslLinePerfCurrInmVtucEqInp = _VdslLinePerfCurrInmVtucEqInp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 1),
    _VdslLinePerfCurrInmVtucEqInp_Type()
)
vdslLinePerfCurrInmVtucEqInp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurrInmVtucEqInp.setStatus("current")
_VdslLinePerfCurrInmVturEqInp_Type = Counter32
_VdslLinePerfCurrInmVturEqInp_Object = MibTableColumn
vdslLinePerfCurrInmVturEqInp = _VdslLinePerfCurrInmVturEqInp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 2),
    _VdslLinePerfCurrInmVturEqInp_Type()
)
vdslLinePerfCurrInmVturEqInp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurrInmVturEqInp.setStatus("current")
_VdslLinePerfCurr15MInmVtucEqInp_Type = Counter32
_VdslLinePerfCurr15MInmVtucEqInp_Object = MibTableColumn
vdslLinePerfCurr15MInmVtucEqInp = _VdslLinePerfCurr15MInmVtucEqInp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 3),
    _VdslLinePerfCurr15MInmVtucEqInp_Type()
)
vdslLinePerfCurr15MInmVtucEqInp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr15MInmVtucEqInp.setStatus("current")
_VdslLinePerfCurr15MInmVturEqInp_Type = Counter32
_VdslLinePerfCurr15MInmVturEqInp_Object = MibTableColumn
vdslLinePerfCurr15MInmVturEqInp = _VdslLinePerfCurr15MInmVturEqInp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 4),
    _VdslLinePerfCurr15MInmVturEqInp_Type()
)
vdslLinePerfCurr15MInmVturEqInp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr15MInmVturEqInp.setStatus("current")
_VdslLinePerfCurr1DayInmVtucEqInp_Type = Counter32
_VdslLinePerfCurr1DayInmVtucEqInp_Object = MibTableColumn
vdslLinePerfCurr1DayInmVtucEqInp = _VdslLinePerfCurr1DayInmVtucEqInp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 5),
    _VdslLinePerfCurr1DayInmVtucEqInp_Type()
)
vdslLinePerfCurr1DayInmVtucEqInp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr1DayInmVtucEqInp.setStatus("current")
_VdslLinePerfCurr1DayInmVturEqInp_Type = Counter32
_VdslLinePerfCurr1DayInmVturEqInp_Object = MibTableColumn
vdslLinePerfCurr1DayInmVturEqInp = _VdslLinePerfCurr1DayInmVturEqInp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 6),
    _VdslLinePerfCurr1DayInmVturEqInp_Type()
)
vdslLinePerfCurr1DayInmVturEqInp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr1DayInmVturEqInp.setStatus("current")
_VdslLinePerfCurrInmVtucIAT_Type = Counter32
_VdslLinePerfCurrInmVtucIAT_Object = MibTableColumn
vdslLinePerfCurrInmVtucIAT = _VdslLinePerfCurrInmVtucIAT_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 7),
    _VdslLinePerfCurrInmVtucIAT_Type()
)
vdslLinePerfCurrInmVtucIAT.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurrInmVtucIAT.setStatus("current")
_VdslLinePerfCurrInmVturIAT_Type = Counter32
_VdslLinePerfCurrInmVturIAT_Object = MibTableColumn
vdslLinePerfCurrInmVturIAT = _VdslLinePerfCurrInmVturIAT_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 8),
    _VdslLinePerfCurrInmVturIAT_Type()
)
vdslLinePerfCurrInmVturIAT.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurrInmVturIAT.setStatus("current")
_VdslLinePerfCurr15MInmVtucIAT_Type = Counter32
_VdslLinePerfCurr15MInmVtucIAT_Object = MibTableColumn
vdslLinePerfCurr15MInmVtucIAT = _VdslLinePerfCurr15MInmVtucIAT_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 9),
    _VdslLinePerfCurr15MInmVtucIAT_Type()
)
vdslLinePerfCurr15MInmVtucIAT.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr15MInmVtucIAT.setStatus("current")
_VdslLinePerfCurr15MInmVturIAT_Type = Counter32
_VdslLinePerfCurr15MInmVturIAT_Object = MibTableColumn
vdslLinePerfCurr15MInmVturIAT = _VdslLinePerfCurr15MInmVturIAT_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 10),
    _VdslLinePerfCurr15MInmVturIAT_Type()
)
vdslLinePerfCurr15MInmVturIAT.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr15MInmVturIAT.setStatus("current")
_VdslLinePerfCurr1DayInmVtucIAT_Type = Counter32
_VdslLinePerfCurr1DayInmVtucIAT_Object = MibTableColumn
vdslLinePerfCurr1DayInmVtucIAT = _VdslLinePerfCurr1DayInmVtucIAT_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 11),
    _VdslLinePerfCurr1DayInmVtucIAT_Type()
)
vdslLinePerfCurr1DayInmVtucIAT.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr1DayInmVtucIAT.setStatus("current")
_VdslLinePerfCurr1DayInmVturIAT_Type = Counter32
_VdslLinePerfCurr1DayInmVturIAT_Object = MibTableColumn
vdslLinePerfCurr1DayInmVturIAT = _VdslLinePerfCurr1DayInmVturIAT_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 12),
    _VdslLinePerfCurr1DayInmVturIAT_Type()
)
vdslLinePerfCurr1DayInmVturIAT.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr1DayInmVturIAT.setStatus("current")
_VdslLinePerfCurrInmVtucME_Type = Counter32
_VdslLinePerfCurrInmVtucME_Object = MibTableColumn
vdslLinePerfCurrInmVtucME = _VdslLinePerfCurrInmVtucME_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 13),
    _VdslLinePerfCurrInmVtucME_Type()
)
vdslLinePerfCurrInmVtucME.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurrInmVtucME.setStatus("current")
_VdslLinePerfCurrInmVturME_Type = Counter32
_VdslLinePerfCurrInmVturME_Object = MibTableColumn
vdslLinePerfCurrInmVturME = _VdslLinePerfCurrInmVturME_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 14),
    _VdslLinePerfCurrInmVturME_Type()
)
vdslLinePerfCurrInmVturME.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurrInmVturME.setStatus("current")
_VdslLinePerfCurr15MInmVtucME_Type = Counter32
_VdslLinePerfCurr15MInmVtucME_Object = MibTableColumn
vdslLinePerfCurr15MInmVtucME = _VdslLinePerfCurr15MInmVtucME_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 15),
    _VdslLinePerfCurr15MInmVtucME_Type()
)
vdslLinePerfCurr15MInmVtucME.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr15MInmVtucME.setStatus("current")
_VdslLinePerfCurr15MInmVturME_Type = Counter32
_VdslLinePerfCurr15MInmVturME_Object = MibTableColumn
vdslLinePerfCurr15MInmVturME = _VdslLinePerfCurr15MInmVturME_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 16),
    _VdslLinePerfCurr15MInmVturME_Type()
)
vdslLinePerfCurr15MInmVturME.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr15MInmVturME.setStatus("current")
_VdslLinePerfCurr1DayInmVtucME_Type = Counter32
_VdslLinePerfCurr1DayInmVtucME_Object = MibTableColumn
vdslLinePerfCurr1DayInmVtucME = _VdslLinePerfCurr1DayInmVtucME_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 17),
    _VdslLinePerfCurr1DayInmVtucME_Type()
)
vdslLinePerfCurr1DayInmVtucME.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr1DayInmVtucME.setStatus("current")
_VdslLinePerfCurr1DayInmVturME_Type = Counter32
_VdslLinePerfCurr1DayInmVturME_Object = MibTableColumn
vdslLinePerfCurr1DayInmVturME = _VdslLinePerfCurr1DayInmVturME_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 18),
    _VdslLinePerfCurr1DayInmVturME_Type()
)
vdslLinePerfCurr1DayInmVturME.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr1DayInmVturME.setStatus("current")
_VdslLinePerfCurrVtucRx_Type = Unsigned32
_VdslLinePerfCurrVtucRx_Object = MibTableColumn
vdslLinePerfCurrVtucRx = _VdslLinePerfCurrVtucRx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 19),
    _VdslLinePerfCurrVtucRx_Type()
)
vdslLinePerfCurrVtucRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurrVtucRx.setStatus("current")
_VdslLinePerfCurrVturRx_Type = Unsigned32
_VdslLinePerfCurrVturRx_Object = MibTableColumn
vdslLinePerfCurrVturRx = _VdslLinePerfCurrVturRx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 20),
    _VdslLinePerfCurrVturRx_Type()
)
vdslLinePerfCurrVturRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurrVturRx.setStatus("current")
_VdslLinePerfCurr15MVtucRx_Type = Unsigned32
_VdslLinePerfCurr15MVtucRx_Object = MibTableColumn
vdslLinePerfCurr15MVtucRx = _VdslLinePerfCurr15MVtucRx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 21),
    _VdslLinePerfCurr15MVtucRx_Type()
)
vdslLinePerfCurr15MVtucRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr15MVtucRx.setStatus("current")
_VdslLinePerfCurr15MVturRx_Type = Unsigned32
_VdslLinePerfCurr15MVturRx_Object = MibTableColumn
vdslLinePerfCurr15MVturRx = _VdslLinePerfCurr15MVturRx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 22),
    _VdslLinePerfCurr15MVturRx_Type()
)
vdslLinePerfCurr15MVturRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr15MVturRx.setStatus("current")
_VdslLinePerfCurr1DayVtucRx_Type = Unsigned32
_VdslLinePerfCurr1DayVtucRx_Object = MibTableColumn
vdslLinePerfCurr1DayVtucRx = _VdslLinePerfCurr1DayVtucRx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 23),
    _VdslLinePerfCurr1DayVtucRx_Type()
)
vdslLinePerfCurr1DayVtucRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr1DayVtucRx.setStatus("current")
_VdslLinePerfCurr1DayVturRx_Type = Unsigned32
_VdslLinePerfCurr1DayVturRx_Object = MibTableColumn
vdslLinePerfCurr1DayVturRx = _VdslLinePerfCurr1DayVturRx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 24),
    _VdslLinePerfCurr1DayVturRx_Type()
)
vdslLinePerfCurr1DayVturRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr1DayVturRx.setStatus("current")
_VdslLinePerfCurrVtucRxCorrected_Type = Unsigned32
_VdslLinePerfCurrVtucRxCorrected_Object = MibTableColumn
vdslLinePerfCurrVtucRxCorrected = _VdslLinePerfCurrVtucRxCorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 25),
    _VdslLinePerfCurrVtucRxCorrected_Type()
)
vdslLinePerfCurrVtucRxCorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurrVtucRxCorrected.setStatus("current")
_VdslLinePerfCurrVturRxCorrected_Type = Unsigned32
_VdslLinePerfCurrVturRxCorrected_Object = MibTableColumn
vdslLinePerfCurrVturRxCorrected = _VdslLinePerfCurrVturRxCorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 26),
    _VdslLinePerfCurrVturRxCorrected_Type()
)
vdslLinePerfCurrVturRxCorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurrVturRxCorrected.setStatus("current")
_VdslLinePerfCurr15MVtucRxCorrected_Type = Unsigned32
_VdslLinePerfCurr15MVtucRxCorrected_Object = MibTableColumn
vdslLinePerfCurr15MVtucRxCorrected = _VdslLinePerfCurr15MVtucRxCorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 27),
    _VdslLinePerfCurr15MVtucRxCorrected_Type()
)
vdslLinePerfCurr15MVtucRxCorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr15MVtucRxCorrected.setStatus("current")
_VdslLinePerfCurr15MVturRxCorrected_Type = Unsigned32
_VdslLinePerfCurr15MVturRxCorrected_Object = MibTableColumn
vdslLinePerfCurr15MVturRxCorrected = _VdslLinePerfCurr15MVturRxCorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 28),
    _VdslLinePerfCurr15MVturRxCorrected_Type()
)
vdslLinePerfCurr15MVturRxCorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr15MVturRxCorrected.setStatus("current")
_VdslLinePerfCurr1DayVtucRxCorrected_Type = Unsigned32
_VdslLinePerfCurr1DayVtucRxCorrected_Object = MibTableColumn
vdslLinePerfCurr1DayVtucRxCorrected = _VdslLinePerfCurr1DayVtucRxCorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 29),
    _VdslLinePerfCurr1DayVtucRxCorrected_Type()
)
vdslLinePerfCurr1DayVtucRxCorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr1DayVtucRxCorrected.setStatus("current")
_VdslLinePerfCurr1DayVturRxCorrected_Type = Unsigned32
_VdslLinePerfCurr1DayVturRxCorrected_Object = MibTableColumn
vdslLinePerfCurr1DayVturRxCorrected = _VdslLinePerfCurr1DayVturRxCorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 30),
    _VdslLinePerfCurr1DayVturRxCorrected_Type()
)
vdslLinePerfCurr1DayVturRxCorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr1DayVturRxCorrected.setStatus("current")
_VdslLinePerfCurrVtucRxUncorrected_Type = Unsigned32
_VdslLinePerfCurrVtucRxUncorrected_Object = MibTableColumn
vdslLinePerfCurrVtucRxUncorrected = _VdslLinePerfCurrVtucRxUncorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 31),
    _VdslLinePerfCurrVtucRxUncorrected_Type()
)
vdslLinePerfCurrVtucRxUncorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurrVtucRxUncorrected.setStatus("current")
_VdslLinePerfCurrVturRxUncorrected_Type = Unsigned32
_VdslLinePerfCurrVturRxUncorrected_Object = MibTableColumn
vdslLinePerfCurrVturRxUncorrected = _VdslLinePerfCurrVturRxUncorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 32),
    _VdslLinePerfCurrVturRxUncorrected_Type()
)
vdslLinePerfCurrVturRxUncorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurrVturRxUncorrected.setStatus("current")
_VdslLinePerfCurr15MVtucRxUncorrected_Type = Unsigned32
_VdslLinePerfCurr15MVtucRxUncorrected_Object = MibTableColumn
vdslLinePerfCurr15MVtucRxUncorrected = _VdslLinePerfCurr15MVtucRxUncorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 33),
    _VdslLinePerfCurr15MVtucRxUncorrected_Type()
)
vdslLinePerfCurr15MVtucRxUncorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr15MVtucRxUncorrected.setStatus("current")
_VdslLinePerfCurr15MVturRxUncorrected_Type = Unsigned32
_VdslLinePerfCurr15MVturRxUncorrected_Object = MibTableColumn
vdslLinePerfCurr15MVturRxUncorrected = _VdslLinePerfCurr15MVturRxUncorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 34),
    _VdslLinePerfCurr15MVturRxUncorrected_Type()
)
vdslLinePerfCurr15MVturRxUncorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr15MVturRxUncorrected.setStatus("current")
_VdslLinePerfCurr1DayVtucRxUncorrected_Type = Unsigned32
_VdslLinePerfCurr1DayVtucRxUncorrected_Object = MibTableColumn
vdslLinePerfCurr1DayVtucRxUncorrected = _VdslLinePerfCurr1DayVtucRxUncorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 35),
    _VdslLinePerfCurr1DayVtucRxUncorrected_Type()
)
vdslLinePerfCurr1DayVtucRxUncorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr1DayVtucRxUncorrected.setStatus("current")
_VdslLinePerfCurr1DayVturRxUncorrected_Type = Unsigned32
_VdslLinePerfCurr1DayVturRxUncorrected_Object = MibTableColumn
vdslLinePerfCurr1DayVturRxUncorrected = _VdslLinePerfCurr1DayVturRxUncorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 36),
    _VdslLinePerfCurr1DayVturRxUncorrected_Type()
)
vdslLinePerfCurr1DayVturRxUncorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr1DayVturRxUncorrected.setStatus("current")
_VdslLinePerfCurrVtucLEFTRs_Type = Unsigned32
_VdslLinePerfCurrVtucLEFTRs_Object = MibTableColumn
vdslLinePerfCurrVtucLEFTRs = _VdslLinePerfCurrVtucLEFTRs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 37),
    _VdslLinePerfCurrVtucLEFTRs_Type()
)
vdslLinePerfCurrVtucLEFTRs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurrVtucLEFTRs.setStatus("current")
_VdslLinePerfCurrVturLEFTRs_Type = Unsigned32
_VdslLinePerfCurrVturLEFTRs_Object = MibTableColumn
vdslLinePerfCurrVturLEFTRs = _VdslLinePerfCurrVturLEFTRs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 38),
    _VdslLinePerfCurrVturLEFTRs_Type()
)
vdslLinePerfCurrVturLEFTRs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurrVturLEFTRs.setStatus("current")
_VdslLinePerfCurr15MVtucLEFTRs_Type = Unsigned32
_VdslLinePerfCurr15MVtucLEFTRs_Object = MibTableColumn
vdslLinePerfCurr15MVtucLEFTRs = _VdslLinePerfCurr15MVtucLEFTRs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 39),
    _VdslLinePerfCurr15MVtucLEFTRs_Type()
)
vdslLinePerfCurr15MVtucLEFTRs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr15MVtucLEFTRs.setStatus("current")
_VdslLinePerfCurr15MVturLEFTRs_Type = Unsigned32
_VdslLinePerfCurr15MVturLEFTRs_Object = MibTableColumn
vdslLinePerfCurr15MVturLEFTRs = _VdslLinePerfCurr15MVturLEFTRs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 40),
    _VdslLinePerfCurr15MVturLEFTRs_Type()
)
vdslLinePerfCurr15MVturLEFTRs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr15MVturLEFTRs.setStatus("current")
_VdslLinePerfCurr1DayVtucLEFTRs_Type = Unsigned32
_VdslLinePerfCurr1DayVtucLEFTRs_Object = MibTableColumn
vdslLinePerfCurr1DayVtucLEFTRs = _VdslLinePerfCurr1DayVtucLEFTRs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 41),
    _VdslLinePerfCurr1DayVtucLEFTRs_Type()
)
vdslLinePerfCurr1DayVtucLEFTRs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr1DayVtucLEFTRs.setStatus("current")
_VdslLinePerfCurr1DayVturLEFTRs_Type = Unsigned32
_VdslLinePerfCurr1DayVturLEFTRs_Object = MibTableColumn
vdslLinePerfCurr1DayVturLEFTRs = _VdslLinePerfCurr1DayVturLEFTRs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 42),
    _VdslLinePerfCurr1DayVturLEFTRs_Type()
)
vdslLinePerfCurr1DayVturLEFTRs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr1DayVturLEFTRs.setStatus("current")
_VdslLinePerfCurrVtucErrFreeBits_Type = Unsigned32
_VdslLinePerfCurrVtucErrFreeBits_Object = MibTableColumn
vdslLinePerfCurrVtucErrFreeBits = _VdslLinePerfCurrVtucErrFreeBits_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 43),
    _VdslLinePerfCurrVtucErrFreeBits_Type()
)
vdslLinePerfCurrVtucErrFreeBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurrVtucErrFreeBits.setStatus("current")
_VdslLinePerfCurrVturErrFreeBits_Type = Unsigned32
_VdslLinePerfCurrVturErrFreeBits_Object = MibTableColumn
vdslLinePerfCurrVturErrFreeBits = _VdslLinePerfCurrVturErrFreeBits_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 44),
    _VdslLinePerfCurrVturErrFreeBits_Type()
)
vdslLinePerfCurrVturErrFreeBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurrVturErrFreeBits.setStatus("current")
_VdslLinePerfCurr15MVtucErrFreeBits_Type = Unsigned32
_VdslLinePerfCurr15MVtucErrFreeBits_Object = MibTableColumn
vdslLinePerfCurr15MVtucErrFreeBits = _VdslLinePerfCurr15MVtucErrFreeBits_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 45),
    _VdslLinePerfCurr15MVtucErrFreeBits_Type()
)
vdslLinePerfCurr15MVtucErrFreeBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr15MVtucErrFreeBits.setStatus("current")
_VdslLinePerfCurr15MVturErrFreeBits_Type = Unsigned32
_VdslLinePerfCurr15MVturErrFreeBits_Object = MibTableColumn
vdslLinePerfCurr15MVturErrFreeBits = _VdslLinePerfCurr15MVturErrFreeBits_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 46),
    _VdslLinePerfCurr15MVturErrFreeBits_Type()
)
vdslLinePerfCurr15MVturErrFreeBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr15MVturErrFreeBits.setStatus("current")
_VdslLinePerfCurr1DayVtucErrFreeBits_Type = Unsigned32
_VdslLinePerfCurr1DayVtucErrFreeBits_Object = MibTableColumn
vdslLinePerfCurr1DayVtucErrFreeBits = _VdslLinePerfCurr1DayVtucErrFreeBits_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 47),
    _VdslLinePerfCurr1DayVtucErrFreeBits_Type()
)
vdslLinePerfCurr1DayVtucErrFreeBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr1DayVtucErrFreeBits.setStatus("current")
_VdslLinePerfCurr1DayVturErrFreeBits_Type = Unsigned32
_VdslLinePerfCurr1DayVturErrFreeBits_Object = MibTableColumn
vdslLinePerfCurr1DayVturErrFreeBits = _VdslLinePerfCurr1DayVturErrFreeBits_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 48),
    _VdslLinePerfCurr1DayVturErrFreeBits_Type()
)
vdslLinePerfCurr1DayVturErrFreeBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr1DayVturErrFreeBits.setStatus("current")
_VdslLinePerfCurrVtucMinEftr_Type = Counter32
_VdslLinePerfCurrVtucMinEftr_Object = MibTableColumn
vdslLinePerfCurrVtucMinEftr = _VdslLinePerfCurrVtucMinEftr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 49),
    _VdslLinePerfCurrVtucMinEftr_Type()
)
vdslLinePerfCurrVtucMinEftr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurrVtucMinEftr.setStatus("current")
_VdslLinePerfCurrVturMinEftr_Type = Counter32
_VdslLinePerfCurrVturMinEftr_Object = MibTableColumn
vdslLinePerfCurrVturMinEftr = _VdslLinePerfCurrVturMinEftr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 50),
    _VdslLinePerfCurrVturMinEftr_Type()
)
vdslLinePerfCurrVturMinEftr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurrVturMinEftr.setStatus("current")
_VdslLinePerfCurr15MinVtucMinEftr_Type = Counter32
_VdslLinePerfCurr15MinVtucMinEftr_Object = MibTableColumn
vdslLinePerfCurr15MinVtucMinEftr = _VdslLinePerfCurr15MinVtucMinEftr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 51),
    _VdslLinePerfCurr15MinVtucMinEftr_Type()
)
vdslLinePerfCurr15MinVtucMinEftr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr15MinVtucMinEftr.setStatus("current")
_VdslLinePerfCurr15MinVturMinEftr_Type = Counter32
_VdslLinePerfCurr15MinVturMinEftr_Object = MibTableColumn
vdslLinePerfCurr15MinVturMinEftr = _VdslLinePerfCurr15MinVturMinEftr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 52),
    _VdslLinePerfCurr15MinVturMinEftr_Type()
)
vdslLinePerfCurr15MinVturMinEftr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr15MinVturMinEftr.setStatus("current")
_VdslLinePerfCurr1DayVtucMinEftr_Type = Counter32
_VdslLinePerfCurr1DayVtucMinEftr_Object = MibTableColumn
vdslLinePerfCurr1DayVtucMinEftr = _VdslLinePerfCurr1DayVtucMinEftr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 53),
    _VdslLinePerfCurr1DayVtucMinEftr_Type()
)
vdslLinePerfCurr1DayVtucMinEftr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr1DayVtucMinEftr.setStatus("current")
_VdslLinePerfCurr1DayVturMinEftr_Type = Counter32
_VdslLinePerfCurr1DayVturMinEftr_Object = MibTableColumn
vdslLinePerfCurr1DayVturMinEftr = _VdslLinePerfCurr1DayVturMinEftr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 7, 1, 54),
    _VdslLinePerfCurr1DayVturMinEftr_Type()
)
vdslLinePerfCurr1DayVturMinEftr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfCurr1DayVturMinEftr.setStatus("current")
_VdslLinePerfHist15MinTable_Object = MibTable
vdslLinePerfHist15MinTable = _VdslLinePerfHist15MinTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 8)
)
if mibBuilder.loadTexts:
    vdslLinePerfHist15MinTable.setStatus("current")
_VdslLinePerfHist15MinEntry_Object = MibTableRow
vdslLinePerfHist15MinEntry = _VdslLinePerfHist15MinEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 8, 1)
)
vdslLinePerfHist15MinEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    vdslLinePerfHist15MinEntry.setStatus("current")
_VdslLinePerfHist15MInmVtucEqInp_Type = Counter32
_VdslLinePerfHist15MInmVtucEqInp_Object = MibTableColumn
vdslLinePerfHist15MInmVtucEqInp = _VdslLinePerfHist15MInmVtucEqInp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 8, 1, 1),
    _VdslLinePerfHist15MInmVtucEqInp_Type()
)
vdslLinePerfHist15MInmVtucEqInp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist15MInmVtucEqInp.setStatus("current")
_VdslLinePerfHist15MInmVturEqInp_Type = Counter32
_VdslLinePerfHist15MInmVturEqInp_Object = MibTableColumn
vdslLinePerfHist15MInmVturEqInp = _VdslLinePerfHist15MInmVturEqInp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 8, 1, 2),
    _VdslLinePerfHist15MInmVturEqInp_Type()
)
vdslLinePerfHist15MInmVturEqInp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist15MInmVturEqInp.setStatus("current")
_VdslLinePerfHist15MInmVtucIAT_Type = Counter32
_VdslLinePerfHist15MInmVtucIAT_Object = MibTableColumn
vdslLinePerfHist15MInmVtucIAT = _VdslLinePerfHist15MInmVtucIAT_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 8, 1, 3),
    _VdslLinePerfHist15MInmVtucIAT_Type()
)
vdslLinePerfHist15MInmVtucIAT.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist15MInmVtucIAT.setStatus("current")
_VdslLinePerfHist15MInmVturIAT_Type = Counter32
_VdslLinePerfHist15MInmVturIAT_Object = MibTableColumn
vdslLinePerfHist15MInmVturIAT = _VdslLinePerfHist15MInmVturIAT_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 8, 1, 4),
    _VdslLinePerfHist15MInmVturIAT_Type()
)
vdslLinePerfHist15MInmVturIAT.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist15MInmVturIAT.setStatus("current")
_VdslLinePerfHist15MInmVtucME_Type = Counter32
_VdslLinePerfHist15MInmVtucME_Object = MibTableColumn
vdslLinePerfHist15MInmVtucME = _VdslLinePerfHist15MInmVtucME_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 8, 1, 5),
    _VdslLinePerfHist15MInmVtucME_Type()
)
vdslLinePerfHist15MInmVtucME.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist15MInmVtucME.setStatus("current")
_VdslLinePerfHist15MInmVturME_Type = Counter32
_VdslLinePerfHist15MInmVturME_Object = MibTableColumn
vdslLinePerfHist15MInmVturME = _VdslLinePerfHist15MInmVturME_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 8, 1, 6),
    _VdslLinePerfHist15MInmVturME_Type()
)
vdslLinePerfHist15MInmVturME.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist15MInmVturME.setStatus("current")
_VdslLinePerfHist15MVtucRtx_Type = Unsigned32
_VdslLinePerfHist15MVtucRtx_Object = MibTableColumn
vdslLinePerfHist15MVtucRtx = _VdslLinePerfHist15MVtucRtx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 8, 1, 7),
    _VdslLinePerfHist15MVtucRtx_Type()
)
vdslLinePerfHist15MVtucRtx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist15MVtucRtx.setStatus("current")
_VdslLinePerfHist15MVturRtx_Type = Unsigned32
_VdslLinePerfHist15MVturRtx_Object = MibTableColumn
vdslLinePerfHist15MVturRtx = _VdslLinePerfHist15MVturRtx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 8, 1, 8),
    _VdslLinePerfHist15MVturRtx_Type()
)
vdslLinePerfHist15MVturRtx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist15MVturRtx.setStatus("current")
_VdslLinePerfHist15MVtucRtxCorrected_Type = Unsigned32
_VdslLinePerfHist15MVtucRtxCorrected_Object = MibTableColumn
vdslLinePerfHist15MVtucRtxCorrected = _VdslLinePerfHist15MVtucRtxCorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 8, 1, 9),
    _VdslLinePerfHist15MVtucRtxCorrected_Type()
)
vdslLinePerfHist15MVtucRtxCorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist15MVtucRtxCorrected.setStatus("current")
_VdslLinePerfHist15MVturRtxCorrected_Type = Unsigned32
_VdslLinePerfHist15MVturRtxCorrected_Object = MibTableColumn
vdslLinePerfHist15MVturRtxCorrected = _VdslLinePerfHist15MVturRtxCorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 8, 1, 10),
    _VdslLinePerfHist15MVturRtxCorrected_Type()
)
vdslLinePerfHist15MVturRtxCorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist15MVturRtxCorrected.setStatus("current")
_VdslLinePerfHist15MVtucRtxUncorrected_Type = Unsigned32
_VdslLinePerfHist15MVtucRtxUncorrected_Object = MibTableColumn
vdslLinePerfHist15MVtucRtxUncorrected = _VdslLinePerfHist15MVtucRtxUncorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 8, 1, 11),
    _VdslLinePerfHist15MVtucRtxUncorrected_Type()
)
vdslLinePerfHist15MVtucRtxUncorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist15MVtucRtxUncorrected.setStatus("current")
_VdslLinePerfHist15MVturRtxUncorrected_Type = Unsigned32
_VdslLinePerfHist15MVturRtxUncorrected_Object = MibTableColumn
vdslLinePerfHist15MVturRtxUncorrected = _VdslLinePerfHist15MVturRtxUncorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 8, 1, 12),
    _VdslLinePerfHist15MVturRtxUncorrected_Type()
)
vdslLinePerfHist15MVturRtxUncorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist15MVturRtxUncorrected.setStatus("current")
_VdslLinePerfHist15MVtucLEFTRs_Type = Unsigned32
_VdslLinePerfHist15MVtucLEFTRs_Object = MibTableColumn
vdslLinePerfHist15MVtucLEFTRs = _VdslLinePerfHist15MVtucLEFTRs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 8, 1, 13),
    _VdslLinePerfHist15MVtucLEFTRs_Type()
)
vdslLinePerfHist15MVtucLEFTRs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist15MVtucLEFTRs.setStatus("current")
_VdslLinePerfHist15MVturLEFTRs_Type = Unsigned32
_VdslLinePerfHist15MVturLEFTRs_Object = MibTableColumn
vdslLinePerfHist15MVturLEFTRs = _VdslLinePerfHist15MVturLEFTRs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 8, 1, 14),
    _VdslLinePerfHist15MVturLEFTRs_Type()
)
vdslLinePerfHist15MVturLEFTRs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist15MVturLEFTRs.setStatus("current")
_VdslLinePerfHist15MVtucErrFreeBits_Type = Unsigned32
_VdslLinePerfHist15MVtucErrFreeBits_Object = MibTableColumn
vdslLinePerfHist15MVtucErrFreeBits = _VdslLinePerfHist15MVtucErrFreeBits_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 8, 1, 15),
    _VdslLinePerfHist15MVtucErrFreeBits_Type()
)
vdslLinePerfHist15MVtucErrFreeBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist15MVtucErrFreeBits.setStatus("current")
_VdslLinePerfHist15MVturErrFreeBits_Type = Unsigned32
_VdslLinePerfHist15MVturErrFreeBits_Object = MibTableColumn
vdslLinePerfHist15MVturErrFreeBits = _VdslLinePerfHist15MVturErrFreeBits_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 8, 1, 16),
    _VdslLinePerfHist15MVturErrFreeBits_Type()
)
vdslLinePerfHist15MVturErrFreeBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist15MVturErrFreeBits.setStatus("current")
_VdslLinePerfHist15MVtucMinEftr_Type = Counter32
_VdslLinePerfHist15MVtucMinEftr_Object = MibTableColumn
vdslLinePerfHist15MVtucMinEftr = _VdslLinePerfHist15MVtucMinEftr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 8, 1, 17),
    _VdslLinePerfHist15MVtucMinEftr_Type()
)
vdslLinePerfHist15MVtucMinEftr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist15MVtucMinEftr.setStatus("current")
_VdslLinePerfHist15MVturMinEftr_Type = Counter32
_VdslLinePerfHist15MVturMinEftr_Object = MibTableColumn
vdslLinePerfHist15MVturMinEftr = _VdslLinePerfHist15MVturMinEftr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 8, 1, 18),
    _VdslLinePerfHist15MVturMinEftr_Type()
)
vdslLinePerfHist15MVturMinEftr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist15MVturMinEftr.setStatus("current")
_VdslLinePerfHist1DayTable_Object = MibTable
vdslLinePerfHist1DayTable = _VdslLinePerfHist1DayTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 9)
)
if mibBuilder.loadTexts:
    vdslLinePerfHist1DayTable.setStatus("current")
_VdslLinePerfHist1DayEntry_Object = MibTableRow
vdslLinePerfHist1DayEntry = _VdslLinePerfHist1DayEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 9, 1)
)
vdslLinePerfHist1DayEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    vdslLinePerfHist1DayEntry.setStatus("current")
_VdslLinePerfHist1DayInmVtucEqInp_Type = Counter32
_VdslLinePerfHist1DayInmVtucEqInp_Object = MibTableColumn
vdslLinePerfHist1DayInmVtucEqInp = _VdslLinePerfHist1DayInmVtucEqInp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 9, 1, 1),
    _VdslLinePerfHist1DayInmVtucEqInp_Type()
)
vdslLinePerfHist1DayInmVtucEqInp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist1DayInmVtucEqInp.setStatus("current")
_VdslLinePerfHist1DayInmVturEqInp_Type = Counter32
_VdslLinePerfHist1DayInmVturEqInp_Object = MibTableColumn
vdslLinePerfHist1DayInmVturEqInp = _VdslLinePerfHist1DayInmVturEqInp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 9, 1, 2),
    _VdslLinePerfHist1DayInmVturEqInp_Type()
)
vdslLinePerfHist1DayInmVturEqInp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist1DayInmVturEqInp.setStatus("current")
_VdslLinePerfHist1DayInmVtucIAT_Type = Counter32
_VdslLinePerfHist1DayInmVtucIAT_Object = MibTableColumn
vdslLinePerfHist1DayInmVtucIAT = _VdslLinePerfHist1DayInmVtucIAT_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 9, 1, 3),
    _VdslLinePerfHist1DayInmVtucIAT_Type()
)
vdslLinePerfHist1DayInmVtucIAT.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist1DayInmVtucIAT.setStatus("current")
_VdslLinePerfHist1DayInmVturIAT_Type = Counter32
_VdslLinePerfHist1DayInmVturIAT_Object = MibTableColumn
vdslLinePerfHist1DayInmVturIAT = _VdslLinePerfHist1DayInmVturIAT_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 9, 1, 4),
    _VdslLinePerfHist1DayInmVturIAT_Type()
)
vdslLinePerfHist1DayInmVturIAT.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist1DayInmVturIAT.setStatus("current")
_VdslLinePerfHist1DayInmVtucME_Type = Counter32
_VdslLinePerfHist1DayInmVtucME_Object = MibTableColumn
vdslLinePerfHist1DayInmVtucME = _VdslLinePerfHist1DayInmVtucME_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 9, 1, 5),
    _VdslLinePerfHist1DayInmVtucME_Type()
)
vdslLinePerfHist1DayInmVtucME.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist1DayInmVtucME.setStatus("current")
_VdslLinePerfHist1DayInmVturME_Type = Counter32
_VdslLinePerfHist1DayInmVturME_Object = MibTableColumn
vdslLinePerfHist1DayInmVturME = _VdslLinePerfHist1DayInmVturME_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 9, 1, 6),
    _VdslLinePerfHist1DayInmVturME_Type()
)
vdslLinePerfHist1DayInmVturME.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist1DayInmVturME.setStatus("current")
_VdslLinePerfHist1DayVtucRtx_Type = Unsigned32
_VdslLinePerfHist1DayVtucRtx_Object = MibTableColumn
vdslLinePerfHist1DayVtucRtx = _VdslLinePerfHist1DayVtucRtx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 9, 1, 7),
    _VdslLinePerfHist1DayVtucRtx_Type()
)
vdslLinePerfHist1DayVtucRtx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist1DayVtucRtx.setStatus("current")
_VdslLinePerfHist1DayVturRtx_Type = Unsigned32
_VdslLinePerfHist1DayVturRtx_Object = MibTableColumn
vdslLinePerfHist1DayVturRtx = _VdslLinePerfHist1DayVturRtx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 9, 1, 8),
    _VdslLinePerfHist1DayVturRtx_Type()
)
vdslLinePerfHist1DayVturRtx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist1DayVturRtx.setStatus("current")
_VdslLinePerfHist1DayVtucRtxCorrected_Type = Unsigned32
_VdslLinePerfHist1DayVtucRtxCorrected_Object = MibTableColumn
vdslLinePerfHist1DayVtucRtxCorrected = _VdslLinePerfHist1DayVtucRtxCorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 9, 1, 9),
    _VdslLinePerfHist1DayVtucRtxCorrected_Type()
)
vdslLinePerfHist1DayVtucRtxCorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist1DayVtucRtxCorrected.setStatus("current")
_VdslLinePerfHist1DayVturRtxCorrected_Type = Unsigned32
_VdslLinePerfHist1DayVturRtxCorrected_Object = MibTableColumn
vdslLinePerfHist1DayVturRtxCorrected = _VdslLinePerfHist1DayVturRtxCorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 9, 1, 10),
    _VdslLinePerfHist1DayVturRtxCorrected_Type()
)
vdslLinePerfHist1DayVturRtxCorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist1DayVturRtxCorrected.setStatus("current")
_VdslLinePerfHist1DayVtucRtxUncorrected_Type = Unsigned32
_VdslLinePerfHist1DayVtucRtxUncorrected_Object = MibTableColumn
vdslLinePerfHist1DayVtucRtxUncorrected = _VdslLinePerfHist1DayVtucRtxUncorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 9, 1, 11),
    _VdslLinePerfHist1DayVtucRtxUncorrected_Type()
)
vdslLinePerfHist1DayVtucRtxUncorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist1DayVtucRtxUncorrected.setStatus("current")
_VdslLinePerfHist1DayVturRtxUncorrected_Type = Unsigned32
_VdslLinePerfHist1DayVturRtxUncorrected_Object = MibTableColumn
vdslLinePerfHist1DayVturRtxUncorrected = _VdslLinePerfHist1DayVturRtxUncorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 9, 1, 12),
    _VdslLinePerfHist1DayVturRtxUncorrected_Type()
)
vdslLinePerfHist1DayVturRtxUncorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist1DayVturRtxUncorrected.setStatus("current")
_VdslLinePerfHist1DayVtucLEFTRs_Type = Unsigned32
_VdslLinePerfHist1DayVtucLEFTRs_Object = MibTableColumn
vdslLinePerfHist1DayVtucLEFTRs = _VdslLinePerfHist1DayVtucLEFTRs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 9, 1, 13),
    _VdslLinePerfHist1DayVtucLEFTRs_Type()
)
vdslLinePerfHist1DayVtucLEFTRs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist1DayVtucLEFTRs.setStatus("current")
_VdslLinePerfHist1DayVturLEFTRs_Type = Unsigned32
_VdslLinePerfHist1DayVturLEFTRs_Object = MibTableColumn
vdslLinePerfHist1DayVturLEFTRs = _VdslLinePerfHist1DayVturLEFTRs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 9, 1, 14),
    _VdslLinePerfHist1DayVturLEFTRs_Type()
)
vdslLinePerfHist1DayVturLEFTRs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist1DayVturLEFTRs.setStatus("current")
_VdslLinePerfHist1DayVtucErrFreeBits_Type = Unsigned32
_VdslLinePerfHist1DayVtucErrFreeBits_Object = MibTableColumn
vdslLinePerfHist1DayVtucErrFreeBits = _VdslLinePerfHist1DayVtucErrFreeBits_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 9, 1, 15),
    _VdslLinePerfHist1DayVtucErrFreeBits_Type()
)
vdslLinePerfHist1DayVtucErrFreeBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist1DayVtucErrFreeBits.setStatus("current")
_VdslLinePerfHist1DayVturErrFreeBits_Type = Unsigned32
_VdslLinePerfHist1DayVturErrFreeBits_Object = MibTableColumn
vdslLinePerfHist1DayVturErrFreeBits = _VdslLinePerfHist1DayVturErrFreeBits_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 9, 1, 16),
    _VdslLinePerfHist1DayVturErrFreeBits_Type()
)
vdslLinePerfHist1DayVturErrFreeBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist1DayVturErrFreeBits.setStatus("current")
_VdslLinePerfHist1DayVtucMinEftr_Type = Counter32
_VdslLinePerfHist1DayVtucMinEftr_Object = MibTableColumn
vdslLinePerfHist1DayVtucMinEftr = _VdslLinePerfHist1DayVtucMinEftr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 9, 1, 17),
    _VdslLinePerfHist1DayVtucMinEftr_Type()
)
vdslLinePerfHist1DayVtucMinEftr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist1DayVtucMinEftr.setStatus("current")
_VdslLinePerfHist1DayVturMinEftr_Type = Counter32
_VdslLinePerfHist1DayVturMinEftr_Object = MibTableColumn
vdslLinePerfHist1DayVturMinEftr = _VdslLinePerfHist1DayVturMinEftr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 9, 1, 18),
    _VdslLinePerfHist1DayVturMinEftr_Type()
)
vdslLinePerfHist1DayVturMinEftr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslLinePerfHist1DayVturMinEftr.setStatus("current")
_VdslChanStatsTable_Object = MibTable
vdslChanStatsTable = _VdslChanStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 10)
)
if mibBuilder.loadTexts:
    vdslChanStatsTable.setStatus("current")
_VdslChanStatsEntry_Object = MibTableRow
vdslChanStatsEntry = _VdslChanStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 10, 1)
)
vdslChanStatsEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    vdslChanStatsEntry.setStatus("current")
_VdslChanStatsActualRaMode_Type = Xdsl2StatusActualRaMode
_VdslChanStatsActualRaMode_Object = MibTableColumn
vdslChanStatsActualRaMode = _VdslChanStatsActualRaMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 10, 1, 2),
    _VdslChanStatsActualRaMode_Type()
)
vdslChanStatsActualRaMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslChanStatsActualRaMode.setStatus("current")
_VdslChanStatsRetransmissionMode_Type = Xdsl2StatusRtxMode
_VdslChanStatsRetransmissionMode_Object = MibTableColumn
vdslChanStatsRetransmissionMode = _VdslChanStatsRetransmissionMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 10, 1, 3),
    _VdslChanStatsRetransmissionMode_Type()
)
vdslChanStatsRetransmissionMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslChanStatsRetransmissionMode.setStatus("current")
_VdslChanStatsRetransmissionOverhead_Type = Unsigned32
_VdslChanStatsRetransmissionOverhead_Object = MibTableColumn
vdslChanStatsRetransmissionOverhead = _VdslChanStatsRetransmissionOverhead_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 8, 10, 1, 4),
    _VdslChanStatsRetransmissionOverhead_Type()
)
vdslChanStatsRetransmissionOverhead.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslChanStatsRetransmissionOverhead.setStatus("current")
if mibBuilder.loadTexts:
    vdslChanStatsRetransmissionOverhead.setUnits("kbps")
_PaepvcStats_ObjectIdentity = ObjectIdentity
paepvcStats = _PaepvcStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 9)
)
_PaepvcSessionTable_Object = MibTable
paepvcSessionTable = _PaepvcSessionTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 9, 1)
)
if mibBuilder.loadTexts:
    paepvcSessionTable.setStatus("current")
_PaepvcSessionEntry_Object = MibTableRow
paepvcSessionEntry = _PaepvcSessionEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 9, 1, 1)
)
paepvcSessionEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "paepvcSessionVpi"),
    (0, "ZYXEL-IES5000-MIB", "paepvcSessionVci"),
)
if mibBuilder.loadTexts:
    paepvcSessionEntry.setStatus("current")
_PaepvcSessionVpi_Type = Integer32
_PaepvcSessionVpi_Object = MibTableColumn
paepvcSessionVpi = _PaepvcSessionVpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 9, 1, 1, 1),
    _PaepvcSessionVpi_Type()
)
paepvcSessionVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    paepvcSessionVpi.setStatus("current")
_PaepvcSessionVci_Type = Integer32
_PaepvcSessionVci_Object = MibTableColumn
paepvcSessionVci = _PaepvcSessionVci_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 9, 1, 1, 2),
    _PaepvcSessionVci_Type()
)
paepvcSessionVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    paepvcSessionVci.setStatus("current")


class _PaepvcSessionState_Type(Integer32):
    """Custom type paepvcSessionState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("down", 1),
          ("pppoe", 2),
          ("ppp", 3),
          ("up", 4))
    )


_PaepvcSessionState_Type.__name__ = "Integer32"
_PaepvcSessionState_Object = MibTableColumn
paepvcSessionState = _PaepvcSessionState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 9, 1, 1, 3),
    _PaepvcSessionState_Type()
)
paepvcSessionState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    paepvcSessionState.setStatus("current")
_PaepvcSessionId_Type = Integer32
_PaepvcSessionId_Object = MibTableColumn
paepvcSessionId = _PaepvcSessionId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 9, 1, 1, 4),
    _PaepvcSessionId_Type()
)
paepvcSessionId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    paepvcSessionId.setStatus("current")
_PaepvcSessionUpTime_Type = Unsigned32
_PaepvcSessionUpTime_Object = MibTableColumn
paepvcSessionUpTime = _PaepvcSessionUpTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 9, 1, 1, 5),
    _PaepvcSessionUpTime_Type()
)
paepvcSessionUpTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    paepvcSessionUpTime.setStatus("current")
if mibBuilder.loadTexts:
    paepvcSessionUpTime.setUnits("second")
_PaepvcSessionAcName_Type = DisplayString
_PaepvcSessionAcName_Object = MibTableColumn
paepvcSessionAcName = _PaepvcSessionAcName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 9, 1, 1, 6),
    _PaepvcSessionAcName_Type()
)
paepvcSessionAcName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    paepvcSessionAcName.setStatus("current")
_PaepvcSessionSrvcName_Type = DisplayString
_PaepvcSessionSrvcName_Object = MibTableColumn
paepvcSessionSrvcName = _PaepvcSessionSrvcName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 9, 1, 1, 7),
    _PaepvcSessionSrvcName_Type()
)
paepvcSessionSrvcName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    paepvcSessionSrvcName.setStatus("current")
_PaepvcCountTable_Object = MibTable
paepvcCountTable = _PaepvcCountTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 9, 2)
)
if mibBuilder.loadTexts:
    paepvcCountTable.setStatus("current")
_PaepvcCountEntry_Object = MibTableRow
paepvcCountEntry = _PaepvcCountEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 9, 2, 1)
)
paepvcCountEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "paepvcCountVpi"),
    (0, "ZYXEL-IES5000-MIB", "paepvcCountVci"),
)
if mibBuilder.loadTexts:
    paepvcCountEntry.setStatus("current")
_PaepvcCountVpi_Type = Integer32
_PaepvcCountVpi_Object = MibTableColumn
paepvcCountVpi = _PaepvcCountVpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 9, 2, 1, 1),
    _PaepvcCountVpi_Type()
)
paepvcCountVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    paepvcCountVpi.setStatus("current")
_PaepvcCountVci_Type = Integer32
_PaepvcCountVci_Object = MibTableColumn
paepvcCountVci = _PaepvcCountVci_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 9, 2, 1, 2),
    _PaepvcCountVci_Type()
)
paepvcCountVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    paepvcCountVci.setStatus("current")
_PaepvcCountPppLcpCfgReqRx_Type = Unsigned32
_PaepvcCountPppLcpCfgReqRx_Object = MibTableColumn
paepvcCountPppLcpCfgReqRx = _PaepvcCountPppLcpCfgReqRx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 9, 2, 1, 3),
    _PaepvcCountPppLcpCfgReqRx_Type()
)
paepvcCountPppLcpCfgReqRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    paepvcCountPppLcpCfgReqRx.setStatus("current")
_PaepvcCountPppLcpEchoReqRx_Type = Unsigned32
_PaepvcCountPppLcpEchoReqRx_Object = MibTableColumn
paepvcCountPppLcpEchoReqRx = _PaepvcCountPppLcpEchoReqRx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 9, 2, 1, 4),
    _PaepvcCountPppLcpEchoReqRx_Type()
)
paepvcCountPppLcpEchoReqRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    paepvcCountPppLcpEchoReqRx.setStatus("current")
_PaepvcCountPppLcpEchoReplyRx_Type = Unsigned32
_PaepvcCountPppLcpEchoReplyRx_Object = MibTableColumn
paepvcCountPppLcpEchoReplyRx = _PaepvcCountPppLcpEchoReplyRx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 9, 2, 1, 5),
    _PaepvcCountPppLcpEchoReplyRx_Type()
)
paepvcCountPppLcpEchoReplyRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    paepvcCountPppLcpEchoReplyRx.setStatus("current")
_PaepvcCountPadiTx_Type = Unsigned32
_PaepvcCountPadiTx_Object = MibTableColumn
paepvcCountPadiTx = _PaepvcCountPadiTx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 9, 2, 1, 6),
    _PaepvcCountPadiTx_Type()
)
paepvcCountPadiTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    paepvcCountPadiTx.setStatus("current")
_PaepvcCountPadoRx_Type = Unsigned32
_PaepvcCountPadoRx_Object = MibTableColumn
paepvcCountPadoRx = _PaepvcCountPadoRx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 9, 2, 1, 7),
    _PaepvcCountPadoRx_Type()
)
paepvcCountPadoRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    paepvcCountPadoRx.setStatus("current")
_PaepvcCountPadrTx_Type = Unsigned32
_PaepvcCountPadrTx_Object = MibTableColumn
paepvcCountPadrTx = _PaepvcCountPadrTx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 9, 2, 1, 8),
    _PaepvcCountPadrTx_Type()
)
paepvcCountPadrTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    paepvcCountPadrTx.setStatus("current")
_PaepvcCountPadsRx_Type = Unsigned32
_PaepvcCountPadsRx_Object = MibTableColumn
paepvcCountPadsRx = _PaepvcCountPadsRx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 9, 2, 1, 9),
    _PaepvcCountPadsRx_Type()
)
paepvcCountPadsRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    paepvcCountPadsRx.setStatus("current")
_PaepvcCountPadtTx_Type = Unsigned32
_PaepvcCountPadtTx_Object = MibTableColumn
paepvcCountPadtTx = _PaepvcCountPadtTx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 9, 2, 1, 10),
    _PaepvcCountPadtTx_Type()
)
paepvcCountPadtTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    paepvcCountPadtTx.setStatus("current")
_PaepvcCountPadtRx_Type = Unsigned32
_PaepvcCountPadtRx_Object = MibTableColumn
paepvcCountPadtRx = _PaepvcCountPadtRx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 9, 2, 1, 11),
    _PaepvcCountPadtRx_Type()
)
paepvcCountPadtRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    paepvcCountPadtRx.setStatus("current")
_PaepvcCountSrvcnameErrRx_Type = Unsigned32
_PaepvcCountSrvcnameErrRx_Object = MibTableColumn
paepvcCountSrvcnameErrRx = _PaepvcCountSrvcnameErrRx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 9, 2, 1, 12),
    _PaepvcCountSrvcnameErrRx_Type()
)
paepvcCountSrvcnameErrRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    paepvcCountSrvcnameErrRx.setStatus("current")
_PaepvcCountAcnameErrRx_Type = Unsigned32
_PaepvcCountAcnameErrRx_Object = MibTableColumn
paepvcCountAcnameErrRx = _PaepvcCountAcnameErrRx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 9, 2, 1, 13),
    _PaepvcCountAcnameErrRx_Type()
)
paepvcCountAcnameErrRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    paepvcCountAcnameErrRx.setStatus("current")
_PaepvcCountGenericErrTx_Type = Unsigned32
_PaepvcCountGenericErrTx_Object = MibTableColumn
paepvcCountGenericErrTx = _PaepvcCountGenericErrTx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 9, 2, 1, 14),
    _PaepvcCountGenericErrTx_Type()
)
paepvcCountGenericErrTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    paepvcCountGenericErrTx.setStatus("current")
_PaepvcCountGenericErrRx_Type = Unsigned32
_PaepvcCountGenericErrRx_Object = MibTableColumn
paepvcCountGenericErrRx = _PaepvcCountGenericErrRx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 9, 2, 1, 15),
    _PaepvcCountGenericErrRx_Type()
)
paepvcCountGenericErrRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    paepvcCountGenericErrRx.setStatus("current")
_VlanMacStats_ObjectIdentity = ObjectIdentity
vlanMacStats = _VlanMacStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 10)
)
_VlanMacDisplayTarget_Type = Integer32
_VlanMacDisplayTarget_Object = MibScalar
vlanMacDisplayTarget = _VlanMacDisplayTarget_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 10, 1),
    _VlanMacDisplayTarget_Type()
)
vlanMacDisplayTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanMacDisplayTarget.setStatus("current")
_VlanMacDisplayVid_Type = VlanIndex
_VlanMacDisplayVid_Object = MibScalar
vlanMacDisplayVid = _VlanMacDisplayVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 10, 2),
    _VlanMacDisplayVid_Type()
)
vlanMacDisplayVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanMacDisplayVid.setStatus("current")
_VlanMacTable_Object = MibTable
vlanMacTable = _VlanMacTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 10, 3)
)
if mibBuilder.loadTexts:
    vlanMacTable.setStatus("current")
_VlanMacEntry_Object = MibTableRow
vlanMacEntry = _VlanMacEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 10, 3, 1)
)
vlanMacEntry.setIndexNames(
    (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"),
    (0, "ZYXEL-IES5000-MIB", "vlanMacAddress"),
)
if mibBuilder.loadTexts:
    vlanMacEntry.setStatus("current")
_VlanMacAddress_Type = MacAddress
_VlanMacAddress_Object = MibTableColumn
vlanMacAddress = _VlanMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 10, 3, 1, 1),
    _VlanMacAddress_Type()
)
vlanMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanMacAddress.setStatus("current")
_VlanMacPort_Type = Integer32
_VlanMacPort_Object = MibTableColumn
vlanMacPort = _VlanMacPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 10, 3, 1, 2),
    _VlanMacPort_Type()
)
vlanMacPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanMacPort.setStatus("current")


class _VlanMacStatus_Type(Integer32):
    """Custom type vlanMacStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("invalid", 2),
          ("learned", 3),
          ("self", 4),
          ("mgmt", 5))
    )


_VlanMacStatus_Type.__name__ = "Integer32"
_VlanMacStatus_Object = MibTableColumn
vlanMacStatus = _VlanMacStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 10, 3, 1, 3),
    _VlanMacStatus_Type()
)
vlanMacStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanMacStatus.setStatus("current")
_IpbpvcStats_ObjectIdentity = ObjectIdentity
ipbpvcStats = _IpbpvcStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 11)
)
_ArpproxyTable_Object = MibTable
arpproxyTable = _ArpproxyTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 11, 1)
)
if mibBuilder.loadTexts:
    arpproxyTable.setStatus("current")
_ArpproxyEntry_Object = MibTableRow
arpproxyEntry = _ArpproxyEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 11, 1, 1)
)
arpproxyEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "ipbpvcDomainName"),
    (0, "ZYXEL-IES5000-MIB", "arpproxyIp"),
)
if mibBuilder.loadTexts:
    arpproxyEntry.setStatus("current")
_ArpproxyIp_Type = IpAddress
_ArpproxyIp_Object = MibTableColumn
arpproxyIp = _ArpproxyIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 11, 1, 1, 1),
    _ArpproxyIp_Type()
)
arpproxyIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpproxyIp.setStatus("current")
_ArpproxyMac_Type = MacAddress
_ArpproxyMac_Object = MibTableColumn
arpproxyMac = _ArpproxyMac_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 11, 1, 1, 2),
    _ArpproxyMac_Type()
)
arpproxyMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpproxyMac.setStatus("current")
_ArpproxyIfIndex_Type = Integer32
_ArpproxyIfIndex_Object = MibTableColumn
arpproxyIfIndex = _ArpproxyIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 11, 1, 1, 3),
    _ArpproxyIfIndex_Type()
)
arpproxyIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpproxyIfIndex.setStatus("current")
_ArpproxyVpi_Type = Integer32
_ArpproxyVpi_Object = MibTableColumn
arpproxyVpi = _ArpproxyVpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 11, 1, 1, 4),
    _ArpproxyVpi_Type()
)
arpproxyVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpproxyVpi.setStatus("current")
_ArpproxyVci_Type = Integer32
_ArpproxyVci_Object = MibTableColumn
arpproxyVci = _ArpproxyVci_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 11, 1, 1, 5),
    _ArpproxyVci_Type()
)
arpproxyVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpproxyVci.setStatus("current")
_ArpproxyInterfaceIp_Type = IpAddress
_ArpproxyInterfaceIp_Object = MibTableColumn
arpproxyInterfaceIp = _ArpproxyInterfaceIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 11, 1, 1, 6),
    _ArpproxyInterfaceIp_Type()
)
arpproxyInterfaceIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpproxyInterfaceIp.setStatus("current")
_ArpproxyInterfaceMask_Type = Integer32
_ArpproxyInterfaceMask_Object = MibTableColumn
arpproxyInterfaceMask = _ArpproxyInterfaceMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 11, 1, 1, 7),
    _ArpproxyInterfaceMask_Type()
)
arpproxyInterfaceMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpproxyInterfaceMask.setStatus("current")
_ArpproxyInterfaceVid_Type = VlanIndex
_ArpproxyInterfaceVid_Object = MibTableColumn
arpproxyInterfaceVid = _ArpproxyInterfaceVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 11, 1, 1, 8),
    _ArpproxyInterfaceVid_Type()
)
arpproxyInterfaceVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpproxyInterfaceVid.setStatus("current")


class _ArpproxyDhcpIp_Type(Integer32):
    """Custom type arpproxyDhcpIp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_ArpproxyDhcpIp_Type.__name__ = "Integer32"
_ArpproxyDhcpIp_Object = MibTableColumn
arpproxyDhcpIp = _ArpproxyDhcpIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 11, 1, 1, 9),
    _ArpproxyDhcpIp_Type()
)
arpproxyDhcpIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpproxyDhcpIp.setStatus("current")


class _ArpproxyType_Type(Integer32):
    """Custom type arpproxyType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("upstream", 1),
          ("downstream", 2))
    )


_ArpproxyType_Type.__name__ = "Integer32"
_ArpproxyType_Object = MibTableColumn
arpproxyType = _ArpproxyType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 11, 1, 1, 10),
    _ArpproxyType_Type()
)
arpproxyType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpproxyType.setStatus("current")
_IpbpvcIfDynamicTable_Object = MibTable
ipbpvcIfDynamicTable = _IpbpvcIfDynamicTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 11, 2)
)
if mibBuilder.loadTexts:
    ipbpvcIfDynamicTable.setStatus("current")
_IpbpvcIfDynamicEntry_Object = MibTableRow
ipbpvcIfDynamicEntry = _IpbpvcIfDynamicEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 11, 2, 1)
)
ipbpvcIfDynamicEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "ipbpvcDomainName"),
    (0, "ZYXEL-IES5000-MIB", "ipbpvcIfDynamicIp"),
    (0, "ZYXEL-IES5000-MIB", "ipbpvcIfDynamicMask"),
    (0, "ZYXEL-IES5000-MIB", "ipbpvcDomainVlanId"),
)
if mibBuilder.loadTexts:
    ipbpvcIfDynamicEntry.setStatus("current")
_IpbpvcIfDynamicIp_Type = IpAddress
_IpbpvcIfDynamicIp_Object = MibTableColumn
ipbpvcIfDynamicIp = _IpbpvcIfDynamicIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 11, 2, 1, 1),
    _IpbpvcIfDynamicIp_Type()
)
ipbpvcIfDynamicIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipbpvcIfDynamicIp.setStatus("current")
_IpbpvcIfDynamicMask_Type = Integer32
_IpbpvcIfDynamicMask_Object = MibTableColumn
ipbpvcIfDynamicMask = _IpbpvcIfDynamicMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 11, 2, 1, 2),
    _IpbpvcIfDynamicMask_Type()
)
ipbpvcIfDynamicMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipbpvcIfDynamicMask.setStatus("current")
_IpbpvcIfDynamicIfIndex_Type = Integer32
_IpbpvcIfDynamicIfIndex_Object = MibTableColumn
ipbpvcIfDynamicIfIndex = _IpbpvcIfDynamicIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 11, 2, 1, 3),
    _IpbpvcIfDynamicIfIndex_Type()
)
ipbpvcIfDynamicIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipbpvcIfDynamicIfIndex.setStatus("current")
_IpbpvcIfDynamicVpi_Type = Integer32
_IpbpvcIfDynamicVpi_Object = MibTableColumn
ipbpvcIfDynamicVpi = _IpbpvcIfDynamicVpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 11, 2, 1, 4),
    _IpbpvcIfDynamicVpi_Type()
)
ipbpvcIfDynamicVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipbpvcIfDynamicVpi.setStatus("current")
_IpbpvcIfDynamicVci_Type = Integer32
_IpbpvcIfDynamicVci_Object = MibTableColumn
ipbpvcIfDynamicVci = _IpbpvcIfDynamicVci_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 11, 2, 1, 5),
    _IpbpvcIfDynamicVci_Type()
)
ipbpvcIfDynamicVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipbpvcIfDynamicVci.setStatus("current")
_IpbpvcRouteDynamicTable_Object = MibTable
ipbpvcRouteDynamicTable = _IpbpvcRouteDynamicTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 11, 3)
)
if mibBuilder.loadTexts:
    ipbpvcRouteDynamicTable.setStatus("current")
_IpbpvcRouteDynamicEntry_Object = MibTableRow
ipbpvcRouteDynamicEntry = _IpbpvcRouteDynamicEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 11, 3, 1)
)
ipbpvcRouteDynamicEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "ipbpvcDomainName"),
    (0, "ZYXEL-IES5000-MIB", "ipbpvcRouteDynamicType"),
    (0, "ZYXEL-IES5000-MIB", "ipbpvcRouteDynamicIp"),
    (0, "ZYXEL-IES5000-MIB", "ipbpvcRouteDynamicMask"),
    (0, "ZYXEL-IES5000-MIB", "ipbpvcRouteDynamicNextHop"),
)
if mibBuilder.loadTexts:
    ipbpvcRouteDynamicEntry.setStatus("current")


class _IpbpvcRouteDynamicType_Type(Integer32):
    """Custom type ipbpvcRouteDynamicType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("upstream", 1),
          ("downstream", 2))
    )


_IpbpvcRouteDynamicType_Type.__name__ = "Integer32"
_IpbpvcRouteDynamicType_Object = MibTableColumn
ipbpvcRouteDynamicType = _IpbpvcRouteDynamicType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 11, 3, 1, 1),
    _IpbpvcRouteDynamicType_Type()
)
ipbpvcRouteDynamicType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipbpvcRouteDynamicType.setStatus("current")
_IpbpvcRouteDynamicIp_Type = IpAddress
_IpbpvcRouteDynamicIp_Object = MibTableColumn
ipbpvcRouteDynamicIp = _IpbpvcRouteDynamicIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 11, 3, 1, 2),
    _IpbpvcRouteDynamicIp_Type()
)
ipbpvcRouteDynamicIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipbpvcRouteDynamicIp.setStatus("current")
_IpbpvcRouteDynamicMask_Type = Integer32
_IpbpvcRouteDynamicMask_Object = MibTableColumn
ipbpvcRouteDynamicMask = _IpbpvcRouteDynamicMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 11, 3, 1, 3),
    _IpbpvcRouteDynamicMask_Type()
)
ipbpvcRouteDynamicMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipbpvcRouteDynamicMask.setStatus("current")
_IpbpvcRouteDynamicNextHop_Type = IpAddress
_IpbpvcRouteDynamicNextHop_Object = MibTableColumn
ipbpvcRouteDynamicNextHop = _IpbpvcRouteDynamicNextHop_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 11, 3, 1, 4),
    _IpbpvcRouteDynamicNextHop_Type()
)
ipbpvcRouteDynamicNextHop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipbpvcRouteDynamicNextHop.setStatus("current")
_IpbpvcRouteDynamicMetric_Type = Integer32
_IpbpvcRouteDynamicMetric_Object = MibTableColumn
ipbpvcRouteDynamicMetric = _IpbpvcRouteDynamicMetric_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 11, 3, 1, 5),
    _IpbpvcRouteDynamicMetric_Type()
)
ipbpvcRouteDynamicMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipbpvcRouteDynamicMetric.setStatus("current")
_IpbpvcRouteDynamicPriority_Type = Integer32
_IpbpvcRouteDynamicPriority_Object = MibTableColumn
ipbpvcRouteDynamicPriority = _IpbpvcRouteDynamicPriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 11, 3, 1, 6),
    _IpbpvcRouteDynamicPriority_Type()
)
ipbpvcRouteDynamicPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipbpvcRouteDynamicPriority.setStatus("current")
_VoipStats_ObjectIdentity = ObjectIdentity
voipStats = _VoipStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12)
)
_VoipLineStatusTable_Object = MibTable
voipLineStatusTable = _VoipLineStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 1)
)
if mibBuilder.loadTexts:
    voipLineStatusTable.setStatus("current")
_VoipLineStatusEntry_Object = MibTableRow
voipLineStatusEntry = _VoipLineStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 1, 1)
)
voipLineStatusEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipIfIndex"),
)
if mibBuilder.loadTexts:
    voipLineStatusEntry.setStatus("current")


class _VoipLineStatusFxsStatus_Type(Integer32):
    """Custom type voipLineStatusFxsStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("on-hook", 2),
          ("off-hook", 3),
          ("ringing", 4),
          ("power-cut-down", 5),
          ("testing", 6),
          ("fault", 7),
          ("bad", 8),
          ("uninitialized", 9))
    )


_VoipLineStatusFxsStatus_Type.__name__ = "Integer32"
_VoipLineStatusFxsStatus_Object = MibTableColumn
voipLineStatusFxsStatus = _VoipLineStatusFxsStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 1, 1, 1),
    _VoipLineStatusFxsStatus_Type()
)
voipLineStatusFxsStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipLineStatusFxsStatus.setStatus("current")


class _VoipLineStatusServiceStatus_Type(Integer32):
    """Custom type voipLineStatusServiceStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("out-of-service", 2),
          ("idle", 3),
          ("waiting-for-dialing", 4),
          ("dialing-out", 5),
          ("ringing", 6),
          ("conversation-caller", 7),
          ("conversation-callee", 8),
          ("fax-caller", 9),
          ("fax-callee", 10),
          ("modem-caller", 11),
          ("modem-callee", 12),
          ("waiting-for-on-hook", 13),
          ("dialing-timeout", 14),
          ("alerting-off-hook", 15),
          ("power-cut-down", 16))
    )


_VoipLineStatusServiceStatus_Type.__name__ = "Integer32"
_VoipLineStatusServiceStatus_Object = MibTableColumn
voipLineStatusServiceStatus = _VoipLineStatusServiceStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 1, 1, 2),
    _VoipLineStatusServiceStatus_Type()
)
voipLineStatusServiceStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipLineStatusServiceStatus.setStatus("current")
_VoipLineInfoTable_Object = MibTable
voipLineInfoTable = _VoipLineInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 2)
)
if mibBuilder.loadTexts:
    voipLineInfoTable.setStatus("current")
_VoipLineInfoEntry_Object = MibTableRow
voipLineInfoEntry = _VoipLineInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 2, 1)
)
voipLineInfoEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipIfIndex"),
)
if mibBuilder.loadTexts:
    voipLineInfoEntry.setStatus("current")
_VoipLineInfoSipLocalUri_Type = DisplayString
_VoipLineInfoSipLocalUri_Object = MibTableColumn
voipLineInfoSipLocalUri = _VoipLineInfoSipLocalUri_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 2, 1, 1),
    _VoipLineInfoSipLocalUri_Type()
)
voipLineInfoSipLocalUri.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipLineInfoSipLocalUri.setStatus("current")
_VoipLineInfoSipRemoteUri_Type = DisplayString
_VoipLineInfoSipRemoteUri_Object = MibTableColumn
voipLineInfoSipRemoteUri = _VoipLineInfoSipRemoteUri_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 2, 1, 2),
    _VoipLineInfoSipRemoteUri_Type()
)
voipLineInfoSipRemoteUri.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipLineInfoSipRemoteUri.setStatus("current")
_VoipLineInfoRtpTxCodecType_Type = DisplayString
_VoipLineInfoRtpTxCodecType_Object = MibTableColumn
voipLineInfoRtpTxCodecType = _VoipLineInfoRtpTxCodecType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 2, 1, 3),
    _VoipLineInfoRtpTxCodecType_Type()
)
voipLineInfoRtpTxCodecType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipLineInfoRtpTxCodecType.setStatus("current")
_VoipLineInfoRtpRxCodecType_Type = DisplayString
_VoipLineInfoRtpRxCodecType_Object = MibTableColumn
voipLineInfoRtpRxCodecType = _VoipLineInfoRtpRxCodecType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 2, 1, 4),
    _VoipLineInfoRtpRxCodecType_Type()
)
voipLineInfoRtpRxCodecType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipLineInfoRtpRxCodecType.setStatus("current")
_VoipLineInfoRtpTxPt_Type = Integer32
_VoipLineInfoRtpTxPt_Object = MibTableColumn
voipLineInfoRtpTxPt = _VoipLineInfoRtpTxPt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 2, 1, 5),
    _VoipLineInfoRtpTxPt_Type()
)
voipLineInfoRtpTxPt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipLineInfoRtpTxPt.setStatus("current")
_VoipLineInfoRtpRxPt_Type = Integer32
_VoipLineInfoRtpRxPt_Object = MibTableColumn
voipLineInfoRtpRxPt = _VoipLineInfoRtpRxPt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 2, 1, 6),
    _VoipLineInfoRtpRxPt_Type()
)
voipLineInfoRtpRxPt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipLineInfoRtpRxPt.setStatus("current")
_VoipLineInfoRtpLocalIp_Type = IpAddress
_VoipLineInfoRtpLocalIp_Object = MibTableColumn
voipLineInfoRtpLocalIp = _VoipLineInfoRtpLocalIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 2, 1, 7),
    _VoipLineInfoRtpLocalIp_Type()
)
voipLineInfoRtpLocalIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipLineInfoRtpLocalIp.setStatus("current")
_VoipLineInfoRtpRemoteIp_Type = IpAddress
_VoipLineInfoRtpRemoteIp_Object = MibTableColumn
voipLineInfoRtpRemoteIp = _VoipLineInfoRtpRemoteIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 2, 1, 8),
    _VoipLineInfoRtpRemoteIp_Type()
)
voipLineInfoRtpRemoteIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipLineInfoRtpRemoteIp.setStatus("current")
_VoipLineInfoRtpLocalPort_Type = Integer32
_VoipLineInfoRtpLocalPort_Object = MibTableColumn
voipLineInfoRtpLocalPort = _VoipLineInfoRtpLocalPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 2, 1, 9),
    _VoipLineInfoRtpLocalPort_Type()
)
voipLineInfoRtpLocalPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipLineInfoRtpLocalPort.setStatus("current")
_VoipLineInfoRtpRemotePort_Type = Integer32
_VoipLineInfoRtpRemotePort_Object = MibTableColumn
voipLineInfoRtpRemotePort = _VoipLineInfoRtpRemotePort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 2, 1, 10),
    _VoipLineInfoRtpRemotePort_Type()
)
voipLineInfoRtpRemotePort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipLineInfoRtpRemotePort.setStatus("current")


class _VoipLineInfoLastCidMode_Type(Integer32):
    """Custom type voipLineInfoLastCidMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("fsk", 1),
          ("dtmf", 2))
    )


_VoipLineInfoLastCidMode_Type.__name__ = "Integer32"
_VoipLineInfoLastCidMode_Object = MibTableColumn
voipLineInfoLastCidMode = _VoipLineInfoLastCidMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 2, 1, 11),
    _VoipLineInfoLastCidMode_Type()
)
voipLineInfoLastCidMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipLineInfoLastCidMode.setStatus("current")


class _VoipLineInfoPlaySignalTel_Type(Integer32):
    """Custom type voipLineInfoPlaySignalTel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("dial-tone", 1),
          ("ringback-tone", 2),
          ("busy-tone", 3),
          ("congestion-tone", 4),
          ("special-dial-tone", 5),
          ("warning-tone", 6),
          ("beep-tone", 7),
          ("call-waiting-tone1", 8),
          ("howler-tone", 9),
          ("confirmation-tone", 10),
          ("holding-tone", 11),
          ("mwi-tone", 12),
          ("enable-dtmf-detect", 13),
          ("disable-dtmf-detect", 14),
          ("mute", 15),
          ("call-waiting-tone2", 16),
          ("dtmf-tone", 17),
          ("recall-dial-tone", 18),
          ("stop-ring", 19),
          ("ring", 20))
    )


_VoipLineInfoPlaySignalTel_Type.__name__ = "Integer32"
_VoipLineInfoPlaySignalTel_Object = MibTableColumn
voipLineInfoPlaySignalTel = _VoipLineInfoPlaySignalTel_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 2, 1, 12),
    _VoipLineInfoPlaySignalTel_Type()
)
voipLineInfoPlaySignalTel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipLineInfoPlaySignalTel.setStatus("current")


class _VoipLineInfoPlaySignalNet_Type(Integer32):
    """Custom type voipLineInfoPlaySignalNet based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("dial-tone", 1),
          ("ringback-tone", 2),
          ("busy-tone", 3),
          ("congestion-tone", 4),
          ("special-dial-tone", 5),
          ("warning-tone", 6),
          ("beep-tone", 7),
          ("call-waiting-tone1", 8),
          ("howler-tone", 9),
          ("confirmation-tone", 10),
          ("holding-tone", 11),
          ("mwi-tone", 12),
          ("enable-dtmf-detect", 13),
          ("disable-dtmf-detect", 14),
          ("mute", 15),
          ("call-waiting-tone2", 16),
          ("dtmf-tone", 17),
          ("recall-dial-tone", 18),
          ("stop-ring", 19),
          ("ring", 20))
    )


_VoipLineInfoPlaySignalNet_Type.__name__ = "Integer32"
_VoipLineInfoPlaySignalNet_Object = MibTableColumn
voipLineInfoPlaySignalNet = _VoipLineInfoPlaySignalNet_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 2, 1, 13),
    _VoipLineInfoPlaySignalNet_Type()
)
voipLineInfoPlaySignalNet.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipLineInfoPlaySignalNet.setStatus("current")
_VoipH248StatTable_Object = MibTable
voipH248StatTable = _VoipH248StatTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 3)
)
if mibBuilder.loadTexts:
    voipH248StatTable.setStatus("current")
_VoipH248StatEntry_Object = MibTableRow
voipH248StatEntry = _VoipH248StatEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 3, 1)
)
voipH248StatEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipH248StatSlot"),
    (0, "ZYXEL-IES5000-MIB", "voipH248StatMgName"),
)
if mibBuilder.loadTexts:
    voipH248StatEntry.setStatus("current")
_VoipH248StatSlot_Type = Integer32
_VoipH248StatSlot_Object = MibTableColumn
voipH248StatSlot = _VoipH248StatSlot_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 3, 1, 1),
    _VoipH248StatSlot_Type()
)
voipH248StatSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248StatSlot.setStatus("current")
_VoipH248StatMgName_Type = DisplayString
_VoipH248StatMgName_Object = MibTableColumn
voipH248StatMgName = _VoipH248StatMgName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 3, 1, 2),
    _VoipH248StatMgName_Type()
)
voipH248StatMgName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248StatMgName.setStatus("current")


class _VoipH248StatMgState_Type(Integer32):
    """Custom type voipH248StatMgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("registering", 2),
          ("registered", 3),
          ("unregistering", 4),
          ("unregistered", 5),
          ("inactivity-timeout", 6),
          ("activity-back", 7),
          ("disconnected", 8),
          ("disabled-by-mgc", 9),
          ("unknown", 10))
    )


_VoipH248StatMgState_Type.__name__ = "Integer32"
_VoipH248StatMgState_Object = MibTableColumn
voipH248StatMgState = _VoipH248StatMgState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 3, 1, 3),
    _VoipH248StatMgState_Type()
)
voipH248StatMgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248StatMgState.setStatus("current")
_VoipSipStatTable_Object = MibTable
voipSipStatTable = _VoipSipStatTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 4)
)
if mibBuilder.loadTexts:
    voipSipStatTable.setStatus("current")
_VoipSipStatEntry_Object = MibTableRow
voipSipStatEntry = _VoipSipStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 4, 1)
)
voipSipStatEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipSipStatSlot"),
    (0, "ZYXEL-IES5000-MIB", "voipSipStatProxyIndex"),
)
if mibBuilder.loadTexts:
    voipSipStatEntry.setStatus("current")
_VoipSipStatSlot_Type = Integer32
_VoipSipStatSlot_Object = MibTableColumn
voipSipStatSlot = _VoipSipStatSlot_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 4, 1, 1),
    _VoipSipStatSlot_Type()
)
voipSipStatSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipSipStatSlot.setStatus("current")
_VoipSipStatProxyIndex_Type = Integer32
_VoipSipStatProxyIndex_Object = MibTableColumn
voipSipStatProxyIndex = _VoipSipStatProxyIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 4, 1, 2),
    _VoipSipStatProxyIndex_Type()
)
voipSipStatProxyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipSipStatProxyIndex.setStatus("current")
_VoipSipStatProxySvr_Type = DisplayString
_VoipSipStatProxySvr_Object = MibTableColumn
voipSipStatProxySvr = _VoipSipStatProxySvr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 4, 1, 3),
    _VoipSipStatProxySvr_Type()
)
voipSipStatProxySvr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipSipStatProxySvr.setStatus("current")
_VoipSipStatProxyPort_Type = Integer32
_VoipSipStatProxyPort_Object = MibTableColumn
voipSipStatProxyPort = _VoipSipStatProxyPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 4, 1, 4),
    _VoipSipStatProxyPort_Type()
)
voipSipStatProxyPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipSipStatProxyPort.setStatus("current")


class _VoipSipStatState_Type(Integer32):
    """Custom type voipSipStatState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("lost", 1),
          ("alive", 2),
          ("unknown", 3))
    )


_VoipSipStatState_Type.__name__ = "Integer32"
_VoipSipStatState_Object = MibTableColumn
voipSipStatState = _VoipSipStatState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 4, 1, 5),
    _VoipSipStatState_Type()
)
voipSipStatState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipSipStatState.setStatus("current")
_VoipH248InterfaceStatTable_Object = MibTable
voipH248InterfaceStatTable = _VoipH248InterfaceStatTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 5)
)
if mibBuilder.loadTexts:
    voipH248InterfaceStatTable.setStatus("current")
_VoipH248InterfaceStatEntry_Object = MibTableRow
voipH248InterfaceStatEntry = _VoipH248InterfaceStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 5, 1)
)
voipH248InterfaceStatEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipH248InterfaceStatId"),
)
if mibBuilder.loadTexts:
    voipH248InterfaceStatEntry.setStatus("current")
_VoipH248InterfaceStatId_Type = Integer32
_VoipH248InterfaceStatId_Object = MibTableColumn
voipH248InterfaceStatId = _VoipH248InterfaceStatId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 5, 1, 1),
    _VoipH248InterfaceStatId_Type()
)
voipH248InterfaceStatId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248InterfaceStatId.setStatus("current")


class _VoipH248InterfaceStatMgState_Type(Integer32):
    """Custom type voipH248InterfaceStatMgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("registering", 2),
          ("registered", 3),
          ("unregistering", 4),
          ("unregistered", 5),
          ("inactivity-timeout", 6),
          ("activity-back", 7),
          ("disconnected", 8),
          ("disabled-by-MGC", 9))
    )


_VoipH248InterfaceStatMgState_Type.__name__ = "Integer32"
_VoipH248InterfaceStatMgState_Object = MibTableColumn
voipH248InterfaceStatMgState = _VoipH248InterfaceStatMgState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 5, 1, 2),
    _VoipH248InterfaceStatMgState_Type()
)
voipH248InterfaceStatMgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248InterfaceStatMgState.setStatus("current")
_VoipH248InterfaceStatPrimarySlot_Type = Integer32
_VoipH248InterfaceStatPrimarySlot_Object = MibTableColumn
voipH248InterfaceStatPrimarySlot = _VoipH248InterfaceStatPrimarySlot_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 5, 1, 3),
    _VoipH248InterfaceStatPrimarySlot_Type()
)
voipH248InterfaceStatPrimarySlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248InterfaceStatPrimarySlot.setStatus("current")
_VoipH248InterfaceStatSecondarySlot_Type = Integer32
_VoipH248InterfaceStatSecondarySlot_Object = MibTableColumn
voipH248InterfaceStatSecondarySlot = _VoipH248InterfaceStatSecondarySlot_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 5, 1, 4),
    _VoipH248InterfaceStatSecondarySlot_Type()
)
voipH248InterfaceStatSecondarySlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248InterfaceStatSecondarySlot.setStatus("current")


class _VoipH248InterfaceStatPrimaryProtectionState_Type(Integer32):
    """Custom type voipH248InterfaceStatPrimaryProtectionState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 1),
          ("active", 2),
          ("standby", 3))
    )


_VoipH248InterfaceStatPrimaryProtectionState_Type.__name__ = "Integer32"
_VoipH248InterfaceStatPrimaryProtectionState_Object = MibTableColumn
voipH248InterfaceStatPrimaryProtectionState = _VoipH248InterfaceStatPrimaryProtectionState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 5, 1, 5),
    _VoipH248InterfaceStatPrimaryProtectionState_Type()
)
voipH248InterfaceStatPrimaryProtectionState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248InterfaceStatPrimaryProtectionState.setStatus("current")


class _VoipH248InterfaceStatSecondaryProtectionState_Type(Integer32):
    """Custom type voipH248InterfaceStatSecondaryProtectionState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 1),
          ("active", 2),
          ("standby", 3))
    )


_VoipH248InterfaceStatSecondaryProtectionState_Type.__name__ = "Integer32"
_VoipH248InterfaceStatSecondaryProtectionState_Object = MibTableColumn
voipH248InterfaceStatSecondaryProtectionState = _VoipH248InterfaceStatSecondaryProtectionState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 5, 1, 6),
    _VoipH248InterfaceStatSecondaryProtectionState_Type()
)
voipH248InterfaceStatSecondaryProtectionState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248InterfaceStatSecondaryProtectionState.setStatus("current")


class _VoipH248InterfaceStatRedundantState_Type(Integer32):
    """Custom type voipH248InterfaceStatRedundantState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("out-of-sync", 1),
          ("authorization", 2),
          ("synchronizing", 3),
          ("in-service", 4))
    )


_VoipH248InterfaceStatRedundantState_Type.__name__ = "Integer32"
_VoipH248InterfaceStatRedundantState_Object = MibTableColumn
voipH248InterfaceStatRedundantState = _VoipH248InterfaceStatRedundantState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 5, 1, 7),
    _VoipH248InterfaceStatRedundantState_Type()
)
voipH248InterfaceStatRedundantState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248InterfaceStatRedundantState.setStatus("current")
_VoipH248MediaStatTable_Object = MibTable
voipH248MediaStatTable = _VoipH248MediaStatTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 6)
)
if mibBuilder.loadTexts:
    voipH248MediaStatTable.setStatus("current")
_VoipH248MediaStatEntry_Object = MibTableRow
voipH248MediaStatEntry = _VoipH248MediaStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 6, 1)
)
voipH248MediaStatEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipH248MediaStatInterfaceId"),
    (0, "ZYXEL-IES5000-MIB", "voipH248MediaStatSlaveId"),
)
if mibBuilder.loadTexts:
    voipH248MediaStatEntry.setStatus("current")
_VoipH248MediaStatInterfaceId_Type = Integer32
_VoipH248MediaStatInterfaceId_Object = MibTableColumn
voipH248MediaStatInterfaceId = _VoipH248MediaStatInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 6, 1, 1),
    _VoipH248MediaStatInterfaceId_Type()
)
voipH248MediaStatInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248MediaStatInterfaceId.setStatus("current")
_VoipH248MediaStatSlaveId_Type = Integer32
_VoipH248MediaStatSlaveId_Object = MibTableColumn
voipH248MediaStatSlaveId = _VoipH248MediaStatSlaveId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 6, 1, 2),
    _VoipH248MediaStatSlaveId_Type()
)
voipH248MediaStatSlaveId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248MediaStatSlaveId.setStatus("current")
_VoipH248MediaStatSlaveIp_Type = Integer32
_VoipH248MediaStatSlaveIp_Object = MibTableColumn
voipH248MediaStatSlaveIp = _VoipH248MediaStatSlaveIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 6, 1, 3),
    _VoipH248MediaStatSlaveIp_Type()
)
voipH248MediaStatSlaveIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248MediaStatSlaveIp.setStatus("current")
_VoipH248MediaStatMgmtInbandIp_Type = Integer32
_VoipH248MediaStatMgmtInbandIp_Object = MibTableColumn
voipH248MediaStatMgmtInbandIp = _VoipH248MediaStatMgmtInbandIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 6, 1, 4),
    _VoipH248MediaStatMgmtInbandIp_Type()
)
voipH248MediaStatMgmtInbandIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248MediaStatMgmtInbandIp.setStatus("current")
_VoipH248MediaStatMgmtOutbandIp_Type = Integer32
_VoipH248MediaStatMgmtOutbandIp_Object = MibTableColumn
voipH248MediaStatMgmtOutbandIp = _VoipH248MediaStatMgmtOutbandIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 6, 1, 5),
    _VoipH248MediaStatMgmtOutbandIp_Type()
)
voipH248MediaStatMgmtOutbandIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248MediaStatMgmtOutbandIp.setStatus("current")
_VoipH248MediaStatSlotId_Type = Integer32
_VoipH248MediaStatSlotId_Object = MibTableColumn
voipH248MediaStatSlotId = _VoipH248MediaStatSlotId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 6, 1, 6),
    _VoipH248MediaStatSlotId_Type()
)
voipH248MediaStatSlotId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248MediaStatSlotId.setStatus("current")
_VoipH248MediaStatPortCount_Type = Integer32
_VoipH248MediaStatPortCount_Object = MibTableColumn
voipH248MediaStatPortCount = _VoipH248MediaStatPortCount_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 6, 1, 7),
    _VoipH248MediaStatPortCount_Type()
)
voipH248MediaStatPortCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248MediaStatPortCount.setStatus("current")


class _VoipH248MediaStatState_Type(Integer32):
    """Custom type voipH248MediaStatState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unregistered", 1),
          ("registered", 2),
          ("invalid", 3),
          ("unknown", 4))
    )


_VoipH248MediaStatState_Type.__name__ = "Integer32"
_VoipH248MediaStatState_Object = MibTableColumn
voipH248MediaStatState = _VoipH248MediaStatState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 6, 1, 8),
    _VoipH248MediaStatState_Type()
)
voipH248MediaStatState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248MediaStatState.setStatus("current")
_VoipH248TerminationStatTable_Object = MibTable
voipH248TerminationStatTable = _VoipH248TerminationStatTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 7)
)
if mibBuilder.loadTexts:
    voipH248TerminationStatTable.setStatus("current")
_VoipH248TerminationStatEntry_Object = MibTableRow
voipH248TerminationStatEntry = _VoipH248TerminationStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 7, 1)
)
voipH248TerminationStatEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipH248TerminationStatStateId"),
    (0, "ZYXEL-IES5000-MIB", "voipH248TerminationStatStateMediaId"),
    (0, "ZYXEL-IES5000-MIB", "voipH248TerminationStatStatePortNumber"),
)
if mibBuilder.loadTexts:
    voipH248TerminationStatEntry.setStatus("current")
_VoipH248TerminationStatStateId_Type = Integer32
_VoipH248TerminationStatStateId_Object = MibTableColumn
voipH248TerminationStatStateId = _VoipH248TerminationStatStateId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 7, 1, 1),
    _VoipH248TerminationStatStateId_Type()
)
voipH248TerminationStatStateId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248TerminationStatStateId.setStatus("current")
_VoipH248TerminationStatStateMediaId_Type = Integer32
_VoipH248TerminationStatStateMediaId_Object = MibTableColumn
voipH248TerminationStatStateMediaId = _VoipH248TerminationStatStateMediaId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 7, 1, 2),
    _VoipH248TerminationStatStateMediaId_Type()
)
voipH248TerminationStatStateMediaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248TerminationStatStateMediaId.setStatus("current")
_VoipH248TerminationStatStatePortNumber_Type = Integer32
_VoipH248TerminationStatStatePortNumber_Object = MibTableColumn
voipH248TerminationStatStatePortNumber = _VoipH248TerminationStatStatePortNumber_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 7, 1, 3),
    _VoipH248TerminationStatStatePortNumber_Type()
)
voipH248TerminationStatStatePortNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248TerminationStatStatePortNumber.setStatus("current")
_VoipH248TerminationStatName_Type = DisplayString
_VoipH248TerminationStatName_Object = MibTableColumn
voipH248TerminationStatName = _VoipH248TerminationStatName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 7, 1, 4),
    _VoipH248TerminationStatName_Type()
)
voipH248TerminationStatName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248TerminationStatName.setStatus("current")


class _VoipH248TerminationStatPhoneState_Type(Integer32):
    """Custom type voipH248TerminationStatPhoneState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("on-hook", 2),
          ("off-hook", 3),
          ("ringing", 4),
          ("testing", 5),
          ("power-cut-down", 6),
          ("fault", 7),
          ("bad", 8),
          ("uninitialized", 9),
          ("unknown", 10))
    )


_VoipH248TerminationStatPhoneState_Type.__name__ = "Integer32"
_VoipH248TerminationStatPhoneState_Object = MibTableColumn
voipH248TerminationStatPhoneState = _VoipH248TerminationStatPhoneState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 7, 1, 5),
    _VoipH248TerminationStatPhoneState_Type()
)
voipH248TerminationStatPhoneState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248TerminationStatPhoneState.setStatus("current")


class _VoipH248TerminationStatCallServiceState_Type(Integer32):
    """Custom type voipH248TerminationStatCallServiceState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              13,
              14,
              15,
              16,
              17)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("out-of-service", 2),
          ("idle", 3),
          ("waiting-for-dialing", 4),
          ("dialing-out", 5),
          ("ringing", 6),
          ("conversation-caller", 7),
          ("conversation-callee", 8),
          ("fax-modem-caller", 9),
          ("fax-modem-callee", 10),
          ("waiting-for-on-hook", 13),
          ("dialing-timeout", 14),
          ("alerting-off-hook", 15),
          ("power-cut-down", 16),
          ("unknown", 17))
    )


_VoipH248TerminationStatCallServiceState_Type.__name__ = "Integer32"
_VoipH248TerminationStatCallServiceState_Object = MibTableColumn
voipH248TerminationStatCallServiceState = _VoipH248TerminationStatCallServiceState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 7, 1, 6),
    _VoipH248TerminationStatCallServiceState_Type()
)
voipH248TerminationStatCallServiceState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248TerminationStatCallServiceState.setStatus("current")
_VoipH248TerminationStatQuery_ObjectIdentity = ObjectIdentity
voipH248TerminationStatQuery = _VoipH248TerminationStatQuery_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 8)
)
_VoipH248TerminationStatQueryInterfaceId_Type = Integer32
_VoipH248TerminationStatQueryInterfaceId_Object = MibScalar
voipH248TerminationStatQueryInterfaceId = _VoipH248TerminationStatQueryInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 8, 1),
    _VoipH248TerminationStatQueryInterfaceId_Type()
)
voipH248TerminationStatQueryInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipH248TerminationStatQueryInterfaceId.setStatus("current")


class _VoipH248TerminationStatQueryTerminationName_Type(DisplayString):
    """Custom type voipH248TerminationStatQueryTerminationName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipH248TerminationStatQueryTerminationName_Type.__name__ = "DisplayString"
_VoipH248TerminationStatQueryTerminationName_Object = MibScalar
voipH248TerminationStatQueryTerminationName = _VoipH248TerminationStatQueryTerminationName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 8, 2),
    _VoipH248TerminationStatQueryTerminationName_Type()
)
voipH248TerminationStatQueryTerminationName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipH248TerminationStatQueryTerminationName.setStatus("current")
_VoipH248TerminationStatQuerySlaveId_Type = Integer32
_VoipH248TerminationStatQuerySlaveId_Object = MibScalar
voipH248TerminationStatQuerySlaveId = _VoipH248TerminationStatQuerySlaveId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 8, 3),
    _VoipH248TerminationStatQuerySlaveId_Type()
)
voipH248TerminationStatQuerySlaveId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248TerminationStatQuerySlaveId.setStatus("current")
_VoipH248TerminationStatQuerySlaveIp_Type = IpAddress
_VoipH248TerminationStatQuerySlaveIp_Object = MibScalar
voipH248TerminationStatQuerySlaveIp = _VoipH248TerminationStatQuerySlaveIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 8, 4),
    _VoipH248TerminationStatQuerySlaveIp_Type()
)
voipH248TerminationStatQuerySlaveIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248TerminationStatQuerySlaveIp.setStatus("current")
_VoipH248TerminationStatQueryMgmtInbandIp_Type = IpAddress
_VoipH248TerminationStatQueryMgmtInbandIp_Object = MibScalar
voipH248TerminationStatQueryMgmtInbandIp = _VoipH248TerminationStatQueryMgmtInbandIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 8, 5),
    _VoipH248TerminationStatQueryMgmtInbandIp_Type()
)
voipH248TerminationStatQueryMgmtInbandIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248TerminationStatQueryMgmtInbandIp.setStatus("current")
_VoipH248TerminationStatQueryMgmtOutbandIp_Type = IpAddress
_VoipH248TerminationStatQueryMgmtOutbandIp_Object = MibScalar
voipH248TerminationStatQueryMgmtOutbandIp = _VoipH248TerminationStatQueryMgmtOutbandIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 8, 6),
    _VoipH248TerminationStatQueryMgmtOutbandIp_Type()
)
voipH248TerminationStatQueryMgmtOutbandIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248TerminationStatQueryMgmtOutbandIp.setStatus("current")
_VoipH248TerminationStatQuerySlotId_Type = Integer32
_VoipH248TerminationStatQuerySlotId_Object = MibScalar
voipH248TerminationStatQuerySlotId = _VoipH248TerminationStatQuerySlotId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 8, 7),
    _VoipH248TerminationStatQuerySlotId_Type()
)
voipH248TerminationStatQuerySlotId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248TerminationStatQuerySlotId.setStatus("current")
_VoipH248TerminationStatQueryPortCount_Type = Integer32
_VoipH248TerminationStatQueryPortCount_Object = MibScalar
voipH248TerminationStatQueryPortCount = _VoipH248TerminationStatQueryPortCount_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 8, 8),
    _VoipH248TerminationStatQueryPortCount_Type()
)
voipH248TerminationStatQueryPortCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248TerminationStatQueryPortCount.setStatus("current")


class _VoipH248TerminationStatQueryState_Type(Integer32):
    """Custom type voipH248TerminationStatQueryState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unregistered", 1),
          ("registered", 2),
          ("invalid", 3),
          ("unknown", 4))
    )


_VoipH248TerminationStatQueryState_Type.__name__ = "Integer32"
_VoipH248TerminationStatQueryState_Object = MibScalar
voipH248TerminationStatQueryState = _VoipH248TerminationStatQueryState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 8, 9),
    _VoipH248TerminationStatQueryState_Type()
)
voipH248TerminationStatQueryState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248TerminationStatQueryState.setStatus("current")
_VoipH248TerminationStatQueryPortNumber_Type = Integer32
_VoipH248TerminationStatQueryPortNumber_Object = MibScalar
voipH248TerminationStatQueryPortNumber = _VoipH248TerminationStatQueryPortNumber_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 8, 10),
    _VoipH248TerminationStatQueryPortNumber_Type()
)
voipH248TerminationStatQueryPortNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248TerminationStatQueryPortNumber.setStatus("current")


class _VoipH248TerminationStatQueryPhoneState_Type(Integer32):
    """Custom type voipH248TerminationStatQueryPhoneState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("on-hook", 2),
          ("off-hook", 3),
          ("ringing", 4),
          ("testing", 5),
          ("power-cut-down", 6),
          ("fault", 7),
          ("bad", 8),
          ("uninitialized", 9),
          ("unknown", 10))
    )


_VoipH248TerminationStatQueryPhoneState_Type.__name__ = "Integer32"
_VoipH248TerminationStatQueryPhoneState_Object = MibScalar
voipH248TerminationStatQueryPhoneState = _VoipH248TerminationStatQueryPhoneState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 8, 11),
    _VoipH248TerminationStatQueryPhoneState_Type()
)
voipH248TerminationStatQueryPhoneState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248TerminationStatQueryPhoneState.setStatus("current")


class _VoipH248TerminationStatQueryCallServiceState_Type(Integer32):
    """Custom type voipH248TerminationStatQueryCallServiceState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              12,
              13,
              14,
              15)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("out-of-service", 2),
          ("idle", 3),
          ("waiting-for-dialing", 4),
          ("ringing", 5),
          ("conversation-caller", 6),
          ("conversation-callee", 7),
          ("fax-modem-caller", 8),
          ("fax-modem-callee", 9),
          ("waiting-for-on-hook", 12),
          ("dialing-timeout", 13),
          ("alerting-off-hook", 14),
          ("power-cut-down", 15))
    )


_VoipH248TerminationStatQueryCallServiceState_Type.__name__ = "Integer32"
_VoipH248TerminationStatQueryCallServiceState_Object = MibScalar
voipH248TerminationStatQueryCallServiceState = _VoipH248TerminationStatQueryCallServiceState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 8, 12),
    _VoipH248TerminationStatQueryCallServiceState_Type()
)
voipH248TerminationStatQueryCallServiceState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248TerminationStatQueryCallServiceState.setStatus("current")
_VoipRtpStatTable_Object = MibTable
voipRtpStatTable = _VoipRtpStatTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 9)
)
if mibBuilder.loadTexts:
    voipRtpStatTable.setStatus("current")
_VoipRtpStatEntry_Object = MibTableRow
voipRtpStatEntry = _VoipRtpStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 9, 1)
)
voipRtpStatEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipIfIndex"),
)
if mibBuilder.loadTexts:
    voipRtpStatEntry.setStatus("current")
_VoipRtpStatTxRate_Type = Integer32
_VoipRtpStatTxRate_Object = MibTableColumn
voipRtpStatTxRate = _VoipRtpStatTxRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 9, 1, 1),
    _VoipRtpStatTxRate_Type()
)
voipRtpStatTxRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipRtpStatTxRate.setStatus("current")
_VoipRtpStatRxRate_Type = Integer32
_VoipRtpStatRxRate_Object = MibTableColumn
voipRtpStatRxRate = _VoipRtpStatRxRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 9, 1, 2),
    _VoipRtpStatRxRate_Type()
)
voipRtpStatRxRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipRtpStatRxRate.setStatus("current")
_VoipRtpStatTxPktCnt_Type = Counter64
_VoipRtpStatTxPktCnt_Object = MibTableColumn
voipRtpStatTxPktCnt = _VoipRtpStatTxPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 9, 1, 3),
    _VoipRtpStatTxPktCnt_Type()
)
voipRtpStatTxPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipRtpStatTxPktCnt.setStatus("current")
_VoipRtpStatRxPktCnt_Type = Counter64
_VoipRtpStatRxPktCnt_Object = MibTableColumn
voipRtpStatRxPktCnt = _VoipRtpStatRxPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 9, 1, 4),
    _VoipRtpStatRxPktCnt_Type()
)
voipRtpStatRxPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipRtpStatRxPktCnt.setStatus("current")
_VoipRtpStatTxFracLost_Type = Integer32
_VoipRtpStatTxFracLost_Object = MibTableColumn
voipRtpStatTxFracLost = _VoipRtpStatTxFracLost_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 9, 1, 5),
    _VoipRtpStatTxFracLost_Type()
)
voipRtpStatTxFracLost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipRtpStatTxFracLost.setStatus("current")
_VoipRtpStatRxFracLost_Type = Integer32
_VoipRtpStatRxFracLost_Object = MibTableColumn
voipRtpStatRxFracLost = _VoipRtpStatRxFracLost_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 9, 1, 6),
    _VoipRtpStatRxFracLost_Type()
)
voipRtpStatRxFracLost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipRtpStatRxFracLost.setStatus("current")
_VoipRtpStatTxJitter_Type = Counter64
_VoipRtpStatTxJitter_Object = MibTableColumn
voipRtpStatTxJitter = _VoipRtpStatTxJitter_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 9, 1, 7),
    _VoipRtpStatTxJitter_Type()
)
voipRtpStatTxJitter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipRtpStatTxJitter.setStatus("current")
_VoipRtpStatRxJitter_Type = Counter64
_VoipRtpStatRxJitter_Object = MibTableColumn
voipRtpStatRxJitter = _VoipRtpStatRxJitter_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 9, 1, 8),
    _VoipRtpStatRxJitter_Type()
)
voipRtpStatRxJitter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipRtpStatRxJitter.setStatus("current")
_VoipRtpStatTxAvgDelay_Type = Counter64
_VoipRtpStatTxAvgDelay_Object = MibTableColumn
voipRtpStatTxAvgDelay = _VoipRtpStatTxAvgDelay_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 9, 1, 9),
    _VoipRtpStatTxAvgDelay_Type()
)
voipRtpStatTxAvgDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipRtpStatTxAvgDelay.setStatus("current")
_VoipRtpStatRxAvgDelay_Type = Counter64
_VoipRtpStatRxAvgDelay_Object = MibTableColumn
voipRtpStatRxAvgDelay = _VoipRtpStatRxAvgDelay_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 9, 1, 10),
    _VoipRtpStatRxAvgDelay_Type()
)
voipRtpStatRxAvgDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipRtpStatRxAvgDelay.setStatus("current")
_VoipCdrStat_ObjectIdentity = ObjectIdentity
voipCdrStat = _VoipCdrStat_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10)
)
_VoipCdrStatFilter_ObjectIdentity = ObjectIdentity
voipCdrStatFilter = _VoipCdrStatFilter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 1)
)
_VoipCdrStatFilterInterface_Type = Integer32
_VoipCdrStatFilterInterface_Object = MibScalar
voipCdrStatFilterInterface = _VoipCdrStatFilterInterface_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 1, 1),
    _VoipCdrStatFilterInterface_Type()
)
voipCdrStatFilterInterface.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipCdrStatFilterInterface.setStatus("current")
_VoipCdrStatFilterIndexEnable_Type = Integer32
_VoipCdrStatFilterIndexEnable_Object = MibScalar
voipCdrStatFilterIndexEnable = _VoipCdrStatFilterIndexEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 1, 2),
    _VoipCdrStatFilterIndexEnable_Type()
)
voipCdrStatFilterIndexEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipCdrStatFilterIndexEnable.setStatus("current")
_VoipCdrStatFilterIndex_Type = Integer32
_VoipCdrStatFilterIndex_Object = MibScalar
voipCdrStatFilterIndex = _VoipCdrStatFilterIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 1, 3),
    _VoipCdrStatFilterIndex_Type()
)
voipCdrStatFilterIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipCdrStatFilterIndex.setStatus("current")
_VoipCdrStatFilterSlotPortEnable_Type = Integer32
_VoipCdrStatFilterSlotPortEnable_Object = MibScalar
voipCdrStatFilterSlotPortEnable = _VoipCdrStatFilterSlotPortEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 1, 4),
    _VoipCdrStatFilterSlotPortEnable_Type()
)
voipCdrStatFilterSlotPortEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipCdrStatFilterSlotPortEnable.setStatus("current")
_VoipCdrStatFilterSlot_Type = Integer32
_VoipCdrStatFilterSlot_Object = MibScalar
voipCdrStatFilterSlot = _VoipCdrStatFilterSlot_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 1, 5),
    _VoipCdrStatFilterSlot_Type()
)
voipCdrStatFilterSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipCdrStatFilterSlot.setStatus("current")
_VoipCdrStatFilterPort_Type = Integer32
_VoipCdrStatFilterPort_Object = MibScalar
voipCdrStatFilterPort = _VoipCdrStatFilterPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 1, 6),
    _VoipCdrStatFilterPort_Type()
)
voipCdrStatFilterPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipCdrStatFilterPort.setStatus("current")
_VoipCdrStatFilterRtpElpasedTimeEnable_Type = Integer32
_VoipCdrStatFilterRtpElpasedTimeEnable_Object = MibScalar
voipCdrStatFilterRtpElpasedTimeEnable = _VoipCdrStatFilterRtpElpasedTimeEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 1, 7),
    _VoipCdrStatFilterRtpElpasedTimeEnable_Type()
)
voipCdrStatFilterRtpElpasedTimeEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipCdrStatFilterRtpElpasedTimeEnable.setStatus("current")
_VoipCdrStatFilterRtpElpasedTimeMin_Type = Integer32
_VoipCdrStatFilterRtpElpasedTimeMin_Object = MibScalar
voipCdrStatFilterRtpElpasedTimeMin = _VoipCdrStatFilterRtpElpasedTimeMin_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 1, 8),
    _VoipCdrStatFilterRtpElpasedTimeMin_Type()
)
voipCdrStatFilterRtpElpasedTimeMin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipCdrStatFilterRtpElpasedTimeMin.setStatus("current")
_VoipCdrStatFilterRtpElpasedTimeMax_Type = Integer32
_VoipCdrStatFilterRtpElpasedTimeMax_Object = MibScalar
voipCdrStatFilterRtpElpasedTimeMax = _VoipCdrStatFilterRtpElpasedTimeMax_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 1, 9),
    _VoipCdrStatFilterRtpElpasedTimeMax_Type()
)
voipCdrStatFilterRtpElpasedTimeMax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipCdrStatFilterRtpElpasedTimeMax.setStatus("current")
_VoipCdrStatFilterTelEnable_Type = Integer32
_VoipCdrStatFilterTelEnable_Object = MibScalar
voipCdrStatFilterTelEnable = _VoipCdrStatFilterTelEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 1, 10),
    _VoipCdrStatFilterTelEnable_Type()
)
voipCdrStatFilterTelEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipCdrStatFilterTelEnable.setStatus("current")
_VoipCdrStatFilterTel_Type = DisplayString
_VoipCdrStatFilterTel_Object = MibScalar
voipCdrStatFilterTel = _VoipCdrStatFilterTel_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 1, 11),
    _VoipCdrStatFilterTel_Type()
)
voipCdrStatFilterTel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipCdrStatFilterTel.setStatus("current")
_VoipCdrStatFilterOffhookEnable_Type = Integer32
_VoipCdrStatFilterOffhookEnable_Object = MibScalar
voipCdrStatFilterOffhookEnable = _VoipCdrStatFilterOffhookEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 1, 12),
    _VoipCdrStatFilterOffhookEnable_Type()
)
voipCdrStatFilterOffhookEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipCdrStatFilterOffhookEnable.setStatus("current")
_VoipCdrStatFilterOffhookDateMin_Type = Integer32
_VoipCdrStatFilterOffhookDateMin_Object = MibScalar
voipCdrStatFilterOffhookDateMin = _VoipCdrStatFilterOffhookDateMin_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 1, 13),
    _VoipCdrStatFilterOffhookDateMin_Type()
)
voipCdrStatFilterOffhookDateMin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipCdrStatFilterOffhookDateMin.setStatus("current")
_VoipCdrStatFilterOffhookTimeMin_Type = Integer32
_VoipCdrStatFilterOffhookTimeMin_Object = MibScalar
voipCdrStatFilterOffhookTimeMin = _VoipCdrStatFilterOffhookTimeMin_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 1, 14),
    _VoipCdrStatFilterOffhookTimeMin_Type()
)
voipCdrStatFilterOffhookTimeMin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipCdrStatFilterOffhookTimeMin.setStatus("current")
_VoipCdrStatFilterOffhookDateMax_Type = Integer32
_VoipCdrStatFilterOffhookDateMax_Object = MibScalar
voipCdrStatFilterOffhookDateMax = _VoipCdrStatFilterOffhookDateMax_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 1, 15),
    _VoipCdrStatFilterOffhookDateMax_Type()
)
voipCdrStatFilterOffhookDateMax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipCdrStatFilterOffhookDateMax.setStatus("current")
_VoipCdrStatFilterOffhookTimeMax_Type = Integer32
_VoipCdrStatFilterOffhookTimeMax_Object = MibScalar
voipCdrStatFilterOffhookTimeMax = _VoipCdrStatFilterOffhookTimeMax_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 1, 16),
    _VoipCdrStatFilterOffhookTimeMax_Type()
)
voipCdrStatFilterOffhookTimeMax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipCdrStatFilterOffhookTimeMax.setStatus("current")
_VoipCdrStatFilterCodeEnable_Type = Integer32
_VoipCdrStatFilterCodeEnable_Object = MibScalar
voipCdrStatFilterCodeEnable = _VoipCdrStatFilterCodeEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 1, 17),
    _VoipCdrStatFilterCodeEnable_Type()
)
voipCdrStatFilterCodeEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipCdrStatFilterCodeEnable.setStatus("current")
_VoipCdrStatFilterCode_Type = Integer32
_VoipCdrStatFilterCode_Object = MibScalar
voipCdrStatFilterCode = _VoipCdrStatFilterCode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 1, 18),
    _VoipCdrStatFilterCode_Type()
)
voipCdrStatFilterCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipCdrStatFilterCode.setStatus("current")
_VoipCdrStatFilterErrCodeEnable_Type = Integer32
_VoipCdrStatFilterErrCodeEnable_Object = MibScalar
voipCdrStatFilterErrCodeEnable = _VoipCdrStatFilterErrCodeEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 1, 19),
    _VoipCdrStatFilterErrCodeEnable_Type()
)
voipCdrStatFilterErrCodeEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipCdrStatFilterErrCodeEnable.setStatus("current")
_VoipCdrStatResultTable_Object = MibTable
voipCdrStatResultTable = _VoipCdrStatResultTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2)
)
if mibBuilder.loadTexts:
    voipCdrStatResultTable.setStatus("current")
_VoipCdrStatResultEntry_Object = MibTableRow
voipCdrStatResultEntry = _VoipCdrStatResultEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2, 1)
)
voipCdrStatResultEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipCdrStatResultIndex"),
)
if mibBuilder.loadTexts:
    voipCdrStatResultEntry.setStatus("current")
_VoipCdrStatResultIndex_Type = Integer32
_VoipCdrStatResultIndex_Object = MibTableColumn
voipCdrStatResultIndex = _VoipCdrStatResultIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2, 1, 1),
    _VoipCdrStatResultIndex_Type()
)
voipCdrStatResultIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipCdrStatResultIndex.setStatus("current")
_VoipCdrStatResultSlot_Type = Integer32
_VoipCdrStatResultSlot_Object = MibTableColumn
voipCdrStatResultSlot = _VoipCdrStatResultSlot_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2, 1, 2),
    _VoipCdrStatResultSlot_Type()
)
voipCdrStatResultSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipCdrStatResultSlot.setStatus("current")
_VoipCdrStatResultPort_Type = Integer32
_VoipCdrStatResultPort_Object = MibTableColumn
voipCdrStatResultPort = _VoipCdrStatResultPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2, 1, 3),
    _VoipCdrStatResultPort_Type()
)
voipCdrStatResultPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipCdrStatResultPort.setStatus("current")
_VoipCdrStatResultTermName_Type = DisplayString
_VoipCdrStatResultTermName_Object = MibTableColumn
voipCdrStatResultTermName = _VoipCdrStatResultTermName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2, 1, 4),
    _VoipCdrStatResultTermName_Type()
)
voipCdrStatResultTermName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipCdrStatResultTermName.setStatus("current")
_VoipCdrStatResultLineDirection_Type = Integer32
_VoipCdrStatResultLineDirection_Object = MibTableColumn
voipCdrStatResultLineDirection = _VoipCdrStatResultLineDirection_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2, 1, 5),
    _VoipCdrStatResultLineDirection_Type()
)
voipCdrStatResultLineDirection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipCdrStatResultLineDirection.setStatus("current")
_VoipCdrStatResultLocalNumber_Type = DisplayString
_VoipCdrStatResultLocalNumber_Object = MibTableColumn
voipCdrStatResultLocalNumber = _VoipCdrStatResultLocalNumber_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2, 1, 6),
    _VoipCdrStatResultLocalNumber_Type()
)
voipCdrStatResultLocalNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipCdrStatResultLocalNumber.setStatus("current")
_VoipCdrStatResultRemoteNumber_Type = DisplayString
_VoipCdrStatResultRemoteNumber_Object = MibTableColumn
voipCdrStatResultRemoteNumber = _VoipCdrStatResultRemoteNumber_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2, 1, 7),
    _VoipCdrStatResultRemoteNumber_Type()
)
voipCdrStatResultRemoteNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipCdrStatResultRemoteNumber.setStatus("current")
_VoipCdrStatResultOffHookDatetime_Type = DisplayString
_VoipCdrStatResultOffHookDatetime_Object = MibTableColumn
voipCdrStatResultOffHookDatetime = _VoipCdrStatResultOffHookDatetime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2, 1, 8),
    _VoipCdrStatResultOffHookDatetime_Type()
)
voipCdrStatResultOffHookDatetime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipCdrStatResultOffHookDatetime.setStatus("current")
_VoipCdrStatResultOnHookDatetime_Type = DisplayString
_VoipCdrStatResultOnHookDatetime_Object = MibTableColumn
voipCdrStatResultOnHookDatetime = _VoipCdrStatResultOnHookDatetime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2, 1, 9),
    _VoipCdrStatResultOnHookDatetime_Type()
)
voipCdrStatResultOnHookDatetime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipCdrStatResultOnHookDatetime.setStatus("current")
_VoipCdrStatResultRingStartDatetime_Type = DisplayString
_VoipCdrStatResultRingStartDatetime_Object = MibTableColumn
voipCdrStatResultRingStartDatetime = _VoipCdrStatResultRingStartDatetime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2, 1, 10),
    _VoipCdrStatResultRingStartDatetime_Type()
)
voipCdrStatResultRingStartDatetime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipCdrStatResultRingStartDatetime.setStatus("current")
_VoipCdrStatResultRingStopDatetime_Type = DisplayString
_VoipCdrStatResultRingStopDatetime_Object = MibTableColumn
voipCdrStatResultRingStopDatetime = _VoipCdrStatResultRingStopDatetime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2, 1, 11),
    _VoipCdrStatResultRingStopDatetime_Type()
)
voipCdrStatResultRingStopDatetime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipCdrStatResultRingStopDatetime.setStatus("current")
_VoipCdrStatResultRtpStartDatetime_Type = DisplayString
_VoipCdrStatResultRtpStartDatetime_Object = MibTableColumn
voipCdrStatResultRtpStartDatetime = _VoipCdrStatResultRtpStartDatetime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2, 1, 12),
    _VoipCdrStatResultRtpStartDatetime_Type()
)
voipCdrStatResultRtpStartDatetime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipCdrStatResultRtpStartDatetime.setStatus("current")
_VoipCdrStatResultRtpStopDatetime_Type = DisplayString
_VoipCdrStatResultRtpStopDatetime_Object = MibTableColumn
voipCdrStatResultRtpStopDatetime = _VoipCdrStatResultRtpStopDatetime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2, 1, 13),
    _VoipCdrStatResultRtpStopDatetime_Type()
)
voipCdrStatResultRtpStopDatetime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipCdrStatResultRtpStopDatetime.setStatus("current")
_VoipCdrStatResultRtpElapsedTime_Type = Integer32
_VoipCdrStatResultRtpElapsedTime_Object = MibTableColumn
voipCdrStatResultRtpElapsedTime = _VoipCdrStatResultRtpElapsedTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2, 1, 14),
    _VoipCdrStatResultRtpElapsedTime_Type()
)
voipCdrStatResultRtpElapsedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipCdrStatResultRtpElapsedTime.setStatus("current")
_VoipCdrStatResultTxRate_Type = Integer32
_VoipCdrStatResultTxRate_Object = MibTableColumn
voipCdrStatResultTxRate = _VoipCdrStatResultTxRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2, 1, 15),
    _VoipCdrStatResultTxRate_Type()
)
voipCdrStatResultTxRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipCdrStatResultTxRate.setStatus("current")
_VoipCdrStatResultRxRate_Type = Integer32
_VoipCdrStatResultRxRate_Object = MibTableColumn
voipCdrStatResultRxRate = _VoipCdrStatResultRxRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2, 1, 16),
    _VoipCdrStatResultRxRate_Type()
)
voipCdrStatResultRxRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipCdrStatResultRxRate.setStatus("current")
_VoipCdrStatResultTxPktCnt_Type = Counter64
_VoipCdrStatResultTxPktCnt_Object = MibTableColumn
voipCdrStatResultTxPktCnt = _VoipCdrStatResultTxPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2, 1, 17),
    _VoipCdrStatResultTxPktCnt_Type()
)
voipCdrStatResultTxPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipCdrStatResultTxPktCnt.setStatus("current")
_VoipCdrStatResultRxPktCnt_Type = Counter64
_VoipCdrStatResultRxPktCnt_Object = MibTableColumn
voipCdrStatResultRxPktCnt = _VoipCdrStatResultRxPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2, 1, 18),
    _VoipCdrStatResultRxPktCnt_Type()
)
voipCdrStatResultRxPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipCdrStatResultRxPktCnt.setStatus("current")
_VoipCdrStatResultTxFracLost_Type = Integer32
_VoipCdrStatResultTxFracLost_Object = MibTableColumn
voipCdrStatResultTxFracLost = _VoipCdrStatResultTxFracLost_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2, 1, 19),
    _VoipCdrStatResultTxFracLost_Type()
)
voipCdrStatResultTxFracLost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipCdrStatResultTxFracLost.setStatus("current")
_VoipCdrStatResultRxFracLost_Type = Integer32
_VoipCdrStatResultRxFracLost_Object = MibTableColumn
voipCdrStatResultRxFracLost = _VoipCdrStatResultRxFracLost_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2, 1, 20),
    _VoipCdrStatResultRxFracLost_Type()
)
voipCdrStatResultRxFracLost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipCdrStatResultRxFracLost.setStatus("current")
_VoipCdrStatResultTxJitter_Type = Counter64
_VoipCdrStatResultTxJitter_Object = MibTableColumn
voipCdrStatResultTxJitter = _VoipCdrStatResultTxJitter_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2, 1, 21),
    _VoipCdrStatResultTxJitter_Type()
)
voipCdrStatResultTxJitter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipCdrStatResultTxJitter.setStatus("current")
_VoipCdrStatResultRxJitter_Type = Counter64
_VoipCdrStatResultRxJitter_Object = MibTableColumn
voipCdrStatResultRxJitter = _VoipCdrStatResultRxJitter_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2, 1, 22),
    _VoipCdrStatResultRxJitter_Type()
)
voipCdrStatResultRxJitter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipCdrStatResultRxJitter.setStatus("current")
_VoipCdrStatResultTxAvgDelay_Type = Counter64
_VoipCdrStatResultTxAvgDelay_Object = MibTableColumn
voipCdrStatResultTxAvgDelay = _VoipCdrStatResultTxAvgDelay_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2, 1, 23),
    _VoipCdrStatResultTxAvgDelay_Type()
)
voipCdrStatResultTxAvgDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipCdrStatResultTxAvgDelay.setStatus("current")
_VoipCdrStatResultRxAvgDelay_Type = Counter64
_VoipCdrStatResultRxAvgDelay_Object = MibTableColumn
voipCdrStatResultRxAvgDelay = _VoipCdrStatResultRxAvgDelay_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2, 1, 24),
    _VoipCdrStatResultRxAvgDelay_Type()
)
voipCdrStatResultRxAvgDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipCdrStatResultRxAvgDelay.setStatus("current")
_VoipCdrStatResultCode_Type = Integer32
_VoipCdrStatResultCode_Object = MibTableColumn
voipCdrStatResultCode = _VoipCdrStatResultCode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2, 1, 25),
    _VoipCdrStatResultCode_Type()
)
voipCdrStatResultCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipCdrStatResultCode.setStatus("current")
_VoipCdrStatResultErrCode_Type = Integer32
_VoipCdrStatResultErrCode_Object = MibTableColumn
voipCdrStatResultErrCode = _VoipCdrStatResultErrCode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2, 1, 26),
    _VoipCdrStatResultErrCode_Type()
)
voipCdrStatResultErrCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipCdrStatResultErrCode.setStatus("current")
_VoipCdrStatResultTerminationCause_Type = DisplayString
_VoipCdrStatResultTerminationCause_Object = MibTableColumn
voipCdrStatResultTerminationCause = _VoipCdrStatResultTerminationCause_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 10, 2, 1, 27),
    _VoipCdrStatResultTerminationCause_Type()
)
voipCdrStatResultTerminationCause.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipCdrStatResultTerminationCause.setStatus("current")
_VoipH248Statistics_ObjectIdentity = ObjectIdentity
voipH248Statistics = _VoipH248Statistics_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 11)
)
_VoipH248StatisticsInterface_Type = Integer32
_VoipH248StatisticsInterface_Object = MibScalar
voipH248StatisticsInterface = _VoipH248StatisticsInterface_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 11, 1),
    _VoipH248StatisticsInterface_Type()
)
voipH248StatisticsInterface.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipH248StatisticsInterface.setStatus("current")
_VoipH248StatisticsMsgSent_Type = Unsigned64
_VoipH248StatisticsMsgSent_Object = MibScalar
voipH248StatisticsMsgSent = _VoipH248StatisticsMsgSent_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 11, 2),
    _VoipH248StatisticsMsgSent_Type()
)
voipH248StatisticsMsgSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248StatisticsMsgSent.setStatus("current")
_VoipH248StatisticsMsgRecv_Type = Unsigned64
_VoipH248StatisticsMsgRecv_Object = MibScalar
voipH248StatisticsMsgRecv = _VoipH248StatisticsMsgRecv_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 11, 3),
    _VoipH248StatisticsMsgRecv_Type()
)
voipH248StatisticsMsgRecv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248StatisticsMsgRecv.setStatus("current")
_VoipH248StatisticsMsgLost_Type = Unsigned32
_VoipH248StatisticsMsgLost_Object = MibScalar
voipH248StatisticsMsgLost = _VoipH248StatisticsMsgLost_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 11, 4),
    _VoipH248StatisticsMsgLost_Type()
)
voipH248StatisticsMsgLost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248StatisticsMsgLost.setStatus("current")
_VoipH248StatisticsMsgResent_Type = Unsigned32
_VoipH248StatisticsMsgResent_Object = MibScalar
voipH248StatisticsMsgResent = _VoipH248StatisticsMsgResent_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 11, 5),
    _VoipH248StatisticsMsgResent_Type()
)
voipH248StatisticsMsgResent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248StatisticsMsgResent.setStatus("current")
_VoipH248StatisticsErrorMsg_Type = Unsigned32
_VoipH248StatisticsErrorMsg_Object = MibScalar
voipH248StatisticsErrorMsg = _VoipH248StatisticsErrorMsg_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 11, 6),
    _VoipH248StatisticsErrorMsg_Type()
)
voipH248StatisticsErrorMsg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248StatisticsErrorMsg.setStatus("current")
_VoipH248StatisticsUnIdentifiedMsg_Type = Unsigned32
_VoipH248StatisticsUnIdentifiedMsg_Object = MibScalar
voipH248StatisticsUnIdentifiedMsg = _VoipH248StatisticsUnIdentifiedMsg_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 12, 11, 7),
    _VoipH248StatisticsUnIdentifiedMsg_Type()
)
voipH248StatisticsUnIdentifiedMsg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248StatisticsUnIdentifiedMsg.setStatus("current")
_EnetStats_ObjectIdentity = ObjectIdentity
enetStats = _EnetStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 13)
)
_EnetPortStatusTable_Object = MibTable
enetPortStatusTable = _EnetPortStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 13, 1)
)
if mibBuilder.loadTexts:
    enetPortStatusTable.setStatus("current")
_EnetPortStatusEntry_Object = MibTableRow
enetPortStatusEntry = _EnetPortStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 13, 1, 1)
)
enetPortStatusEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    enetPortStatusEntry.setStatus("current")


class _EnetPortStatusLinkUpType_Type(Integer32):
    """Custom type enetPortStatusLinkUpType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("copper", 1),
          ("fiber", 2))
    )


_EnetPortStatusLinkUpType_Type.__name__ = "Integer32"
_EnetPortStatusLinkUpType_Object = MibTableColumn
enetPortStatusLinkUpType = _EnetPortStatusLinkUpType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 13, 1, 1, 1),
    _EnetPortStatusLinkUpType_Type()
)
enetPortStatusLinkUpType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    enetPortStatusLinkUpType.setStatus("current")
_EnetPortStatusLinkUpTime_Type = Unsigned32
_EnetPortStatusLinkUpTime_Object = MibTableColumn
enetPortStatusLinkUpTime = _EnetPortStatusLinkUpTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 13, 1, 1, 2),
    _EnetPortStatusLinkUpTime_Type()
)
enetPortStatusLinkUpTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    enetPortStatusLinkUpTime.setStatus("current")
_EnetPortStatusLinkSpeed_Type = Unsigned32
_EnetPortStatusLinkSpeed_Object = MibTableColumn
enetPortStatusLinkSpeed = _EnetPortStatusLinkSpeed_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 13, 1, 1, 3),
    _EnetPortStatusLinkSpeed_Type()
)
enetPortStatusLinkSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    enetPortStatusLinkSpeed.setStatus("current")


class _EnetPortStatusLinkDuplex_Type(Integer32):
    """Custom type enetPortStatusLinkDuplex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("half", 2))
    )


_EnetPortStatusLinkDuplex_Type.__name__ = "Integer32"
_EnetPortStatusLinkDuplex_Object = MibTableColumn
enetPortStatusLinkDuplex = _EnetPortStatusLinkDuplex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 13, 1, 1, 4),
    _EnetPortStatusLinkDuplex_Type()
)
enetPortStatusLinkDuplex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    enetPortStatusLinkDuplex.setStatus("current")
_EnetPortStatusDataRateTx_Type = Unsigned32
_EnetPortStatusDataRateTx_Object = MibTableColumn
enetPortStatusDataRateTx = _EnetPortStatusDataRateTx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 13, 1, 1, 5),
    _EnetPortStatusDataRateTx_Type()
)
enetPortStatusDataRateTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    enetPortStatusDataRateTx.setStatus("current")
_EnetPortStatusDataRateRx_Type = Unsigned32
_EnetPortStatusDataRateRx_Object = MibTableColumn
enetPortStatusDataRateRx = _EnetPortStatusDataRateRx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 13, 1, 1, 6),
    _EnetPortStatusDataRateRx_Type()
)
enetPortStatusDataRateRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    enetPortStatusDataRateRx.setStatus("current")


class _EnetPortStatusDataUtilTx_Type(Integer32):
    """Custom type enetPortStatusDataUtilTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_EnetPortStatusDataUtilTx_Type.__name__ = "Integer32"
_EnetPortStatusDataUtilTx_Object = MibTableColumn
enetPortStatusDataUtilTx = _EnetPortStatusDataUtilTx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 13, 1, 1, 7),
    _EnetPortStatusDataUtilTx_Type()
)
enetPortStatusDataUtilTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    enetPortStatusDataUtilTx.setStatus("current")


class _EnetPortStatusDataUtilRx_Type(Integer32):
    """Custom type enetPortStatusDataUtilRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_EnetPortStatusDataUtilRx_Type.__name__ = "Integer32"
_EnetPortStatusDataUtilRx_Object = MibTableColumn
enetPortStatusDataUtilRx = _EnetPortStatusDataUtilRx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 13, 1, 1, 8),
    _EnetPortStatusDataUtilRx_Type()
)
enetPortStatusDataUtilRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    enetPortStatusDataUtilRx.setStatus("current")
_SfpPortStatusTable_Object = MibTable
sfpPortStatusTable = _SfpPortStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 13, 2)
)
if mibBuilder.loadTexts:
    sfpPortStatusTable.setStatus("current")
_SfpPortStatusEntry_Object = MibTableRow
sfpPortStatusEntry = _SfpPortStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 13, 2, 1)
)
sfpPortStatusEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    sfpPortStatusEntry.setStatus("current")
_SfpId_Type = DisplayString
_SfpId_Object = MibTableColumn
sfpId = _SfpId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 13, 2, 1, 1),
    _SfpId_Type()
)
sfpId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpId.setStatus("current")
_SfpConnector_Type = DisplayString
_SfpConnector_Object = MibTableColumn
sfpConnector = _SfpConnector_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 13, 2, 1, 2),
    _SfpConnector_Type()
)
sfpConnector.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpConnector.setStatus("current")
_SfpTransceiver_Type = DisplayString
_SfpTransceiver_Object = MibTableColumn
sfpTransceiver = _SfpTransceiver_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 13, 2, 1, 3),
    _SfpTransceiver_Type()
)
sfpTransceiver.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpTransceiver.setStatus("current")
_SfpEncoding_Type = DisplayString
_SfpEncoding_Object = MibTableColumn
sfpEncoding = _SfpEncoding_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 13, 2, 1, 4),
    _SfpEncoding_Type()
)
sfpEncoding.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpEncoding.setStatus("current")
_SfpName_Type = DisplayString
_SfpName_Object = MibTableColumn
sfpName = _SfpName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 13, 2, 1, 5),
    _SfpName_Type()
)
sfpName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpName.setStatus("current")
_SfpPartNumber_Type = DisplayString
_SfpPartNumber_Object = MibTableColumn
sfpPartNumber = _SfpPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 13, 2, 1, 6),
    _SfpPartNumber_Type()
)
sfpPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpPartNumber.setStatus("current")
_SfpRevision_Type = DisplayString
_SfpRevision_Object = MibTableColumn
sfpRevision = _SfpRevision_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 13, 2, 1, 7),
    _SfpRevision_Type()
)
sfpRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpRevision.setStatus("current")
_SfpSerialNumber_Type = DisplayString
_SfpSerialNumber_Object = MibTableColumn
sfpSerialNumber = _SfpSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 13, 2, 1, 8),
    _SfpSerialNumber_Type()
)
sfpSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpSerialNumber.setStatus("current")
_SfpTemperature_Type = Unsigned32
_SfpTemperature_Object = MibTableColumn
sfpTemperature = _SfpTemperature_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 13, 2, 1, 9),
    _SfpTemperature_Type()
)
sfpTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpTemperature.setStatus("current")
_SfpSupplyVoltage_Type = Unsigned32
_SfpSupplyVoltage_Object = MibTableColumn
sfpSupplyVoltage = _SfpSupplyVoltage_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 13, 2, 1, 10),
    _SfpSupplyVoltage_Type()
)
sfpSupplyVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpSupplyVoltage.setStatus("current")
_SfpTxBiasCurrent_Type = Unsigned32
_SfpTxBiasCurrent_Object = MibTableColumn
sfpTxBiasCurrent = _SfpTxBiasCurrent_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 13, 2, 1, 11),
    _SfpTxBiasCurrent_Type()
)
sfpTxBiasCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpTxBiasCurrent.setStatus("current")
_SfpTxPower_Type = Unsigned32
_SfpTxPower_Object = MibTableColumn
sfpTxPower = _SfpTxPower_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 13, 2, 1, 12),
    _SfpTxPower_Type()
)
sfpTxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpTxPower.setStatus("current")
_SfpRxPower_Type = Unsigned32
_SfpRxPower_Object = MibTableColumn
sfpRxPower = _SfpRxPower_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 13, 2, 1, 13),
    _SfpRxPower_Type()
)
sfpRxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpRxPower.setStatus("current")
_IfStats_ObjectIdentity = ObjectIdentity
ifStats = _IfStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 14)
)
_IfStatusTable_Object = MibTable
ifStatusTable = _IfStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 14, 1)
)
if mibBuilder.loadTexts:
    ifStatusTable.setStatus("current")
_IfStatusEntry_Object = MibTableRow
ifStatusEntry = _IfStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 14, 1, 1)
)
ifStatusEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    ifStatusEntry.setStatus("current")
_IfInRate_Type = Counter32
_IfInRate_Object = MibTableColumn
ifInRate = _IfInRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 14, 1, 1, 1),
    _IfInRate_Type()
)
ifInRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifInRate.setStatus("current")
_IfOutRate_Type = Counter32
_IfOutRate_Object = MibTableColumn
ifOutRate = _IfOutRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 14, 1, 1, 2),
    _IfOutRate_Type()
)
ifOutRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifOutRate.setStatus("current")


class _IfCurrentStatus_Type(Integer32):
    """Custom type ifCurrentStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("up", 1),
          ("down", 2),
          ("testing", 3),
          ("unknown", 4),
          ("blocked", 5))
    )


_IfCurrentStatus_Type.__name__ = "Integer32"
_IfCurrentStatus_Object = MibTableColumn
ifCurrentStatus = _IfCurrentStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 14, 1, 1, 3),
    _IfCurrentStatus_Type()
)
ifCurrentStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifCurrentStatus.setStatus("current")
_IfUpTime_Type = Unsigned32
_IfUpTime_Object = MibTableColumn
ifUpTime = _IfUpTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 14, 1, 1, 4),
    _IfUpTime_Type()
)
ifUpTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifUpTime.setStatus("current")
_ImaStats_ObjectIdentity = ObjectIdentity
imaStats = _ImaStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15)
)
_ImaPvcStatsTable_Object = MibTable
imaPvcStatsTable = _ImaPvcStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 1)
)
if mibBuilder.loadTexts:
    imaPvcStatsTable.setStatus("current")
_ImaPvcStatsEntry_Object = MibTableRow
imaPvcStatsEntry = _ImaPvcStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 1, 1)
)
imaPvcStatsEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "imaPvcStatsGroupIndex"),
    (0, "ZYXEL-IES5000-MIB", "imaPvcStatsVpi"),
    (0, "ZYXEL-IES5000-MIB", "imaPvcStatsVci"),
)
if mibBuilder.loadTexts:
    imaPvcStatsEntry.setStatus("current")
_ImaPvcStatsGroupIndex_Type = Integer32
_ImaPvcStatsGroupIndex_Object = MibTableColumn
imaPvcStatsGroupIndex = _ImaPvcStatsGroupIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 1, 1, 1),
    _ImaPvcStatsGroupIndex_Type()
)
imaPvcStatsGroupIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaPvcStatsGroupIndex.setStatus("current")
_ImaPvcStatsVpi_Type = Integer32
_ImaPvcStatsVpi_Object = MibTableColumn
imaPvcStatsVpi = _ImaPvcStatsVpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 1, 1, 2),
    _ImaPvcStatsVpi_Type()
)
imaPvcStatsVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaPvcStatsVpi.setStatus("current")
_ImaPvcStatsVci_Type = Integer32
_ImaPvcStatsVci_Object = MibTableColumn
imaPvcStatsVci = _ImaPvcStatsVci_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 1, 1, 3),
    _ImaPvcStatsVci_Type()
)
imaPvcStatsVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaPvcStatsVci.setStatus("current")
_ImaPvcStatsTxPackets_Type = Counter64
_ImaPvcStatsTxPackets_Object = MibTableColumn
imaPvcStatsTxPackets = _ImaPvcStatsTxPackets_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 1, 1, 4),
    _ImaPvcStatsTxPackets_Type()
)
imaPvcStatsTxPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaPvcStatsTxPackets.setStatus("current")
_ImaPvcStatsRxPackets_Type = Counter64
_ImaPvcStatsRxPackets_Object = MibTableColumn
imaPvcStatsRxPackets = _ImaPvcStatsRxPackets_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 1, 1, 5),
    _ImaPvcStatsRxPackets_Type()
)
imaPvcStatsRxPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaPvcStatsRxPackets.setStatus("current")
_ImaPvcStatsTxUnicast_Type = Counter64
_ImaPvcStatsTxUnicast_Object = MibTableColumn
imaPvcStatsTxUnicast = _ImaPvcStatsTxUnicast_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 1, 1, 6),
    _ImaPvcStatsTxUnicast_Type()
)
imaPvcStatsTxUnicast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaPvcStatsTxUnicast.setStatus("current")
_ImaPvcStatsRxUnicast_Type = Counter64
_ImaPvcStatsRxUnicast_Object = MibTableColumn
imaPvcStatsRxUnicast = _ImaPvcStatsRxUnicast_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 1, 1, 7),
    _ImaPvcStatsRxUnicast_Type()
)
imaPvcStatsRxUnicast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaPvcStatsRxUnicast.setStatus("current")
_ImaPvcStatsTxMulticast_Type = Counter64
_ImaPvcStatsTxMulticast_Object = MibTableColumn
imaPvcStatsTxMulticast = _ImaPvcStatsTxMulticast_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 1, 1, 8),
    _ImaPvcStatsTxMulticast_Type()
)
imaPvcStatsTxMulticast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaPvcStatsTxMulticast.setStatus("current")
_ImaPvcStatsRxMulticast_Type = Counter64
_ImaPvcStatsRxMulticast_Object = MibTableColumn
imaPvcStatsRxMulticast = _ImaPvcStatsRxMulticast_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 1, 1, 9),
    _ImaPvcStatsRxMulticast_Type()
)
imaPvcStatsRxMulticast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaPvcStatsRxMulticast.setStatus("current")
_ImaPvcStatsTxBroadcast_Type = Counter64
_ImaPvcStatsTxBroadcast_Object = MibTableColumn
imaPvcStatsTxBroadcast = _ImaPvcStatsTxBroadcast_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 1, 1, 10),
    _ImaPvcStatsTxBroadcast_Type()
)
imaPvcStatsTxBroadcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaPvcStatsTxBroadcast.setStatus("current")
_ImaPvcStatsRxBroadcast_Type = Counter64
_ImaPvcStatsRxBroadcast_Object = MibTableColumn
imaPvcStatsRxBroadcast = _ImaPvcStatsRxBroadcast_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 1, 1, 11),
    _ImaPvcStatsRxBroadcast_Type()
)
imaPvcStatsRxBroadcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaPvcStatsRxBroadcast.setStatus("current")
_ImaPvcStatsTxDiscard_Type = Counter64
_ImaPvcStatsTxDiscard_Object = MibTableColumn
imaPvcStatsTxDiscard = _ImaPvcStatsTxDiscard_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 1, 1, 12),
    _ImaPvcStatsTxDiscard_Type()
)
imaPvcStatsTxDiscard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaPvcStatsTxDiscard.setStatus("current")
_ImaPvcStatsRxDiscard_Type = Counter64
_ImaPvcStatsRxDiscard_Object = MibTableColumn
imaPvcStatsRxDiscard = _ImaPvcStatsRxDiscard_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 1, 1, 13),
    _ImaPvcStatsRxDiscard_Type()
)
imaPvcStatsRxDiscard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaPvcStatsRxDiscard.setStatus("current")
_ImaGroupStatsTable_Object = MibTable
imaGroupStatsTable = _ImaGroupStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 2)
)
if mibBuilder.loadTexts:
    imaGroupStatsTable.setStatus("current")
_ImaGroupStatsEntry_Object = MibTableRow
imaGroupStatsEntry = _ImaGroupStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 2, 1)
)
imaGroupStatsEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "imaGroupStatsGroupIndex"),
)
if mibBuilder.loadTexts:
    imaGroupStatsEntry.setStatus("current")
_ImaGroupStatsGroupIndex_Type = Integer32
_ImaGroupStatsGroupIndex_Object = MibTableColumn
imaGroupStatsGroupIndex = _ImaGroupStatsGroupIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 2, 1, 1),
    _ImaGroupStatsGroupIndex_Type()
)
imaGroupStatsGroupIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupStatsGroupIndex.setStatus("current")
_ImaGroupStatsTxCells_Type = Counter64
_ImaGroupStatsTxCells_Object = MibTableColumn
imaGroupStatsTxCells = _ImaGroupStatsTxCells_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 2, 1, 2),
    _ImaGroupStatsTxCells_Type()
)
imaGroupStatsTxCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupStatsTxCells.setStatus("current")
_ImaGroupStatsRxCells_Type = Counter64
_ImaGroupStatsRxCells_Object = MibTableColumn
imaGroupStatsRxCells = _ImaGroupStatsRxCells_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 2, 1, 3),
    _ImaGroupStatsRxCells_Type()
)
imaGroupStatsRxCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupStatsRxCells.setStatus("current")
_ImaGroupStatsTxRate_Type = Integer32
_ImaGroupStatsTxRate_Object = MibTableColumn
imaGroupStatsTxRate = _ImaGroupStatsTxRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 2, 1, 4),
    _ImaGroupStatsTxRate_Type()
)
imaGroupStatsTxRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupStatsTxRate.setStatus("current")
_ImaGroupStatsRxRate_Type = Integer32
_ImaGroupStatsRxRate_Object = MibTableColumn
imaGroupStatsRxRate = _ImaGroupStatsRxRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 2, 1, 5),
    _ImaGroupStatsRxRate_Type()
)
imaGroupStatsRxRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupStatsRxRate.setStatus("current")
_ImaGroupStatsCrcErr_Type = Counter64
_ImaGroupStatsCrcErr_Object = MibTableColumn
imaGroupStatsCrcErr = _ImaGroupStatsCrcErr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 2, 1, 6),
    _ImaGroupStatsCrcErr_Type()
)
imaGroupStatsCrcErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupStatsCrcErr.setStatus("current")
_ImaGroupCurrDayTable_Object = MibTable
imaGroupCurrDayTable = _ImaGroupCurrDayTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 3)
)
if mibBuilder.loadTexts:
    imaGroupCurrDayTable.setStatus("current")
_ImaGroupCurrDayEntry_Object = MibTableRow
imaGroupCurrDayEntry = _ImaGroupCurrDayEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 3, 1)
)
imaGroupCurrDayEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "imaGroupCurrDayGroupIndex"),
)
if mibBuilder.loadTexts:
    imaGroupCurrDayEntry.setStatus("current")
_ImaGroupCurrDayGroupIndex_Type = Integer32
_ImaGroupCurrDayGroupIndex_Object = MibTableColumn
imaGroupCurrDayGroupIndex = _ImaGroupCurrDayGroupIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 3, 1, 1),
    _ImaGroupCurrDayGroupIndex_Type()
)
imaGroupCurrDayGroupIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupCurrDayGroupIndex.setStatus("current")
_ImaGroupCurrDayUnavailSecs_Type = Integer32
_ImaGroupCurrDayUnavailSecs_Object = MibTableColumn
imaGroupCurrDayUnavailSecs = _ImaGroupCurrDayUnavailSecs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 3, 1, 2),
    _ImaGroupCurrDayUnavailSecs_Type()
)
imaGroupCurrDayUnavailSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupCurrDayUnavailSecs.setStatus("current")
_ImaGroupCurrDayNeNumFailures_Type = Integer32
_ImaGroupCurrDayNeNumFailures_Object = MibTableColumn
imaGroupCurrDayNeNumFailures = _ImaGroupCurrDayNeNumFailures_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 3, 1, 3),
    _ImaGroupCurrDayNeNumFailures_Type()
)
imaGroupCurrDayNeNumFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupCurrDayNeNumFailures.setStatus("current")
_ImaGroupCurrDayFeNumFailures_Type = Integer32
_ImaGroupCurrDayFeNumFailures_Object = MibTableColumn
imaGroupCurrDayFeNumFailures = _ImaGroupCurrDayFeNumFailures_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 3, 1, 4),
    _ImaGroupCurrDayFeNumFailures_Type()
)
imaGroupCurrDayFeNumFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupCurrDayFeNumFailures.setStatus("current")
_ImaLinkCurrDayTable_Object = MibTable
imaLinkCurrDayTable = _ImaLinkCurrDayTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 4)
)
if mibBuilder.loadTexts:
    imaLinkCurrDayTable.setStatus("current")
_ImaLinkCurrDayEntry_Object = MibTableRow
imaLinkCurrDayEntry = _ImaLinkCurrDayEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 4, 1)
)
imaLinkCurrDayEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "imaLinkCurrDayIfindex"),
)
if mibBuilder.loadTexts:
    imaLinkCurrDayEntry.setStatus("current")
_ImaLinkCurrDayIfindex_Type = Integer32
_ImaLinkCurrDayIfindex_Object = MibTableColumn
imaLinkCurrDayIfindex = _ImaLinkCurrDayIfindex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 4, 1, 1),
    _ImaLinkCurrDayIfindex_Type()
)
imaLinkCurrDayIfindex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaLinkCurrDayIfindex.setStatus("current")
_ImaLinkCurrDayImaViolations_Type = Integer32
_ImaLinkCurrDayImaViolations_Object = MibTableColumn
imaLinkCurrDayImaViolations = _ImaLinkCurrDayImaViolations_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 4, 1, 2),
    _ImaLinkCurrDayImaViolations_Type()
)
imaLinkCurrDayImaViolations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaLinkCurrDayImaViolations.setStatus("current")
_ImaLinkCurrDayOifAnomalies_Type = Integer32
_ImaLinkCurrDayOifAnomalies_Object = MibTableColumn
imaLinkCurrDayOifAnomalies = _ImaLinkCurrDayOifAnomalies_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 4, 1, 3),
    _ImaLinkCurrDayOifAnomalies_Type()
)
imaLinkCurrDayOifAnomalies.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaLinkCurrDayOifAnomalies.setStatus("current")
_ImaLinkCurrDayNeSevErroredSecs_Type = Integer32
_ImaLinkCurrDayNeSevErroredSecs_Object = MibTableColumn
imaLinkCurrDayNeSevErroredSecs = _ImaLinkCurrDayNeSevErroredSecs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 4, 1, 4),
    _ImaLinkCurrDayNeSevErroredSecs_Type()
)
imaLinkCurrDayNeSevErroredSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaLinkCurrDayNeSevErroredSecs.setStatus("current")
_ImaLinkCurrDayFeSevErroredSecs_Type = Integer32
_ImaLinkCurrDayFeSevErroredSecs_Object = MibTableColumn
imaLinkCurrDayFeSevErroredSecs = _ImaLinkCurrDayFeSevErroredSecs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 4, 1, 5),
    _ImaLinkCurrDayFeSevErroredSecs_Type()
)
imaLinkCurrDayFeSevErroredSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaLinkCurrDayFeSevErroredSecs.setStatus("current")
_ImaLinkCurrDayNeUnavailSecs_Type = Integer32
_ImaLinkCurrDayNeUnavailSecs_Object = MibTableColumn
imaLinkCurrDayNeUnavailSecs = _ImaLinkCurrDayNeUnavailSecs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 4, 1, 6),
    _ImaLinkCurrDayNeUnavailSecs_Type()
)
imaLinkCurrDayNeUnavailSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaLinkCurrDayNeUnavailSecs.setStatus("current")
_ImaLinkCurrDayFeUnavailSecs_Type = Integer32
_ImaLinkCurrDayFeUnavailSecs_Object = MibTableColumn
imaLinkCurrDayFeUnavailSecs = _ImaLinkCurrDayFeUnavailSecs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 4, 1, 7),
    _ImaLinkCurrDayFeUnavailSecs_Type()
)
imaLinkCurrDayFeUnavailSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaLinkCurrDayFeUnavailSecs.setStatus("current")
_ImaLinkCurrDayNeTxUnusableSecs_Type = Integer32
_ImaLinkCurrDayNeTxUnusableSecs_Object = MibTableColumn
imaLinkCurrDayNeTxUnusableSecs = _ImaLinkCurrDayNeTxUnusableSecs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 4, 1, 8),
    _ImaLinkCurrDayNeTxUnusableSecs_Type()
)
imaLinkCurrDayNeTxUnusableSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaLinkCurrDayNeTxUnusableSecs.setStatus("current")
_ImaLinkCurrDayNeRxUnusableSecs_Type = Integer32
_ImaLinkCurrDayNeRxUnusableSecs_Object = MibTableColumn
imaLinkCurrDayNeRxUnusableSecs = _ImaLinkCurrDayNeRxUnusableSecs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 4, 1, 9),
    _ImaLinkCurrDayNeRxUnusableSecs_Type()
)
imaLinkCurrDayNeRxUnusableSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaLinkCurrDayNeRxUnusableSecs.setStatus("current")
_ImaLinkCurrDayFeTxUnusableSecs_Type = Integer32
_ImaLinkCurrDayFeTxUnusableSecs_Object = MibTableColumn
imaLinkCurrDayFeTxUnusableSecs = _ImaLinkCurrDayFeTxUnusableSecs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 4, 1, 10),
    _ImaLinkCurrDayFeTxUnusableSecs_Type()
)
imaLinkCurrDayFeTxUnusableSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaLinkCurrDayFeTxUnusableSecs.setStatus("current")
_ImaLinkCurrDayFeRxUnusableSecs_Type = Integer32
_ImaLinkCurrDayFeRxUnusableSecs_Object = MibTableColumn
imaLinkCurrDayFeRxUnusableSecs = _ImaLinkCurrDayFeRxUnusableSecs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 4, 1, 11),
    _ImaLinkCurrDayFeRxUnusableSecs_Type()
)
imaLinkCurrDayFeRxUnusableSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaLinkCurrDayFeRxUnusableSecs.setStatus("current")
_ImaLinkCurrDayNeTxNumFailures_Type = Integer32
_ImaLinkCurrDayNeTxNumFailures_Object = MibTableColumn
imaLinkCurrDayNeTxNumFailures = _ImaLinkCurrDayNeTxNumFailures_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 4, 1, 12),
    _ImaLinkCurrDayNeTxNumFailures_Type()
)
imaLinkCurrDayNeTxNumFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaLinkCurrDayNeTxNumFailures.setStatus("current")
_ImaLinkCurrDayNeRxNumFailures_Type = Integer32
_ImaLinkCurrDayNeRxNumFailures_Object = MibTableColumn
imaLinkCurrDayNeRxNumFailures = _ImaLinkCurrDayNeRxNumFailures_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 4, 1, 13),
    _ImaLinkCurrDayNeRxNumFailures_Type()
)
imaLinkCurrDayNeRxNumFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaLinkCurrDayNeRxNumFailures.setStatus("current")
_ImaLinkCurrDayFeTxNumFailures_Type = Integer32
_ImaLinkCurrDayFeTxNumFailures_Object = MibTableColumn
imaLinkCurrDayFeTxNumFailures = _ImaLinkCurrDayFeTxNumFailures_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 4, 1, 14),
    _ImaLinkCurrDayFeTxNumFailures_Type()
)
imaLinkCurrDayFeTxNumFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaLinkCurrDayFeTxNumFailures.setStatus("current")
_ImaLinkCurrDayFeRxNumFailures_Type = Integer32
_ImaLinkCurrDayFeRxNumFailures_Object = MibTableColumn
imaLinkCurrDayFeRxNumFailures = _ImaLinkCurrDayFeRxNumFailures_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 4, 1, 15),
    _ImaLinkCurrDayFeRxNumFailures_Type()
)
imaLinkCurrDayFeRxNumFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaLinkCurrDayFeRxNumFailures.setStatus("current")
_ImaLinkCurrDayTxStuffs_Type = Integer32
_ImaLinkCurrDayTxStuffs_Object = MibTableColumn
imaLinkCurrDayTxStuffs = _ImaLinkCurrDayTxStuffs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 4, 1, 16),
    _ImaLinkCurrDayTxStuffs_Type()
)
imaLinkCurrDayTxStuffs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaLinkCurrDayTxStuffs.setStatus("current")
_ImaLinkCurrDayRxStuffs_Type = Integer32
_ImaLinkCurrDayRxStuffs_Object = MibTableColumn
imaLinkCurrDayRxStuffs = _ImaLinkCurrDayRxStuffs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 4, 1, 17),
    _ImaLinkCurrDayRxStuffs_Type()
)
imaLinkCurrDayRxStuffs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaLinkCurrDayRxStuffs.setStatus("current")
_ImaGroupConfReadyTable_Object = MibTable
imaGroupConfReadyTable = _ImaGroupConfReadyTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 5)
)
if mibBuilder.loadTexts:
    imaGroupConfReadyTable.setStatus("current")
_ImaGroupConfReadyEntry_Object = MibTableRow
imaGroupConfReadyEntry = _ImaGroupConfReadyEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 5, 1)
)
imaGroupConfReadyEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "imaGroupConfReadyIndex"),
)
if mibBuilder.loadTexts:
    imaGroupConfReadyEntry.setStatus("current")
_ImaGroupConfReadyIndex_Type = Integer32
_ImaGroupConfReadyIndex_Object = MibTableColumn
imaGroupConfReadyIndex = _ImaGroupConfReadyIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 5, 1, 1),
    _ImaGroupConfReadyIndex_Type()
)
imaGroupConfReadyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupConfReadyIndex.setStatus("current")


class _ImaGroupConfReadyState_Type(Integer32):
    """Custom type imaGroupConfReadyState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("conf-ready", 1),
          ("conf-forbidden", 2))
    )


_ImaGroupConfReadyState_Type.__name__ = "Integer32"
_ImaGroupConfReadyState_Object = MibTableColumn
imaGroupConfReadyState = _ImaGroupConfReadyState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 5, 1, 2),
    _ImaGroupConfReadyState_Type()
)
imaGroupConfReadyState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupConfReadyState.setStatus("current")
_ImaGroupStatusTable_Object = MibTable
imaGroupStatusTable = _ImaGroupStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 6)
)
if mibBuilder.loadTexts:
    imaGroupStatusTable.setStatus("current")
_ImaGroupStatusEntry_Object = MibTableRow
imaGroupStatusEntry = _ImaGroupStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 6, 1)
)
imaGroupStatusEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "imaGroupStatusGroupIndex"),
)
if mibBuilder.loadTexts:
    imaGroupStatusEntry.setStatus("current")
_ImaGroupStatusGroupIndex_Type = Integer32
_ImaGroupStatusGroupIndex_Object = MibTableColumn
imaGroupStatusGroupIndex = _ImaGroupStatusGroupIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 6, 1, 1),
    _ImaGroupStatusGroupIndex_Type()
)
imaGroupStatusGroupIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupStatusGroupIndex.setStatus("current")
_ImaGroupStatusTxPayloadRate_Type = Integer32
_ImaGroupStatusTxPayloadRate_Object = MibTableColumn
imaGroupStatusTxPayloadRate = _ImaGroupStatusTxPayloadRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 6, 1, 2),
    _ImaGroupStatusTxPayloadRate_Type()
)
imaGroupStatusTxPayloadRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupStatusTxPayloadRate.setStatus("current")
_ImaGroupStatusRxPayloadRate_Type = Integer32
_ImaGroupStatusRxPayloadRate_Object = MibTableColumn
imaGroupStatusRxPayloadRate = _ImaGroupStatusRxPayloadRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 15, 6, 1, 3),
    _ImaGroupStatusRxPayloadRate_Type()
)
imaGroupStatusRxPayloadRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupStatusRxPayloadRate.setStatus("current")
_E1Stats_ObjectIdentity = ObjectIdentity
e1Stats = _E1Stats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 16)
)
_E1CurrDayTable_Object = MibTable
e1CurrDayTable = _E1CurrDayTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 16, 1)
)
if mibBuilder.loadTexts:
    e1CurrDayTable.setStatus("current")
_E1CurrDayEntry_Object = MibTableRow
e1CurrDayEntry = _E1CurrDayEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 16, 1, 1)
)
e1CurrDayEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "e1CurrDayIfindex"),
)
if mibBuilder.loadTexts:
    e1CurrDayEntry.setStatus("current")
_E1CurrDayIfindex_Type = Integer32
_E1CurrDayIfindex_Object = MibTableColumn
e1CurrDayIfindex = _E1CurrDayIfindex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 16, 1, 1, 1),
    _E1CurrDayIfindex_Type()
)
e1CurrDayIfindex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1CurrDayIfindex.setStatus("current")
_E1CurrDayLCVs_Type = Integer32
_E1CurrDayLCVs_Object = MibTableColumn
e1CurrDayLCVs = _E1CurrDayLCVs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 16, 1, 1, 2),
    _E1CurrDayLCVs_Type()
)
e1CurrDayLCVs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1CurrDayLCVs.setStatus("current")
_E1CurrDayPCVs_Type = Integer32
_E1CurrDayPCVs_Object = MibTableColumn
e1CurrDayPCVs = _E1CurrDayPCVs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 16, 1, 1, 3),
    _E1CurrDayPCVs_Type()
)
e1CurrDayPCVs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1CurrDayPCVs.setStatus("current")
_E1CurrDayESs_Type = Integer32
_E1CurrDayESs_Object = MibTableColumn
e1CurrDayESs = _E1CurrDayESs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 16, 1, 1, 4),
    _E1CurrDayESs_Type()
)
e1CurrDayESs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1CurrDayESs.setStatus("current")
_E1CurrDaySESs_Type = Integer32
_E1CurrDaySESs_Object = MibTableColumn
e1CurrDaySESs = _E1CurrDaySESs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 16, 1, 1, 5),
    _E1CurrDaySESs_Type()
)
e1CurrDaySESs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1CurrDaySESs.setStatus("current")
_E1CurrDayUASs_Type = Integer32
_E1CurrDayUASs_Object = MibTableColumn
e1CurrDayUASs = _E1CurrDayUASs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 16, 1, 1, 6),
    _E1CurrDayUASs_Type()
)
e1CurrDayUASs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1CurrDayUASs.setStatus("current")
_E1StatusTable_Object = MibTable
e1StatusTable = _E1StatusTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 16, 2)
)
if mibBuilder.loadTexts:
    e1StatusTable.setStatus("current")
_E1StatusEntry_Object = MibTableRow
e1StatusEntry = _E1StatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 16, 2, 1)
)
e1StatusEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "e1StatusIfindex"),
)
if mibBuilder.loadTexts:
    e1StatusEntry.setStatus("current")
_E1StatusIfindex_Type = Integer32
_E1StatusIfindex_Object = MibTableColumn
e1StatusIfindex = _E1StatusIfindex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 16, 2, 1, 1),
    _E1StatusIfindex_Type()
)
e1StatusIfindex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1StatusIfindex.setStatus("current")
_E1StatusTxPayloadRate_Type = Integer32
_E1StatusTxPayloadRate_Object = MibTableColumn
e1StatusTxPayloadRate = _E1StatusTxPayloadRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 16, 2, 1, 2),
    _E1StatusTxPayloadRate_Type()
)
e1StatusTxPayloadRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1StatusTxPayloadRate.setStatus("current")
_E1StatusRxPayloadRate_Type = Integer32
_E1StatusRxPayloadRate_Object = MibTableColumn
e1StatusRxPayloadRate = _E1StatusRxPayloadRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 16, 2, 1, 3),
    _E1StatusRxPayloadRate_Type()
)
e1StatusRxPayloadRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1StatusRxPayloadRate.setStatus("current")
_E1StatusUpTime_Type = Unsigned32
_E1StatusUpTime_Object = MibTableColumn
e1StatusUpTime = _E1StatusUpTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 16, 2, 1, 4),
    _E1StatusUpTime_Type()
)
e1StatusUpTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1StatusUpTime.setStatus("current")
_LoopguardStats_ObjectIdentity = ObjectIdentity
loopguardStats = _LoopguardStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 18)
)
_LoopguardStatsTable_Object = MibTable
loopguardStatsTable = _LoopguardStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 18, 1)
)
if mibBuilder.loadTexts:
    loopguardStatsTable.setStatus("current")
_LoopguardStatsEntry_Object = MibTableRow
loopguardStatsEntry = _LoopguardStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 18, 1, 1)
)
loopguardStatsEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    loopguardStatsEntry.setStatus("current")
_LoopguardStatsPort_Type = Integer32
_LoopguardStatsPort_Object = MibTableColumn
loopguardStatsPort = _LoopguardStatsPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 18, 1, 1, 1),
    _LoopguardStatsPort_Type()
)
loopguardStatsPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    loopguardStatsPort.setStatus("current")


class _LoopguardStatsPortStatus_Type(Integer32):
    """Custom type loopguardStatsPortStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("link-down", 0),
          ("link-up", 1),
          ("blocked-by-loopguard", 2))
    )


_LoopguardStatsPortStatus_Type.__name__ = "Integer32"
_LoopguardStatsPortStatus_Object = MibTableColumn
loopguardStatsPortStatus = _LoopguardStatsPortStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 18, 1, 1, 2),
    _LoopguardStatsPortStatus_Type()
)
loopguardStatsPortStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    loopguardStatsPortStatus.setStatus("current")


class _LoopguardStatsLoopguardStatus_Type(Integer32):
    """Custom type loopguardStatsLoopguardStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_LoopguardStatsLoopguardStatus_Type.__name__ = "Integer32"
_LoopguardStatsLoopguardStatus_Object = MibTableColumn
loopguardStatsLoopguardStatus = _LoopguardStatsLoopguardStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 18, 1, 1, 3),
    _LoopguardStatsLoopguardStatus_Type()
)
loopguardStatsLoopguardStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    loopguardStatsLoopguardStatus.setStatus("current")
_LoopguardStatsTotalTxPackets_Type = Integer32
_LoopguardStatsTotalTxPackets_Object = MibTableColumn
loopguardStatsTotalTxPackets = _LoopguardStatsTotalTxPackets_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 18, 1, 1, 4),
    _LoopguardStatsTotalTxPackets_Type()
)
loopguardStatsTotalTxPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    loopguardStatsTotalTxPackets.setStatus("current")
_LoopguardStatsTotalRxPackets_Type = Integer32
_LoopguardStatsTotalRxPackets_Object = MibTableColumn
loopguardStatsTotalRxPackets = _LoopguardStatsTotalRxPackets_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 18, 1, 1, 5),
    _LoopguardStatsTotalRxPackets_Type()
)
loopguardStatsTotalRxPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    loopguardStatsTotalRxPackets.setStatus("current")
_LoopguardStatsBadPackets_Type = Integer32
_LoopguardStatsBadPackets_Object = MibTableColumn
loopguardStatsBadPackets = _LoopguardStatsBadPackets_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 18, 1, 1, 6),
    _LoopguardStatsBadPackets_Type()
)
loopguardStatsBadPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    loopguardStatsBadPackets.setStatus("current")
_LoopguardStatsShutdownTime_Type = DisplayString
_LoopguardStatsShutdownTime_Object = MibTableColumn
loopguardStatsShutdownTime = _LoopguardStatsShutdownTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 18, 1, 1, 7),
    _LoopguardStatsShutdownTime_Type()
)
loopguardStatsShutdownTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    loopguardStatsShutdownTime.setStatus("current")
_StpStats_ObjectIdentity = ObjectIdentity
stpStats = _StpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 19)
)
_StpPortStatsTable_Object = MibTable
stpPortStatsTable = _StpPortStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 19, 1)
)
if mibBuilder.loadTexts:
    stpPortStatsTable.setStatus("current")
_StpPortStatsEntry_Object = MibTableRow
stpPortStatsEntry = _StpPortStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 19, 1, 1)
)
stpPortStatsEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    stpPortStatsEntry.setStatus("current")


class _StpPortStatus_Type(Integer32):
    """Custom type stpPortStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("discarding", 1),
          ("learning", 2),
          ("forwarding", 3),
          ("down", 4))
    )


_StpPortStatus_Type.__name__ = "Integer32"
_StpPortStatus_Object = MibTableColumn
stpPortStatus = _StpPortStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 19, 1, 1, 1),
    _StpPortStatus_Type()
)
stpPortStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpPortStatus.setStatus("current")
_StpStatsPortNum_ObjectIdentity = ObjectIdentity
stpStatsPortNum = _StpStatsPortNum_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 19, 2)
)
_StpStatsPortNumForwarding_Type = Integer32
_StpStatsPortNumForwarding_Object = MibScalar
stpStatsPortNumForwarding = _StpStatsPortNumForwarding_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 19, 2, 1),
    _StpStatsPortNumForwarding_Type()
)
stpStatsPortNumForwarding.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpStatsPortNumForwarding.setStatus("current")
_StpStatsPortNumLearning_Type = Integer32
_StpStatsPortNumLearning_Object = MibScalar
stpStatsPortNumLearning = _StpStatsPortNumLearning_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 19, 2, 2),
    _StpStatsPortNumLearning_Type()
)
stpStatsPortNumLearning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpStatsPortNumLearning.setStatus("current")
_StpStatsPortNumDiscarding_Type = Integer32
_StpStatsPortNumDiscarding_Object = MibScalar
stpStatsPortNumDiscarding = _StpStatsPortNumDiscarding_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 19, 2, 3),
    _StpStatsPortNumDiscarding_Type()
)
stpStatsPortNumDiscarding.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpStatsPortNumDiscarding.setStatus("current")
_StpStatsPortNumDown_Type = Integer32
_StpStatsPortNumDown_Object = MibScalar
stpStatsPortNumDown = _StpStatsPortNumDown_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 19, 2, 4),
    _StpStatsPortNumDown_Type()
)
stpStatsPortNumDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpStatsPortNumDown.setStatus("current")
_GbondStats_ObjectIdentity = ObjectIdentity
gbondStats = _GbondStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 20)
)
_GbondStatsTable_Object = MibTable
gbondStatsTable = _GbondStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 20, 1)
)
if mibBuilder.loadTexts:
    gbondStatsTable.setStatus("current")
_GbondStatsEntry_Object = MibTableRow
gbondStatsEntry = _GbondStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 20, 1, 1)
)
gbondStatsEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "slotId"),
    (0, "ZYXEL-IES5000-MIB", "gbondStatsName"),
)
if mibBuilder.loadTexts:
    gbondStatsEntry.setStatus("current")
_GbondStatsName_Type = DisplayString
_GbondStatsName_Object = MibTableColumn
gbondStatsName = _GbondStatsName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 20, 1, 1, 1),
    _GbondStatsName_Type()
)
gbondStatsName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    gbondStatsName.setStatus("current")
_GbondStatsUpRate_Type = Unsigned32
_GbondStatsUpRate_Object = MibTableColumn
gbondStatsUpRate = _GbondStatsUpRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 20, 1, 1, 2),
    _GbondStatsUpRate_Type()
)
gbondStatsUpRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    gbondStatsUpRate.setStatus("current")
_GbondStatsDownRate_Type = Unsigned32
_GbondStatsDownRate_Object = MibTableColumn
gbondStatsDownRate = _GbondStatsDownRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 20, 1, 1, 3),
    _GbondStatsDownRate_Type()
)
gbondStatsDownRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    gbondStatsDownRate.setStatus("current")
_GbondStatsMember_Type = OctetString
_GbondStatsMember_Object = MibTableColumn
gbondStatsMember = _GbondStatsMember_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 20, 1, 1, 4),
    _GbondStatsMember_Type()
)
gbondStatsMember.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    gbondStatsMember.setStatus("current")
_GbondStatslinkup_Type = OctetString
_GbondStatslinkup_Object = MibTableColumn
gbondStatslinkup = _GbondStatslinkup_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 20, 1, 1, 5),
    _GbondStatslinkup_Type()
)
gbondStatslinkup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    gbondStatslinkup.setStatus("current")
_GbondStatsTx_Type = OctetString
_GbondStatsTx_Object = MibTableColumn
gbondStatsTx = _GbondStatsTx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 20, 1, 1, 6),
    _GbondStatsTx_Type()
)
gbondStatsTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    gbondStatsTx.setStatus("current")
_GbondStatsRx_Type = OctetString
_GbondStatsRx_Object = MibTableColumn
gbondStatsRx = _GbondStatsRx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 20, 1, 1, 7),
    _GbondStatsRx_Type()
)
gbondStatsRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    gbondStatsRx.setStatus("current")
_GbondStatslinkdown_Type = OctetString
_GbondStatslinkdown_Object = MibTableColumn
gbondStatslinkdown = _GbondStatslinkdown_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 20, 1, 1, 8),
    _GbondStatslinkdown_Type()
)
gbondStatslinkdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    gbondStatslinkdown.setStatus("current")


class _GbondStatsTCMode_Type(Integer32):
    """Custom type gbondStatsTCMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("atm", 1),
          ("efm", 2))
    )


_GbondStatsTCMode_Type.__name__ = "Integer32"
_GbondStatsTCMode_Object = MibTableColumn
gbondStatsTCMode = _GbondStatsTCMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 20, 1, 1, 9),
    _GbondStatsTCMode_Type()
)
gbondStatsTCMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    gbondStatsTCMode.setStatus("current")
_GbondStatsTxRate_Type = Unsigned32
_GbondStatsTxRate_Object = MibTableColumn
gbondStatsTxRate = _GbondStatsTxRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 20, 1, 1, 10),
    _GbondStatsTxRate_Type()
)
gbondStatsTxRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    gbondStatsTxRate.setStatus("current")
_GbondStatsRxRate_Type = Unsigned32
_GbondStatsRxRate_Object = MibTableColumn
gbondStatsRxRate = _GbondStatsRxRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 20, 1, 1, 11),
    _GbondStatsRxRate_Type()
)
gbondStatsRxRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    gbondStatsRxRate.setStatus("current")
_Vdsl2Stats_ObjectIdentity = ObjectIdentity
vdsl2Stats = _Vdsl2Stats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21)
)
_VdslChanExtendedTable_Object = MibTable
vdslChanExtendedTable = _VdslChanExtendedTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 1)
)
if mibBuilder.loadTexts:
    vdslChanExtendedTable.setStatus("current")
_VdslChanExtendedEntry_Object = MibTableRow
vdslChanExtendedEntry = _VdslChanExtendedEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 1, 1)
)
vdslChanExtendedEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "VDSL-LINE-MIB", "vdslPhysSide"),
)
if mibBuilder.loadTexts:
    vdslChanExtendedEntry.setStatus("current")
_VdslChanExtendedPrevTxRate_Type = Gauge32
_VdslChanExtendedPrevTxRate_Object = MibTableColumn
vdslChanExtendedPrevTxRate = _VdslChanExtendedPrevTxRate_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 1, 1, 1),
    _VdslChanExtendedPrevTxRate_Type()
)
vdslChanExtendedPrevTxRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslChanExtendedPrevTxRate.setStatus("current")
_VdslChanExtendedActualRaMode_Type = Xdsl2StatusActualRaMode
_VdslChanExtendedActualRaMode_Object = MibTableColumn
vdslChanExtendedActualRaMode = _VdslChanExtendedActualRaMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 1, 1, 2),
    _VdslChanExtendedActualRaMode_Type()
)
vdslChanExtendedActualRaMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslChanExtendedActualRaMode.setStatus("current")
_VdslChanExtendedRetransmissionMode_Type = Xdsl2StatusRtxMode
_VdslChanExtendedRetransmissionMode_Object = MibTableColumn
vdslChanExtendedRetransmissionMode = _VdslChanExtendedRetransmissionMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 1, 1, 3),
    _VdslChanExtendedRetransmissionMode_Type()
)
vdslChanExtendedRetransmissionMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslChanExtendedRetransmissionMode.setStatus("current")
_VdslChanExtendedRetransmissionOverhead_Type = Unsigned32
_VdslChanExtendedRetransmissionOverhead_Object = MibTableColumn
vdslChanExtendedRetransmissionOverhead = _VdslChanExtendedRetransmissionOverhead_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 1, 1, 4),
    _VdslChanExtendedRetransmissionOverhead_Type()
)
vdslChanExtendedRetransmissionOverhead.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslChanExtendedRetransmissionOverhead.setStatus("current")
if mibBuilder.loadTexts:
    vdslChanExtendedRetransmissionOverhead.setUnits("kbps")
_VdslChanExtendedGinpFramingType_Type = Unsigned32
_VdslChanExtendedGinpFramingType_Object = MibTableColumn
vdslChanExtendedGinpFramingType = _VdslChanExtendedGinpFramingType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 1, 1, 5),
    _VdslChanExtendedGinpFramingType_Type()
)
vdslChanExtendedGinpFramingType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslChanExtendedGinpFramingType.setStatus("current")
_VdslChanExtendedActualInpAgainstREIN_Type = Unsigned32
_VdslChanExtendedActualInpAgainstREIN_Object = MibTableColumn
vdslChanExtendedActualInpAgainstREIN = _VdslChanExtendedActualInpAgainstREIN_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 1, 1, 6),
    _VdslChanExtendedActualInpAgainstREIN_Type()
)
vdslChanExtendedActualInpAgainstREIN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslChanExtendedActualInpAgainstREIN.setStatus("current")
if mibBuilder.loadTexts:
    vdslChanExtendedActualInpAgainstREIN.setUnits("1/2 symbol")
_VdslChanExtendedReedSolomonCodeWordPerDtu_Type = Unsigned32
_VdslChanExtendedReedSolomonCodeWordPerDtu_Object = MibTableColumn
vdslChanExtendedReedSolomonCodeWordPerDtu = _VdslChanExtendedReedSolomonCodeWordPerDtu_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 1, 1, 7),
    _VdslChanExtendedReedSolomonCodeWordPerDtu_Type()
)
vdslChanExtendedReedSolomonCodeWordPerDtu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslChanExtendedReedSolomonCodeWordPerDtu.setStatus("current")
_VdslPerfDataExtendedTable_Object = MibTable
vdslPerfDataExtendedTable = _VdslPerfDataExtendedTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 2)
)
if mibBuilder.loadTexts:
    vdslPerfDataExtendedTable.setStatus("current")
_VdslPerfDataExtendedEntry_Object = MibTableRow
vdslPerfDataExtendedEntry = _VdslPerfDataExtendedEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 2, 1)
)
vdslPerfDataExtendedEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "VDSL-LINE-MIB", "vdslPhysSide"),
)
if mibBuilder.loadTexts:
    vdslPerfDataExtendedEntry.setStatus("current")
_VdslPerfDataFECs_Type = Unsigned32
_VdslPerfDataFECs_Object = MibTableColumn
vdslPerfDataFECs = _VdslPerfDataFECs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 2, 1, 1),
    _VdslPerfDataFECs_Type()
)
vdslPerfDataFECs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslPerfDataFECs.setStatus("current")
_VdslChanPerfDataExtendedTable_Object = MibTable
vdslChanPerfDataExtendedTable = _VdslChanPerfDataExtendedTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 3)
)
if mibBuilder.loadTexts:
    vdslChanPerfDataExtendedTable.setStatus("current")
_VdslChanPerfDataExtendedEntry_Object = MibTableRow
vdslChanPerfDataExtendedEntry = _VdslChanPerfDataExtendedEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 3, 1)
)
vdslChanPerfDataExtendedEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "VDSL-LINE-MIB", "vdslPhysSide"),
)
if mibBuilder.loadTexts:
    vdslChanPerfDataExtendedEntry.setStatus("current")
_VdslChanPerfDataCorrectedBlks_Type = Counter32
_VdslChanPerfDataCorrectedBlks_Object = MibTableColumn
vdslChanPerfDataCorrectedBlks = _VdslChanPerfDataCorrectedBlks_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 3, 1, 1),
    _VdslChanPerfDataCorrectedBlks_Type()
)
vdslChanPerfDataCorrectedBlks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslChanPerfDataCorrectedBlks.setStatus("current")
_VdslChanPerfDataUncorrectBlks_Type = Counter32
_VdslChanPerfDataUncorrectBlks_Object = MibTableColumn
vdslChanPerfDataUncorrectBlks = _VdslChanPerfDataUncorrectBlks_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 3, 1, 2),
    _VdslChanPerfDataUncorrectBlks_Type()
)
vdslChanPerfDataUncorrectBlks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslChanPerfDataUncorrectBlks.setStatus("current")
_VdslChanPerfDataCodeViolations_Type = Unsigned32
_VdslChanPerfDataCodeViolations_Object = MibTableColumn
vdslChanPerfDataCodeViolations = _VdslChanPerfDataCodeViolations_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 3, 1, 3),
    _VdslChanPerfDataCodeViolations_Type()
)
vdslChanPerfDataCodeViolations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vdslChanPerfDataCodeViolations.setStatus("current")
_Xdsl2PMEx_ObjectIdentity = ObjectIdentity
xdsl2PMEx = _Xdsl2PMEx_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4)
)
_Xdsl2PMLineEx_ObjectIdentity = ObjectIdentity
xdsl2PMLineEx = _Xdsl2PMLineEx_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1)
)
_Xdsl2PMLineCurrExtendedTable_Object = MibTable
xdsl2PMLineCurrExtendedTable = _Xdsl2PMLineCurrExtendedTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1)
)
if mibBuilder.loadTexts:
    xdsl2PMLineCurrExtendedTable.setStatus("current")
_Xdsl2PMLineCurrExtendedEntry_Object = MibTableRow
xdsl2PMLineCurrExtendedEntry = _Xdsl2PMLineCurrExtendedEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1)
)
xdsl2PMLineCurrExtendedEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "VDSL2-LINE-MIB", "xdsl2PMLCurrUnit"),
)
if mibBuilder.loadTexts:
    xdsl2PMLineCurrExtendedEntry.setStatus("current")
_Xdsl2PMLCurr15MMonitoredTime_Type = Integer32
_Xdsl2PMLCurr15MMonitoredTime_Object = MibTableColumn
xdsl2PMLCurr15MMonitoredTime = _Xdsl2PMLCurr15MMonitoredTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 1),
    _Xdsl2PMLCurr15MMonitoredTime_Type()
)
xdsl2PMLCurr15MMonitoredTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLCurr15MMonitoredTime.setStatus("current")
_Xdsl2PMLCurr15MLofs_Type = Counter32
_Xdsl2PMLCurr15MLofs_Object = MibTableColumn
xdsl2PMLCurr15MLofs = _Xdsl2PMLCurr15MLofs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 2),
    _Xdsl2PMLCurr15MLofs_Type()
)
xdsl2PMLCurr15MLofs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLCurr15MLofs.setStatus("current")
_Xdsl2PMLCurr15MLols_Type = Counter32
_Xdsl2PMLCurr15MLols_Object = MibTableColumn
xdsl2PMLCurr15MLols = _Xdsl2PMLCurr15MLols_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 3),
    _Xdsl2PMLCurr15MLols_Type()
)
xdsl2PMLCurr15MLols.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLCurr15MLols.setStatus("current")
_Xdsl2PMLCurr15MLol_Type = Counter32
_Xdsl2PMLCurr15MLol_Object = MibTableColumn
xdsl2PMLCurr15MLol = _Xdsl2PMLCurr15MLol_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 4),
    _Xdsl2PMLCurr15MLol_Type()
)
xdsl2PMLCurr15MLol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLCurr15MLol.setStatus("current")
_Xdsl2PMLCurr15MLprs_Type = Counter32
_Xdsl2PMLCurr15MLprs_Object = MibTableColumn
xdsl2PMLCurr15MLprs = _Xdsl2PMLCurr15MLprs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 5),
    _Xdsl2PMLCurr15MLprs_Type()
)
xdsl2PMLCurr15MLprs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLCurr15MLprs.setStatus("current")
_Xdsl2PMLCurr15MLpr_Type = Counter32
_Xdsl2PMLCurr15MLpr_Object = MibTableColumn
xdsl2PMLCurr15MLpr = _Xdsl2PMLCurr15MLpr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 6),
    _Xdsl2PMLCurr15MLpr_Type()
)
xdsl2PMLCurr15MLpr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLCurr15MLpr.setStatus("current")
_Xdsl2PMLCurr15MInits_Type = Counter32
_Xdsl2PMLCurr15MInits_Object = MibTableColumn
xdsl2PMLCurr15MInits = _Xdsl2PMLCurr15MInits_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 7),
    _Xdsl2PMLCurr15MInits_Type()
)
xdsl2PMLCurr15MInits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLCurr15MInits.setStatus("current")
_Xdsl2PMLCurr1DayMonitoredTime_Type = Integer32
_Xdsl2PMLCurr1DayMonitoredTime_Object = MibTableColumn
xdsl2PMLCurr1DayMonitoredTime = _Xdsl2PMLCurr1DayMonitoredTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 8),
    _Xdsl2PMLCurr1DayMonitoredTime_Type()
)
xdsl2PMLCurr1DayMonitoredTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLCurr1DayMonitoredTime.setStatus("current")
_Xdsl2PMLCurr1DayLofs_Type = Counter32
_Xdsl2PMLCurr1DayLofs_Object = MibTableColumn
xdsl2PMLCurr1DayLofs = _Xdsl2PMLCurr1DayLofs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 9),
    _Xdsl2PMLCurr1DayLofs_Type()
)
xdsl2PMLCurr1DayLofs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLCurr1DayLofs.setStatus("current")
_Xdsl2PMLCurr1DayLols_Type = Counter32
_Xdsl2PMLCurr1DayLols_Object = MibTableColumn
xdsl2PMLCurr1DayLols = _Xdsl2PMLCurr1DayLols_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 10),
    _Xdsl2PMLCurr1DayLols_Type()
)
xdsl2PMLCurr1DayLols.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLCurr1DayLols.setStatus("current")
_Xdsl2PMLCurr1DayLol_Type = Counter32
_Xdsl2PMLCurr1DayLol_Object = MibTableColumn
xdsl2PMLCurr1DayLol = _Xdsl2PMLCurr1DayLol_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 11),
    _Xdsl2PMLCurr1DayLol_Type()
)
xdsl2PMLCurr1DayLol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLCurr1DayLol.setStatus("current")
_Xdsl2PMLCurr1DayLprs_Type = Counter32
_Xdsl2PMLCurr1DayLprs_Object = MibTableColumn
xdsl2PMLCurr1DayLprs = _Xdsl2PMLCurr1DayLprs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 12),
    _Xdsl2PMLCurr1DayLprs_Type()
)
xdsl2PMLCurr1DayLprs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLCurr1DayLprs.setStatus("current")
_Xdsl2PMLCurr1DayLpr_Type = Counter32
_Xdsl2PMLCurr1DayLpr_Object = MibTableColumn
xdsl2PMLCurr1DayLpr = _Xdsl2PMLCurr1DayLpr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 13),
    _Xdsl2PMLCurr1DayLpr_Type()
)
xdsl2PMLCurr1DayLpr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLCurr1DayLpr.setStatus("current")
_Xdsl2PMLCurr1DayInits_Type = Counter32
_Xdsl2PMLCurr1DayInits_Object = MibTableColumn
xdsl2PMLCurr1DayInits = _Xdsl2PMLCurr1DayInits_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 14),
    _Xdsl2PMLCurr1DayInits_Type()
)
xdsl2PMLCurr1DayInits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLCurr1DayInits.setStatus("current")
_Xdsl2PMLSinceLinkInmEqInp_Type = OctetString
_Xdsl2PMLSinceLinkInmEqInp_Object = MibTableColumn
xdsl2PMLSinceLinkInmEqInp = _Xdsl2PMLSinceLinkInmEqInp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 15),
    _Xdsl2PMLSinceLinkInmEqInp_Type()
)
xdsl2PMLSinceLinkInmEqInp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLSinceLinkInmEqInp.setStatus("current")
_Xdsl2PMLSinceLinkInmIAT_Type = OctetString
_Xdsl2PMLSinceLinkInmIAT_Object = MibTableColumn
xdsl2PMLSinceLinkInmIAT = _Xdsl2PMLSinceLinkInmIAT_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 16),
    _Xdsl2PMLSinceLinkInmIAT_Type()
)
xdsl2PMLSinceLinkInmIAT.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLSinceLinkInmIAT.setStatus("current")
_Xdsl2PMLSinceLinkInmME_Type = Counter32
_Xdsl2PMLSinceLinkInmME_Object = MibTableColumn
xdsl2PMLSinceLinkInmME = _Xdsl2PMLSinceLinkInmME_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 17),
    _Xdsl2PMLSinceLinkInmME_Type()
)
xdsl2PMLSinceLinkInmME.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLSinceLinkInmME.setStatus("current")
if mibBuilder.loadTexts:
    xdsl2PMLSinceLinkInmME.setUnits("symbols")
_Xdsl2PMLCurr15MInmEqInp_Type = OctetString
_Xdsl2PMLCurr15MInmEqInp_Object = MibTableColumn
xdsl2PMLCurr15MInmEqInp = _Xdsl2PMLCurr15MInmEqInp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 18),
    _Xdsl2PMLCurr15MInmEqInp_Type()
)
xdsl2PMLCurr15MInmEqInp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLCurr15MInmEqInp.setStatus("current")
_Xdsl2PMLCurr15MInmIAT_Type = OctetString
_Xdsl2PMLCurr15MInmIAT_Object = MibTableColumn
xdsl2PMLCurr15MInmIAT = _Xdsl2PMLCurr15MInmIAT_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 19),
    _Xdsl2PMLCurr15MInmIAT_Type()
)
xdsl2PMLCurr15MInmIAT.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLCurr15MInmIAT.setStatus("current")
_Xdsl2PMLCurr15MInmME_Type = Counter32
_Xdsl2PMLCurr15MInmME_Object = MibTableColumn
xdsl2PMLCurr15MInmME = _Xdsl2PMLCurr15MInmME_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 20),
    _Xdsl2PMLCurr15MInmME_Type()
)
xdsl2PMLCurr15MInmME.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLCurr15MInmME.setStatus("current")
_Xdsl2PMLCurr1DayInmEqInp_Type = OctetString
_Xdsl2PMLCurr1DayInmEqInp_Object = MibTableColumn
xdsl2PMLCurr1DayInmEqInp = _Xdsl2PMLCurr1DayInmEqInp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 21),
    _Xdsl2PMLCurr1DayInmEqInp_Type()
)
xdsl2PMLCurr1DayInmEqInp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLCurr1DayInmEqInp.setStatus("current")
_Xdsl2PMLCurr1DayInmIAT_Type = OctetString
_Xdsl2PMLCurr1DayInmIAT_Object = MibTableColumn
xdsl2PMLCurr1DayInmIAT = _Xdsl2PMLCurr1DayInmIAT_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 22),
    _Xdsl2PMLCurr1DayInmIAT_Type()
)
xdsl2PMLCurr1DayInmIAT.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLCurr1DayInmIAT.setStatus("current")
_Xdsl2PMLCurr1DayInmME_Type = Counter32
_Xdsl2PMLCurr1DayInmME_Object = MibTableColumn
xdsl2PMLCurr1DayInmME = _Xdsl2PMLCurr1DayInmME_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 23),
    _Xdsl2PMLCurr1DayInmME_Type()
)
xdsl2PMLCurr1DayInmME.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLCurr1DayInmME.setStatus("current")
_Xdsl2PMLSinceInitLofs_Type = Counter32
_Xdsl2PMLSinceInitLofs_Object = MibTableColumn
xdsl2PMLSinceInitLofs = _Xdsl2PMLSinceInitLofs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 24),
    _Xdsl2PMLSinceInitLofs_Type()
)
xdsl2PMLSinceInitLofs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLSinceInitLofs.setStatus("current")
_Xdsl2PMLSinceInitLols_Type = Counter32
_Xdsl2PMLSinceInitLols_Object = MibTableColumn
xdsl2PMLSinceInitLols = _Xdsl2PMLSinceInitLols_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 25),
    _Xdsl2PMLSinceInitLols_Type()
)
xdsl2PMLSinceInitLols.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLSinceInitLols.setStatus("current")
_Xdsl2PMLSinceInitLol_Type = Counter32
_Xdsl2PMLSinceInitLol_Object = MibTableColumn
xdsl2PMLSinceInitLol = _Xdsl2PMLSinceInitLol_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 26),
    _Xdsl2PMLSinceInitLol_Type()
)
xdsl2PMLSinceInitLol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLSinceInitLol.setStatus("current")
_Xdsl2PMLSinceInitLprs_Type = Counter32
_Xdsl2PMLSinceInitLprs_Object = MibTableColumn
xdsl2PMLSinceInitLprs = _Xdsl2PMLSinceInitLprs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 27),
    _Xdsl2PMLSinceInitLprs_Type()
)
xdsl2PMLSinceInitLprs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLSinceInitLprs.setStatus("current")
_Xdsl2PMLSinceInitLpr_Type = Counter32
_Xdsl2PMLSinceInitLpr_Object = MibTableColumn
xdsl2PMLSinceInitLpr = _Xdsl2PMLSinceInitLpr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 28),
    _Xdsl2PMLSinceInitLpr_Type()
)
xdsl2PMLSinceInitLpr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLSinceInitLpr.setStatus("current")
_Xdsl2PMLSinceInitInits_Type = Counter32
_Xdsl2PMLSinceInitInits_Object = MibTableColumn
xdsl2PMLSinceInitInits = _Xdsl2PMLSinceInitInits_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 1, 1, 29),
    _Xdsl2PMLSinceInitInits_Type()
)
xdsl2PMLSinceInitInits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLSinceInitInits.setStatus("current")
_Xdsl2PMLineHist15MinExtendedTable_Object = MibTable
xdsl2PMLineHist15MinExtendedTable = _Xdsl2PMLineHist15MinExtendedTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 2)
)
if mibBuilder.loadTexts:
    xdsl2PMLineHist15MinExtendedTable.setStatus("current")
_Xdsl2PMLineHist15MinExtendedEntry_Object = MibTableRow
xdsl2PMLineHist15MinExtendedEntry = _Xdsl2PMLineHist15MinExtendedEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 2, 1)
)
xdsl2PMLineHist15MinExtendedEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "VDSL2-LINE-MIB", "xdsl2PMLHist15MUnit"),
    (0, "VDSL2-LINE-MIB", "xdsl2PMLHist15MInterval"),
)
if mibBuilder.loadTexts:
    xdsl2PMLineHist15MinExtendedEntry.setStatus("current")
_Xdsl2PMLHist15MLofs_Type = Counter32
_Xdsl2PMLHist15MLofs_Object = MibTableColumn
xdsl2PMLHist15MLofs = _Xdsl2PMLHist15MLofs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 2, 1, 1),
    _Xdsl2PMLHist15MLofs_Type()
)
xdsl2PMLHist15MLofs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLHist15MLofs.setStatus("current")
_Xdsl2PMLHist15MLols_Type = Counter32
_Xdsl2PMLHist15MLols_Object = MibTableColumn
xdsl2PMLHist15MLols = _Xdsl2PMLHist15MLols_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 2, 1, 2),
    _Xdsl2PMLHist15MLols_Type()
)
xdsl2PMLHist15MLols.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLHist15MLols.setStatus("current")
_Xdsl2PMLHist15MLol_Type = Counter32
_Xdsl2PMLHist15MLol_Object = MibTableColumn
xdsl2PMLHist15MLol = _Xdsl2PMLHist15MLol_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 2, 1, 3),
    _Xdsl2PMLHist15MLol_Type()
)
xdsl2PMLHist15MLol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLHist15MLol.setStatus("current")
_Xdsl2PMLHist15MLprs_Type = Counter32
_Xdsl2PMLHist15MLprs_Object = MibTableColumn
xdsl2PMLHist15MLprs = _Xdsl2PMLHist15MLprs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 2, 1, 4),
    _Xdsl2PMLHist15MLprs_Type()
)
xdsl2PMLHist15MLprs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLHist15MLprs.setStatus("current")
_Xdsl2PMLHist15MLpr_Type = Counter32
_Xdsl2PMLHist15MLpr_Object = MibTableColumn
xdsl2PMLHist15MLpr = _Xdsl2PMLHist15MLpr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 2, 1, 5),
    _Xdsl2PMLHist15MLpr_Type()
)
xdsl2PMLHist15MLpr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLHist15MLpr.setStatus("current")
_Xdsl2PMLHist15MInits_Type = Counter32
_Xdsl2PMLHist15MInits_Object = MibTableColumn
xdsl2PMLHist15MInits = _Xdsl2PMLHist15MInits_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 2, 1, 6),
    _Xdsl2PMLHist15MInits_Type()
)
xdsl2PMLHist15MInits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLHist15MInits.setStatus("current")
_Xdsl2PMLHist15MInmEqInp_Type = OctetString
_Xdsl2PMLHist15MInmEqInp_Object = MibTableColumn
xdsl2PMLHist15MInmEqInp = _Xdsl2PMLHist15MInmEqInp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 2, 1, 7),
    _Xdsl2PMLHist15MInmEqInp_Type()
)
xdsl2PMLHist15MInmEqInp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLHist15MInmEqInp.setStatus("current")
_Xdsl2PMLHist15MInmIAT_Type = OctetString
_Xdsl2PMLHist15MInmIAT_Object = MibTableColumn
xdsl2PMLHist15MInmIAT = _Xdsl2PMLHist15MInmIAT_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 2, 1, 8),
    _Xdsl2PMLHist15MInmIAT_Type()
)
xdsl2PMLHist15MInmIAT.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLHist15MInmIAT.setStatus("current")
_Xdsl2PMLHist15MInmME_Type = Counter32
_Xdsl2PMLHist15MInmME_Object = MibTableColumn
xdsl2PMLHist15MInmME = _Xdsl2PMLHist15MInmME_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 2, 1, 9),
    _Xdsl2PMLHist15MInmME_Type()
)
xdsl2PMLHist15MInmME.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLHist15MInmME.setStatus("current")
_Xdsl2PMLineHist1DayExtendedTable_Object = MibTable
xdsl2PMLineHist1DayExtendedTable = _Xdsl2PMLineHist1DayExtendedTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 3)
)
if mibBuilder.loadTexts:
    xdsl2PMLineHist1DayExtendedTable.setStatus("current")
_Xdsl2PMLineHist1DayExtendedEntry_Object = MibTableRow
xdsl2PMLineHist1DayExtendedEntry = _Xdsl2PMLineHist1DayExtendedEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 3, 1)
)
xdsl2PMLineHist1DayExtendedEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "VDSL2-LINE-MIB", "xdsl2PMLHist1DUnit"),
    (0, "VDSL2-LINE-MIB", "xdsl2PMLHist1DInterval"),
)
if mibBuilder.loadTexts:
    xdsl2PMLineHist1DayExtendedEntry.setStatus("current")
_Xdsl2PMLHist1DLofs_Type = Counter32
_Xdsl2PMLHist1DLofs_Object = MibTableColumn
xdsl2PMLHist1DLofs = _Xdsl2PMLHist1DLofs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 3, 1, 1),
    _Xdsl2PMLHist1DLofs_Type()
)
xdsl2PMLHist1DLofs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLHist1DLofs.setStatus("current")
_Xdsl2PMLHist1DLols_Type = Counter32
_Xdsl2PMLHist1DLols_Object = MibTableColumn
xdsl2PMLHist1DLols = _Xdsl2PMLHist1DLols_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 3, 1, 2),
    _Xdsl2PMLHist1DLols_Type()
)
xdsl2PMLHist1DLols.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLHist1DLols.setStatus("current")
_Xdsl2PMLHist1DLol_Type = Counter32
_Xdsl2PMLHist1DLol_Object = MibTableColumn
xdsl2PMLHist1DLol = _Xdsl2PMLHist1DLol_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 3, 1, 3),
    _Xdsl2PMLHist1DLol_Type()
)
xdsl2PMLHist1DLol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLHist1DLol.setStatus("current")
_Xdsl2PMLHist1DLprs_Type = Counter32
_Xdsl2PMLHist1DLprs_Object = MibTableColumn
xdsl2PMLHist1DLprs = _Xdsl2PMLHist1DLprs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 3, 1, 4),
    _Xdsl2PMLHist1DLprs_Type()
)
xdsl2PMLHist1DLprs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLHist1DLprs.setStatus("current")
_Xdsl2PMLHist1DLpr_Type = Counter32
_Xdsl2PMLHist1DLpr_Object = MibTableColumn
xdsl2PMLHist1DLpr = _Xdsl2PMLHist1DLpr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 3, 1, 5),
    _Xdsl2PMLHist1DLpr_Type()
)
xdsl2PMLHist1DLpr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLHist1DLpr.setStatus("current")
_Xdsl2PMLHist1DInits_Type = Counter32
_Xdsl2PMLHist1DInits_Object = MibTableColumn
xdsl2PMLHist1DInits = _Xdsl2PMLHist1DInits_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 3, 1, 6),
    _Xdsl2PMLHist1DInits_Type()
)
xdsl2PMLHist1DInits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLHist1DInits.setStatus("current")
_Xdsl2PMLHist1DInmEqInp_Type = OctetString
_Xdsl2PMLHist1DInmEqInp_Object = MibTableColumn
xdsl2PMLHist1DInmEqInp = _Xdsl2PMLHist1DInmEqInp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 3, 1, 7),
    _Xdsl2PMLHist1DInmEqInp_Type()
)
xdsl2PMLHist1DInmEqInp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLHist1DInmEqInp.setStatus("current")
_Xdsl2PMLHist1DInmIAT_Type = OctetString
_Xdsl2PMLHist1DInmIAT_Object = MibTableColumn
xdsl2PMLHist1DInmIAT = _Xdsl2PMLHist1DInmIAT_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 3, 1, 8),
    _Xdsl2PMLHist1DInmIAT_Type()
)
xdsl2PMLHist1DInmIAT.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLHist1DInmIAT.setStatus("current")
_Xdsl2PMLHist1DInmME_Type = Counter32
_Xdsl2PMLHist1DInmME_Object = MibTableColumn
xdsl2PMLHist1DInmME = _Xdsl2PMLHist1DInmME_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 1, 3, 1, 9),
    _Xdsl2PMLHist1DInmME_Type()
)
xdsl2PMLHist1DInmME.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMLHist1DInmME.setStatus("current")
_Xdsl2PMLineChannelEx_ObjectIdentity = ObjectIdentity
xdsl2PMLineChannelEx = _Xdsl2PMLineChannelEx_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 2)
)
_Xdsl2PMChCurrExtendedTable_Object = MibTable
xdsl2PMChCurrExtendedTable = _Xdsl2PMChCurrExtendedTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 2, 1)
)
if mibBuilder.loadTexts:
    xdsl2PMChCurrExtendedTable.setStatus("current")
_Xdsl2PMChCurrExtendedEntry_Object = MibTableRow
xdsl2PMChCurrExtendedEntry = _Xdsl2PMChCurrExtendedEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 2, 1, 1)
)
xdsl2PMChCurrExtendedEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "VDSL2-LINE-MIB", "xdsl2PMLCurrUnit"),
)
if mibBuilder.loadTexts:
    xdsl2PMChCurrExtendedEntry.setStatus("current")
_Xdsl2PMChCurr15MUncorrectBlks_Type = Counter32
_Xdsl2PMChCurr15MUncorrectBlks_Object = MibTableColumn
xdsl2PMChCurr15MUncorrectBlks = _Xdsl2PMChCurr15MUncorrectBlks_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 2, 1, 1, 1),
    _Xdsl2PMChCurr15MUncorrectBlks_Type()
)
xdsl2PMChCurr15MUncorrectBlks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChCurr15MUncorrectBlks.setStatus("current")
_Xdsl2PMChCurr1DayUncorrectBlks_Type = Counter32
_Xdsl2PMChCurr1DayUncorrectBlks_Object = MibTableColumn
xdsl2PMChCurr1DayUncorrectBlks = _Xdsl2PMChCurr1DayUncorrectBlks_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 2, 1, 1, 2),
    _Xdsl2PMChCurr1DayUncorrectBlks_Type()
)
xdsl2PMChCurr1DayUncorrectBlks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChCurr1DayUncorrectBlks.setStatus("current")
_Xdsl2PMChSinceLinkRtx_Type = Unsigned32
_Xdsl2PMChSinceLinkRtx_Object = MibTableColumn
xdsl2PMChSinceLinkRtx = _Xdsl2PMChSinceLinkRtx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 2, 1, 1, 3),
    _Xdsl2PMChSinceLinkRtx_Type()
)
xdsl2PMChSinceLinkRtx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChSinceLinkRtx.setStatus("current")
_Xdsl2PMChCurr15MRtx_Type = Unsigned32
_Xdsl2PMChCurr15MRtx_Object = MibTableColumn
xdsl2PMChCurr15MRtx = _Xdsl2PMChCurr15MRtx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 2, 1, 1, 4),
    _Xdsl2PMChCurr15MRtx_Type()
)
xdsl2PMChCurr15MRtx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChCurr15MRtx.setStatus("current")
_Xdsl2PMChCurr1DayRtx_Type = Unsigned32
_Xdsl2PMChCurr1DayRtx_Object = MibTableColumn
xdsl2PMChCurr1DayRtx = _Xdsl2PMChCurr1DayRtx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 2, 1, 1, 5),
    _Xdsl2PMChCurr1DayRtx_Type()
)
xdsl2PMChCurr1DayRtx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChCurr1DayRtx.setStatus("current")
_Xdsl2PMChSinceLinkRtxCorrected_Type = Unsigned32
_Xdsl2PMChSinceLinkRtxCorrected_Object = MibTableColumn
xdsl2PMChSinceLinkRtxCorrected = _Xdsl2PMChSinceLinkRtxCorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 2, 1, 1, 6),
    _Xdsl2PMChSinceLinkRtxCorrected_Type()
)
xdsl2PMChSinceLinkRtxCorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChSinceLinkRtxCorrected.setStatus("current")
_Xdsl2PMChCurr15MRtxCorrected_Type = Unsigned32
_Xdsl2PMChCurr15MRtxCorrected_Object = MibTableColumn
xdsl2PMChCurr15MRtxCorrected = _Xdsl2PMChCurr15MRtxCorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 2, 1, 1, 7),
    _Xdsl2PMChCurr15MRtxCorrected_Type()
)
xdsl2PMChCurr15MRtxCorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChCurr15MRtxCorrected.setStatus("current")
_Xdsl2PMChCurr1DayRtxCorrected_Type = Unsigned32
_Xdsl2PMChCurr1DayRtxCorrected_Object = MibTableColumn
xdsl2PMChCurr1DayRtxCorrected = _Xdsl2PMChCurr1DayRtxCorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 2, 1, 1, 8),
    _Xdsl2PMChCurr1DayRtxCorrected_Type()
)
xdsl2PMChCurr1DayRtxCorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChCurr1DayRtxCorrected.setStatus("current")
_Xdsl2PMChSinceLinkRtxUncorrected_Type = Unsigned32
_Xdsl2PMChSinceLinkRtxUncorrected_Object = MibTableColumn
xdsl2PMChSinceLinkRtxUncorrected = _Xdsl2PMChSinceLinkRtxUncorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 2, 1, 1, 9),
    _Xdsl2PMChSinceLinkRtxUncorrected_Type()
)
xdsl2PMChSinceLinkRtxUncorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChSinceLinkRtxUncorrected.setStatus("current")
_Xdsl2PMChCurr15MRtxUncorrected_Type = Unsigned32
_Xdsl2PMChCurr15MRtxUncorrected_Object = MibTableColumn
xdsl2PMChCurr15MRtxUncorrected = _Xdsl2PMChCurr15MRtxUncorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 2, 1, 1, 10),
    _Xdsl2PMChCurr15MRtxUncorrected_Type()
)
xdsl2PMChCurr15MRtxUncorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChCurr15MRtxUncorrected.setStatus("current")
_Xdsl2PMChCurr1DayRtxUncorrected_Type = Unsigned32
_Xdsl2PMChCurr1DayRtxUncorrected_Object = MibTableColumn
xdsl2PMChCurr1DayRtxUncorrected = _Xdsl2PMChCurr1DayRtxUncorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 2, 1, 1, 11),
    _Xdsl2PMChCurr1DayRtxUncorrected_Type()
)
xdsl2PMChCurr1DayRtxUncorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChCurr1DayRtxUncorrected.setStatus("current")
_Xdsl2PMChSinceLinkLEFTRs_Type = Unsigned32
_Xdsl2PMChSinceLinkLEFTRs_Object = MibTableColumn
xdsl2PMChSinceLinkLEFTRs = _Xdsl2PMChSinceLinkLEFTRs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 2, 1, 1, 12),
    _Xdsl2PMChSinceLinkLEFTRs_Type()
)
xdsl2PMChSinceLinkLEFTRs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChSinceLinkLEFTRs.setStatus("current")
_Xdsl2PMChCurr15MLEFTRs_Type = Unsigned32
_Xdsl2PMChCurr15MLEFTRs_Object = MibTableColumn
xdsl2PMChCurr15MLEFTRs = _Xdsl2PMChCurr15MLEFTRs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 2, 1, 1, 13),
    _Xdsl2PMChCurr15MLEFTRs_Type()
)
xdsl2PMChCurr15MLEFTRs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChCurr15MLEFTRs.setStatus("current")
_Xdsl2PMChCurr1DayLEFTRs_Type = Unsigned32
_Xdsl2PMChCurr1DayLEFTRs_Object = MibTableColumn
xdsl2PMChCurr1DayLEFTRs = _Xdsl2PMChCurr1DayLEFTRs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 2, 1, 1, 14),
    _Xdsl2PMChCurr1DayLEFTRs_Type()
)
xdsl2PMChCurr1DayLEFTRs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChCurr1DayLEFTRs.setStatus("current")
_Xdsl2PMChSinceLinkMinEFTR_Type = Unsigned32
_Xdsl2PMChSinceLinkMinEFTR_Object = MibTableColumn
xdsl2PMChSinceLinkMinEFTR = _Xdsl2PMChSinceLinkMinEFTR_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 2, 1, 1, 15),
    _Xdsl2PMChSinceLinkMinEFTR_Type()
)
xdsl2PMChSinceLinkMinEFTR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChSinceLinkMinEFTR.setStatus("current")
_Xdsl2PMChCurr15MMinEFTR_Type = Unsigned32
_Xdsl2PMChCurr15MMinEFTR_Object = MibTableColumn
xdsl2PMChCurr15MMinEFTR = _Xdsl2PMChCurr15MMinEFTR_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 2, 1, 1, 16),
    _Xdsl2PMChCurr15MMinEFTR_Type()
)
xdsl2PMChCurr15MMinEFTR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChCurr15MMinEFTR.setStatus("current")
_Xdsl2PMChCurr1DayMinEFTR_Type = Unsigned32
_Xdsl2PMChCurr1DayMinEFTR_Object = MibTableColumn
xdsl2PMChCurr1DayMinEFTR = _Xdsl2PMChCurr1DayMinEFTR_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 2, 1, 1, 17),
    _Xdsl2PMChCurr1DayMinEFTR_Type()
)
xdsl2PMChCurr1DayMinEFTR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChCurr1DayMinEFTR.setStatus("current")
_Xdsl2PMChSinceLinkErrFreeBits_Type = Unsigned32
_Xdsl2PMChSinceLinkErrFreeBits_Object = MibTableColumn
xdsl2PMChSinceLinkErrFreeBits = _Xdsl2PMChSinceLinkErrFreeBits_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 2, 1, 1, 18),
    _Xdsl2PMChSinceLinkErrFreeBits_Type()
)
xdsl2PMChSinceLinkErrFreeBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChSinceLinkErrFreeBits.setStatus("current")
_Xdsl2PMChCurr15MErrFreeBits_Type = Unsigned32
_Xdsl2PMChCurr15MErrFreeBits_Object = MibTableColumn
xdsl2PMChCurr15MErrFreeBits = _Xdsl2PMChCurr15MErrFreeBits_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 2, 1, 1, 19),
    _Xdsl2PMChCurr15MErrFreeBits_Type()
)
xdsl2PMChCurr15MErrFreeBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChCurr15MErrFreeBits.setStatus("current")
_Xdsl2PMChCurr1DayErrFreeBits_Type = Unsigned32
_Xdsl2PMChCurr1DayErrFreeBits_Object = MibTableColumn
xdsl2PMChCurr1DayErrFreeBits = _Xdsl2PMChCurr1DayErrFreeBits_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 2, 1, 1, 20),
    _Xdsl2PMChCurr1DayErrFreeBits_Type()
)
xdsl2PMChCurr1DayErrFreeBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChCurr1DayErrFreeBits.setStatus("current")
_Xdsl2PMChannelEx_ObjectIdentity = ObjectIdentity
xdsl2PMChannelEx = _Xdsl2PMChannelEx_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 3)
)
_Xdsl2PMChHist15MinExtendedTable_Object = MibTable
xdsl2PMChHist15MinExtendedTable = _Xdsl2PMChHist15MinExtendedTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 3, 1)
)
if mibBuilder.loadTexts:
    xdsl2PMChHist15MinExtendedTable.setStatus("current")
_Xdsl2PMChHist15MinExtendedEntry_Object = MibTableRow
xdsl2PMChHist15MinExtendedEntry = _Xdsl2PMChHist15MinExtendedEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 3, 1, 1)
)
xdsl2PMChHist15MinExtendedEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "VDSL2-LINE-MIB", "xdsl2PMChHist15MUnit"),
    (0, "VDSL2-LINE-MIB", "xdsl2PMChHist15MInterval"),
)
if mibBuilder.loadTexts:
    xdsl2PMChHist15MinExtendedEntry.setStatus("current")
_Xdsl2PMChHist15MUncorrectBlks_Type = Counter32
_Xdsl2PMChHist15MUncorrectBlks_Object = MibTableColumn
xdsl2PMChHist15MUncorrectBlks = _Xdsl2PMChHist15MUncorrectBlks_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 3, 1, 1, 1),
    _Xdsl2PMChHist15MUncorrectBlks_Type()
)
xdsl2PMChHist15MUncorrectBlks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChHist15MUncorrectBlks.setStatus("current")
_Xdsl2PMChHist15MRtx_Type = Unsigned32
_Xdsl2PMChHist15MRtx_Object = MibTableColumn
xdsl2PMChHist15MRtx = _Xdsl2PMChHist15MRtx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 3, 1, 1, 2),
    _Xdsl2PMChHist15MRtx_Type()
)
xdsl2PMChHist15MRtx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChHist15MRtx.setStatus("current")
_Xdsl2PMChHist15MRtxCorrected_Type = Unsigned32
_Xdsl2PMChHist15MRtxCorrected_Object = MibTableColumn
xdsl2PMChHist15MRtxCorrected = _Xdsl2PMChHist15MRtxCorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 3, 1, 1, 3),
    _Xdsl2PMChHist15MRtxCorrected_Type()
)
xdsl2PMChHist15MRtxCorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChHist15MRtxCorrected.setStatus("current")
_Xdsl2PMChHist15MRtxUncorrected_Type = Unsigned32
_Xdsl2PMChHist15MRtxUncorrected_Object = MibTableColumn
xdsl2PMChHist15MRtxUncorrected = _Xdsl2PMChHist15MRtxUncorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 3, 1, 1, 4),
    _Xdsl2PMChHist15MRtxUncorrected_Type()
)
xdsl2PMChHist15MRtxUncorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChHist15MRtxUncorrected.setStatus("current")
_Xdsl2PMChHist15MLEFTRs_Type = Unsigned32
_Xdsl2PMChHist15MLEFTRs_Object = MibTableColumn
xdsl2PMChHist15MLEFTRs = _Xdsl2PMChHist15MLEFTRs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 3, 1, 1, 5),
    _Xdsl2PMChHist15MLEFTRs_Type()
)
xdsl2PMChHist15MLEFTRs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChHist15MLEFTRs.setStatus("current")
_Xdsl2PMChHist15MMinEFTR_Type = Unsigned32
_Xdsl2PMChHist15MMinEFTR_Object = MibTableColumn
xdsl2PMChHist15MMinEFTR = _Xdsl2PMChHist15MMinEFTR_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 3, 1, 1, 6),
    _Xdsl2PMChHist15MMinEFTR_Type()
)
xdsl2PMChHist15MMinEFTR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChHist15MMinEFTR.setStatus("current")
_Xdsl2PMChHist15MErrFreeBits_Type = Unsigned32
_Xdsl2PMChHist15MErrFreeBits_Object = MibTableColumn
xdsl2PMChHist15MErrFreeBits = _Xdsl2PMChHist15MErrFreeBits_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 3, 1, 1, 7),
    _Xdsl2PMChHist15MErrFreeBits_Type()
)
xdsl2PMChHist15MErrFreeBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChHist15MErrFreeBits.setStatus("current")
_Xdsl2PMChHist1DExtendedTable_Object = MibTable
xdsl2PMChHist1DExtendedTable = _Xdsl2PMChHist1DExtendedTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 3, 2)
)
if mibBuilder.loadTexts:
    xdsl2PMChHist1DExtendedTable.setStatus("current")
_Xdsl2PMChHist1DExtendedEntry_Object = MibTableRow
xdsl2PMChHist1DExtendedEntry = _Xdsl2PMChHist1DExtendedEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 3, 2, 1)
)
xdsl2PMChHist1DExtendedEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "VDSL2-LINE-MIB", "xdsl2PMChHist1DUnit"),
    (0, "VDSL2-LINE-MIB", "xdsl2PMChHist1DInterval"),
)
if mibBuilder.loadTexts:
    xdsl2PMChHist1DExtendedEntry.setStatus("current")
_Xdsl2PMChHist1DUncorrectBlks_Type = Counter32
_Xdsl2PMChHist1DUncorrectBlks_Object = MibTableColumn
xdsl2PMChHist1DUncorrectBlks = _Xdsl2PMChHist1DUncorrectBlks_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 3, 2, 1, 1),
    _Xdsl2PMChHist1DUncorrectBlks_Type()
)
xdsl2PMChHist1DUncorrectBlks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChHist1DUncorrectBlks.setStatus("current")
_Xdsl2PMChHist1DayRtx_Type = Unsigned32
_Xdsl2PMChHist1DayRtx_Object = MibTableColumn
xdsl2PMChHist1DayRtx = _Xdsl2PMChHist1DayRtx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 3, 2, 1, 2),
    _Xdsl2PMChHist1DayRtx_Type()
)
xdsl2PMChHist1DayRtx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChHist1DayRtx.setStatus("current")
_Xdsl2PMChHist1DayRtxCorrected_Type = Unsigned32
_Xdsl2PMChHist1DayRtxCorrected_Object = MibTableColumn
xdsl2PMChHist1DayRtxCorrected = _Xdsl2PMChHist1DayRtxCorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 3, 2, 1, 3),
    _Xdsl2PMChHist1DayRtxCorrected_Type()
)
xdsl2PMChHist1DayRtxCorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChHist1DayRtxCorrected.setStatus("current")
_Xdsl2PMChHist1DayRtxUncorrected_Type = Unsigned32
_Xdsl2PMChHist1DayRtxUncorrected_Object = MibTableColumn
xdsl2PMChHist1DayRtxUncorrected = _Xdsl2PMChHist1DayRtxUncorrected_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 3, 2, 1, 4),
    _Xdsl2PMChHist1DayRtxUncorrected_Type()
)
xdsl2PMChHist1DayRtxUncorrected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChHist1DayRtxUncorrected.setStatus("current")
_Xdsl2PMChHist1DayLEFTRs_Type = Unsigned32
_Xdsl2PMChHist1DayLEFTRs_Object = MibTableColumn
xdsl2PMChHist1DayLEFTRs = _Xdsl2PMChHist1DayLEFTRs_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 3, 2, 1, 5),
    _Xdsl2PMChHist1DayLEFTRs_Type()
)
xdsl2PMChHist1DayLEFTRs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChHist1DayLEFTRs.setStatus("current")
_Xdsl2PMChHist1DayMinEFTR_Type = Unsigned32
_Xdsl2PMChHist1DayMinEFTR_Object = MibTableColumn
xdsl2PMChHist1DayMinEFTR = _Xdsl2PMChHist1DayMinEFTR_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 3, 2, 1, 6),
    _Xdsl2PMChHist1DayMinEFTR_Type()
)
xdsl2PMChHist1DayMinEFTR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChHist1DayMinEFTR.setStatus("current")
_Xdsl2PMChHist1DayErrFreeBits_Type = Unsigned32
_Xdsl2PMChHist1DayErrFreeBits_Object = MibTableColumn
xdsl2PMChHist1DayErrFreeBits = _Xdsl2PMChHist1DayErrFreeBits_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 4, 3, 2, 1, 7),
    _Xdsl2PMChHist1DayErrFreeBits_Type()
)
xdsl2PMChHist1DayErrFreeBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2PMChHist1DayErrFreeBits.setStatus("current")
_Xdsl2LineBandExtTable_Object = MibTable
xdsl2LineBandExtTable = _Xdsl2LineBandExtTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 5)
)
if mibBuilder.loadTexts:
    xdsl2LineBandExtTable.setStatus("current")
_Xdsl2LineBandExtEntry_Object = MibTableRow
xdsl2LineBandExtEntry = _Xdsl2LineBandExtEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 5, 1)
)
xdsl2LineBandExtEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "VDSL2-LINE-MIB", "xdsl2LineBand"),
)
if mibBuilder.loadTexts:
    xdsl2LineBandExtEntry.setStatus("current")
_Xdsl2LineBandTxPower_Type = Integer32
_Xdsl2LineBandTxPower_Object = MibTableColumn
xdsl2LineBandTxPower = _Xdsl2LineBandTxPower_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 5, 1, 1),
    _Xdsl2LineBandTxPower_Type()
)
xdsl2LineBandTxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2LineBandTxPower.setStatus("current")
_Xdsl2LineBandRxPower_Type = Integer32
_Xdsl2LineBandRxPower_Object = MibTableColumn
xdsl2LineBandRxPower = _Xdsl2LineBandRxPower_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 21, 5, 1, 2),
    _Xdsl2LineBandRxPower_Type()
)
xdsl2LineBandRxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xdsl2LineBandRxPower.setStatus("current")
_MldStats_ObjectIdentity = ObjectIdentity
mldStats = _MldStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22)
)
_MldStatsV1QueryInCnt_Type = Counter32
_MldStatsV1QueryInCnt_Object = MibScalar
mldStatsV1QueryInCnt = _MldStatsV1QueryInCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 1),
    _MldStatsV1QueryInCnt_Type()
)
mldStatsV1QueryInCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldStatsV1QueryInCnt.setStatus("current")
_MldStatsV1ReportInCnt_Type = Counter32
_MldStatsV1ReportInCnt_Object = MibScalar
mldStatsV1ReportInCnt = _MldStatsV1ReportInCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 2),
    _MldStatsV1ReportInCnt_Type()
)
mldStatsV1ReportInCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldStatsV1ReportInCnt.setStatus("current")
_MldStatsV1DoneInCnt_Type = Counter32
_MldStatsV1DoneInCnt_Object = MibScalar
mldStatsV1DoneInCnt = _MldStatsV1DoneInCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 3),
    _MldStatsV1DoneInCnt_Type()
)
mldStatsV1DoneInCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldStatsV1DoneInCnt.setStatus("current")
_MldStatsV1QueryInDropCnt_Type = Counter32
_MldStatsV1QueryInDropCnt_Object = MibScalar
mldStatsV1QueryInDropCnt = _MldStatsV1QueryInDropCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 4),
    _MldStatsV1QueryInDropCnt_Type()
)
mldStatsV1QueryInDropCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldStatsV1QueryInDropCnt.setStatus("current")
_MldStatsV1ReportInDropCnt_Type = Counter32
_MldStatsV1ReportInDropCnt_Object = MibScalar
mldStatsV1ReportInDropCnt = _MldStatsV1ReportInDropCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 5),
    _MldStatsV1ReportInDropCnt_Type()
)
mldStatsV1ReportInDropCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldStatsV1ReportInDropCnt.setStatus("current")
_MldStatsV1DoneInDropCnt_Type = Counter32
_MldStatsV1DoneInDropCnt_Object = MibScalar
mldStatsV1DoneInDropCnt = _MldStatsV1DoneInDropCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 6),
    _MldStatsV1DoneInDropCnt_Type()
)
mldStatsV1DoneInDropCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldStatsV1DoneInDropCnt.setStatus("current")
_MldStatsV1QueryOutCnt_Type = Counter32
_MldStatsV1QueryOutCnt_Object = MibScalar
mldStatsV1QueryOutCnt = _MldStatsV1QueryOutCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 7),
    _MldStatsV1QueryOutCnt_Type()
)
mldStatsV1QueryOutCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldStatsV1QueryOutCnt.setStatus("current")
_MldStatsV1ReportOutCnt_Type = Counter32
_MldStatsV1ReportOutCnt_Object = MibScalar
mldStatsV1ReportOutCnt = _MldStatsV1ReportOutCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 8),
    _MldStatsV1ReportOutCnt_Type()
)
mldStatsV1ReportOutCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldStatsV1ReportOutCnt.setStatus("current")
_MldStatsV1DoneOutCnt_Type = Counter32
_MldStatsV1DoneOutCnt_Object = MibScalar
mldStatsV1DoneOutCnt = _MldStatsV1DoneOutCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 9),
    _MldStatsV1DoneOutCnt_Type()
)
mldStatsV1DoneOutCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldStatsV1DoneOutCnt.setStatus("current")
_MldStatsV2QueryInCnt_Type = Counter32
_MldStatsV2QueryInCnt_Object = MibScalar
mldStatsV2QueryInCnt = _MldStatsV2QueryInCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 10),
    _MldStatsV2QueryInCnt_Type()
)
mldStatsV2QueryInCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldStatsV2QueryInCnt.setStatus("current")
_MldStatsV2ReportInCnt_Type = Counter32
_MldStatsV2ReportInCnt_Object = MibScalar
mldStatsV2ReportInCnt = _MldStatsV2ReportInCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 11),
    _MldStatsV2ReportInCnt_Type()
)
mldStatsV2ReportInCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldStatsV2ReportInCnt.setStatus("current")
_MldStatsV2QueryInDropCnt_Type = Counter32
_MldStatsV2QueryInDropCnt_Object = MibScalar
mldStatsV2QueryInDropCnt = _MldStatsV2QueryInDropCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 12),
    _MldStatsV2QueryInDropCnt_Type()
)
mldStatsV2QueryInDropCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldStatsV2QueryInDropCnt.setStatus("current")
_MldStatsV2ReportInDropCnt_Type = Counter32
_MldStatsV2ReportInDropCnt_Object = MibScalar
mldStatsV2ReportInDropCnt = _MldStatsV2ReportInDropCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 13),
    _MldStatsV2ReportInDropCnt_Type()
)
mldStatsV2ReportInDropCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldStatsV2ReportInDropCnt.setStatus("current")
_MldStatsV2QueryOutCnt_Type = Counter32
_MldStatsV2QueryOutCnt_Object = MibScalar
mldStatsV2QueryOutCnt = _MldStatsV2QueryOutCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 14),
    _MldStatsV2QueryOutCnt_Type()
)
mldStatsV2QueryOutCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldStatsV2QueryOutCnt.setStatus("current")
_MldStatsV2ReportOutCnt_Type = Counter32
_MldStatsV2ReportOutCnt_Object = MibScalar
mldStatsV2ReportOutCnt = _MldStatsV2ReportOutCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 15),
    _MldStatsV2ReportOutCnt_Type()
)
mldStatsV2ReportOutCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldStatsV2ReportOutCnt.setStatus("current")
_MldNumOfActiveGroups_Type = Integer32
_MldNumOfActiveGroups_Object = MibScalar
mldNumOfActiveGroups = _MldNumOfActiveGroups_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 16),
    _MldNumOfActiveGroups_Type()
)
mldNumOfActiveGroups.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldNumOfActiveGroups.setStatus("current")
_MldGroupTable_Object = MibTable
mldGroupTable = _MldGroupTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 17)
)
if mibBuilder.loadTexts:
    mldGroupTable.setStatus("current")
_MldGroupEntry_Object = MibTableRow
mldGroupEntry = _MldGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 17, 1)
)
mldGroupEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "mldGroupVid"),
    (0, "ZYXEL-IES5000-MIB", "mldGroupIp"),
)
if mibBuilder.loadTexts:
    mldGroupEntry.setStatus("current")
_MldGroupVid_Type = VlanIndex
_MldGroupVid_Object = MibTableColumn
mldGroupVid = _MldGroupVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 17, 1, 1),
    _MldGroupVid_Type()
)
mldGroupVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldGroupVid.setStatus("current")
_MldGroupIp_Type = InetAddress
_MldGroupIp_Object = MibTableColumn
mldGroupIp = _MldGroupIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 17, 1, 2),
    _MldGroupIp_Type()
)
mldGroupIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldGroupIp.setStatus("current")
_MldGroupNumOfMembers_Type = Integer32
_MldGroupNumOfMembers_Object = MibTableColumn
mldGroupNumOfMembers = _MldGroupNumOfMembers_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 17, 1, 3),
    _MldGroupNumOfMembers_Type()
)
mldGroupNumOfMembers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldGroupNumOfMembers.setStatus("current")
_MldGroupMemberPorts_Type = PortList
_MldGroupMemberPorts_Object = MibTableColumn
mldGroupMemberPorts = _MldGroupMemberPorts_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 17, 1, 4),
    _MldGroupMemberPorts_Type()
)
mldGroupMemberPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldGroupMemberPorts.setStatus("current")
_MldGroupNumOfActiveUsers_Type = Integer32
_MldGroupNumOfActiveUsers_Object = MibTableColumn
mldGroupNumOfActiveUsers = _MldGroupNumOfActiveUsers_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 17, 1, 5),
    _MldGroupNumOfActiveUsers_Type()
)
mldGroupNumOfActiveUsers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldGroupNumOfActiveUsers.setStatus("current")
_MldGroupPortTable_Object = MibTable
mldGroupPortTable = _MldGroupPortTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 18)
)
if mibBuilder.loadTexts:
    mldGroupPortTable.setStatus("current")
_MldGroupPortEntry_Object = MibTableRow
mldGroupPortEntry = _MldGroupPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 18, 1)
)
mldGroupPortEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ZYXEL-IES5000-MIB", "mldGroupPortVid"),
    (0, "ZYXEL-IES5000-MIB", "mldGroupPortIp"),
    (0, "ZYXEL-IES5000-MIB", "mldGroupPortSourceIp"),
)
if mibBuilder.loadTexts:
    mldGroupPortEntry.setStatus("current")
_MldGroupPortVid_Type = VlanIndex
_MldGroupPortVid_Object = MibTableColumn
mldGroupPortVid = _MldGroupPortVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 18, 1, 1),
    _MldGroupPortVid_Type()
)
mldGroupPortVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldGroupPortVid.setStatus("current")
_MldGroupPortIp_Type = InetAddress
_MldGroupPortIp_Object = MibTableColumn
mldGroupPortIp = _MldGroupPortIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 18, 1, 2),
    _MldGroupPortIp_Type()
)
mldGroupPortIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldGroupPortIp.setStatus("current")
_MldGroupPortSourceIp_Type = InetAddress
_MldGroupPortSourceIp_Object = MibTableColumn
mldGroupPortSourceIp = _MldGroupPortSourceIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 18, 1, 3),
    _MldGroupPortSourceIp_Type()
)
mldGroupPortSourceIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldGroupPortSourceIp.setStatus("current")
_MldPortCtrlPduTable_Object = MibTable
mldPortCtrlPduTable = _MldPortCtrlPduTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 19)
)
if mibBuilder.loadTexts:
    mldPortCtrlPduTable.setStatus("current")
_MldPortCtrlPduEntry_Object = MibTableRow
mldPortCtrlPduEntry = _MldPortCtrlPduEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 19, 1)
)
mldPortCtrlPduEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    mldPortCtrlPduEntry.setStatus("current")
_MldPortCtrlPduQueryCnt_Type = Counter32
_MldPortCtrlPduQueryCnt_Object = MibTableColumn
mldPortCtrlPduQueryCnt = _MldPortCtrlPduQueryCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 19, 1, 1),
    _MldPortCtrlPduQueryCnt_Type()
)
mldPortCtrlPduQueryCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldPortCtrlPduQueryCnt.setStatus("current")
_MldPortCtrlPduReportCnt_Type = Counter32
_MldPortCtrlPduReportCnt_Object = MibTableColumn
mldPortCtrlPduReportCnt = _MldPortCtrlPduReportCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 19, 1, 2),
    _MldPortCtrlPduReportCnt_Type()
)
mldPortCtrlPduReportCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldPortCtrlPduReportCnt.setStatus("current")
_MldPortCtrlPduLeaveCnt_Type = Counter32
_MldPortCtrlPduLeaveCnt_Object = MibTableColumn
mldPortCtrlPduLeaveCnt = _MldPortCtrlPduLeaveCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 19, 1, 3),
    _MldPortCtrlPduLeaveCnt_Type()
)
mldPortCtrlPduLeaveCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldPortCtrlPduLeaveCnt.setStatus("current")
_MldPortNumOfActiveGroups_Type = Integer32
_MldPortNumOfActiveGroups_Object = MibTableColumn
mldPortNumOfActiveGroups = _MldPortNumOfActiveGroups_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 19, 1, 4),
    _MldPortNumOfActiveGroups_Type()
)
mldPortNumOfActiveGroups.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldPortNumOfActiveGroups.setStatus("current")
_MldPortCtrlPduV1SuccessJoinCnt_Type = Counter32
_MldPortCtrlPduV1SuccessJoinCnt_Object = MibTableColumn
mldPortCtrlPduV1SuccessJoinCnt = _MldPortCtrlPduV1SuccessJoinCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 19, 1, 5),
    _MldPortCtrlPduV1SuccessJoinCnt_Type()
)
mldPortCtrlPduV1SuccessJoinCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldPortCtrlPduV1SuccessJoinCnt.setStatus("current")
_MldPortCtrlPduV1UnsuccJoinCnt_Type = Counter32
_MldPortCtrlPduV1UnsuccJoinCnt_Object = MibTableColumn
mldPortCtrlPduV1UnsuccJoinCnt = _MldPortCtrlPduV1UnsuccJoinCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 19, 1, 6),
    _MldPortCtrlPduV1UnsuccJoinCnt_Type()
)
mldPortCtrlPduV1UnsuccJoinCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldPortCtrlPduV1UnsuccJoinCnt.setStatus("current")
_MldPortCtrlPduGenQryCnt_Type = Counter32
_MldPortCtrlPduGenQryCnt_Object = MibTableColumn
mldPortCtrlPduGenQryCnt = _MldPortCtrlPduGenQryCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 19, 1, 7),
    _MldPortCtrlPduGenQryCnt_Type()
)
mldPortCtrlPduGenQryCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldPortCtrlPduGenQryCnt.setStatus("current")
_MldPortCtrlPduSpecQryCnt_Type = Counter32
_MldPortCtrlPduSpecQryCnt_Object = MibTableColumn
mldPortCtrlPduSpecQryCnt = _MldPortCtrlPduSpecQryCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 19, 1, 8),
    _MldPortCtrlPduSpecQryCnt_Type()
)
mldPortCtrlPduSpecQryCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldPortCtrlPduSpecQryCnt.setStatus("current")
_MldPortCtrlPduV2SuccessReportCnt_Type = Counter32
_MldPortCtrlPduV2SuccessReportCnt_Object = MibTableColumn
mldPortCtrlPduV2SuccessReportCnt = _MldPortCtrlPduV2SuccessReportCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 19, 1, 9),
    _MldPortCtrlPduV2SuccessReportCnt_Type()
)
mldPortCtrlPduV2SuccessReportCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldPortCtrlPduV2SuccessReportCnt.setStatus("current")
_MldPortCtrlPduV2UnsuccReportCnt_Type = Counter32
_MldPortCtrlPduV2UnsuccReportCnt_Object = MibTableColumn
mldPortCtrlPduV2UnsuccReportCnt = _MldPortCtrlPduV2UnsuccReportCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 19, 1, 10),
    _MldPortCtrlPduV2UnsuccReportCnt_Type()
)
mldPortCtrlPduV2UnsuccReportCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldPortCtrlPduV2UnsuccReportCnt.setStatus("current")
_MldPortCtrlPduInvalidCnt_Type = Counter32
_MldPortCtrlPduInvalidCnt_Object = MibTableColumn
mldPortCtrlPduInvalidCnt = _MldPortCtrlPduInvalidCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 19, 1, 11),
    _MldPortCtrlPduInvalidCnt_Type()
)
mldPortCtrlPduInvalidCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldPortCtrlPduInvalidCnt.setStatus("current")
_MldVlanStatsTable_Object = MibTable
mldVlanStatsTable = _MldVlanStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 20)
)
if mibBuilder.loadTexts:
    mldVlanStatsTable.setStatus("current")
_MldVlanStatsuEntry_Object = MibTableRow
mldVlanStatsuEntry = _MldVlanStatsuEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 20, 1)
)
mldVlanStatsuEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "mldVlanStatsVlanIndex"),
)
if mibBuilder.loadTexts:
    mldVlanStatsuEntry.setStatus("current")
_MldVlanStatsVlanIndex_Type = VlanIndex
_MldVlanStatsVlanIndex_Object = MibTableColumn
mldVlanStatsVlanIndex = _MldVlanStatsVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 20, 1, 1),
    _MldVlanStatsVlanIndex_Type()
)
mldVlanStatsVlanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldVlanStatsVlanIndex.setStatus("current")
_MldVlanStatsNumOfActiveGroups_Type = Integer32
_MldVlanStatsNumOfActiveGroups_Object = MibTableColumn
mldVlanStatsNumOfActiveGroups = _MldVlanStatsNumOfActiveGroups_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 20, 1, 2),
    _MldVlanStatsNumOfActiveGroups_Type()
)
mldVlanStatsNumOfActiveGroups.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldVlanStatsNumOfActiveGroups.setStatus("current")
_MldVlanStatsQueryPort_Type = Integer32
_MldVlanStatsQueryPort_Object = MibTableColumn
mldVlanStatsQueryPort = _MldVlanStatsQueryPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 20, 1, 3),
    _MldVlanStatsQueryPort_Type()
)
mldVlanStatsQueryPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldVlanStatsQueryPort.setStatus("current")
_MldVlanStatsQuerierIp_Type = InetAddress
_MldVlanStatsQuerierIp_Object = MibTableColumn
mldVlanStatsQuerierIp = _MldVlanStatsQuerierIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 20, 1, 4),
    _MldVlanStatsQuerierIp_Type()
)
mldVlanStatsQuerierIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldVlanStatsQuerierIp.setStatus("current")
_MldVlanStatsV1QueryInCnt_Type = Counter32
_MldVlanStatsV1QueryInCnt_Object = MibTableColumn
mldVlanStatsV1QueryInCnt = _MldVlanStatsV1QueryInCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 20, 1, 5),
    _MldVlanStatsV1QueryInCnt_Type()
)
mldVlanStatsV1QueryInCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldVlanStatsV1QueryInCnt.setStatus("current")
_MldVlanStatsV1ReportInCnt_Type = Counter32
_MldVlanStatsV1ReportInCnt_Object = MibTableColumn
mldVlanStatsV1ReportInCnt = _MldVlanStatsV1ReportInCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 20, 1, 6),
    _MldVlanStatsV1ReportInCnt_Type()
)
mldVlanStatsV1ReportInCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldVlanStatsV1ReportInCnt.setStatus("current")
_MldVlanStatsV1DoneInCnt_Type = Counter32
_MldVlanStatsV1DoneInCnt_Object = MibTableColumn
mldVlanStatsV1DoneInCnt = _MldVlanStatsV1DoneInCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 20, 1, 7),
    _MldVlanStatsV1DoneInCnt_Type()
)
mldVlanStatsV1DoneInCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldVlanStatsV1DoneInCnt.setStatus("current")
_MldVlanStatsV1QueryInDropCnt_Type = Counter32
_MldVlanStatsV1QueryInDropCnt_Object = MibTableColumn
mldVlanStatsV1QueryInDropCnt = _MldVlanStatsV1QueryInDropCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 20, 1, 8),
    _MldVlanStatsV1QueryInDropCnt_Type()
)
mldVlanStatsV1QueryInDropCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldVlanStatsV1QueryInDropCnt.setStatus("current")
_MldVlanStatsV1ReportInDropCnt_Type = Counter32
_MldVlanStatsV1ReportInDropCnt_Object = MibTableColumn
mldVlanStatsV1ReportInDropCnt = _MldVlanStatsV1ReportInDropCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 20, 1, 9),
    _MldVlanStatsV1ReportInDropCnt_Type()
)
mldVlanStatsV1ReportInDropCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldVlanStatsV1ReportInDropCnt.setStatus("current")
_MldVlanStatsV1DoneInDropCnt_Type = Counter32
_MldVlanStatsV1DoneInDropCnt_Object = MibTableColumn
mldVlanStatsV1DoneInDropCnt = _MldVlanStatsV1DoneInDropCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 20, 1, 10),
    _MldVlanStatsV1DoneInDropCnt_Type()
)
mldVlanStatsV1DoneInDropCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldVlanStatsV1DoneInDropCnt.setStatus("current")
_MldVlanStatsV1QueryOutCnt_Type = Counter32
_MldVlanStatsV1QueryOutCnt_Object = MibTableColumn
mldVlanStatsV1QueryOutCnt = _MldVlanStatsV1QueryOutCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 20, 1, 11),
    _MldVlanStatsV1QueryOutCnt_Type()
)
mldVlanStatsV1QueryOutCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldVlanStatsV1QueryOutCnt.setStatus("current")
_MldVlanStatsV1ReportOutCnt_Type = Counter32
_MldVlanStatsV1ReportOutCnt_Object = MibTableColumn
mldVlanStatsV1ReportOutCnt = _MldVlanStatsV1ReportOutCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 20, 1, 12),
    _MldVlanStatsV1ReportOutCnt_Type()
)
mldVlanStatsV1ReportOutCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldVlanStatsV1ReportOutCnt.setStatus("current")
_MldVlanStatsV1DoneOutCnt_Type = Counter32
_MldVlanStatsV1DoneOutCnt_Object = MibTableColumn
mldVlanStatsV1DoneOutCnt = _MldVlanStatsV1DoneOutCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 20, 1, 13),
    _MldVlanStatsV1DoneOutCnt_Type()
)
mldVlanStatsV1DoneOutCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldVlanStatsV1DoneOutCnt.setStatus("current")
_MldVlanStatsV2QueryInCnt_Type = Counter32
_MldVlanStatsV2QueryInCnt_Object = MibTableColumn
mldVlanStatsV2QueryInCnt = _MldVlanStatsV2QueryInCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 20, 1, 14),
    _MldVlanStatsV2QueryInCnt_Type()
)
mldVlanStatsV2QueryInCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldVlanStatsV2QueryInCnt.setStatus("current")
_MldVlanStatsV2ReportInCnt_Type = Counter32
_MldVlanStatsV2ReportInCnt_Object = MibTableColumn
mldVlanStatsV2ReportInCnt = _MldVlanStatsV2ReportInCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 20, 1, 15),
    _MldVlanStatsV2ReportInCnt_Type()
)
mldVlanStatsV2ReportInCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldVlanStatsV2ReportInCnt.setStatus("current")
_MldVlanStatsV2QueryInDropCnt_Type = Counter32
_MldVlanStatsV2QueryInDropCnt_Object = MibTableColumn
mldVlanStatsV2QueryInDropCnt = _MldVlanStatsV2QueryInDropCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 20, 1, 16),
    _MldVlanStatsV2QueryInDropCnt_Type()
)
mldVlanStatsV2QueryInDropCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldVlanStatsV2QueryInDropCnt.setStatus("current")
_MldVlanStatsV2ReportInDropCnt_Type = Counter32
_MldVlanStatsV2ReportInDropCnt_Object = MibTableColumn
mldVlanStatsV2ReportInDropCnt = _MldVlanStatsV2ReportInDropCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 20, 1, 17),
    _MldVlanStatsV2ReportInDropCnt_Type()
)
mldVlanStatsV2ReportInDropCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldVlanStatsV2ReportInDropCnt.setStatus("current")
_MldVlanStatsV2QueryOutCnt_Type = Counter32
_MldVlanStatsV2QueryOutCnt_Object = MibTableColumn
mldVlanStatsV2QueryOutCnt = _MldVlanStatsV2QueryOutCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 20, 1, 18),
    _MldVlanStatsV2QueryOutCnt_Type()
)
mldVlanStatsV2QueryOutCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldVlanStatsV2QueryOutCnt.setStatus("current")
_MldVlanStatsV2ReportOutCnt_Type = Counter32
_MldVlanStatsV2ReportOutCnt_Object = MibTableColumn
mldVlanStatsV2ReportOutCnt = _MldVlanStatsV2ReportOutCnt_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 22, 20, 1, 19),
    _MldVlanStatsV2ReportOutCnt_Type()
)
mldVlanStatsV2ReportOutCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldVlanStatsV2ReportOutCnt.setStatus("current")
_MacFFStats_ObjectIdentity = ObjectIdentity
macFFStats = _MacFFStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 23)
)
_MacFFArpStatusUplinkTable_Object = MibTable
macFFArpStatusUplinkTable = _MacFFArpStatusUplinkTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 23, 1)
)
if mibBuilder.loadTexts:
    macFFArpStatusUplinkTable.setStatus("current")
_MacFFArpStatusUplinkEntry_Object = MibTableRow
macFFArpStatusUplinkEntry = _MacFFArpStatusUplinkEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 23, 1, 1)
)
macFFArpStatusUplinkEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "slotId"),
    (0, "ZYXEL-IES5000-MIB", "macFFArpStatusUplinkMacVid"),
    (0, "ZYXEL-IES5000-MIB", "macFFArpStatusUplinkIpAddr"),
)
if mibBuilder.loadTexts:
    macFFArpStatusUplinkEntry.setStatus("current")
_MacFFArpStatusUplinkIpAddr_Type = IpAddress
_MacFFArpStatusUplinkIpAddr_Object = MibTableColumn
macFFArpStatusUplinkIpAddr = _MacFFArpStatusUplinkIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 23, 1, 1, 1),
    _MacFFArpStatusUplinkIpAddr_Type()
)
macFFArpStatusUplinkIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFFArpStatusUplinkIpAddr.setStatus("current")
_MacFFArpStatusUplinkMacAddr_Type = PhysAddress
_MacFFArpStatusUplinkMacAddr_Object = MibTableColumn
macFFArpStatusUplinkMacAddr = _MacFFArpStatusUplinkMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 23, 1, 1, 2),
    _MacFFArpStatusUplinkMacAddr_Type()
)
macFFArpStatusUplinkMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFFArpStatusUplinkMacAddr.setStatus("current")


class _MacFFArpStatusUplinkMacVid_Type(Integer32):
    """Custom type macFFArpStatusUplinkMacVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_MacFFArpStatusUplinkMacVid_Type.__name__ = "Integer32"
_MacFFArpStatusUplinkMacVid_Object = MibTableColumn
macFFArpStatusUplinkMacVid = _MacFFArpStatusUplinkMacVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 23, 1, 1, 3),
    _MacFFArpStatusUplinkMacVid_Type()
)
macFFArpStatusUplinkMacVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFFArpStatusUplinkMacVid.setStatus("current")
_MacFFArpStatusSlotTable_Object = MibTable
macFFArpStatusSlotTable = _MacFFArpStatusSlotTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 23, 2)
)
if mibBuilder.loadTexts:
    macFFArpStatusSlotTable.setStatus("current")
_MacFFArpStatusSlotEntry_Object = MibTableRow
macFFArpStatusSlotEntry = _MacFFArpStatusSlotEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 23, 2, 1)
)
macFFArpStatusSlotEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "slotId"),
    (0, "ZYXEL-IES5000-MIB", "macFFArpStatusSlotMacVid"),
    (0, "ZYXEL-IES5000-MIB", "macFFArpStatusSlotIpAddr"),
)
if mibBuilder.loadTexts:
    macFFArpStatusSlotEntry.setStatus("current")
_MacFFArpStatusSlotIpAddr_Type = IpAddress
_MacFFArpStatusSlotIpAddr_Object = MibTableColumn
macFFArpStatusSlotIpAddr = _MacFFArpStatusSlotIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 23, 2, 1, 1),
    _MacFFArpStatusSlotIpAddr_Type()
)
macFFArpStatusSlotIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFFArpStatusSlotIpAddr.setStatus("current")
_MacFFArpStatusSlotMacAddr_Type = PhysAddress
_MacFFArpStatusSlotMacAddr_Object = MibTableColumn
macFFArpStatusSlotMacAddr = _MacFFArpStatusSlotMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 23, 2, 1, 2),
    _MacFFArpStatusSlotMacAddr_Type()
)
macFFArpStatusSlotMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFFArpStatusSlotMacAddr.setStatus("current")


class _MacFFArpStatusSlotMacVid_Type(Integer32):
    """Custom type macFFArpStatusSlotMacVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_MacFFArpStatusSlotMacVid_Type.__name__ = "Integer32"
_MacFFArpStatusSlotMacVid_Object = MibTableColumn
macFFArpStatusSlotMacVid = _MacFFArpStatusSlotMacVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 23, 2, 1, 3),
    _MacFFArpStatusSlotMacVid_Type()
)
macFFArpStatusSlotMacVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFFArpStatusSlotMacVid.setStatus("current")
_MacFFArpStatusSlotPort_Type = Integer32
_MacFFArpStatusSlotPort_Object = MibTableColumn
macFFArpStatusSlotPort = _MacFFArpStatusSlotPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 23, 2, 1, 4),
    _MacFFArpStatusSlotPort_Type()
)
macFFArpStatusSlotPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFFArpStatusSlotPort.setStatus("current")
_MacFFArpCntUplinkTable_Object = MibTable
macFFArpCntUplinkTable = _MacFFArpCntUplinkTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 23, 3)
)
if mibBuilder.loadTexts:
    macFFArpCntUplinkTable.setStatus("current")
_MacFFArpCntUplinkEntry_Object = MibTableRow
macFFArpCntUplinkEntry = _MacFFArpCntUplinkEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 23, 3, 1)
)
macFFArpCntUplinkEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "slotId"),
)
if mibBuilder.loadTexts:
    macFFArpCntUplinkEntry.setStatus("current")
_MacFFArpCntUplinkReqRx_Type = Unsigned32
_MacFFArpCntUplinkReqRx_Object = MibTableColumn
macFFArpCntUplinkReqRx = _MacFFArpCntUplinkReqRx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 23, 3, 1, 1),
    _MacFFArpCntUplinkReqRx_Type()
)
macFFArpCntUplinkReqRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFFArpCntUplinkReqRx.setStatus("current")
_MacFFArpCntUplinkReqTx_Type = Unsigned32
_MacFFArpCntUplinkReqTx_Object = MibTableColumn
macFFArpCntUplinkReqTx = _MacFFArpCntUplinkReqTx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 23, 3, 1, 2),
    _MacFFArpCntUplinkReqTx_Type()
)
macFFArpCntUplinkReqTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFFArpCntUplinkReqTx.setStatus("current")
_MacFFArpCntUplinkReqRxDrop_Type = Unsigned32
_MacFFArpCntUplinkReqRxDrop_Object = MibTableColumn
macFFArpCntUplinkReqRxDrop = _MacFFArpCntUplinkReqRxDrop_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 23, 3, 1, 3),
    _MacFFArpCntUplinkReqRxDrop_Type()
)
macFFArpCntUplinkReqRxDrop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFFArpCntUplinkReqRxDrop.setStatus("current")
_MacFFArpCntUplinkRpyRx_Type = Unsigned32
_MacFFArpCntUplinkRpyRx_Object = MibTableColumn
macFFArpCntUplinkRpyRx = _MacFFArpCntUplinkRpyRx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 23, 3, 1, 4),
    _MacFFArpCntUplinkRpyRx_Type()
)
macFFArpCntUplinkRpyRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFFArpCntUplinkRpyRx.setStatus("current")
_MacFFArpCntUplinkRpyTx_Type = Unsigned32
_MacFFArpCntUplinkRpyTx_Object = MibTableColumn
macFFArpCntUplinkRpyTx = _MacFFArpCntUplinkRpyTx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 23, 3, 1, 5),
    _MacFFArpCntUplinkRpyTx_Type()
)
macFFArpCntUplinkRpyTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFFArpCntUplinkRpyTx.setStatus("current")
_MacFFArpCntUplinkRpyRxDrop_Type = Unsigned32
_MacFFArpCntUplinkRpyRxDrop_Object = MibTableColumn
macFFArpCntUplinkRpyRxDrop = _MacFFArpCntUplinkRpyRxDrop_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 23, 3, 1, 6),
    _MacFFArpCntUplinkRpyRxDrop_Type()
)
macFFArpCntUplinkRpyRxDrop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFFArpCntUplinkRpyRxDrop.setStatus("current")
_MacFFArpCntPortTable_Object = MibTable
macFFArpCntPortTable = _MacFFArpCntPortTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 23, 4)
)
if mibBuilder.loadTexts:
    macFFArpCntPortTable.setStatus("current")
_MacFFArpCntPortEntry_Object = MibTableRow
macFFArpCntPortEntry = _MacFFArpCntPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 23, 4, 1)
)
macFFArpCntPortEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    macFFArpCntPortEntry.setStatus("current")
_MacFFArpCntPortReqRx_Type = Unsigned32
_MacFFArpCntPortReqRx_Object = MibTableColumn
macFFArpCntPortReqRx = _MacFFArpCntPortReqRx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 23, 4, 1, 1),
    _MacFFArpCntPortReqRx_Type()
)
macFFArpCntPortReqRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFFArpCntPortReqRx.setStatus("current")
_MacFFArpCntPortReqTx_Type = Unsigned32
_MacFFArpCntPortReqTx_Object = MibTableColumn
macFFArpCntPortReqTx = _MacFFArpCntPortReqTx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 23, 4, 1, 2),
    _MacFFArpCntPortReqTx_Type()
)
macFFArpCntPortReqTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFFArpCntPortReqTx.setStatus("current")
_MacFFArpCntPortReqRxDrop_Type = Unsigned32
_MacFFArpCntPortReqRxDrop_Object = MibTableColumn
macFFArpCntPortReqRxDrop = _MacFFArpCntPortReqRxDrop_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 23, 4, 1, 3),
    _MacFFArpCntPortReqRxDrop_Type()
)
macFFArpCntPortReqRxDrop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFFArpCntPortReqRxDrop.setStatus("current")
_MacFFArpCntPortRpyRx_Type = Unsigned32
_MacFFArpCntPortRpyRx_Object = MibTableColumn
macFFArpCntPortRpyRx = _MacFFArpCntPortRpyRx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 23, 4, 1, 4),
    _MacFFArpCntPortRpyRx_Type()
)
macFFArpCntPortRpyRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFFArpCntPortRpyRx.setStatus("current")
_MacFFArpCntPortRpyTx_Type = Unsigned32
_MacFFArpCntPortRpyTx_Object = MibTableColumn
macFFArpCntPortRpyTx = _MacFFArpCntPortRpyTx_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 23, 4, 1, 5),
    _MacFFArpCntPortRpyTx_Type()
)
macFFArpCntPortRpyTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFFArpCntPortRpyTx.setStatus("current")
_MacFFArpCntPortRpyRxDrop_Type = Unsigned32
_MacFFArpCntPortRpyRxDrop_Object = MibTableColumn
macFFArpCntPortRpyRxDrop = _MacFFArpCntPortRpyRxDrop_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 23, 4, 1, 6),
    _MacFFArpCntPortRpyRxDrop_Type()
)
macFFArpCntPortRpyRxDrop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macFFArpCntPortRpyRxDrop.setStatus("current")
_ImageStats_ObjectIdentity = ObjectIdentity
imageStats = _ImageStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 24)
)
_SysBootUpFwIndex_Type = Integer32
_SysBootUpFwIndex_Object = MibScalar
sysBootUpFwIndex = _SysBootUpFwIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 24, 1),
    _SysBootUpFwIndex_Type()
)
sysBootUpFwIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysBootUpFwIndex.setStatus("current")
_SysBootUpFwVersion_Type = DisplayString
_SysBootUpFwVersion_Object = MibScalar
sysBootUpFwVersion = _SysBootUpFwVersion_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 24, 2),
    _SysBootUpFwVersion_Type()
)
sysBootUpFwVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysBootUpFwVersion.setStatus("current")
_SysFlashFwInfoTable_Object = MibTable
sysFlashFwInfoTable = _SysFlashFwInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 24, 3)
)
if mibBuilder.loadTexts:
    sysFlashFwInfoTable.setStatus("current")
_SysFlashFwInfoEntry_Object = MibTableRow
sysFlashFwInfoEntry = _SysFlashFwInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 24, 3, 1)
)
sysFlashFwInfoEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "sysFlashFwIndex"),
)
if mibBuilder.loadTexts:
    sysFlashFwInfoEntry.setStatus("current")


class _SysFlashFwIndex_Type(Integer32):
    """Custom type sysFlashFwIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_SysFlashFwIndex_Type.__name__ = "Integer32"
_SysFlashFwIndex_Object = MibTableColumn
sysFlashFwIndex = _SysFlashFwIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 24, 3, 1, 1),
    _SysFlashFwIndex_Type()
)
sysFlashFwIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    sysFlashFwIndex.setStatus("current")
_SysFlashFwVersion_Type = DisplayString
_SysFlashFwVersion_Object = MibTableColumn
sysFlashFwVersion = _SysFlashFwVersion_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 13, 24, 3, 1, 2),
    _SysFlashFwVersion_Type()
)
sysFlashFwVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysFlashFwVersion.setStatus("current")
_Clear_ObjectIdentity = ObjectIdentity
clear = _Clear_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 14)
)
_CounterClearTarget_Type = OctetString
_CounterClearTarget_Object = MibScalar
counterClearTarget = _CounterClearTarget_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 14, 1),
    _CounterClearTarget_Type()
)
counterClearTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    counterClearTarget.setStatus("current")
_CounterClearOps_Type = Integer32
_CounterClearOps_Object = MibScalar
counterClearOps = _CounterClearOps_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 14, 2),
    _CounterClearOps_Type()
)
counterClearOps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    counterClearOps.setStatus("current")


class _CounterClearVpi_Type(Integer32):
    """Custom type counterClearVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_CounterClearVpi_Type.__name__ = "Integer32"
_CounterClearVpi_Object = MibScalar
counterClearVpi = _CounterClearVpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 14, 3),
    _CounterClearVpi_Type()
)
counterClearVpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    counterClearVpi.setStatus("current")


class _CounterClearVci_Type(Integer32):
    """Custom type counterClearVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_CounterClearVci_Type.__name__ = "Integer32"
_CounterClearVci_Object = MibScalar
counterClearVci = _CounterClearVci_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 14, 4),
    _CounterClearVci_Type()
)
counterClearVci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    counterClearVci.setStatus("current")
_ImaClear_ObjectIdentity = ObjectIdentity
imaClear = _ImaClear_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 14, 5)
)
_ImaClearOps_Type = Integer32
_ImaClearOps_Object = MibScalar
imaClearOps = _ImaClearOps_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 14, 5, 1),
    _ImaClearOps_Type()
)
imaClearOps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imaClearOps.setStatus("current")
_ImaClearTargetGroupIndex_Type = Integer32
_ImaClearTargetGroupIndex_Object = MibScalar
imaClearTargetGroupIndex = _ImaClearTargetGroupIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 14, 5, 2),
    _ImaClearTargetGroupIndex_Type()
)
imaClearTargetGroupIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imaClearTargetGroupIndex.setStatus("current")
_ImaClearTargetLinkIndex_Type = Integer32
_ImaClearTargetLinkIndex_Object = MibScalar
imaClearTargetLinkIndex = _ImaClearTargetLinkIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 14, 5, 3),
    _ImaClearTargetLinkIndex_Type()
)
imaClearTargetLinkIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imaClearTargetLinkIndex.setStatus("current")


class _ImaClearTargetVpi_Type(Integer32):
    """Custom type imaClearTargetVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_ImaClearTargetVpi_Type.__name__ = "Integer32"
_ImaClearTargetVpi_Object = MibScalar
imaClearTargetVpi = _ImaClearTargetVpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 14, 5, 4),
    _ImaClearTargetVpi_Type()
)
imaClearTargetVpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imaClearTargetVpi.setStatus("current")


class _ImaClearTargetVci_Type(Integer32):
    """Custom type imaClearTargetVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_ImaClearTargetVci_Type.__name__ = "Integer32"
_ImaClearTargetVci_Object = MibScalar
imaClearTargetVci = _ImaClearTargetVci_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 14, 5, 5),
    _ImaClearTargetVci_Type()
)
imaClearTargetVci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imaClearTargetVci.setStatus("current")
_ImaClearTargetIfindex_Type = Integer32
_ImaClearTargetIfindex_Object = MibScalar
imaClearTargetIfindex = _ImaClearTargetIfindex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 14, 5, 6),
    _ImaClearTargetIfindex_Type()
)
imaClearTargetIfindex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imaClearTargetIfindex.setStatus("current")
_VoipClear_ObjectIdentity = ObjectIdentity
voipClear = _VoipClear_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 14, 6)
)
_VoipClearOps_Type = Integer32
_VoipClearOps_Object = MibScalar
voipClearOps = _VoipClearOps_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 14, 6, 1),
    _VoipClearOps_Type()
)
voipClearOps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipClearOps.setStatus("current")
_VoipClearH248TargetInterface_Type = Integer32
_VoipClearH248TargetInterface_Object = MibScalar
voipClearH248TargetInterface = _VoipClearH248TargetInterface_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 14, 6, 2),
    _VoipClearH248TargetInterface_Type()
)
voipClearH248TargetInterface.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipClearH248TargetInterface.setStatus("current")
_Cluster_ObjectIdentity = ObjectIdentity
cluster = _Cluster_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 15)
)


class _ClusterEnable_Type(Integer32):
    """Custom type clusterEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enableManager", 1),
          ("enableMember", 2),
          ("disable", 3))
    )


_ClusterEnable_Type.__name__ = "Integer32"
_ClusterEnable_Object = MibScalar
clusterEnable = _ClusterEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 15, 1),
    _ClusterEnable_Type()
)
clusterEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clusterEnable.setStatus("current")
_ClusterName_Type = DisplayString
_ClusterName_Object = MibScalar
clusterName = _ClusterName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 15, 2),
    _ClusterName_Type()
)
clusterName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clusterName.setStatus("current")
_ClusterMemberPassword_Type = DisplayString
_ClusterMemberPassword_Object = MibScalar
clusterMemberPassword = _ClusterMemberPassword_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 15, 3),
    _ClusterMemberPassword_Type()
)
clusterMemberPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clusterMemberPassword.setStatus("current")
_ClusterVlan_Type = VlanIndex
_ClusterVlan_Object = MibScalar
clusterVlan = _ClusterVlan_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 15, 4),
    _ClusterVlan_Type()
)
clusterVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clusterVlan.setStatus("current")
_ClusterCandidate_ObjectIdentity = ObjectIdentity
clusterCandidate = _ClusterCandidate_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 15, 5)
)
_ClusterCandidateFlush_Type = Integer32
_ClusterCandidateFlush_Object = MibScalar
clusterCandidateFlush = _ClusterCandidateFlush_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 15, 5, 1),
    _ClusterCandidateFlush_Type()
)
clusterCandidateFlush.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clusterCandidateFlush.setStatus("current")
_ClusterCandidateTable_Object = MibTable
clusterCandidateTable = _ClusterCandidateTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 15, 5, 2)
)
if mibBuilder.loadTexts:
    clusterCandidateTable.setStatus("current")
_ClusterCandidateEntry_Object = MibTableRow
clusterCandidateEntry = _ClusterCandidateEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 15, 5, 2, 1)
)
clusterCandidateEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "clusterCandidateMacAddr"),
)
if mibBuilder.loadTexts:
    clusterCandidateEntry.setStatus("current")
_ClusterCandidateMacAddr_Type = MacAddress
_ClusterCandidateMacAddr_Object = MibTableColumn
clusterCandidateMacAddr = _ClusterCandidateMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 15, 5, 2, 1, 1),
    _ClusterCandidateMacAddr_Type()
)
clusterCandidateMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clusterCandidateMacAddr.setStatus("current")
_ClusterCandidateHostName_Type = DisplayString
_ClusterCandidateHostName_Object = MibTableColumn
clusterCandidateHostName = _ClusterCandidateHostName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 15, 5, 2, 1, 2),
    _ClusterCandidateHostName_Type()
)
clusterCandidateHostName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clusterCandidateHostName.setStatus("current")
_ClusterCandidateModelName_Type = DisplayString
_ClusterCandidateModelName_Object = MibTableColumn
clusterCandidateModelName = _ClusterCandidateModelName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 15, 5, 2, 1, 3),
    _ClusterCandidateModelName_Type()
)
clusterCandidateModelName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clusterCandidateModelName.setStatus("current")


class _ClusterCandidateDeviceType_Type(Integer32):
    """Custom type clusterCandidateDeviceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              101,
              102,
              103,
              104)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 1),
          ("ies5000", 2),
          ("ies5005", 3),
          ("ies6000", 4),
          ("ies1248-71", 101),
          ("ies1248-73", 102),
          ("ies1248-51", 103),
          ("ies1248-53", 104))
    )


_ClusterCandidateDeviceType_Type.__name__ = "Integer32"
_ClusterCandidateDeviceType_Object = MibTableColumn
clusterCandidateDeviceType = _ClusterCandidateDeviceType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 15, 5, 2, 1, 4),
    _ClusterCandidateDeviceType_Type()
)
clusterCandidateDeviceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clusterCandidateDeviceType.setStatus("current")
_ClusterMemberConfTable_Object = MibTable
clusterMemberConfTable = _ClusterMemberConfTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 15, 6)
)
if mibBuilder.loadTexts:
    clusterMemberConfTable.setStatus("current")
_ClusterMemberConfEntry_Object = MibTableRow
clusterMemberConfEntry = _ClusterMemberConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 15, 6, 1)
)
clusterMemberConfEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "clusterMemberConfId"),
)
if mibBuilder.loadTexts:
    clusterMemberConfEntry.setStatus("current")
_ClusterMemberConfId_Type = Integer32
_ClusterMemberConfId_Object = MibTableColumn
clusterMemberConfId = _ClusterMemberConfId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 15, 6, 1, 1),
    _ClusterMemberConfId_Type()
)
clusterMemberConfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clusterMemberConfId.setStatus("current")
_ClusterMemberConfMacAddr_Type = MacAddress
_ClusterMemberConfMacAddr_Object = MibTableColumn
clusterMemberConfMacAddr = _ClusterMemberConfMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 15, 6, 1, 2),
    _ClusterMemberConfMacAddr_Type()
)
clusterMemberConfMacAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clusterMemberConfMacAddr.setStatus("current")
_ClusterMemberConfPasswd_Type = DisplayString
_ClusterMemberConfPasswd_Object = MibTableColumn
clusterMemberConfPasswd = _ClusterMemberConfPasswd_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 15, 6, 1, 3),
    _ClusterMemberConfPasswd_Type()
)
clusterMemberConfPasswd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clusterMemberConfPasswd.setStatus("current")
_ClusterMemberStatusTable_Object = MibTable
clusterMemberStatusTable = _ClusterMemberStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 15, 7)
)
if mibBuilder.loadTexts:
    clusterMemberStatusTable.setStatus("current")
_ClusterMemberStatusEntry_Object = MibTableRow
clusterMemberStatusEntry = _ClusterMemberStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 15, 7, 1)
)
clusterMemberStatusEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "clusterMemberConfId"),
)
if mibBuilder.loadTexts:
    clusterMemberStatusEntry.setStatus("current")


class _ClusterMemberStatusState_Type(Integer32):
    """Custom type clusterMemberStatusState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("waiting", 1),
          ("inactive", 2),
          ("active", 3),
          ("empty", 4),
          ("error", 5))
    )


_ClusterMemberStatusState_Type.__name__ = "Integer32"
_ClusterMemberStatusState_Object = MibTableColumn
clusterMemberStatusState = _ClusterMemberStatusState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 15, 7, 1, 1),
    _ClusterMemberStatusState_Type()
)
clusterMemberStatusState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clusterMemberStatusState.setStatus("current")
_ClusterMemberStatusMacAddr_Type = MacAddress
_ClusterMemberStatusMacAddr_Object = MibTableColumn
clusterMemberStatusMacAddr = _ClusterMemberStatusMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 15, 7, 1, 2),
    _ClusterMemberStatusMacAddr_Type()
)
clusterMemberStatusMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clusterMemberStatusMacAddr.setStatus("current")
_ClusterMemberStatusHostName_Type = DisplayString
_ClusterMemberStatusHostName_Object = MibTableColumn
clusterMemberStatusHostName = _ClusterMemberStatusHostName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 15, 7, 1, 3),
    _ClusterMemberStatusHostName_Type()
)
clusterMemberStatusHostName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clusterMemberStatusHostName.setStatus("current")
_ClusterMemberStatusModelName_Type = DisplayString
_ClusterMemberStatusModelName_Object = MibTableColumn
clusterMemberStatusModelName = _ClusterMemberStatusModelName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 15, 7, 1, 4),
    _ClusterMemberStatusModelName_Type()
)
clusterMemberStatusModelName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clusterMemberStatusModelName.setStatus("current")


class _ClusterMemberStatusDeviceType_Type(Integer32):
    """Custom type clusterMemberStatusDeviceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              101,
              102,
              103,
              104)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 1),
          ("ies5000", 2),
          ("ies5005", 3),
          ("ies6000", 4),
          ("ies1248-71", 101),
          ("ies1248-73", 102),
          ("ies1248-51", 103),
          ("ies1248-53", 104))
    )


_ClusterMemberStatusDeviceType_Type.__name__ = "Integer32"
_ClusterMemberStatusDeviceType_Object = MibTableColumn
clusterMemberStatusDeviceType = _ClusterMemberStatusDeviceType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 15, 7, 1, 5),
    _ClusterMemberStatusDeviceType_Type()
)
clusterMemberStatusDeviceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clusterMemberStatusDeviceType.setStatus("current")
_ClusterMemberStatusFWVersion_Type = DisplayString
_ClusterMemberStatusFWVersion_Object = MibTableColumn
clusterMemberStatusFWVersion = _ClusterMemberStatusFWVersion_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 15, 7, 1, 6),
    _ClusterMemberStatusFWVersion_Type()
)
clusterMemberStatusFWVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clusterMemberStatusFWVersion.setStatus("current")
_ClusterMemberStatusUpTime_Type = TimeTicks
_ClusterMemberStatusUpTime_Object = MibTableColumn
clusterMemberStatusUpTime = _ClusterMemberStatusUpTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 15, 7, 1, 7),
    _ClusterMemberStatusUpTime_Type()
)
clusterMemberStatusUpTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clusterMemberStatusUpTime.setStatus("current")
_Voip_ObjectIdentity = ObjectIdentity
voip = _Voip_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16)
)
_VoipArp_ObjectIdentity = ObjectIdentity
voipArp = _VoipArp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 1)
)
_VoipArpFlushTarget_Type = Integer32
_VoipArpFlushTarget_Object = MibScalar
voipArpFlushTarget = _VoipArpFlushTarget_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 1, 1),
    _VoipArpFlushTarget_Type()
)
voipArpFlushTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipArpFlushTarget.setStatus("current")
_VoipArpFlushOps_Type = Integer32
_VoipArpFlushOps_Object = MibScalar
voipArpFlushOps = _VoipArpFlushOps_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 1, 2),
    _VoipArpFlushOps_Type()
)
voipArpFlushOps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipArpFlushOps.setStatus("current")
_VoipArpShowTable_Object = MibTable
voipArpShowTable = _VoipArpShowTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 1, 3)
)
if mibBuilder.loadTexts:
    voipArpShowTable.setStatus("current")
_VoipArpShowEntry_Object = MibTableRow
voipArpShowEntry = _VoipArpShowEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 1, 3, 1)
)
voipArpShowEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "slotId"),
    (0, "ZYXEL-IES5000-MIB", "voipArpShowIp"),
)
if mibBuilder.loadTexts:
    voipArpShowEntry.setStatus("current")
_VoipArpShowIp_Type = IpAddress
_VoipArpShowIp_Object = MibTableColumn
voipArpShowIp = _VoipArpShowIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 1, 3, 1, 1),
    _VoipArpShowIp_Type()
)
voipArpShowIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipArpShowIp.setStatus("current")
_VoipArpShowMac_Type = PhysAddress
_VoipArpShowMac_Object = MibTableColumn
voipArpShowMac = _VoipArpShowMac_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 1, 3, 1, 2),
    _VoipArpShowMac_Type()
)
voipArpShowMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipArpShowMac.setStatus("current")
_VoipArpShowTimer_Type = Integer32
_VoipArpShowTimer_Object = MibTableColumn
voipArpShowTimer = _VoipArpShowTimer_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 1, 3, 1, 3),
    _VoipArpShowTimer_Type()
)
voipArpShowTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipArpShowTimer.setStatus("current")
_VoipSip_ObjectIdentity = ObjectIdentity
voipSip = _VoipSip_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2)
)
_MaxNumOfVoipNumberPlan_Type = Integer32
_MaxNumOfVoipNumberPlan_Object = MibScalar
maxNumOfVoipNumberPlan = _MaxNumOfVoipNumberPlan_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 1),
    _MaxNumOfVoipNumberPlan_Type()
)
maxNumOfVoipNumberPlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfVoipNumberPlan.setStatus("current")
_VoipNumberPlanTable_Object = MibTable
voipNumberPlanTable = _VoipNumberPlanTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 2)
)
if mibBuilder.loadTexts:
    voipNumberPlanTable.setStatus("current")
_VoipNumberPlanEntry_Object = MibTableRow
voipNumberPlanEntry = _VoipNumberPlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 2, 1)
)
voipNumberPlanEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipNumberPlanName"),
    (0, "ZYXEL-IES5000-MIB", "voipNumberPlanIndex"),
)
if mibBuilder.loadTexts:
    voipNumberPlanEntry.setStatus("current")


class _VoipNumberPlanName_Type(DisplayString):
    """Custom type voipNumberPlanName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipNumberPlanName_Type.__name__ = "DisplayString"
_VoipNumberPlanName_Object = MibTableColumn
voipNumberPlanName = _VoipNumberPlanName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 2, 1, 1),
    _VoipNumberPlanName_Type()
)
voipNumberPlanName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipNumberPlanName.setStatus("current")


class _VoipNumberPlanIndex_Type(Integer32):
    """Custom type voipNumberPlanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_VoipNumberPlanIndex_Type.__name__ = "Integer32"
_VoipNumberPlanIndex_Object = MibTableColumn
voipNumberPlanIndex = _VoipNumberPlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 2, 1, 2),
    _VoipNumberPlanIndex_Type()
)
voipNumberPlanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipNumberPlanIndex.setStatus("current")


class _VoipNumberPlanPattern_Type(DisplayString):
    """Custom type voipNumberPlanPattern based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 47),
    )


_VoipNumberPlanPattern_Type.__name__ = "DisplayString"
_VoipNumberPlanPattern_Object = MibTableColumn
voipNumberPlanPattern = _VoipNumberPlanPattern_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 2, 1, 3),
    _VoipNumberPlanPattern_Type()
)
voipNumberPlanPattern.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipNumberPlanPattern.setStatus("current")


class _VoipNumberPlanRule_Type(DisplayString):
    """Custom type voipNumberPlanRule based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 15),
    )


_VoipNumberPlanRule_Type.__name__ = "DisplayString"
_VoipNumberPlanRule_Object = MibTableColumn
voipNumberPlanRule = _VoipNumberPlanRule_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 2, 1, 4),
    _VoipNumberPlanRule_Type()
)
voipNumberPlanRule.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipNumberPlanRule.setStatus("current")
_VoipNumberPlanRowStatus_Type = RowStatus
_VoipNumberPlanRowStatus_Object = MibTableColumn
voipNumberPlanRowStatus = _VoipNumberPlanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 2, 1, 5),
    _VoipNumberPlanRowStatus_Type()
)
voipNumberPlanRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipNumberPlanRowStatus.setStatus("current")
_MaxNumOfVoipDialPlan_Type = Integer32
_MaxNumOfVoipDialPlan_Object = MibScalar
maxNumOfVoipDialPlan = _MaxNumOfVoipDialPlan_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 3),
    _MaxNumOfVoipDialPlan_Type()
)
maxNumOfVoipDialPlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfVoipDialPlan.setStatus("current")
_VoipDialPlanTable_Object = MibTable
voipDialPlanTable = _VoipDialPlanTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 4)
)
if mibBuilder.loadTexts:
    voipDialPlanTable.setStatus("current")
_VoipDialPlanEntry_Object = MibTableRow
voipDialPlanEntry = _VoipDialPlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 4, 1)
)
voipDialPlanEntry.setIndexNames(
    (1, "ZYXEL-IES5000-MIB", "voipDialPlanName"),
)
if mibBuilder.loadTexts:
    voipDialPlanEntry.setStatus("current")


class _VoipDialPlanName_Type(DisplayString):
    """Custom type voipDialPlanName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipDialPlanName_Type.__name__ = "DisplayString"
_VoipDialPlanName_Object = MibTableColumn
voipDialPlanName = _VoipDialPlanName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 4, 1, 1),
    _VoipDialPlanName_Type()
)
voipDialPlanName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipDialPlanName.setStatus("current")


class _VoipDialPlanPattern_Type(DisplayString):
    """Custom type voipDialPlanPattern based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_VoipDialPlanPattern_Type.__name__ = "DisplayString"
_VoipDialPlanPattern_Object = MibTableColumn
voipDialPlanPattern = _VoipDialPlanPattern_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 4, 1, 2),
    _VoipDialPlanPattern_Type()
)
voipDialPlanPattern.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipDialPlanPattern.setStatus("current")


class _VoipDialPlanNumOfPrefixCut_Type(Integer32):
    """Custom type voipDialPlanNumOfPrefixCut based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8),
    )


_VoipDialPlanNumOfPrefixCut_Type.__name__ = "Integer32"
_VoipDialPlanNumOfPrefixCut_Object = MibTableColumn
voipDialPlanNumOfPrefixCut = _VoipDialPlanNumOfPrefixCut_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 4, 1, 3),
    _VoipDialPlanNumOfPrefixCut_Type()
)
voipDialPlanNumOfPrefixCut.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipDialPlanNumOfPrefixCut.setStatus("current")


class _VoipDialPlanSipServer_Type(DisplayString):
    """Custom type voipDialPlanSipServer based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 31),
    )


_VoipDialPlanSipServer_Type.__name__ = "DisplayString"
_VoipDialPlanSipServer_Object = MibTableColumn
voipDialPlanSipServer = _VoipDialPlanSipServer_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 4, 1, 4),
    _VoipDialPlanSipServer_Type()
)
voipDialPlanSipServer.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipDialPlanSipServer.setStatus("current")


class _VoipDialPlanPrefixAddDigits_Type(DisplayString):
    """Custom type voipDialPlanPrefixAddDigits based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_VoipDialPlanPrefixAddDigits_Type.__name__ = "DisplayString"
_VoipDialPlanPrefixAddDigits_Object = MibTableColumn
voipDialPlanPrefixAddDigits = _VoipDialPlanPrefixAddDigits_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 4, 1, 5),
    _VoipDialPlanPrefixAddDigits_Type()
)
voipDialPlanPrefixAddDigits.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipDialPlanPrefixAddDigits.setStatus("current")


class _VoipDialPlanNumberOfInterdigit_Type(Integer32):
    """Custom type voipDialPlanNumberOfInterdigit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_VoipDialPlanNumberOfInterdigit_Type.__name__ = "Integer32"
_VoipDialPlanNumberOfInterdigit_Object = MibTableColumn
voipDialPlanNumberOfInterdigit = _VoipDialPlanNumberOfInterdigit_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 4, 1, 6),
    _VoipDialPlanNumberOfInterdigit_Type()
)
voipDialPlanNumberOfInterdigit.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipDialPlanNumberOfInterdigit.setStatus("current")


class _VoipDialPlanInterdigitTimeout_Type(Integer32):
    """Custom type voipDialPlanInterdigitTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_VoipDialPlanInterdigitTimeout_Type.__name__ = "Integer32"
_VoipDialPlanInterdigitTimeout_Object = MibTableColumn
voipDialPlanInterdigitTimeout = _VoipDialPlanInterdigitTimeout_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 4, 1, 7),
    _VoipDialPlanInterdigitTimeout_Type()
)
voipDialPlanInterdigitTimeout.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipDialPlanInterdigitTimeout.setStatus("current")
if mibBuilder.loadTexts:
    voipDialPlanInterdigitTimeout.setUnits("second")
_VoipDialPlanRowStatus_Type = RowStatus
_VoipDialPlanRowStatus_Object = MibTableColumn
voipDialPlanRowStatus = _VoipDialPlanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 4, 1, 8),
    _VoipDialPlanRowStatus_Type()
)
voipDialPlanRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipDialPlanRowStatus.setStatus("current")
_MaxNumOfVoipKeyPattern_Type = Integer32
_MaxNumOfVoipKeyPattern_Object = MibScalar
maxNumOfVoipKeyPattern = _MaxNumOfVoipKeyPattern_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 5),
    _MaxNumOfVoipKeyPattern_Type()
)
maxNumOfVoipKeyPattern.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfVoipKeyPattern.setStatus("current")
_VoipKeyPatternTable_Object = MibTable
voipKeyPatternTable = _VoipKeyPatternTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 6)
)
if mibBuilder.loadTexts:
    voipKeyPatternTable.setStatus("current")
_VoipKeyPatternEntry_Object = MibTableRow
voipKeyPatternEntry = _VoipKeyPatternEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 6, 1)
)
voipKeyPatternEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipKeyPatternName"),
    (0, "ZYXEL-IES5000-MIB", "voipKeyPatternServiceType"),
)
if mibBuilder.loadTexts:
    voipKeyPatternEntry.setStatus("current")


class _VoipKeyPatternName_Type(DisplayString):
    """Custom type voipKeyPatternName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipKeyPatternName_Type.__name__ = "DisplayString"
_VoipKeyPatternName_Object = MibTableColumn
voipKeyPatternName = _VoipKeyPatternName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 6, 1, 1),
    _VoipKeyPatternName_Type()
)
voipKeyPatternName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipKeyPatternName.setStatus("current")


class _VoipKeyPatternServiceType_Type(Integer32):
    """Custom type voipKeyPatternServiceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("callreturn", 1),
          ("calltransfer", 2),
          ("callwaitdisconn", 3),
          ("callwaitoff", 4),
          ("callwaiton", 5),
          ("callwaitonhold", 6),
          ("callwaitreject", 7),
          ("clir", 8),
          ("dndoff", 9),
          ("dndon", 10),
          ("callin", 11))
    )


_VoipKeyPatternServiceType_Type.__name__ = "Integer32"
_VoipKeyPatternServiceType_Object = MibTableColumn
voipKeyPatternServiceType = _VoipKeyPatternServiceType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 6, 1, 2),
    _VoipKeyPatternServiceType_Type()
)
voipKeyPatternServiceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipKeyPatternServiceType.setStatus("current")


class _VoipKeyPatternPattern_Type(DisplayString):
    """Custom type voipKeyPatternPattern based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 7),
    )


_VoipKeyPatternPattern_Type.__name__ = "DisplayString"
_VoipKeyPatternPattern_Object = MibTableColumn
voipKeyPatternPattern = _VoipKeyPatternPattern_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 6, 1, 3),
    _VoipKeyPatternPattern_Type()
)
voipKeyPatternPattern.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipKeyPatternPattern.setStatus("current")
_VoipKeyPatternRowStatus_Type = RowStatus
_VoipKeyPatternRowStatus_Object = MibTableColumn
voipKeyPatternRowStatus = _VoipKeyPatternRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 6, 1, 4),
    _VoipKeyPatternRowStatus_Type()
)
voipKeyPatternRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipKeyPatternRowStatus.setStatus("current")
_VoipLocalCall_ObjectIdentity = ObjectIdentity
voipLocalCall = _VoipLocalCall_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 7)
)
_VoipLocalCallSync_Type = Integer32
_VoipLocalCallSync_Object = MibScalar
voipLocalCallSync = _VoipLocalCallSync_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 7, 1),
    _VoipLocalCallSync_Type()
)
voipLocalCallSync.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipLocalCallSync.setStatus("current")


class _VoipLocalCallEnterTime_Type(Integer32):
    """Custom type voipLocalCallEnterTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_VoipLocalCallEnterTime_Type.__name__ = "Integer32"
_VoipLocalCallEnterTime_Object = MibScalar
voipLocalCallEnterTime = _VoipLocalCallEnterTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 7, 2),
    _VoipLocalCallEnterTime_Type()
)
voipLocalCallEnterTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipLocalCallEnterTime.setStatus("current")
if mibBuilder.loadTexts:
    voipLocalCallEnterTime.setUnits("minute")


class _VoipLocalCallExitTime_Type(Integer32):
    """Custom type voipLocalCallExitTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_VoipLocalCallExitTime_Type.__name__ = "Integer32"
_VoipLocalCallExitTime_Object = MibScalar
voipLocalCallExitTime = _VoipLocalCallExitTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 7, 3),
    _VoipLocalCallExitTime_Type()
)
voipLocalCallExitTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipLocalCallExitTime.setStatus("current")
if mibBuilder.loadTexts:
    voipLocalCallExitTime.setUnits("minute")
_MaxNumOfVoipLocalHelp_Type = Integer32
_MaxNumOfVoipLocalHelp_Object = MibScalar
maxNumOfVoipLocalHelp = _MaxNumOfVoipLocalHelp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 8),
    _MaxNumOfVoipLocalHelp_Type()
)
maxNumOfVoipLocalHelp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfVoipLocalHelp.setStatus("current")
_VoipLocalHelpTable_Object = MibTable
voipLocalHelpTable = _VoipLocalHelpTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 9)
)
if mibBuilder.loadTexts:
    voipLocalHelpTable.setStatus("current")
_VoipLocalHelpEntry_Object = MibTableRow
voipLocalHelpEntry = _VoipLocalHelpEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 9, 1)
)
voipLocalHelpEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipLocalHelpName"),
    (0, "ZYXEL-IES5000-MIB", "voipLocalHelpIndex"),
)
if mibBuilder.loadTexts:
    voipLocalHelpEntry.setStatus("current")


class _VoipLocalHelpName_Type(DisplayString):
    """Custom type voipLocalHelpName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipLocalHelpName_Type.__name__ = "DisplayString"
_VoipLocalHelpName_Object = MibTableColumn
voipLocalHelpName = _VoipLocalHelpName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 9, 1, 1),
    _VoipLocalHelpName_Type()
)
voipLocalHelpName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipLocalHelpName.setStatus("current")


class _VoipLocalHelpIndex_Type(Integer32):
    """Custom type voipLocalHelpIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_VoipLocalHelpIndex_Type.__name__ = "Integer32"
_VoipLocalHelpIndex_Object = MibTableColumn
voipLocalHelpIndex = _VoipLocalHelpIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 9, 1, 2),
    _VoipLocalHelpIndex_Type()
)
voipLocalHelpIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipLocalHelpIndex.setStatus("current")


class _VoipLocalHelpTelNumber_Type(DisplayString):
    """Custom type voipLocalHelpTelNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 15),
    )


_VoipLocalHelpTelNumber_Type.__name__ = "DisplayString"
_VoipLocalHelpTelNumber_Object = MibTableColumn
voipLocalHelpTelNumber = _VoipLocalHelpTelNumber_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 9, 1, 3),
    _VoipLocalHelpTelNumber_Type()
)
voipLocalHelpTelNumber.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipLocalHelpTelNumber.setStatus("current")
_VoipLocalHelpRowStatus_Type = RowStatus
_VoipLocalHelpRowStatus_Object = MibTableColumn
voipLocalHelpRowStatus = _VoipLocalHelpRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 2, 9, 1, 4),
    _VoipLocalHelpRowStatus_Type()
)
voipLocalHelpRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipLocalHelpRowStatus.setStatus("current")
_VoipIpSetTable_Object = MibTable
voipIpSetTable = _VoipIpSetTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 3)
)
if mibBuilder.loadTexts:
    voipIpSetTable.setStatus("current")
_VoipIpSetEntry_Object = MibTableRow
voipIpSetEntry = _VoipIpSetEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 3, 1)
)
voipIpSetEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "slotId"),
)
if mibBuilder.loadTexts:
    voipIpSetEntry.setStatus("current")
_VoipIpSetIp_Type = IpAddress
_VoipIpSetIp_Object = MibTableColumn
voipIpSetIp = _VoipIpSetIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 3, 1, 1),
    _VoipIpSetIp_Type()
)
voipIpSetIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipIpSetIp.setStatus("current")
_VoipIpSetVid_Type = VlanIndex
_VoipIpSetVid_Object = MibTableColumn
voipIpSetVid = _VoipIpSetVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 3, 1, 2),
    _VoipIpSetVid_Type()
)
voipIpSetVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipIpSetVid.setStatus("current")


class _VoipIpSetMask_Type(Integer32):
    """Custom type voipIpSetMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32),
    )


_VoipIpSetMask_Type.__name__ = "Integer32"
_VoipIpSetMask_Object = MibTableColumn
voipIpSetMask = _VoipIpSetMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 3, 1, 3),
    _VoipIpSetMask_Type()
)
voipIpSetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipIpSetMask.setStatus("current")
_VoipDnsTable_Object = MibTable
voipDnsTable = _VoipDnsTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 4)
)
if mibBuilder.loadTexts:
    voipDnsTable.setStatus("current")
_VoipDnsEntry_Object = MibTableRow
voipDnsEntry = _VoipDnsEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 4, 1)
)
voipDnsEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "slotId"),
)
if mibBuilder.loadTexts:
    voipDnsEntry.setStatus("current")
_VoipDnsIp_Type = IpAddress
_VoipDnsIp_Object = MibTableColumn
voipDnsIp = _VoipDnsIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 4, 1, 1),
    _VoipDnsIp_Type()
)
voipDnsIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipDnsIp.setStatus("current")
_MaxNumOfVoipRoute_Type = Integer32
_MaxNumOfVoipRoute_Object = MibScalar
maxNumOfVoipRoute = _MaxNumOfVoipRoute_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 7),
    _MaxNumOfVoipRoute_Type()
)
maxNumOfVoipRoute.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxNumOfVoipRoute.setStatus("current")
_VoipRouteTable_Object = MibTable
voipRouteTable = _VoipRouteTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 8)
)
if mibBuilder.loadTexts:
    voipRouteTable.setStatus("current")
_VoipRouteEntry_Object = MibTableRow
voipRouteEntry = _VoipRouteEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 8, 1)
)
voipRouteEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipRouteSlot"),
    (0, "ZYXEL-IES5000-MIB", "voipRouteIp"),
    (0, "ZYXEL-IES5000-MIB", "voipRouteGateway"),
    (0, "ZYXEL-IES5000-MIB", "voipRouteMask"),
)
if mibBuilder.loadTexts:
    voipRouteEntry.setStatus("current")
_VoipRouteSlot_Type = Integer32
_VoipRouteSlot_Object = MibTableColumn
voipRouteSlot = _VoipRouteSlot_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 8, 1, 1),
    _VoipRouteSlot_Type()
)
voipRouteSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipRouteSlot.setStatus("current")
_VoipRouteIp_Type = IpAddress
_VoipRouteIp_Object = MibTableColumn
voipRouteIp = _VoipRouteIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 8, 1, 2),
    _VoipRouteIp_Type()
)
voipRouteIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipRouteIp.setStatus("current")
_VoipRouteGateway_Type = IpAddress
_VoipRouteGateway_Object = MibTableColumn
voipRouteGateway = _VoipRouteGateway_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 8, 1, 3),
    _VoipRouteGateway_Type()
)
voipRouteGateway.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipRouteGateway.setStatus("current")


class _VoipRouteMask_Type(Integer32):
    """Custom type voipRouteMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32),
    )


_VoipRouteMask_Type.__name__ = "Integer32"
_VoipRouteMask_Object = MibTableColumn
voipRouteMask = _VoipRouteMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 8, 1, 4),
    _VoipRouteMask_Type()
)
voipRouteMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipRouteMask.setStatus("current")


class _VoipRouteMetric_Type(Integer32):
    """Custom type voipRouteMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_VoipRouteMetric_Type.__name__ = "Integer32"
_VoipRouteMetric_Object = MibTableColumn
voipRouteMetric = _VoipRouteMetric_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 8, 1, 5),
    _VoipRouteMetric_Type()
)
voipRouteMetric.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipRouteMetric.setStatus("current")
_VoipRouteRowStatus_Type = RowStatus
_VoipRouteRowStatus_Object = MibTableColumn
voipRouteRowStatus = _VoipRouteRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 8, 1, 6),
    _VoipRouteRowStatus_Type()
)
voipRouteRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipRouteRowStatus.setStatus("current")


class _VoipCountryCode_Type(Integer32):
    """Custom type voipCountryCode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46)
        )
    )
    namedValues = NamedValues(
        *(("usa", 1),
          ("taiwan", 2),
          ("austria", 3),
          ("belgium", 4),
          ("denmark", 5),
          ("finland", 6),
          ("netherland", 7),
          ("norway", 8),
          ("spain", 9),
          ("sweden", 10),
          ("switzerland", 11),
          ("uk", 12),
          ("germany", 13),
          ("australia", 14),
          ("ireland", 15),
          ("czech", 16),
          ("italy", 17),
          ("japan", 18),
          ("new-zealand", 19),
          ("russia", 20),
          ("china", 21),
          ("vietnam", 22),
          ("brazil", 23),
          ("bulgaria", 24),
          ("france", 25),
          ("hungary", 26),
          ("iceland", 27),
          ("luxembourg", 28),
          ("poland", 29),
          ("portugal", 30),
          ("slovakia", 31),
          ("greece", 32),
          ("hongkong", 33),
          ("singapore", 34),
          ("morocco", 35),
          ("malaysia", 36),
          ("thailand", 37),
          ("israle", 38),
          ("uae", 39),
          ("ukraine", 40),
          ("south-africa", 41),
          ("south-korea", 42),
          ("philippines", 43),
          ("india", 44),
          ("turkey", 45),
          ("iran", 46))
    )


_VoipCountryCode_Type.__name__ = "Integer32"
_VoipCountryCode_Object = MibScalar
voipCountryCode = _VoipCountryCode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 9),
    _VoipCountryCode_Type()
)
voipCountryCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipCountryCode.setStatus("current")
_VoipH248_ObjectIdentity = ObjectIdentity
voipH248 = _VoipH248_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10)
)
_VoipH248MgConfTable_Object = MibTable
voipH248MgConfTable = _VoipH248MgConfTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 1)
)
if mibBuilder.loadTexts:
    voipH248MgConfTable.setStatus("current")
_VoipH248MgConfEntry_Object = MibTableRow
voipH248MgConfEntry = _VoipH248MgConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 1, 1)
)
voipH248MgConfEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipH248MgConfSlot"),
    (0, "ZYXEL-IES5000-MIB", "voipH248MgConfName"),
)
if mibBuilder.loadTexts:
    voipH248MgConfEntry.setStatus("current")
_VoipH248MgConfSlot_Type = Integer32
_VoipH248MgConfSlot_Object = MibTableColumn
voipH248MgConfSlot = _VoipH248MgConfSlot_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 1, 1, 1),
    _VoipH248MgConfSlot_Type()
)
voipH248MgConfSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248MgConfSlot.setStatus("current")


class _VoipH248MgConfName_Type(DisplayString):
    """Custom type voipH248MgConfName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipH248MgConfName_Type.__name__ = "DisplayString"
_VoipH248MgConfName_Object = MibTableColumn
voipH248MgConfName = _VoipH248MgConfName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 1, 1, 2),
    _VoipH248MgConfName_Type()
)
voipH248MgConfName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248MgConfName.setStatus("current")


class _VoipH248MgConfEnable_Type(Integer32):
    """Custom type voipH248MgConfEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_VoipH248MgConfEnable_Type.__name__ = "Integer32"
_VoipH248MgConfEnable_Object = MibTableColumn
voipH248MgConfEnable = _VoipH248MgConfEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 1, 1, 3),
    _VoipH248MgConfEnable_Type()
)
voipH248MgConfEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipH248MgConfEnable.setStatus("current")


class _VoipH248MgConfH248Profile_Type(DisplayString):
    """Custom type voipH248MgConfH248Profile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipH248MgConfH248Profile_Type.__name__ = "DisplayString"
_VoipH248MgConfH248Profile_Object = MibTableColumn
voipH248MgConfH248Profile = _VoipH248MgConfH248Profile_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 1, 1, 4),
    _VoipH248MgConfH248Profile_Type()
)
voipH248MgConfH248Profile.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipH248MgConfH248Profile.setStatus("current")


class _VoipH248MgConfPort_Type(Integer32):
    """Custom type voipH248MgConfPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1025, 65535),
    )


_VoipH248MgConfPort_Type.__name__ = "Integer32"
_VoipH248MgConfPort_Object = MibTableColumn
voipH248MgConfPort = _VoipH248MgConfPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 1, 1, 5),
    _VoipH248MgConfPort_Type()
)
voipH248MgConfPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipH248MgConfPort.setStatus("current")
_VoipH248MgConfRowStatus_Type = RowStatus
_VoipH248MgConfRowStatus_Object = MibTableColumn
voipH248MgConfRowStatus = _VoipH248MgConfRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 1, 1, 6),
    _VoipH248MgConfRowStatus_Type()
)
voipH248MgConfRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipH248MgConfRowStatus.setStatus("current")
_VoipH248InterfaceConfTable_Object = MibTable
voipH248InterfaceConfTable = _VoipH248InterfaceConfTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 2)
)
if mibBuilder.loadTexts:
    voipH248InterfaceConfTable.setStatus("current")
_VoipH248InterfaceConfEntry_Object = MibTableRow
voipH248InterfaceConfEntry = _VoipH248InterfaceConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 2, 1)
)
voipH248InterfaceConfEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipH248InterfaceConfId"),
)
if mibBuilder.loadTexts:
    voipH248InterfaceConfEntry.setStatus("current")
_VoipH248InterfaceConfId_Type = Integer32
_VoipH248InterfaceConfId_Object = MibTableColumn
voipH248InterfaceConfId = _VoipH248InterfaceConfId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 2, 1, 1),
    _VoipH248InterfaceConfId_Type()
)
voipH248InterfaceConfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248InterfaceConfId.setStatus("current")


class _VoipH248InterfaceConfMgName_Type(DisplayString):
    """Custom type voipH248InterfaceConfMgName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipH248InterfaceConfMgName_Type.__name__ = "DisplayString"
_VoipH248InterfaceConfMgName_Object = MibTableColumn
voipH248InterfaceConfMgName = _VoipH248InterfaceConfMgName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 2, 1, 2),
    _VoipH248InterfaceConfMgName_Type()
)
voipH248InterfaceConfMgName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipH248InterfaceConfMgName.setStatus("current")


class _VoipH248InterfaceConfMgEnable_Type(Integer32):
    """Custom type voipH248InterfaceConfMgEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_VoipH248InterfaceConfMgEnable_Type.__name__ = "Integer32"
_VoipH248InterfaceConfMgEnable_Object = MibTableColumn
voipH248InterfaceConfMgEnable = _VoipH248InterfaceConfMgEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 2, 1, 3),
    _VoipH248InterfaceConfMgEnable_Type()
)
voipH248InterfaceConfMgEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipH248InterfaceConfMgEnable.setStatus("current")


class _VoipH248InterfaceConfH248Profile_Type(DisplayString):
    """Custom type voipH248InterfaceConfH248Profile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipH248InterfaceConfH248Profile_Type.__name__ = "DisplayString"
_VoipH248InterfaceConfH248Profile_Object = MibTableColumn
voipH248InterfaceConfH248Profile = _VoipH248InterfaceConfH248Profile_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 2, 1, 4),
    _VoipH248InterfaceConfH248Profile_Type()
)
voipH248InterfaceConfH248Profile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipH248InterfaceConfH248Profile.setStatus("current")


class _VoipH248InterfaceConfPort_Type(Integer32):
    """Custom type voipH248InterfaceConfPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1025, 65535),
    )


_VoipH248InterfaceConfPort_Type.__name__ = "Integer32"
_VoipH248InterfaceConfPort_Object = MibTableColumn
voipH248InterfaceConfPort = _VoipH248InterfaceConfPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 2, 1, 5),
    _VoipH248InterfaceConfPort_Type()
)
voipH248InterfaceConfPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipH248InterfaceConfPort.setStatus("current")
_VoipH248InterfaceConfIp_Type = IpAddress
_VoipH248InterfaceConfIp_Object = MibTableColumn
voipH248InterfaceConfIp = _VoipH248InterfaceConfIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 2, 1, 6),
    _VoipH248InterfaceConfIp_Type()
)
voipH248InterfaceConfIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipH248InterfaceConfIp.setStatus("current")
_VoipH248InterfaceConfMasklen_Type = Integer32
_VoipH248InterfaceConfMasklen_Object = MibTableColumn
voipH248InterfaceConfMasklen = _VoipH248InterfaceConfMasklen_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 2, 1, 7),
    _VoipH248InterfaceConfMasklen_Type()
)
voipH248InterfaceConfMasklen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipH248InterfaceConfMasklen.setStatus("current")
_VoipH248InterfaceConfVid_Type = VlanIndex
_VoipH248InterfaceConfVid_Object = MibTableColumn
voipH248InterfaceConfVid = _VoipH248InterfaceConfVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 2, 1, 8),
    _VoipH248InterfaceConfVid_Type()
)
voipH248InterfaceConfVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipH248InterfaceConfVid.setStatus("current")
_VoipH248InterfaceConfPrimary_Type = Integer32
_VoipH248InterfaceConfPrimary_Object = MibTableColumn
voipH248InterfaceConfPrimary = _VoipH248InterfaceConfPrimary_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 2, 1, 9),
    _VoipH248InterfaceConfPrimary_Type()
)
voipH248InterfaceConfPrimary.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipH248InterfaceConfPrimary.setStatus("current")
_VoipH248InterfaceConfSecondary_Type = Integer32
_VoipH248InterfaceConfSecondary_Object = MibTableColumn
voipH248InterfaceConfSecondary = _VoipH248InterfaceConfSecondary_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 2, 1, 10),
    _VoipH248InterfaceConfSecondary_Type()
)
voipH248InterfaceConfSecondary.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipH248InterfaceConfSecondary.setStatus("current")
_VoipH248InterfaceConfBhcaPeak_Type = Integer32
_VoipH248InterfaceConfBhcaPeak_Object = MibTableColumn
voipH248InterfaceConfBhcaPeak = _VoipH248InterfaceConfBhcaPeak_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 2, 1, 11),
    _VoipH248InterfaceConfBhcaPeak_Type()
)
voipH248InterfaceConfBhcaPeak.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipH248InterfaceConfBhcaPeak.setStatus("current")
_VoipH248InterfaceConfBhcaAverage_Type = Integer32
_VoipH248InterfaceConfBhcaAverage_Object = MibTableColumn
voipH248InterfaceConfBhcaAverage = _VoipH248InterfaceConfBhcaAverage_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 2, 1, 12),
    _VoipH248InterfaceConfBhcaAverage_Type()
)
voipH248InterfaceConfBhcaAverage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipH248InterfaceConfBhcaAverage.setStatus("current")
_VoipH248SlotConfTable_Object = MibTable
voipH248SlotConfTable = _VoipH248SlotConfTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 3)
)
if mibBuilder.loadTexts:
    voipH248SlotConfTable.setStatus("current")
_VoipH248SlotConfEntry_Object = MibTableRow
voipH248SlotConfEntry = _VoipH248SlotConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 3, 1)
)
voipH248SlotConfEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipH248SlotConfId"),
)
if mibBuilder.loadTexts:
    voipH248SlotConfEntry.setStatus("current")
_VoipH248SlotConfId_Type = Integer32
_VoipH248SlotConfId_Object = MibTableColumn
voipH248SlotConfId = _VoipH248SlotConfId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 3, 1, 1),
    _VoipH248SlotConfId_Type()
)
voipH248SlotConfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248SlotConfId.setStatus("current")
_VoipH248SlotConfMasterIp1_Type = IpAddress
_VoipH248SlotConfMasterIp1_Object = MibTableColumn
voipH248SlotConfMasterIp1 = _VoipH248SlotConfMasterIp1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 3, 1, 2),
    _VoipH248SlotConfMasterIp1_Type()
)
voipH248SlotConfMasterIp1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipH248SlotConfMasterIp1.setStatus("current")
_VoipH248SlotConfMasterIp2_Type = IpAddress
_VoipH248SlotConfMasterIp2_Object = MibTableColumn
voipH248SlotConfMasterIp2 = _VoipH248SlotConfMasterIp2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 3, 1, 3),
    _VoipH248SlotConfMasterIp2_Type()
)
voipH248SlotConfMasterIp2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipH248SlotConfMasterIp2.setStatus("current")


class _VoipH248SlotConfOpmode_Type(Integer32):
    """Custom type voipH248SlotConfOpmode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("mc", 1),
          ("sc", 2))
    )


_VoipH248SlotConfOpmode_Type.__name__ = "Integer32"
_VoipH248SlotConfOpmode_Object = MibTableColumn
voipH248SlotConfOpmode = _VoipH248SlotConfOpmode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 3, 1, 4),
    _VoipH248SlotConfOpmode_Type()
)
voipH248SlotConfOpmode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipH248SlotConfOpmode.setStatus("current")
_VoipH248SlotConf8021pPrio_Type = Integer32
_VoipH248SlotConf8021pPrio_Object = MibTableColumn
voipH248SlotConf8021pPrio = _VoipH248SlotConf8021pPrio_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 3, 1, 5),
    _VoipH248SlotConf8021pPrio_Type()
)
voipH248SlotConf8021pPrio.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipH248SlotConf8021pPrio.setStatus("current")
_VoipH248SlotConfPriorityDscp_Type = Integer32
_VoipH248SlotConfPriorityDscp_Object = MibTableColumn
voipH248SlotConfPriorityDscp = _VoipH248SlotConfPriorityDscp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 3, 1, 6),
    _VoipH248SlotConfPriorityDscp_Type()
)
voipH248SlotConfPriorityDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipH248SlotConfPriorityDscp.setStatus("current")
_VoipH248SlaveConfTable_Object = MibTable
voipH248SlaveConfTable = _VoipH248SlaveConfTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 4)
)
if mibBuilder.loadTexts:
    voipH248SlaveConfTable.setStatus("current")
_VoipH248SlaveConfEntry_Object = MibTableRow
voipH248SlaveConfEntry = _VoipH248SlaveConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 4, 1)
)
voipH248SlaveConfEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipH248SlaveConfInterfaceId"),
    (0, "ZYXEL-IES5000-MIB", "voipH248SlaveConfSlaveId"),
)
if mibBuilder.loadTexts:
    voipH248SlaveConfEntry.setStatus("current")
_VoipH248SlaveConfInterfaceId_Type = Integer32
_VoipH248SlaveConfInterfaceId_Object = MibTableColumn
voipH248SlaveConfInterfaceId = _VoipH248SlaveConfInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 4, 1, 1),
    _VoipH248SlaveConfInterfaceId_Type()
)
voipH248SlaveConfInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipH248SlaveConfInterfaceId.setStatus("current")
_VoipH248SlaveConfSlaveId_Type = Integer32
_VoipH248SlaveConfSlaveId_Object = MibTableColumn
voipH248SlaveConfSlaveId = _VoipH248SlaveConfSlaveId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 4, 1, 2),
    _VoipH248SlaveConfSlaveId_Type()
)
voipH248SlaveConfSlaveId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipH248SlaveConfSlaveId.setStatus("current")
_VoipH248SlaveConfSlaveIp_Type = IpAddress
_VoipH248SlaveConfSlaveIp_Object = MibTableColumn
voipH248SlaveConfSlaveIp = _VoipH248SlaveConfSlaveIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 4, 1, 3),
    _VoipH248SlaveConfSlaveIp_Type()
)
voipH248SlaveConfSlaveIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipH248SlaveConfSlaveIp.setStatus("current")
_VoipH248Localcall_ObjectIdentity = ObjectIdentity
voipH248Localcall = _VoipH248Localcall_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 5)
)


class _VoipH248LocalcallEnterTime_Type(Integer32):
    """Custom type voipH248LocalcallEnterTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_VoipH248LocalcallEnterTime_Type.__name__ = "Integer32"
_VoipH248LocalcallEnterTime_Object = MibScalar
voipH248LocalcallEnterTime = _VoipH248LocalcallEnterTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 5, 1),
    _VoipH248LocalcallEnterTime_Type()
)
voipH248LocalcallEnterTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipH248LocalcallEnterTime.setStatus("current")


class _VoipH248LocalcallExistTime_Type(Integer32):
    """Custom type voipH248LocalcallExistTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_VoipH248LocalcallExistTime_Type.__name__ = "Integer32"
_VoipH248LocalcallExistTime_Object = MibScalar
voipH248LocalcallExistTime = _VoipH248LocalcallExistTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 10, 5, 2),
    _VoipH248LocalcallExistTime_Type()
)
voipH248LocalcallExistTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipH248LocalcallExistTime.setStatus("current")
_VoipCountryCodeParam_ObjectIdentity = ObjectIdentity
voipCountryCodeParam = _VoipCountryCodeParam_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11)
)


class _Law_Type(Integer32):
    """Custom type law based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("alaw", 0),
          ("ulaw", 1))
    )


_Law_Type.__name__ = "Integer32"
_Law_Object = MibScalar
law = _Law_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 1),
    _Law_Type()
)
law.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    law.setStatus("current")
_Impedance_Type = DisplayString
_Impedance_Object = MibScalar
impedance = _Impedance_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 2),
    _Impedance_Type()
)
impedance.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    impedance.setStatus("current")
_LoopCurrent_Type = Integer32
_LoopCurrent_Object = MibScalar
loopCurrent = _LoopCurrent_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 3),
    _LoopCurrent_Type()
)
loopCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    loopCurrent.setStatus("current")
if mibBuilder.loadTexts:
    loopCurrent.setUnits("mA")
_TaxType_Type = DisplayString
_TaxType_Object = MibScalar
taxType = _TaxType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 4),
    _TaxType_Type()
)
taxType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    taxType.setStatus("current")
_RingFrequency_Type = Integer32
_RingFrequency_Object = MibScalar
ringFrequency = _RingFrequency_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 5),
    _RingFrequency_Type()
)
ringFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ringFrequency.setStatus("current")
if mibBuilder.loadTexts:
    ringFrequency.setUnits("Hz")
_RingAmplitude_Type = Integer32
_RingAmplitude_Object = MibScalar
ringAmplitude = _RingAmplitude_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 6),
    _RingAmplitude_Type()
)
ringAmplitude.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ringAmplitude.setStatus("current")
if mibBuilder.loadTexts:
    ringAmplitude.setUnits("Vrms")
_RingOnTime1_Type = Integer32
_RingOnTime1_Object = MibScalar
ringOnTime1 = _RingOnTime1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 7),
    _RingOnTime1_Type()
)
ringOnTime1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ringOnTime1.setStatus("current")
if mibBuilder.loadTexts:
    ringOnTime1.setUnits("miniseconds")
_RingOffTime1_Type = Integer32
_RingOffTime1_Object = MibScalar
ringOffTime1 = _RingOffTime1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 8),
    _RingOffTime1_Type()
)
ringOffTime1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ringOffTime1.setStatus("current")
if mibBuilder.loadTexts:
    ringOffTime1.setUnits("miniseconds")
_RingOnTime2_Type = Integer32
_RingOnTime2_Object = MibScalar
ringOnTime2 = _RingOnTime2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 9),
    _RingOnTime2_Type()
)
ringOnTime2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ringOnTime2.setStatus("current")
if mibBuilder.loadTexts:
    ringOnTime2.setUnits("miniseconds")
_RingOffTime2_Type = Integer32
_RingOffTime2_Object = MibScalar
ringOffTime2 = _RingOffTime2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 10),
    _RingOffTime2_Type()
)
ringOffTime2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ringOffTime2.setStatus("current")
if mibBuilder.loadTexts:
    ringOffTime2.setUnits("miniseconds")
_FlashMin_Type = Integer32
_FlashMin_Object = MibScalar
flashMin = _FlashMin_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 11),
    _FlashMin_Type()
)
flashMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    flashMin.setStatus("current")
if mibBuilder.loadTexts:
    flashMin.setUnits("miniseconds")
_FlashMax_Type = Integer32
_FlashMax_Object = MibScalar
flashMax = _FlashMax_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 12),
    _FlashMax_Type()
)
flashMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    flashMax.setStatus("current")
if mibBuilder.loadTexts:
    flashMax.setUnits("miniseconds")
_BreakMin_Type = Integer32
_BreakMin_Object = MibScalar
breakMin = _BreakMin_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 13),
    _BreakMin_Type()
)
breakMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    breakMin.setStatus("current")
if mibBuilder.loadTexts:
    breakMin.setUnits("miniseconds")
_BreakMax_Type = Integer32
_BreakMax_Object = MibScalar
breakMax = _BreakMax_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 14),
    _BreakMax_Type()
)
breakMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    breakMax.setStatus("current")
if mibBuilder.loadTexts:
    breakMax.setUnits("miniseconds")
_MakeMin_Type = Integer32
_MakeMin_Object = MibScalar
makeMin = _MakeMin_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 15),
    _MakeMin_Type()
)
makeMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    makeMin.setStatus("current")
if mibBuilder.loadTexts:
    makeMin.setUnits("miniseconds")
_MakeMax_Type = Integer32
_MakeMax_Object = MibScalar
makeMax = _MakeMax_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 16),
    _MakeMax_Type()
)
makeMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    makeMax.setStatus("current")
if mibBuilder.loadTexts:
    makeMax.setUnits("miniseconds")
_InterDigitMin_Type = Integer32
_InterDigitMin_Object = MibScalar
interDigitMin = _InterDigitMin_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 17),
    _InterDigitMin_Type()
)
interDigitMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    interDigitMin.setStatus("current")
if mibBuilder.loadTexts:
    interDigitMin.setUnits("miniseconds")
_MeterFrequency_Type = Integer32
_MeterFrequency_Object = MibScalar
meterFrequency = _MeterFrequency_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 18),
    _MeterFrequency_Type()
)
meterFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    meterFrequency.setStatus("current")
if mibBuilder.loadTexts:
    meterFrequency.setUnits("kHz")
_MeterOnTime_Type = Integer32
_MeterOnTime_Object = MibScalar
meterOnTime = _MeterOnTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 19),
    _MeterOnTime_Type()
)
meterOnTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    meterOnTime.setStatus("current")
if mibBuilder.loadTexts:
    meterOnTime.setUnits("miniseconds")
_MeterOffTime_Type = Integer32
_MeterOffTime_Object = MibScalar
meterOffTime = _MeterOffTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 20),
    _MeterOffTime_Type()
)
meterOffTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    meterOffTime.setStatus("current")
if mibBuilder.loadTexts:
    meterOffTime.setUnits("miniseconds")


class _CidType_Type(Integer32):
    """Custom type cidType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("during-ring", 0),
          ("prior-ring", 1))
    )


_CidType_Type.__name__ = "Integer32"
_CidType_Object = MibScalar
cidType = _CidType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 21),
    _CidType_Type()
)
cidType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cidType.setStatus("current")
_PayloadType_Type = DisplayString
_PayloadType_Object = MibScalar
payloadType = _PayloadType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 22),
    _PayloadType_Type()
)
payloadType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    payloadType.setStatus("current")
_FirstTASType_Type = DisplayString
_FirstTASType_Object = MibScalar
firstTASType = _FirstTASType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 23),
    _FirstTASType_Type()
)
firstTASType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    firstTASType.setStatus("current")
_SecondTASType_Type = DisplayString
_SecondTASType_Object = MibScalar
secondTASType = _SecondTASType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 24),
    _SecondTASType_Type()
)
secondTASType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    secondTASType.setStatus("current")
_FirstTASInterval_Type = Integer32
_FirstTASInterval_Object = MibScalar
firstTASInterval = _FirstTASInterval_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 25),
    _FirstTASInterval_Type()
)
firstTASInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    firstTASInterval.setStatus("current")
if mibBuilder.loadTexts:
    firstTASInterval.setUnits("miniseconds")
_SecondTASInterval_Type = Integer32
_SecondTASInterval_Object = MibScalar
secondTASInterval = _SecondTASInterval_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 26),
    _SecondTASInterval_Type()
)
secondTASInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    secondTASInterval.setStatus("current")
if mibBuilder.loadTexts:
    secondTASInterval.setUnits("miniseconds")
_StartToRing_Type = Integer32
_StartToRing_Object = MibScalar
startToRing = _StartToRing_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 27),
    _StartToRing_Type()
)
startToRing.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    startToRing.setStatus("current")
if mibBuilder.loadTexts:
    startToRing.setUnits("miniseconds")
_DialTone_Type = DisplayString
_DialTone_Object = MibScalar
dialTone = _DialTone_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 28),
    _DialTone_Type()
)
dialTone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dialTone.setStatus("current")
_RingBackTone_Type = DisplayString
_RingBackTone_Object = MibScalar
ringBackTone = _RingBackTone_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 29),
    _RingBackTone_Type()
)
ringBackTone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ringBackTone.setStatus("current")
_BusyTone_Type = DisplayString
_BusyTone_Object = MibScalar
busyTone = _BusyTone_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 30),
    _BusyTone_Type()
)
busyTone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    busyTone.setStatus("current")
_CongestionTone_Type = DisplayString
_CongestionTone_Object = MibScalar
congestionTone = _CongestionTone_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 31),
    _CongestionTone_Type()
)
congestionTone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    congestionTone.setStatus("current")
_CallWaitingTone1_Type = DisplayString
_CallWaitingTone1_Object = MibScalar
callWaitingTone1 = _CallWaitingTone1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 32),
    _CallWaitingTone1_Type()
)
callWaitingTone1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    callWaitingTone1.setStatus("current")
_CallWaitingTone2_Type = DisplayString
_CallWaitingTone2_Object = MibScalar
callWaitingTone2 = _CallWaitingTone2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 33),
    _CallWaitingTone2_Type()
)
callWaitingTone2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    callWaitingTone2.setStatus("current")
_SpecialDialTone_Type = DisplayString
_SpecialDialTone_Object = MibScalar
specialDialTone = _SpecialDialTone_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 34),
    _SpecialDialTone_Type()
)
specialDialTone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    specialDialTone.setStatus("current")
_HowlerTone_Type = DisplayString
_HowlerTone_Object = MibScalar
howlerTone = _HowlerTone_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 35),
    _HowlerTone_Type()
)
howlerTone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    howlerTone.setStatus("current")
_WarningTone_Type = DisplayString
_WarningTone_Object = MibScalar
warningTone = _WarningTone_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 36),
    _WarningTone_Type()
)
warningTone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    warningTone.setStatus("current")
_ConfirmationTone_Type = DisplayString
_ConfirmationTone_Object = MibScalar
confirmationTone = _ConfirmationTone_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 37),
    _ConfirmationTone_Type()
)
confirmationTone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    confirmationTone.setStatus("current")
_HoldingTone_Type = DisplayString
_HoldingTone_Object = MibScalar
holdingTone = _HoldingTone_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 38),
    _HoldingTone_Type()
)
holdingTone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    holdingTone.setStatus("current")
_NumberUnobtainableTone_Type = DisplayString
_NumberUnobtainableTone_Object = MibScalar
numberUnobtainableTone = _NumberUnobtainableTone_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 39),
    _NumberUnobtainableTone_Type()
)
numberUnobtainableTone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    numberUnobtainableTone.setStatus("current")
_RecallDialTone_Type = DisplayString
_RecallDialTone_Object = MibScalar
recallDialTone = _RecallDialTone_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 40),
    _RecallDialTone_Type()
)
recallDialTone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recallDialTone.setStatus("current")
_SpecialInformationTone_Type = DisplayString
_SpecialInformationTone_Object = MibScalar
specialInformationTone = _SpecialInformationTone_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 11, 41),
    _SpecialInformationTone_Type()
)
specialInformationTone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    specialInformationTone.setStatus("current")
_VoipPots_ObjectIdentity = ObjectIdentity
voipPots = _VoipPots_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 12)
)
_VoipPotsRingTable_Object = MibTable
voipPotsRingTable = _VoipPotsRingTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 12, 1)
)
if mibBuilder.loadTexts:
    voipPotsRingTable.setStatus("current")
_VoipPotsRingEntry_Object = MibTableRow
voipPotsRingEntry = _VoipPotsRingEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 12, 1, 1)
)
voipPotsRingEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipPotsRingConfId"),
)
if mibBuilder.loadTexts:
    voipPotsRingEntry.setStatus("current")
_VoipPotsRingConfId_Type = Integer32
_VoipPotsRingConfId_Object = MibTableColumn
voipPotsRingConfId = _VoipPotsRingConfId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 12, 1, 1, 1),
    _VoipPotsRingConfId_Type()
)
voipPotsRingConfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipPotsRingConfId.setStatus("current")


class _VoipPotsRingConfNameDefval_Type(Integer32):
    """Custom type voipPotsRingConfNameDefval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_VoipPotsRingConfNameDefval_Type.__name__ = "Integer32"
_VoipPotsRingConfNameDefval_Object = MibTableColumn
voipPotsRingConfNameDefval = _VoipPotsRingConfNameDefval_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 12, 1, 1, 2),
    _VoipPotsRingConfNameDefval_Type()
)
voipPotsRingConfNameDefval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipPotsRingConfNameDefval.setStatus("current")
_VoipPotsRingConfName_Type = DisplayString
_VoipPotsRingConfName_Object = MibTableColumn
voipPotsRingConfName = _VoipPotsRingConfName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 12, 1, 1, 3),
    _VoipPotsRingConfName_Type()
)
voipPotsRingConfName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipPotsRingConfName.setStatus("current")


class _VoipPotsRingConfPatternDefval_Type(Integer32):
    """Custom type voipPotsRingConfPatternDefval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_VoipPotsRingConfPatternDefval_Type.__name__ = "Integer32"
_VoipPotsRingConfPatternDefval_Object = MibTableColumn
voipPotsRingConfPatternDefval = _VoipPotsRingConfPatternDefval_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 12, 1, 1, 4),
    _VoipPotsRingConfPatternDefval_Type()
)
voipPotsRingConfPatternDefval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipPotsRingConfPatternDefval.setStatus("current")
_VoipPotsRingConfPatternOn1_Type = Integer32
_VoipPotsRingConfPatternOn1_Object = MibTableColumn
voipPotsRingConfPatternOn1 = _VoipPotsRingConfPatternOn1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 12, 1, 1, 5),
    _VoipPotsRingConfPatternOn1_Type()
)
voipPotsRingConfPatternOn1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipPotsRingConfPatternOn1.setStatus("current")
_VoipPotsRingConfPatternOff1_Type = Integer32
_VoipPotsRingConfPatternOff1_Object = MibTableColumn
voipPotsRingConfPatternOff1 = _VoipPotsRingConfPatternOff1_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 12, 1, 1, 6),
    _VoipPotsRingConfPatternOff1_Type()
)
voipPotsRingConfPatternOff1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipPotsRingConfPatternOff1.setStatus("current")
_VoipPotsRingConfPatternOn2_Type = Integer32
_VoipPotsRingConfPatternOn2_Object = MibTableColumn
voipPotsRingConfPatternOn2 = _VoipPotsRingConfPatternOn2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 12, 1, 1, 7),
    _VoipPotsRingConfPatternOn2_Type()
)
voipPotsRingConfPatternOn2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipPotsRingConfPatternOn2.setStatus("current")
_VoipPotsRingConfPatternOff2_Type = Integer32
_VoipPotsRingConfPatternOff2_Object = MibTableColumn
voipPotsRingConfPatternOff2 = _VoipPotsRingConfPatternOff2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 12, 1, 1, 8),
    _VoipPotsRingConfPatternOff2_Type()
)
voipPotsRingConfPatternOff2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipPotsRingConfPatternOff2.setStatus("current")
_VoipPotsRingConfPatternOn3_Type = Integer32
_VoipPotsRingConfPatternOn3_Object = MibTableColumn
voipPotsRingConfPatternOn3 = _VoipPotsRingConfPatternOn3_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 12, 1, 1, 9),
    _VoipPotsRingConfPatternOn3_Type()
)
voipPotsRingConfPatternOn3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipPotsRingConfPatternOn3.setStatus("current")
_VoipPotsRingConfPatternOff3_Type = Integer32
_VoipPotsRingConfPatternOff3_Object = MibTableColumn
voipPotsRingConfPatternOff3 = _VoipPotsRingConfPatternOff3_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 12, 1, 1, 10),
    _VoipPotsRingConfPatternOff3_Type()
)
voipPotsRingConfPatternOff3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipPotsRingConfPatternOff3.setStatus("current")
_VoipPotsFlash_ObjectIdentity = ObjectIdentity
voipPotsFlash = _VoipPotsFlash_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 12, 2)
)


class _VoipPotsFlashDefval_Type(Integer32):
    """Custom type voipPotsFlashDefval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_VoipPotsFlashDefval_Type.__name__ = "Integer32"
_VoipPotsFlashDefval_Object = MibScalar
voipPotsFlashDefval = _VoipPotsFlashDefval_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 12, 2, 1),
    _VoipPotsFlashDefval_Type()
)
voipPotsFlashDefval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipPotsFlashDefval.setStatus("current")
_VoipPotsFlashMinTime_Type = Integer32
_VoipPotsFlashMinTime_Object = MibScalar
voipPotsFlashMinTime = _VoipPotsFlashMinTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 12, 2, 2),
    _VoipPotsFlashMinTime_Type()
)
voipPotsFlashMinTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipPotsFlashMinTime.setStatus("current")
_VoipPotsFlashMaxTime_Type = Integer32
_VoipPotsFlashMaxTime_Object = MibScalar
voipPotsFlashMaxTime = _VoipPotsFlashMaxTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 12, 2, 3),
    _VoipPotsFlashMaxTime_Type()
)
voipPotsFlashMaxTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipPotsFlashMaxTime.setStatus("current")


class _VoipPotsRingVoltage_Type(Integer32):
    """Custom type voipPotsRingVoltage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(25, 90),
    )


_VoipPotsRingVoltage_Type.__name__ = "Integer32"
_VoipPotsRingVoltage_Object = MibScalar
voipPotsRingVoltage = _VoipPotsRingVoltage_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 12, 3),
    _VoipPotsRingVoltage_Type()
)
voipPotsRingVoltage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipPotsRingVoltage.setStatus("current")
_VoipIfindexMap_ObjectIdentity = ObjectIdentity
voipIfindexMap = _VoipIfindexMap_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 13)
)
_VoipInterfaceMapTable_Object = MibTable
voipInterfaceMapTable = _VoipInterfaceMapTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 13, 1)
)
if mibBuilder.loadTexts:
    voipInterfaceMapTable.setStatus("current")
_VoipInterfaceMapEntry_Object = MibTableRow
voipInterfaceMapEntry = _VoipInterfaceMapEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 13, 1, 1)
)
voipInterfaceMapEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipIfIndex"),
)
if mibBuilder.loadTexts:
    voipInterfaceMapEntry.setStatus("current")
_VoipIfIndex_Type = InterfaceIndex
_VoipIfIndex_Object = MibTableColumn
voipIfIndex = _VoipIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 13, 1, 1, 1),
    _VoipIfIndex_Type()
)
voipIfIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    voipIfIndex.setStatus("current")
_IfIndexValue_Type = InterfaceIndex
_IfIndexValue_Object = MibTableColumn
ifIndexValue = _IfIndexValue_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 13, 1, 1, 2),
    _IfIndexValue_Type()
)
ifIndexValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifIndexValue.setStatus("current")
_VoipIfTable_Object = MibTable
voipIfTable = _VoipIfTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 13, 2)
)
if mibBuilder.loadTexts:
    voipIfTable.setStatus("current")
_VoipIfEntry_Object = MibTableRow
voipIfEntry = _VoipIfEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 13, 2, 1)
)
voipIfEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    voipIfEntry.setStatus("current")
_VoipIfIndexValue_Type = InterfaceIndex
_VoipIfIndexValue_Object = MibTableColumn
voipIfIndexValue = _VoipIfIndexValue_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 13, 2, 1, 1),
    _VoipIfIndexValue_Type()
)
voipIfIndexValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipIfIndexValue.setStatus("current")
_VoipSingleIp_ObjectIdentity = ObjectIdentity
voipSingleIp = _VoipSingleIp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14)
)
_VoipExtH248_ObjectIdentity = ObjectIdentity
voipExtH248 = _VoipExtH248_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 1)
)
_VoipExtH248InterfaceConf_ObjectIdentity = ObjectIdentity
voipExtH248InterfaceConf = _VoipExtH248InterfaceConf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 1, 1)
)


class _VoipExtH248InterfaceConfMgName_Type(DisplayString):
    """Custom type voipExtH248InterfaceConfMgName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipExtH248InterfaceConfMgName_Type.__name__ = "DisplayString"
_VoipExtH248InterfaceConfMgName_Object = MibScalar
voipExtH248InterfaceConfMgName = _VoipExtH248InterfaceConfMgName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 1, 1, 1),
    _VoipExtH248InterfaceConfMgName_Type()
)
voipExtH248InterfaceConfMgName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtH248InterfaceConfMgName.setStatus("current")


class _VoipExtH248InterfaceConfMgEnable_Type(Integer32):
    """Custom type voipExtH248InterfaceConfMgEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_VoipExtH248InterfaceConfMgEnable_Type.__name__ = "Integer32"
_VoipExtH248InterfaceConfMgEnable_Object = MibScalar
voipExtH248InterfaceConfMgEnable = _VoipExtH248InterfaceConfMgEnable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 1, 1, 2),
    _VoipExtH248InterfaceConfMgEnable_Type()
)
voipExtH248InterfaceConfMgEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtH248InterfaceConfMgEnable.setStatus("current")


class _VoipExtH248InterfaceConfH248Profile_Type(DisplayString):
    """Custom type voipExtH248InterfaceConfH248Profile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipExtH248InterfaceConfH248Profile_Type.__name__ = "DisplayString"
_VoipExtH248InterfaceConfH248Profile_Object = MibScalar
voipExtH248InterfaceConfH248Profile = _VoipExtH248InterfaceConfH248Profile_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 1, 1, 3),
    _VoipExtH248InterfaceConfH248Profile_Type()
)
voipExtH248InterfaceConfH248Profile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtH248InterfaceConfH248Profile.setStatus("current")


class _VoipExtH248InterfaceConfPort_Type(Integer32):
    """Custom type voipExtH248InterfaceConfPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1025, 65535),
    )


_VoipExtH248InterfaceConfPort_Type.__name__ = "Integer32"
_VoipExtH248InterfaceConfPort_Object = MibScalar
voipExtH248InterfaceConfPort = _VoipExtH248InterfaceConfPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 1, 1, 4),
    _VoipExtH248InterfaceConfPort_Type()
)
voipExtH248InterfaceConfPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtH248InterfaceConfPort.setStatus("current")
_VoipExtH248InterfaceConfSignalIp_Type = IpAddress
_VoipExtH248InterfaceConfSignalIp_Object = MibScalar
voipExtH248InterfaceConfSignalIp = _VoipExtH248InterfaceConfSignalIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 1, 1, 5),
    _VoipExtH248InterfaceConfSignalIp_Type()
)
voipExtH248InterfaceConfSignalIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtH248InterfaceConfSignalIp.setStatus("current")
_VoipExtH248InterfaceConfSignalMasklen_Type = Integer32
_VoipExtH248InterfaceConfSignalMasklen_Object = MibScalar
voipExtH248InterfaceConfSignalMasklen = _VoipExtH248InterfaceConfSignalMasklen_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 1, 1, 6),
    _VoipExtH248InterfaceConfSignalMasklen_Type()
)
voipExtH248InterfaceConfSignalMasklen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtH248InterfaceConfSignalMasklen.setStatus("current")
_VoipExtH248InterfaceConfSignalVid_Type = VlanIndex
_VoipExtH248InterfaceConfSignalVid_Object = MibScalar
voipExtH248InterfaceConfSignalVid = _VoipExtH248InterfaceConfSignalVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 1, 1, 7),
    _VoipExtH248InterfaceConfSignalVid_Type()
)
voipExtH248InterfaceConfSignalVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtH248InterfaceConfSignalVid.setStatus("current")
_VoipExtH248InterfaceConfMediaIp_Type = IpAddress
_VoipExtH248InterfaceConfMediaIp_Object = MibScalar
voipExtH248InterfaceConfMediaIp = _VoipExtH248InterfaceConfMediaIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 1, 1, 8),
    _VoipExtH248InterfaceConfMediaIp_Type()
)
voipExtH248InterfaceConfMediaIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtH248InterfaceConfMediaIp.setStatus("current")
_VoipExtH248InterfaceConfMediaMasklen_Type = Integer32
_VoipExtH248InterfaceConfMediaMasklen_Object = MibScalar
voipExtH248InterfaceConfMediaMasklen = _VoipExtH248InterfaceConfMediaMasklen_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 1, 1, 9),
    _VoipExtH248InterfaceConfMediaMasklen_Type()
)
voipExtH248InterfaceConfMediaMasklen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtH248InterfaceConfMediaMasklen.setStatus("current")
_VoipExtH248InterfaceConfMediaVid_Type = VlanIndex
_VoipExtH248InterfaceConfMediaVid_Object = MibScalar
voipExtH248InterfaceConfMediaVid = _VoipExtH248InterfaceConfMediaVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 1, 1, 10),
    _VoipExtH248InterfaceConfMediaVid_Type()
)
voipExtH248InterfaceConfMediaVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtH248InterfaceConfMediaVid.setStatus("current")
_VoipExtH248InterfaceConfDnsIp_Type = IpAddress
_VoipExtH248InterfaceConfDnsIp_Object = MibScalar
voipExtH248InterfaceConfDnsIp = _VoipExtH248InterfaceConfDnsIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 1, 1, 11),
    _VoipExtH248InterfaceConfDnsIp_Type()
)
voipExtH248InterfaceConfDnsIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtH248InterfaceConfDnsIp.setStatus("current")


class _VoipExtH248InterfaceConfRegisterRetry_Type(Integer32):
    """Custom type voipExtH248InterfaceConfRegisterRetry based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1440),
    )


_VoipExtH248InterfaceConfRegisterRetry_Type.__name__ = "Integer32"
_VoipExtH248InterfaceConfRegisterRetry_Object = MibScalar
voipExtH248InterfaceConfRegisterRetry = _VoipExtH248InterfaceConfRegisterRetry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 1, 1, 12),
    _VoipExtH248InterfaceConfRegisterRetry_Type()
)
voipExtH248InterfaceConfRegisterRetry.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtH248InterfaceConfRegisterRetry.setStatus("current")
_VoipExtH248InterfaceMaxNumOfVoipRoute_Type = Integer32
_VoipExtH248InterfaceMaxNumOfVoipRoute_Object = MibScalar
voipExtH248InterfaceMaxNumOfVoipRoute = _VoipExtH248InterfaceMaxNumOfVoipRoute_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 1, 2),
    _VoipExtH248InterfaceMaxNumOfVoipRoute_Type()
)
voipExtH248InterfaceMaxNumOfVoipRoute.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtH248InterfaceMaxNumOfVoipRoute.setStatus("current")
_VoipExtH248InterfaceRouteTable_Object = MibTable
voipExtH248InterfaceRouteTable = _VoipExtH248InterfaceRouteTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 1, 3)
)
if mibBuilder.loadTexts:
    voipExtH248InterfaceRouteTable.setStatus("current")
_VoipExtH248InterfaceRouteEntry_Object = MibTableRow
voipExtH248InterfaceRouteEntry = _VoipExtH248InterfaceRouteEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 1, 3, 1)
)
voipExtH248InterfaceRouteEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipExtH248InterfaceRouteIp"),
    (0, "ZYXEL-IES5000-MIB", "voipExtH248InterfaceRouteGateway"),
    (0, "ZYXEL-IES5000-MIB", "voipExtH248InterfaceRouteMask"),
)
if mibBuilder.loadTexts:
    voipExtH248InterfaceRouteEntry.setStatus("current")
_VoipExtH248InterfaceRouteIp_Type = IpAddress
_VoipExtH248InterfaceRouteIp_Object = MibTableColumn
voipExtH248InterfaceRouteIp = _VoipExtH248InterfaceRouteIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 1, 3, 1, 1),
    _VoipExtH248InterfaceRouteIp_Type()
)
voipExtH248InterfaceRouteIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtH248InterfaceRouteIp.setStatus("current")
_VoipExtH248InterfaceRouteGateway_Type = IpAddress
_VoipExtH248InterfaceRouteGateway_Object = MibTableColumn
voipExtH248InterfaceRouteGateway = _VoipExtH248InterfaceRouteGateway_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 1, 3, 1, 2),
    _VoipExtH248InterfaceRouteGateway_Type()
)
voipExtH248InterfaceRouteGateway.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtH248InterfaceRouteGateway.setStatus("current")


class _VoipExtH248InterfaceRouteMask_Type(Integer32):
    """Custom type voipExtH248InterfaceRouteMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32),
    )


_VoipExtH248InterfaceRouteMask_Type.__name__ = "Integer32"
_VoipExtH248InterfaceRouteMask_Object = MibTableColumn
voipExtH248InterfaceRouteMask = _VoipExtH248InterfaceRouteMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 1, 3, 1, 3),
    _VoipExtH248InterfaceRouteMask_Type()
)
voipExtH248InterfaceRouteMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtH248InterfaceRouteMask.setStatus("current")


class _VoipExtH248InterfaceRouteMetric_Type(Integer32):
    """Custom type voipExtH248InterfaceRouteMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_VoipExtH248InterfaceRouteMetric_Type.__name__ = "Integer32"
_VoipExtH248InterfaceRouteMetric_Object = MibTableColumn
voipExtH248InterfaceRouteMetric = _VoipExtH248InterfaceRouteMetric_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 1, 3, 1, 4),
    _VoipExtH248InterfaceRouteMetric_Type()
)
voipExtH248InterfaceRouteMetric.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtH248InterfaceRouteMetric.setStatus("current")
_VoipExtH248InterfaceRouteRowStatus_Type = RowStatus
_VoipExtH248InterfaceRouteRowStatus_Object = MibTableColumn
voipExtH248InterfaceRouteRowStatus = _VoipExtH248InterfaceRouteRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 1, 3, 1, 5),
    _VoipExtH248InterfaceRouteRowStatus_Type()
)
voipExtH248InterfaceRouteRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtH248InterfaceRouteRowStatus.setStatus("current")
_VoipExtStats_ObjectIdentity = ObjectIdentity
voipExtStats = _VoipExtStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 2)
)
_VoipExtH248InterfaceStat_ObjectIdentity = ObjectIdentity
voipExtH248InterfaceStat = _VoipExtH248InterfaceStat_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 2, 1)
)


class _VoipExtH248InterfaceStatMgState_Type(Integer32):
    """Custom type voipExtH248InterfaceStatMgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("registering", 2),
          ("registered", 3),
          ("unregistering", 4),
          ("unregistered", 5),
          ("inactivity-timeout", 6),
          ("activity-back", 7),
          ("disconnected", 8),
          ("disabled-by-MGC", 9))
    )


_VoipExtH248InterfaceStatMgState_Type.__name__ = "Integer32"
_VoipExtH248InterfaceStatMgState_Object = MibScalar
voipExtH248InterfaceStatMgState = _VoipExtH248InterfaceStatMgState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 2, 1, 1),
    _VoipExtH248InterfaceStatMgState_Type()
)
voipExtH248InterfaceStatMgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtH248InterfaceStatMgState.setStatus("current")


class _VoipExtH248InterfaceStatPrimaryProtectionState_Type(Integer32):
    """Custom type voipExtH248InterfaceStatPrimaryProtectionState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 1),
          ("active", 2),
          ("standby", 3))
    )


_VoipExtH248InterfaceStatPrimaryProtectionState_Type.__name__ = "Integer32"
_VoipExtH248InterfaceStatPrimaryProtectionState_Object = MibScalar
voipExtH248InterfaceStatPrimaryProtectionState = _VoipExtH248InterfaceStatPrimaryProtectionState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 2, 1, 2),
    _VoipExtH248InterfaceStatPrimaryProtectionState_Type()
)
voipExtH248InterfaceStatPrimaryProtectionState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtH248InterfaceStatPrimaryProtectionState.setStatus("current")


class _VoipExtH248InterfaceStatSecondaryProtectionState_Type(Integer32):
    """Custom type voipExtH248InterfaceStatSecondaryProtectionState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 1),
          ("active", 2),
          ("standby", 3))
    )


_VoipExtH248InterfaceStatSecondaryProtectionState_Type.__name__ = "Integer32"
_VoipExtH248InterfaceStatSecondaryProtectionState_Object = MibScalar
voipExtH248InterfaceStatSecondaryProtectionState = _VoipExtH248InterfaceStatSecondaryProtectionState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 2, 1, 3),
    _VoipExtH248InterfaceStatSecondaryProtectionState_Type()
)
voipExtH248InterfaceStatSecondaryProtectionState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtH248InterfaceStatSecondaryProtectionState.setStatus("current")


class _VoipExtH248InterfaceStatRedundantState_Type(Integer32):
    """Custom type voipExtH248InterfaceStatRedundantState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("out-of-sync", 1),
          ("authorization", 2),
          ("synchronizing", 3),
          ("in-service", 4))
    )


_VoipExtH248InterfaceStatRedundantState_Type.__name__ = "Integer32"
_VoipExtH248InterfaceStatRedundantState_Object = MibScalar
voipExtH248InterfaceStatRedundantState = _VoipExtH248InterfaceStatRedundantState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 2, 1, 4),
    _VoipExtH248InterfaceStatRedundantState_Type()
)
voipExtH248InterfaceStatRedundantState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtH248InterfaceStatRedundantState.setStatus("current")
_VoipExtH248InterfaceStatMgcIp_Type = IpAddress
_VoipExtH248InterfaceStatMgcIp_Object = MibScalar
voipExtH248InterfaceStatMgcIp = _VoipExtH248InterfaceStatMgcIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 2, 1, 5),
    _VoipExtH248InterfaceStatMgcIp_Type()
)
voipExtH248InterfaceStatMgcIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtH248InterfaceStatMgcIp.setStatus("current")
_VoipExtH248InterfaceStatMgH248Mac_Type = DisplayString
_VoipExtH248InterfaceStatMgH248Mac_Object = MibScalar
voipExtH248InterfaceStatMgH248Mac = _VoipExtH248InterfaceStatMgH248Mac_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 2, 1, 6),
    _VoipExtH248InterfaceStatMgH248Mac_Type()
)
voipExtH248InterfaceStatMgH248Mac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtH248InterfaceStatMgH248Mac.setStatus("current")


class _VoipExtH248InterfaceStatLocalcallStat_Type(Integer32):
    """Custom type voipExtH248InterfaceStatLocalcallStat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("inactive", 1),
          ("active", 2))
    )


_VoipExtH248InterfaceStatLocalcallStat_Type.__name__ = "Integer32"
_VoipExtH248InterfaceStatLocalcallStat_Object = MibScalar
voipExtH248InterfaceStatLocalcallStat = _VoipExtH248InterfaceStatLocalcallStat_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 2, 1, 7),
    _VoipExtH248InterfaceStatLocalcallStat_Type()
)
voipExtH248InterfaceStatLocalcallStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtH248InterfaceStatLocalcallStat.setStatus("current")
_VoipExtH248MediaStatTable_Object = MibTable
voipExtH248MediaStatTable = _VoipExtH248MediaStatTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 2, 2)
)
if mibBuilder.loadTexts:
    voipExtH248MediaStatTable.setStatus("current")
_VoipExtH248MediaStatEntry_Object = MibTableRow
voipExtH248MediaStatEntry = _VoipExtH248MediaStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 2, 2, 1)
)
voipExtH248MediaStatEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipExtH248MediaStatSlotId"),
)
if mibBuilder.loadTexts:
    voipExtH248MediaStatEntry.setStatus("current")
_VoipExtH248MediaStatSlotId_Type = Integer32
_VoipExtH248MediaStatSlotId_Object = MibTableColumn
voipExtH248MediaStatSlotId = _VoipExtH248MediaStatSlotId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 2, 2, 1, 1),
    _VoipExtH248MediaStatSlotId_Type()
)
voipExtH248MediaStatSlotId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtH248MediaStatSlotId.setStatus("current")
_VoipExtH248MediaStatPortCount_Type = Integer32
_VoipExtH248MediaStatPortCount_Object = MibTableColumn
voipExtH248MediaStatPortCount = _VoipExtH248MediaStatPortCount_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 2, 2, 1, 2),
    _VoipExtH248MediaStatPortCount_Type()
)
voipExtH248MediaStatPortCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtH248MediaStatPortCount.setStatus("current")


class _VoipExtH248MediaStatState_Type(Integer32):
    """Custom type voipExtH248MediaStatState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unregistered", 1),
          ("registered", 2),
          ("invalid", 3),
          ("unknown", 4))
    )


_VoipExtH248MediaStatState_Type.__name__ = "Integer32"
_VoipExtH248MediaStatState_Object = MibTableColumn
voipExtH248MediaStatState = _VoipExtH248MediaStatState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 2, 2, 1, 3),
    _VoipExtH248MediaStatState_Type()
)
voipExtH248MediaStatState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtH248MediaStatState.setStatus("current")
_VoipExtH248TerminationStatTable_Object = MibTable
voipExtH248TerminationStatTable = _VoipExtH248TerminationStatTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 2, 3)
)
if mibBuilder.loadTexts:
    voipExtH248TerminationStatTable.setStatus("current")
_VoipExtH248TerminationStatEntry_Object = MibTableRow
voipExtH248TerminationStatEntry = _VoipExtH248TerminationStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 2, 3, 1)
)
voipExtH248TerminationStatEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipExtH248TerminationStatStateSlotId"),
    (0, "ZYXEL-IES5000-MIB", "voipExtH248TerminationStatStatePortNumber"),
)
if mibBuilder.loadTexts:
    voipExtH248TerminationStatEntry.setStatus("current")
_VoipExtH248TerminationStatStateSlotId_Type = Integer32
_VoipExtH248TerminationStatStateSlotId_Object = MibTableColumn
voipExtH248TerminationStatStateSlotId = _VoipExtH248TerminationStatStateSlotId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 2, 3, 1, 1),
    _VoipExtH248TerminationStatStateSlotId_Type()
)
voipExtH248TerminationStatStateSlotId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtH248TerminationStatStateSlotId.setStatus("current")
_VoipExtH248TerminationStatStatePortNumber_Type = Integer32
_VoipExtH248TerminationStatStatePortNumber_Object = MibTableColumn
voipExtH248TerminationStatStatePortNumber = _VoipExtH248TerminationStatStatePortNumber_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 2, 3, 1, 2),
    _VoipExtH248TerminationStatStatePortNumber_Type()
)
voipExtH248TerminationStatStatePortNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtH248TerminationStatStatePortNumber.setStatus("current")
_VoipExtH248TerminationStatName_Type = DisplayString
_VoipExtH248TerminationStatName_Object = MibTableColumn
voipExtH248TerminationStatName = _VoipExtH248TerminationStatName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 2, 3, 1, 3),
    _VoipExtH248TerminationStatName_Type()
)
voipExtH248TerminationStatName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtH248TerminationStatName.setStatus("current")


class _VoipExtH248TerminationStatPhoneState_Type(Integer32):
    """Custom type voipExtH248TerminationStatPhoneState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("on-hook", 2),
          ("off-hook", 3),
          ("ringing", 4),
          ("testing", 5),
          ("power-cut-down", 6),
          ("fault", 7),
          ("bad", 8),
          ("uninitialized", 9),
          ("unknown", 10))
    )


_VoipExtH248TerminationStatPhoneState_Type.__name__ = "Integer32"
_VoipExtH248TerminationStatPhoneState_Object = MibTableColumn
voipExtH248TerminationStatPhoneState = _VoipExtH248TerminationStatPhoneState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 2, 3, 1, 4),
    _VoipExtH248TerminationStatPhoneState_Type()
)
voipExtH248TerminationStatPhoneState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtH248TerminationStatPhoneState.setStatus("current")


class _VoipExtH248TerminationStatCallServiceState_Type(Integer32):
    """Custom type voipExtH248TerminationStatCallServiceState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              13,
              14,
              15,
              16,
              17)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("out-of-service", 2),
          ("idle", 3),
          ("waiting-for-dialing", 4),
          ("dialing-out", 5),
          ("ringing", 6),
          ("conversation-caller", 7),
          ("conversation-callee", 8),
          ("fax-modem-caller", 9),
          ("fax-modem-callee", 10),
          ("waiting-for-on-hook", 13),
          ("dialing-timeout", 14),
          ("alerting-off-hook", 15),
          ("power-cut-down", 16),
          ("unknown", 17))
    )


_VoipExtH248TerminationStatCallServiceState_Type.__name__ = "Integer32"
_VoipExtH248TerminationStatCallServiceState_Object = MibTableColumn
voipExtH248TerminationStatCallServiceState = _VoipExtH248TerminationStatCallServiceState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 2, 3, 1, 5),
    _VoipExtH248TerminationStatCallServiceState_Type()
)
voipExtH248TerminationStatCallServiceState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtH248TerminationStatCallServiceState.setStatus("current")
_VoipExtH248TerminationStatQuery_ObjectIdentity = ObjectIdentity
voipExtH248TerminationStatQuery = _VoipExtH248TerminationStatQuery_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 2, 4)
)


class _VoipExtH248TerminationStatQueryTerminationName_Type(DisplayString):
    """Custom type voipExtH248TerminationStatQueryTerminationName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipExtH248TerminationStatQueryTerminationName_Type.__name__ = "DisplayString"
_VoipExtH248TerminationStatQueryTerminationName_Object = MibScalar
voipExtH248TerminationStatQueryTerminationName = _VoipExtH248TerminationStatQueryTerminationName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 2, 4, 1),
    _VoipExtH248TerminationStatQueryTerminationName_Type()
)
voipExtH248TerminationStatQueryTerminationName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtH248TerminationStatQueryTerminationName.setStatus("current")
_VoipExtH248TerminationStatQuerySlotId_Type = Integer32
_VoipExtH248TerminationStatQuerySlotId_Object = MibScalar
voipExtH248TerminationStatQuerySlotId = _VoipExtH248TerminationStatQuerySlotId_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 2, 4, 2),
    _VoipExtH248TerminationStatQuerySlotId_Type()
)
voipExtH248TerminationStatQuerySlotId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtH248TerminationStatQuerySlotId.setStatus("current")
_VoipExtH248TerminationStatQueryPortNumber_Type = Integer32
_VoipExtH248TerminationStatQueryPortNumber_Object = MibScalar
voipExtH248TerminationStatQueryPortNumber = _VoipExtH248TerminationStatQueryPortNumber_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 2, 4, 3),
    _VoipExtH248TerminationStatQueryPortNumber_Type()
)
voipExtH248TerminationStatQueryPortNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtH248TerminationStatQueryPortNumber.setStatus("current")


class _VoipExtH248TerminationStatQueryPhoneState_Type(Integer32):
    """Custom type voipExtH248TerminationStatQueryPhoneState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("on-hook", 2),
          ("off-hook", 3),
          ("ringing", 4),
          ("testing", 5),
          ("power-cut-down", 6),
          ("fault", 7),
          ("bad", 8),
          ("uninitialized", 9),
          ("unknown", 10))
    )


_VoipExtH248TerminationStatQueryPhoneState_Type.__name__ = "Integer32"
_VoipExtH248TerminationStatQueryPhoneState_Object = MibScalar
voipExtH248TerminationStatQueryPhoneState = _VoipExtH248TerminationStatQueryPhoneState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 2, 4, 4),
    _VoipExtH248TerminationStatQueryPhoneState_Type()
)
voipExtH248TerminationStatQueryPhoneState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtH248TerminationStatQueryPhoneState.setStatus("current")


class _VoipExtH248TerminationStatQueryCallServiceState_Type(Integer32):
    """Custom type voipExtH248TerminationStatQueryCallServiceState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              12,
              13,
              14,
              15)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("out-of-service", 2),
          ("idle", 3),
          ("waiting-for-dialing", 4),
          ("ringing", 5),
          ("conversation-caller", 6),
          ("conversation-callee", 7),
          ("fax-modem-caller", 8),
          ("fax-modem-callee", 9),
          ("waiting-for-on-hook", 12),
          ("dialing-timeout", 13),
          ("alerting-off-hook", 14),
          ("power-cut-down", 15))
    )


_VoipExtH248TerminationStatQueryCallServiceState_Type.__name__ = "Integer32"
_VoipExtH248TerminationStatQueryCallServiceState_Object = MibScalar
voipExtH248TerminationStatQueryCallServiceState = _VoipExtH248TerminationStatQueryCallServiceState_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 2, 4, 5),
    _VoipExtH248TerminationStatQueryCallServiceState_Type()
)
voipExtH248TerminationStatQueryCallServiceState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtH248TerminationStatQueryCallServiceState.setStatus("current")
_VoipExtSipProfile_ObjectIdentity = ObjectIdentity
voipExtSipProfile = _VoipExtSipProfile_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3)
)
_VoipExtMaxNumOfSipProfiles_Type = Integer32
_VoipExtMaxNumOfSipProfiles_Object = MibScalar
voipExtMaxNumOfSipProfiles = _VoipExtMaxNumOfSipProfiles_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 1),
    _VoipExtMaxNumOfSipProfiles_Type()
)
voipExtMaxNumOfSipProfiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtMaxNumOfSipProfiles.setStatus("current")
_VoipExtSipProfileTable_Object = MibTable
voipExtSipProfileTable = _VoipExtSipProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 2)
)
if mibBuilder.loadTexts:
    voipExtSipProfileTable.setStatus("current")
_VoipExtSipProfileEntry_Object = MibTableRow
voipExtSipProfileEntry = _VoipExtSipProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 2, 1)
)
voipExtSipProfileEntry.setIndexNames(
    (1, "ZYXEL-IES5000-MIB", "voipExtSipProfileName"),
)
if mibBuilder.loadTexts:
    voipExtSipProfileEntry.setStatus("current")


class _VoipExtSipProfileName_Type(DisplayString):
    """Custom type voipExtSipProfileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipExtSipProfileName_Type.__name__ = "DisplayString"
_VoipExtSipProfileName_Object = MibTableColumn
voipExtSipProfileName = _VoipExtSipProfileName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 2, 1, 1),
    _VoipExtSipProfileName_Type()
)
voipExtSipProfileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtSipProfileName.setStatus("current")
_VoipExtSipProfileSipSvr_Type = DisplayString
_VoipExtSipProfileSipSvr_Object = MibTableColumn
voipExtSipProfileSipSvr = _VoipExtSipProfileSipSvr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 2, 1, 2),
    _VoipExtSipProfileSipSvr_Type()
)
voipExtSipProfileSipSvr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipProfileSipSvr.setStatus("current")
_VoipExtSipProfileRegSvr_Type = DisplayString
_VoipExtSipProfileRegSvr_Object = MibTableColumn
voipExtSipProfileRegSvr = _VoipExtSipProfileRegSvr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 2, 1, 3),
    _VoipExtSipProfileRegSvr_Type()
)
voipExtSipProfileRegSvr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipProfileRegSvr.setStatus("current")
_VoipExtSipProfileProxySvr_Type = DisplayString
_VoipExtSipProfileProxySvr_Object = MibTableColumn
voipExtSipProfileProxySvr = _VoipExtSipProfileProxySvr_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 2, 1, 4),
    _VoipExtSipProfileProxySvr_Type()
)
voipExtSipProfileProxySvr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipProfileProxySvr.setStatus("current")


class _VoipExtSipProfileSipPort_Type(Integer32):
    """Custom type voipExtSipProfileSipPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1025, 65535),
    )


_VoipExtSipProfileSipPort_Type.__name__ = "Integer32"
_VoipExtSipProfileSipPort_Object = MibTableColumn
voipExtSipProfileSipPort = _VoipExtSipProfileSipPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 2, 1, 5),
    _VoipExtSipProfileSipPort_Type()
)
voipExtSipProfileSipPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipProfileSipPort.setStatus("current")


class _VoipExtSipProfileRegSvrPort_Type(Integer32):
    """Custom type voipExtSipProfileRegSvrPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1025, 65535),
    )


_VoipExtSipProfileRegSvrPort_Type.__name__ = "Integer32"
_VoipExtSipProfileRegSvrPort_Object = MibTableColumn
voipExtSipProfileRegSvrPort = _VoipExtSipProfileRegSvrPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 2, 1, 6),
    _VoipExtSipProfileRegSvrPort_Type()
)
voipExtSipProfileRegSvrPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipProfileRegSvrPort.setStatus("current")


class _VoipExtSipProfileProxySvrPort_Type(Integer32):
    """Custom type voipExtSipProfileProxySvrPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1025, 65535),
    )


_VoipExtSipProfileProxySvrPort_Type.__name__ = "Integer32"
_VoipExtSipProfileProxySvrPort_Object = MibTableColumn
voipExtSipProfileProxySvrPort = _VoipExtSipProfileProxySvrPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 2, 1, 7),
    _VoipExtSipProfileProxySvrPort_Type()
)
voipExtSipProfileProxySvrPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipProfileProxySvrPort.setStatus("current")


class _VoipExtSipProfilePbit_Type(Integer32):
    """Custom type voipExtSipProfilePbit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_VoipExtSipProfilePbit_Type.__name__ = "Integer32"
_VoipExtSipProfilePbit_Object = MibTableColumn
voipExtSipProfilePbit = _VoipExtSipProfilePbit_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 2, 1, 8),
    _VoipExtSipProfilePbit_Type()
)
voipExtSipProfilePbit.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipProfilePbit.setStatus("current")


class _VoipExtSipProfileDscp_Type(Integer32):
    """Custom type voipExtSipProfileDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_VoipExtSipProfileDscp_Type.__name__ = "Integer32"
_VoipExtSipProfileDscp_Object = MibTableColumn
voipExtSipProfileDscp = _VoipExtSipProfileDscp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 2, 1, 9),
    _VoipExtSipProfileDscp_Type()
)
voipExtSipProfileDscp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipProfileDscp.setStatus("current")


class _VoipExtSipProfileKeepAlive_Type(Integer32):
    """Custom type voipExtSipProfileKeepAlive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_VoipExtSipProfileKeepAlive_Type.__name__ = "Integer32"
_VoipExtSipProfileKeepAlive_Object = MibTableColumn
voipExtSipProfileKeepAlive = _VoipExtSipProfileKeepAlive_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 2, 1, 10),
    _VoipExtSipProfileKeepAlive_Type()
)
voipExtSipProfileKeepAlive.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipProfileKeepAlive.setStatus("current")


class _VoipExtSipProfilePrack_Type(Integer32):
    """Custom type voipExtSipProfilePrack based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_VoipExtSipProfilePrack_Type.__name__ = "Integer32"
_VoipExtSipProfilePrack_Object = MibTableColumn
voipExtSipProfilePrack = _VoipExtSipProfilePrack_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 2, 1, 11),
    _VoipExtSipProfilePrack_Type()
)
voipExtSipProfilePrack.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipProfilePrack.setStatus("current")


class _VoipExtSipProfileSe_Type(Integer32):
    """Custom type voipExtSipProfileSe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(90, 65535),
    )


_VoipExtSipProfileSe_Type.__name__ = "Integer32"
_VoipExtSipProfileSe_Object = MibTableColumn
voipExtSipProfileSe = _VoipExtSipProfileSe_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 2, 1, 12),
    _VoipExtSipProfileSe_Type()
)
voipExtSipProfileSe.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipProfileSe.setStatus("current")
if mibBuilder.loadTexts:
    voipExtSipProfileSe.setUnits("second")


class _VoipExtSipProfileSwitchType_Type(Integer32):
    """Custom type voipExtSipProfileSwitchType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("nsn", 1),
          ("alu", 2))
    )


_VoipExtSipProfileSwitchType_Type.__name__ = "Integer32"
_VoipExtSipProfileSwitchType_Object = MibTableColumn
voipExtSipProfileSwitchType = _VoipExtSipProfileSwitchType_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 2, 1, 13),
    _VoipExtSipProfileSwitchType_Type()
)
voipExtSipProfileSwitchType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipProfileSwitchType.setStatus("current")
_VoipExtSipProfileRtpStartPort_Type = Integer32
_VoipExtSipProfileRtpStartPort_Object = MibTableColumn
voipExtSipProfileRtpStartPort = _VoipExtSipProfileRtpStartPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 2, 1, 14),
    _VoipExtSipProfileRtpStartPort_Type()
)
voipExtSipProfileRtpStartPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipProfileRtpStartPort.setStatus("current")
_VoipExtSipProfileRtpEndPort_Type = Integer32
_VoipExtSipProfileRtpEndPort_Object = MibTableColumn
voipExtSipProfileRtpEndPort = _VoipExtSipProfileRtpEndPort_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 2, 1, 15),
    _VoipExtSipProfileRtpEndPort_Type()
)
voipExtSipProfileRtpEndPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipProfileRtpEndPort.setStatus("current")


class _VoipExtSipProfileRegistrationExpire_Type(Integer32):
    """Custom type voipExtSipProfileRegistrationExpire based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_VoipExtSipProfileRegistrationExpire_Type.__name__ = "Integer32"
_VoipExtSipProfileRegistrationExpire_Object = MibTableColumn
voipExtSipProfileRegistrationExpire = _VoipExtSipProfileRegistrationExpire_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 2, 1, 16),
    _VoipExtSipProfileRegistrationExpire_Type()
)
voipExtSipProfileRegistrationExpire.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipProfileRegistrationExpire.setStatus("current")
_VoipExtSipProfileRegistrationExpireTime_Type = Integer32
_VoipExtSipProfileRegistrationExpireTime_Object = MibTableColumn
voipExtSipProfileRegistrationExpireTime = _VoipExtSipProfileRegistrationExpireTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 2, 1, 17),
    _VoipExtSipProfileRegistrationExpireTime_Type()
)
voipExtSipProfileRegistrationExpireTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipProfileRegistrationExpireTime.setStatus("current")
_VoipExtSipProfileRegistrationRetryTime_Type = Integer32
_VoipExtSipProfileRegistrationRetryTime_Object = MibTableColumn
voipExtSipProfileRegistrationRetryTime = _VoipExtSipProfileRegistrationRetryTime_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 2, 1, 18),
    _VoipExtSipProfileRegistrationRetryTime_Type()
)
voipExtSipProfileRegistrationRetryTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipProfileRegistrationRetryTime.setStatus("current")
_VoipExtSipProfileRowStatus_Type = RowStatus
_VoipExtSipProfileRowStatus_Object = MibTableColumn
voipExtSipProfileRowStatus = _VoipExtSipProfileRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 2, 1, 19),
    _VoipExtSipProfileRowStatus_Type()
)
voipExtSipProfileRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipProfileRowStatus.setStatus("current")


class _VoipExtSipProfilePrefixAddDigits_Type(DisplayString):
    """Custom type voipExtSipProfilePrefixAddDigits based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipExtSipProfilePrefixAddDigits_Type.__name__ = "DisplayString"
_VoipExtSipProfilePrefixAddDigits_Object = MibTableColumn
voipExtSipProfilePrefixAddDigits = _VoipExtSipProfilePrefixAddDigits_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 2, 1, 20),
    _VoipExtSipProfilePrefixAddDigits_Type()
)
voipExtSipProfilePrefixAddDigits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtSipProfilePrefixAddDigits.setStatus("current")
_VoipExtMaxNumOfSipCallSvcProfiles_Type = Integer32
_VoipExtMaxNumOfSipCallSvcProfiles_Object = MibScalar
voipExtMaxNumOfSipCallSvcProfiles = _VoipExtMaxNumOfSipCallSvcProfiles_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 3),
    _VoipExtMaxNumOfSipCallSvcProfiles_Type()
)
voipExtMaxNumOfSipCallSvcProfiles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtMaxNumOfSipCallSvcProfiles.setStatus("current")
_VoipExtSipCallSvcProfileTable_Object = MibTable
voipExtSipCallSvcProfileTable = _VoipExtSipCallSvcProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 4)
)
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileTable.setStatus("current")
_VoipExtSipCallSvcProfileEntry_Object = MibTableRow
voipExtSipCallSvcProfileEntry = _VoipExtSipCallSvcProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 4, 1)
)
voipExtSipCallSvcProfileEntry.setIndexNames(
    (1, "ZYXEL-IES5000-MIB", "voipExtSipCallSvcProfileName"),
)
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileEntry.setStatus("current")


class _VoipExtSipCallSvcProfileName_Type(DisplayString):
    """Custom type voipExtSipCallSvcProfileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipExtSipCallSvcProfileName_Type.__name__ = "DisplayString"
_VoipExtSipCallSvcProfileName_Object = MibTableColumn
voipExtSipCallSvcProfileName = _VoipExtSipCallSvcProfileName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 4, 1, 1),
    _VoipExtSipCallSvcProfileName_Type()
)
voipExtSipCallSvcProfileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileName.setStatus("current")


class _VoipExtSipCallSvcProfileKeypattern_Type(DisplayString):
    """Custom type voipExtSipCallSvcProfileKeypattern based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipExtSipCallSvcProfileKeypattern_Type.__name__ = "DisplayString"
_VoipExtSipCallSvcProfileKeypattern_Object = MibTableColumn
voipExtSipCallSvcProfileKeypattern = _VoipExtSipCallSvcProfileKeypattern_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 4, 1, 2),
    _VoipExtSipCallSvcProfileKeypattern_Type()
)
voipExtSipCallSvcProfileKeypattern.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileKeypattern.setStatus("current")


class _VoipExtSipCallSvcProfileDialPlanOn_Type(Integer32):
    """Custom type voipExtSipCallSvcProfileDialPlanOn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_VoipExtSipCallSvcProfileDialPlanOn_Type.__name__ = "Integer32"
_VoipExtSipCallSvcProfileDialPlanOn_Object = MibTableColumn
voipExtSipCallSvcProfileDialPlanOn = _VoipExtSipCallSvcProfileDialPlanOn_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 4, 1, 3),
    _VoipExtSipCallSvcProfileDialPlanOn_Type()
)
voipExtSipCallSvcProfileDialPlanOn.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileDialPlanOn.setStatus("current")


class _VoipExtSipCallSvcProfileDialPlanCc_Type(DisplayString):
    """Custom type voipExtSipCallSvcProfileDialPlanCc based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 7),
    )


_VoipExtSipCallSvcProfileDialPlanCc_Type.__name__ = "DisplayString"
_VoipExtSipCallSvcProfileDialPlanCc_Object = MibTableColumn
voipExtSipCallSvcProfileDialPlanCc = _VoipExtSipCallSvcProfileDialPlanCc_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 4, 1, 4),
    _VoipExtSipCallSvcProfileDialPlanCc_Type()
)
voipExtSipCallSvcProfileDialPlanCc.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileDialPlanCc.setStatus("current")


class _VoipExtSipCallSvcProfileDialPlanNdc_Type(DisplayString):
    """Custom type voipExtSipCallSvcProfileDialPlanNdc based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 7),
    )


_VoipExtSipCallSvcProfileDialPlanNdc_Type.__name__ = "DisplayString"
_VoipExtSipCallSvcProfileDialPlanNdc_Object = MibTableColumn
voipExtSipCallSvcProfileDialPlanNdc = _VoipExtSipCallSvcProfileDialPlanNdc_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 4, 1, 5),
    _VoipExtSipCallSvcProfileDialPlanNdc_Type()
)
voipExtSipCallSvcProfileDialPlanNdc.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileDialPlanNdc.setStatus("current")


class _VoipExtSipCallSvcProfileDialPlanTable_Type(DisplayString):
    """Custom type voipExtSipCallSvcProfileDialPlanTable based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipExtSipCallSvcProfileDialPlanTable_Type.__name__ = "DisplayString"
_VoipExtSipCallSvcProfileDialPlanTable_Object = MibTableColumn
voipExtSipCallSvcProfileDialPlanTable = _VoipExtSipCallSvcProfileDialPlanTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 4, 1, 6),
    _VoipExtSipCallSvcProfileDialPlanTable_Type()
)
voipExtSipCallSvcProfileDialPlanTable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileDialPlanTable.setStatus("current")


class _VoipExtSipCallSvcProfileDndOn_Type(Integer32):
    """Custom type voipExtSipCallSvcProfileDndOn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_VoipExtSipCallSvcProfileDndOn_Type.__name__ = "Integer32"
_VoipExtSipCallSvcProfileDndOn_Object = MibTableColumn
voipExtSipCallSvcProfileDndOn = _VoipExtSipCallSvcProfileDndOn_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 4, 1, 7),
    _VoipExtSipCallSvcProfileDndOn_Type()
)
voipExtSipCallSvcProfileDndOn.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileDndOn.setStatus("current")


class _VoipExtSipCallSvcProfileDtmf_Type(Integer32):
    """Custom type voipExtSipCallSvcProfileDtmf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("bypass", 1),
          ("rfc2833", 2),
          ("rfc2833like", 3),
          ("sipinfo", 4),
          ("plaintext", 5))
    )


_VoipExtSipCallSvcProfileDtmf_Type.__name__ = "Integer32"
_VoipExtSipCallSvcProfileDtmf_Object = MibTableColumn
voipExtSipCallSvcProfileDtmf = _VoipExtSipCallSvcProfileDtmf_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 4, 1, 8),
    _VoipExtSipCallSvcProfileDtmf_Type()
)
voipExtSipCallSvcProfileDtmf.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileDtmf.setStatus("current")
_VoipExtSipCallSvcProfileDtmfRfc2833Payload_Type = Integer32
_VoipExtSipCallSvcProfileDtmfRfc2833Payload_Object = MibTableColumn
voipExtSipCallSvcProfileDtmfRfc2833Payload = _VoipExtSipCallSvcProfileDtmfRfc2833Payload_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 4, 1, 9),
    _VoipExtSipCallSvcProfileDtmfRfc2833Payload_Type()
)
voipExtSipCallSvcProfileDtmfRfc2833Payload.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileDtmfRfc2833Payload.setStatus("current")


class _VoipExtSipCallSvcProfileCallWaitOn_Type(Integer32):
    """Custom type voipExtSipCallSvcProfileCallWaitOn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_VoipExtSipCallSvcProfileCallWaitOn_Type.__name__ = "Integer32"
_VoipExtSipCallSvcProfileCallWaitOn_Object = MibTableColumn
voipExtSipCallSvcProfileCallWaitOn = _VoipExtSipCallSvcProfileCallWaitOn_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 4, 1, 11),
    _VoipExtSipCallSvcProfileCallWaitOn_Type()
)
voipExtSipCallSvcProfileCallWaitOn.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileCallWaitOn.setStatus("current")


class _VoipExtSipCallSvcProfileClipOn_Type(Integer32):
    """Custom type voipExtSipCallSvcProfileClipOn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_VoipExtSipCallSvcProfileClipOn_Type.__name__ = "Integer32"
_VoipExtSipCallSvcProfileClipOn_Object = MibTableColumn
voipExtSipCallSvcProfileClipOn = _VoipExtSipCallSvcProfileClipOn_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 4, 1, 12),
    _VoipExtSipCallSvcProfileClipOn_Type()
)
voipExtSipCallSvcProfileClipOn.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileClipOn.setStatus("current")


class _VoipExtSipCallSvcProfileClirOn_Type(Integer32):
    """Custom type voipExtSipCallSvcProfileClirOn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_VoipExtSipCallSvcProfileClirOn_Type.__name__ = "Integer32"
_VoipExtSipCallSvcProfileClirOn_Object = MibTableColumn
voipExtSipCallSvcProfileClirOn = _VoipExtSipCallSvcProfileClirOn_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 4, 1, 13),
    _VoipExtSipCallSvcProfileClirOn_Type()
)
voipExtSipCallSvcProfileClirOn.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileClirOn.setStatus("current")


class _VoipExtSipCallSvcProfileCallTransferOn_Type(Integer32):
    """Custom type voipExtSipCallSvcProfileCallTransferOn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_VoipExtSipCallSvcProfileCallTransferOn_Type.__name__ = "Integer32"
_VoipExtSipCallSvcProfileCallTransferOn_Object = MibTableColumn
voipExtSipCallSvcProfileCallTransferOn = _VoipExtSipCallSvcProfileCallTransferOn_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 4, 1, 14),
    _VoipExtSipCallSvcProfileCallTransferOn_Type()
)
voipExtSipCallSvcProfileCallTransferOn.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileCallTransferOn.setStatus("current")


class _VoipExtSipCallSvcProfileCallConferenceOn_Type(Integer32):
    """Custom type voipExtSipCallSvcProfileCallConferenceOn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_VoipExtSipCallSvcProfileCallConferenceOn_Type.__name__ = "Integer32"
_VoipExtSipCallSvcProfileCallConferenceOn_Object = MibTableColumn
voipExtSipCallSvcProfileCallConferenceOn = _VoipExtSipCallSvcProfileCallConferenceOn_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 4, 1, 15),
    _VoipExtSipCallSvcProfileCallConferenceOn_Type()
)
voipExtSipCallSvcProfileCallConferenceOn.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileCallConferenceOn.setStatus("current")


class _VoipExtSipCallSvcProfileFax_Type(Integer32):
    """Custom type voipExtSipCallSvcProfileFax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("g711", 1),
          ("t38", 2))
    )


_VoipExtSipCallSvcProfileFax_Type.__name__ = "Integer32"
_VoipExtSipCallSvcProfileFax_Object = MibTableColumn
voipExtSipCallSvcProfileFax = _VoipExtSipCallSvcProfileFax_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 4, 1, 16),
    _VoipExtSipCallSvcProfileFax_Type()
)
voipExtSipCallSvcProfileFax.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileFax.setStatus("current")
_VoipExtSipCallSvcProfileFirstDigit_Type = Integer32
_VoipExtSipCallSvcProfileFirstDigit_Object = MibTableColumn
voipExtSipCallSvcProfileFirstDigit = _VoipExtSipCallSvcProfileFirstDigit_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 4, 1, 17),
    _VoipExtSipCallSvcProfileFirstDigit_Type()
)
voipExtSipCallSvcProfileFirstDigit.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileFirstDigit.setStatus("current")
_VoipExtSipCallSvcProfileInterdigit_Type = Integer32
_VoipExtSipCallSvcProfileInterdigit_Object = MibTableColumn
voipExtSipCallSvcProfileInterdigit = _VoipExtSipCallSvcProfileInterdigit_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 4, 1, 18),
    _VoipExtSipCallSvcProfileInterdigit_Type()
)
voipExtSipCallSvcProfileInterdigit.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileInterdigit.setStatus("current")
_VoipExtSipCallSvcProfileMatchdigit_Type = Integer32
_VoipExtSipCallSvcProfileMatchdigit_Object = MibTableColumn
voipExtSipCallSvcProfileMatchdigit = _VoipExtSipCallSvcProfileMatchdigit_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 4, 1, 19),
    _VoipExtSipCallSvcProfileMatchdigit_Type()
)
voipExtSipCallSvcProfileMatchdigit.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileMatchdigit.setStatus("current")


class _VoipExtSipCallSvcProfileFlash_Type(Integer32):
    """Custom type voipExtSipCallSvcProfileFlash based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("invite", 1),
          ("rfc2833", 2),
          ("rfc2833like", 3),
          ("sipinfo1", 4),
          ("sipinfo2", 5),
          ("sipinfo3", 6),
          ("sipinfo4", 7),
          ("sipinfo5", 8),
          ("sipinfo6", 9),
          ("skip", 10))
    )


_VoipExtSipCallSvcProfileFlash_Type.__name__ = "Integer32"
_VoipExtSipCallSvcProfileFlash_Object = MibTableColumn
voipExtSipCallSvcProfileFlash = _VoipExtSipCallSvcProfileFlash_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 4, 1, 20),
    _VoipExtSipCallSvcProfileFlash_Type()
)
voipExtSipCallSvcProfileFlash.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileFlash.setStatus("current")
_VoipExtSipCallSvcProfileFlashPattern_Type = DisplayString
_VoipExtSipCallSvcProfileFlashPattern_Object = MibTableColumn
voipExtSipCallSvcProfileFlashPattern = _VoipExtSipCallSvcProfileFlashPattern_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 4, 1, 21),
    _VoipExtSipCallSvcProfileFlashPattern_Type()
)
voipExtSipCallSvcProfileFlashPattern.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileFlashPattern.setStatus("current")


class _VoipExtSipCallSvcProfileLocalCallOn_Type(Integer32):
    """Custom type voipExtSipCallSvcProfileLocalCallOn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_VoipExtSipCallSvcProfileLocalCallOn_Type.__name__ = "Integer32"
_VoipExtSipCallSvcProfileLocalCallOn_Object = MibTableColumn
voipExtSipCallSvcProfileLocalCallOn = _VoipExtSipCallSvcProfileLocalCallOn_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 4, 1, 22),
    _VoipExtSipCallSvcProfileLocalCallOn_Type()
)
voipExtSipCallSvcProfileLocalCallOn.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileLocalCallOn.setStatus("current")


class _VoipExtSipCallSvcProfileMWIOn_Type(Integer32):
    """Custom type voipExtSipCallSvcProfileMWIOn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_VoipExtSipCallSvcProfileMWIOn_Type.__name__ = "Integer32"
_VoipExtSipCallSvcProfileMWIOn_Object = MibTableColumn
voipExtSipCallSvcProfileMWIOn = _VoipExtSipCallSvcProfileMWIOn_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 4, 1, 23),
    _VoipExtSipCallSvcProfileMWIOn_Type()
)
voipExtSipCallSvcProfileMWIOn.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileMWIOn.setStatus("current")


class _VoipExtSipCallSvcProfileCentrexOn_Type(Integer32):
    """Custom type voipExtSipCallSvcProfileCentrexOn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_VoipExtSipCallSvcProfileCentrexOn_Type.__name__ = "Integer32"
_VoipExtSipCallSvcProfileCentrexOn_Object = MibTableColumn
voipExtSipCallSvcProfileCentrexOn = _VoipExtSipCallSvcProfileCentrexOn_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 4, 1, 24),
    _VoipExtSipCallSvcProfileCentrexOn_Type()
)
voipExtSipCallSvcProfileCentrexOn.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileCentrexOn.setStatus("current")
_VoipExtSipCallSvcProfileRowStatus_Type = RowStatus
_VoipExtSipCallSvcProfileRowStatus_Object = MibTableColumn
voipExtSipCallSvcProfileRowStatus = _VoipExtSipCallSvcProfileRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 4, 1, 25),
    _VoipExtSipCallSvcProfileRowStatus_Type()
)
voipExtSipCallSvcProfileRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileRowStatus.setStatus("current")
_VoipExtSipCallSvcProfileLocalHelpTable_Object = MibTable
voipExtSipCallSvcProfileLocalHelpTable = _VoipExtSipCallSvcProfileLocalHelpTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 5)
)
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileLocalHelpTable.setStatus("current")
_VoipExtSipCallSvcProfileLocalHelpEntry_Object = MibTableRow
voipExtSipCallSvcProfileLocalHelpEntry = _VoipExtSipCallSvcProfileLocalHelpEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 5, 1)
)
voipExtSipCallSvcProfileLocalHelpEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipExtSipCallSvcProfileName"),
    (0, "ZYXEL-IES5000-MIB", "voipExtSipCallSvcProfileLocalHelpIndex"),
)
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileLocalHelpEntry.setStatus("current")


class _VoipExtSipCallSvcProfileLocalHelpIndex_Type(Integer32):
    """Custom type voipExtSipCallSvcProfileLocalHelpIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_VoipExtSipCallSvcProfileLocalHelpIndex_Type.__name__ = "Integer32"
_VoipExtSipCallSvcProfileLocalHelpIndex_Object = MibTableColumn
voipExtSipCallSvcProfileLocalHelpIndex = _VoipExtSipCallSvcProfileLocalHelpIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 5, 1, 1),
    _VoipExtSipCallSvcProfileLocalHelpIndex_Type()
)
voipExtSipCallSvcProfileLocalHelpIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileLocalHelpIndex.setStatus("current")


class _VoipExtSipCallSvcProfileLocalHelpTableName_Type(DisplayString):
    """Custom type voipExtSipCallSvcProfileLocalHelpTableName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipExtSipCallSvcProfileLocalHelpTableName_Type.__name__ = "DisplayString"
_VoipExtSipCallSvcProfileLocalHelpTableName_Object = MibTableColumn
voipExtSipCallSvcProfileLocalHelpTableName = _VoipExtSipCallSvcProfileLocalHelpTableName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 5, 1, 2),
    _VoipExtSipCallSvcProfileLocalHelpTableName_Type()
)
voipExtSipCallSvcProfileLocalHelpTableName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileLocalHelpTableName.setStatus("current")


class _VoipExtSipCallSvcProfileLocalHelpTableTel_Type(DisplayString):
    """Custom type voipExtSipCallSvcProfileLocalHelpTableTel based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 15),
    )


_VoipExtSipCallSvcProfileLocalHelpTableTel_Type.__name__ = "DisplayString"
_VoipExtSipCallSvcProfileLocalHelpTableTel_Object = MibTableColumn
voipExtSipCallSvcProfileLocalHelpTableTel = _VoipExtSipCallSvcProfileLocalHelpTableTel_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 3, 5, 1, 3),
    _VoipExtSipCallSvcProfileLocalHelpTableTel_Type()
)
voipExtSipCallSvcProfileLocalHelpTableTel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtSipCallSvcProfileLocalHelpTableTel.setStatus("current")
_VoipExtMaxNumOfVoipDialPlan_Type = Integer32
_VoipExtMaxNumOfVoipDialPlan_Object = MibScalar
voipExtMaxNumOfVoipDialPlan = _VoipExtMaxNumOfVoipDialPlan_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 4),
    _VoipExtMaxNumOfVoipDialPlan_Type()
)
voipExtMaxNumOfVoipDialPlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtMaxNumOfVoipDialPlan.setStatus("current")
_VoipExtDialPlanTable_Object = MibTable
voipExtDialPlanTable = _VoipExtDialPlanTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 5)
)
if mibBuilder.loadTexts:
    voipExtDialPlanTable.setStatus("current")
_VoipExtDialPlanEntry_Object = MibTableRow
voipExtDialPlanEntry = _VoipExtDialPlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 5, 1)
)
voipExtDialPlanEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipExtDialPlanName"),
    (0, "ZYXEL-IES5000-MIB", "voipExtDialPlanIndex"),
)
if mibBuilder.loadTexts:
    voipExtDialPlanEntry.setStatus("current")


class _VoipExtDialPlanName_Type(DisplayString):
    """Custom type voipExtDialPlanName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipExtDialPlanName_Type.__name__ = "DisplayString"
_VoipExtDialPlanName_Object = MibTableColumn
voipExtDialPlanName = _VoipExtDialPlanName_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 5, 1, 1),
    _VoipExtDialPlanName_Type()
)
voipExtDialPlanName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtDialPlanName.setStatus("current")


class _VoipExtDialPlanIndex_Type(Integer32):
    """Custom type voipExtDialPlanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_VoipExtDialPlanIndex_Type.__name__ = "Integer32"
_VoipExtDialPlanIndex_Object = MibTableColumn
voipExtDialPlanIndex = _VoipExtDialPlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 5, 1, 2),
    _VoipExtDialPlanIndex_Type()
)
voipExtDialPlanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtDialPlanIndex.setStatus("current")


class _VoipExtDialPlanPattern_Type(DisplayString):
    """Custom type voipExtDialPlanPattern based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 47),
    )


_VoipExtDialPlanPattern_Type.__name__ = "DisplayString"
_VoipExtDialPlanPattern_Object = MibTableColumn
voipExtDialPlanPattern = _VoipExtDialPlanPattern_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 5, 1, 3),
    _VoipExtDialPlanPattern_Type()
)
voipExtDialPlanPattern.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtDialPlanPattern.setStatus("current")


class _VoipExtDialPlanRule_Type(DisplayString):
    """Custom type voipExtDialPlanRule based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 15),
    )


_VoipExtDialPlanRule_Type.__name__ = "DisplayString"
_VoipExtDialPlanRule_Object = MibTableColumn
voipExtDialPlanRule = _VoipExtDialPlanRule_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 5, 1, 4),
    _VoipExtDialPlanRule_Type()
)
voipExtDialPlanRule.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtDialPlanRule.setStatus("current")
_VoipExtDialPlanRowStatus_Type = RowStatus
_VoipExtDialPlanRowStatus_Object = MibTableColumn
voipExtDialPlanRowStatus = _VoipExtDialPlanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 5, 1, 5),
    _VoipExtDialPlanRowStatus_Type()
)
voipExtDialPlanRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtDialPlanRowStatus.setStatus("current")
_VoipExtSip_ObjectIdentity = ObjectIdentity
voipExtSip = _VoipExtSip_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 6)
)
_VoipExtSipIp_ObjectIdentity = ObjectIdentity
voipExtSipIp = _VoipExtSipIp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 6, 1)
)
_VoipExtSipSignalIp_Type = IpAddress
_VoipExtSipSignalIp_Object = MibScalar
voipExtSipSignalIp = _VoipExtSipSignalIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 6, 1, 1),
    _VoipExtSipSignalIp_Type()
)
voipExtSipSignalIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtSipSignalIp.setStatus("current")
_VoipExtSipSignalMask_Type = Integer32
_VoipExtSipSignalMask_Object = MibScalar
voipExtSipSignalMask = _VoipExtSipSignalMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 6, 1, 2),
    _VoipExtSipSignalMask_Type()
)
voipExtSipSignalMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtSipSignalMask.setStatus("current")
_VoipExtSipSignalVid_Type = VlanIndex
_VoipExtSipSignalVid_Object = MibScalar
voipExtSipSignalVid = _VoipExtSipSignalVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 6, 1, 3),
    _VoipExtSipSignalVid_Type()
)
voipExtSipSignalVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtSipSignalVid.setStatus("current")
_VoipExtSipMediaIp_Type = IpAddress
_VoipExtSipMediaIp_Object = MibScalar
voipExtSipMediaIp = _VoipExtSipMediaIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 6, 1, 4),
    _VoipExtSipMediaIp_Type()
)
voipExtSipMediaIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtSipMediaIp.setStatus("current")
_VoipExtSipMediaMask_Type = Integer32
_VoipExtSipMediaMask_Object = MibScalar
voipExtSipMediaMask = _VoipExtSipMediaMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 6, 1, 5),
    _VoipExtSipMediaMask_Type()
)
voipExtSipMediaMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtSipMediaMask.setStatus("current")
_VoipExtSipMediaVid_Type = VlanIndex
_VoipExtSipMediaVid_Object = MibScalar
voipExtSipMediaVid = _VoipExtSipMediaVid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 6, 1, 6),
    _VoipExtSipMediaVid_Type()
)
voipExtSipMediaVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtSipMediaVid.setStatus("current")
_VoipExtSipDnsIp_Type = IpAddress
_VoipExtSipDnsIp_Object = MibScalar
voipExtSipDnsIp = _VoipExtSipDnsIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 6, 1, 7),
    _VoipExtSipDnsIp_Type()
)
voipExtSipDnsIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtSipDnsIp.setStatus("current")
_VoipExtSipDnsIp2_Type = IpAddress
_VoipExtSipDnsIp2_Object = MibScalar
voipExtSipDnsIp2 = _VoipExtSipDnsIp2_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 6, 1, 8),
    _VoipExtSipDnsIp2_Type()
)
voipExtSipDnsIp2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtSipDnsIp2.setStatus("current")
_VoipExtSipMaxNumOfVoipRoute_Type = Integer32
_VoipExtSipMaxNumOfVoipRoute_Object = MibScalar
voipExtSipMaxNumOfVoipRoute = _VoipExtSipMaxNumOfVoipRoute_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 6, 2),
    _VoipExtSipMaxNumOfVoipRoute_Type()
)
voipExtSipMaxNumOfVoipRoute.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtSipMaxNumOfVoipRoute.setStatus("current")
_VoipExtSipRouteTable_Object = MibTable
voipExtSipRouteTable = _VoipExtSipRouteTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 6, 3)
)
if mibBuilder.loadTexts:
    voipExtSipRouteTable.setStatus("current")
_VoipExtSipRouteEntry_Object = MibTableRow
voipExtSipRouteEntry = _VoipExtSipRouteEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 6, 3, 1)
)
voipExtSipRouteEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipExtSipRouteIp"),
    (0, "ZYXEL-IES5000-MIB", "voipExtSipRouteGateway"),
    (0, "ZYXEL-IES5000-MIB", "voipExtSipRouteMask"),
)
if mibBuilder.loadTexts:
    voipExtSipRouteEntry.setStatus("current")
_VoipExtSipRouteIp_Type = IpAddress
_VoipExtSipRouteIp_Object = MibTableColumn
voipExtSipRouteIp = _VoipExtSipRouteIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 6, 3, 1, 1),
    _VoipExtSipRouteIp_Type()
)
voipExtSipRouteIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtSipRouteIp.setStatus("current")
_VoipExtSipRouteGateway_Type = IpAddress
_VoipExtSipRouteGateway_Object = MibTableColumn
voipExtSipRouteGateway = _VoipExtSipRouteGateway_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 6, 3, 1, 2),
    _VoipExtSipRouteGateway_Type()
)
voipExtSipRouteGateway.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtSipRouteGateway.setStatus("current")


class _VoipExtSipRouteMask_Type(Integer32):
    """Custom type voipExtSipRouteMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32),
    )


_VoipExtSipRouteMask_Type.__name__ = "Integer32"
_VoipExtSipRouteMask_Object = MibTableColumn
voipExtSipRouteMask = _VoipExtSipRouteMask_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 6, 3, 1, 3),
    _VoipExtSipRouteMask_Type()
)
voipExtSipRouteMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtSipRouteMask.setStatus("current")


class _VoipExtSipRouteMetric_Type(Integer32):
    """Custom type voipExtSipRouteMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_VoipExtSipRouteMetric_Type.__name__ = "Integer32"
_VoipExtSipRouteMetric_Object = MibTableColumn
voipExtSipRouteMetric = _VoipExtSipRouteMetric_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 6, 3, 1, 4),
    _VoipExtSipRouteMetric_Type()
)
voipExtSipRouteMetric.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipRouteMetric.setStatus("current")
_VoipExtSipRouteRowStatus_Type = RowStatus
_VoipExtSipRouteRowStatus_Object = MibTableColumn
voipExtSipRouteRowStatus = _VoipExtSipRouteRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 6, 3, 1, 5),
    _VoipExtSipRouteRowStatus_Type()
)
voipExtSipRouteRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    voipExtSipRouteRowStatus.setStatus("current")


class _VoipExtSipRegcount_Type(Integer32):
    """Custom type voipExtSipRegcount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_VoipExtSipRegcount_Type.__name__ = "Integer32"
_VoipExtSipRegcount_Object = MibScalar
voipExtSipRegcount = _VoipExtSipRegcount_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 6, 4),
    _VoipExtSipRegcount_Type()
)
voipExtSipRegcount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtSipRegcount.setStatus("current")


class _VoipExtSipCptReorder_Type(Integer32):
    """Custom type voipExtSipCptReorder based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 300),
    )


_VoipExtSipCptReorder_Type.__name__ = "Integer32"
_VoipExtSipCptReorder_Object = MibScalar
voipExtSipCptReorder = _VoipExtSipCptReorder_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 6, 5),
    _VoipExtSipCptReorder_Type()
)
voipExtSipCptReorder.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtSipCptReorder.setStatus("current")


class _VoipExtSipCptHowler_Type(Integer32):
    """Custom type voipExtSipCptHowler based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 300),
    )


_VoipExtSipCptHowler_Type.__name__ = "Integer32"
_VoipExtSipCptHowler_Object = MibScalar
voipExtSipCptHowler = _VoipExtSipCptHowler_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 6, 6),
    _VoipExtSipCptHowler_Type()
)
voipExtSipCptHowler.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtSipCptHowler.setStatus("current")


class _VoipExtSipCptAlerting_Type(Integer32):
    """Custom type voipExtSipCptAlerting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(60, 1200),
    )


_VoipExtSipCptAlerting_Type.__name__ = "Integer32"
_VoipExtSipCptAlerting_Object = MibScalar
voipExtSipCptAlerting = _VoipExtSipCptAlerting_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 6, 7),
    _VoipExtSipCptAlerting_Type()
)
voipExtSipCptAlerting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtSipCptAlerting.setStatus("current")


class _VoipExtSipPktLog_Type(Integer32):
    """Custom type voipExtSipPktLog based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_VoipExtSipPktLog_Type.__name__ = "Integer32"
_VoipExtSipPktLog_Object = MibScalar
voipExtSipPktLog = _VoipExtSipPktLog_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 6, 8),
    _VoipExtSipPktLog_Type()
)
voipExtSipPktLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtSipPktLog.setStatus("current")
_VoipExtSipPktLogClear_Type = Integer32
_VoipExtSipPktLogClear_Object = MibScalar
voipExtSipPktLogClear = _VoipExtSipPktLogClear_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 6, 9),
    _VoipExtSipPktLogClear_Type()
)
voipExtSipPktLogClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtSipPktLogClear.setStatus("current")
_VoipExtSipLineConfTable_Object = MibTable
voipExtSipLineConfTable = _VoipExtSipLineConfTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 7)
)
if mibBuilder.loadTexts:
    voipExtSipLineConfTable.setStatus("current")
_VoipExtSipLineConfEntry_Object = MibTableRow
voipExtSipLineConfEntry = _VoipExtSipLineConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 7, 1)
)
voipExtSipLineConfEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipIfIndex"),
)
if mibBuilder.loadTexts:
    voipExtSipLineConfEntry.setStatus("current")


class _VoipExtSipLineConfHotlineOn_Type(Integer32):
    """Custom type voipExtSipLineConfHotlineOn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_VoipExtSipLineConfHotlineOn_Type.__name__ = "Integer32"
_VoipExtSipLineConfHotlineOn_Object = MibTableColumn
voipExtSipLineConfHotlineOn = _VoipExtSipLineConfHotlineOn_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 7, 1, 1),
    _VoipExtSipLineConfHotlineOn_Type()
)
voipExtSipLineConfHotlineOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtSipLineConfHotlineOn.setStatus("current")


class _VoipExtSipLineConfHotlineNo_Type(DisplayString):
    """Custom type voipExtSipLineConfHotlineNo based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_VoipExtSipLineConfHotlineNo_Type.__name__ = "DisplayString"
_VoipExtSipLineConfHotlineNo_Object = MibTableColumn
voipExtSipLineConfHotlineNo = _VoipExtSipLineConfHotlineNo_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 7, 1, 2),
    _VoipExtSipLineConfHotlineNo_Type()
)
voipExtSipLineConfHotlineNo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtSipLineConfHotlineNo.setStatus("current")
_VoipExtSipLineConfHotlineTimeout_Type = Integer32
_VoipExtSipLineConfHotlineTimeout_Object = MibTableColumn
voipExtSipLineConfHotlineTimeout = _VoipExtSipLineConfHotlineTimeout_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 7, 1, 3),
    _VoipExtSipLineConfHotlineTimeout_Type()
)
voipExtSipLineConfHotlineTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtSipLineConfHotlineTimeout.setStatus("current")


class _VoipExtSipLineConfTax_Type(Integer32):
    """Custom type voipExtSipLineConfTax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("mode-disable", 0),
          ("mode-12K", 1),
          ("mode-16K", 2),
          ("mode-reversal-12K", 3),
          ("mode-reversal-16K", 4),
          ("mode-reversal-steady", 5),
          ("mode-reversal-pulse", 6))
    )


_VoipExtSipLineConfTax_Type.__name__ = "Integer32"
_VoipExtSipLineConfTax_Object = MibTableColumn
voipExtSipLineConfTax = _VoipExtSipLineConfTax_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 7, 1, 4),
    _VoipExtSipLineConfTax_Type()
)
voipExtSipLineConfTax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voipExtSipLineConfTax.setStatus("current")
_VoipExtSipLineStatusTable_Object = MibTable
voipExtSipLineStatusTable = _VoipExtSipLineStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 8)
)
if mibBuilder.loadTexts:
    voipExtSipLineStatusTable.setStatus("current")
_VoipExtSipLineStatusEntry_Object = MibTableRow
voipExtSipLineStatusEntry = _VoipExtSipLineStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 8, 1)
)
voipExtSipLineStatusEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "voipIfIndex"),
)
if mibBuilder.loadTexts:
    voipExtSipLineStatusEntry.setStatus("current")


class _VoipExtSipLineStatusFxsStatus_Type(Integer32):
    """Custom type voipExtSipLineStatusFxsStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("on-hook", 2),
          ("off-hook", 3),
          ("ringing", 4),
          ("power-cut-down", 5),
          ("testing", 6),
          ("fault", 7),
          ("bad", 8),
          ("uninitialized", 9))
    )


_VoipExtSipLineStatusFxsStatus_Type.__name__ = "Integer32"
_VoipExtSipLineStatusFxsStatus_Object = MibTableColumn
voipExtSipLineStatusFxsStatus = _VoipExtSipLineStatusFxsStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 8, 1, 1),
    _VoipExtSipLineStatusFxsStatus_Type()
)
voipExtSipLineStatusFxsStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtSipLineStatusFxsStatus.setStatus("current")


class _VoipExtSipLineStatusServiceStatus_Type(Integer32):
    """Custom type voipExtSipLineStatusServiceStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("out-of-service", 2),
          ("idle", 3),
          ("waiting-for-dialing", 4),
          ("dialing-out", 5),
          ("ringing", 6),
          ("conversation-caller", 7),
          ("conversation-callee", 8),
          ("fax-modem-caller", 11),
          ("fax-modem-callee", 12),
          ("waiting-for-on-hook", 13),
          ("dialing-timeout", 14),
          ("alerting-off-hook", 15),
          ("power-cut-down", 16))
    )


_VoipExtSipLineStatusServiceStatus_Type.__name__ = "Integer32"
_VoipExtSipLineStatusServiceStatus_Object = MibTableColumn
voipExtSipLineStatusServiceStatus = _VoipExtSipLineStatusServiceStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 8, 1, 2),
    _VoipExtSipLineStatusServiceStatus_Type()
)
voipExtSipLineStatusServiceStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtSipLineStatusServiceStatus.setStatus("current")


class _VoipExtSipLineStatusLocalcallStatus_Type(Integer32):
    """Custom type voipExtSipLineStatusLocalcallStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_VoipExtSipLineStatusLocalcallStatus_Type.__name__ = "Integer32"
_VoipExtSipLineStatusLocalcallStatus_Object = MibTableColumn
voipExtSipLineStatusLocalcallStatus = _VoipExtSipLineStatusLocalcallStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 16, 14, 8, 1, 3),
    _VoipExtSipLineStatusLocalcallStatus_Type()
)
voipExtSipLineStatusLocalcallStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voipExtSipLineStatusLocalcallStatus.setStatus("current")
_Ima_ObjectIdentity = ObjectIdentity
ima = _Ima_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17)
)
_ImaGroupTable_Object = MibTable
imaGroupTable = _ImaGroupTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 1)
)
if mibBuilder.loadTexts:
    imaGroupTable.setStatus("current")
_ImaGroupEntry_Object = MibTableRow
imaGroupEntry = _ImaGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 1, 1)
)
imaGroupEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "imaGroupIndex"),
)
if mibBuilder.loadTexts:
    imaGroupEntry.setStatus("current")
_ImaGroupIndex_Type = Integer32
_ImaGroupIndex_Object = MibTableColumn
imaGroupIndex = _ImaGroupIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 1, 1, 1),
    _ImaGroupIndex_Type()
)
imaGroupIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupIndex.setStatus("current")


class _ImaGroupClkMode_Type(Integer32):
    """Custom type imaGroupClkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ctc-loop", 1),
          ("ctc-local", 2),
          ("itc", 3))
    )


_ImaGroupClkMode_Type.__name__ = "Integer32"
_ImaGroupClkMode_Object = MibTableColumn
imaGroupClkMode = _ImaGroupClkMode_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 1, 1, 2),
    _ImaGroupClkMode_Type()
)
imaGroupClkMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    imaGroupClkMode.setStatus("current")


class _ImaGroupVersion_Type(Integer32):
    """Custom type imaGroupVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("version-1-0", 1),
          ("version-1-1", 2))
    )


_ImaGroupVersion_Type.__name__ = "Integer32"
_ImaGroupVersion_Object = MibTableColumn
imaGroupVersion = _ImaGroupVersion_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 1, 1, 3),
    _ImaGroupVersion_Type()
)
imaGroupVersion.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    imaGroupVersion.setStatus("current")
_ImaGroupChan_ObjectIdentity = ObjectIdentity
imaGroupChan = _ImaGroupChan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2)
)
_ImaGroupChanNumTable_Object = MibTable
imaGroupChanNumTable = _ImaGroupChanNumTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 1)
)
if mibBuilder.loadTexts:
    imaGroupChanNumTable.setStatus("current")
_ImaGroupChanNumEntry_Object = MibTableRow
imaGroupChanNumEntry = _ImaGroupChanNumEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 1, 1)
)
imaGroupChanNumEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "imaGroupChanNumSlot"),
)
if mibBuilder.loadTexts:
    imaGroupChanNumEntry.setStatus("current")
_ImaGroupChanNumSlot_Type = Integer32
_ImaGroupChanNumSlot_Object = MibTableColumn
imaGroupChanNumSlot = _ImaGroupChanNumSlot_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 1, 1, 1),
    _ImaGroupChanNumSlot_Type()
)
imaGroupChanNumSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupChanNumSlot.setStatus("current")
_ImaGroupChanNumMaximum_Type = Integer32
_ImaGroupChanNumMaximum_Object = MibTableColumn
imaGroupChanNumMaximum = _ImaGroupChanNumMaximum_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 1, 1, 2),
    _ImaGroupChanNumMaximum_Type()
)
imaGroupChanNumMaximum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupChanNumMaximum.setStatus("current")
_ImaGroupChanNumCurrentTotal_Type = Integer32
_ImaGroupChanNumCurrentTotal_Object = MibTableColumn
imaGroupChanNumCurrentTotal = _ImaGroupChanNumCurrentTotal_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 1, 1, 3),
    _ImaGroupChanNumCurrentTotal_Type()
)
imaGroupChanNumCurrentTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupChanNumCurrentTotal.setStatus("current")
_ImaGroupChanNumCurrentPvc_Type = Integer32
_ImaGroupChanNumCurrentPvc_Object = MibTableColumn
imaGroupChanNumCurrentPvc = _ImaGroupChanNumCurrentPvc_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 1, 1, 4),
    _ImaGroupChanNumCurrentPvc_Type()
)
imaGroupChanNumCurrentPvc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupChanNumCurrentPvc.setStatus("current")
_ImaGroupChanNumCurrentDtpvc_Type = Integer32
_ImaGroupChanNumCurrentDtpvc_Object = MibTableColumn
imaGroupChanNumCurrentDtpvc = _ImaGroupChanNumCurrentDtpvc_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 1, 1, 5),
    _ImaGroupChanNumCurrentDtpvc_Type()
)
imaGroupChanNumCurrentDtpvc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupChanNumCurrentDtpvc.setStatus("current")
_ImaGroupPvcTable_Object = MibTable
imaGroupPvcTable = _ImaGroupPvcTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 2)
)
if mibBuilder.loadTexts:
    imaGroupPvcTable.setStatus("current")
_ImaGroupPvcEntry_Object = MibTableRow
imaGroupPvcEntry = _ImaGroupPvcEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 2, 1)
)
imaGroupPvcEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "imaGroupPvcGroupIndex"),
    (0, "ZYXEL-IES5000-MIB", "imaGroupPvcVpi"),
    (0, "ZYXEL-IES5000-MIB", "imaGroupPvcVci"),
    (0, "ZYXEL-IES5000-MIB", "imaGroupPvcPvid"),
)
if mibBuilder.loadTexts:
    imaGroupPvcEntry.setStatus("current")
_ImaGroupPvcGroupIndex_Type = Integer32
_ImaGroupPvcGroupIndex_Object = MibTableColumn
imaGroupPvcGroupIndex = _ImaGroupPvcGroupIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 2, 1, 1),
    _ImaGroupPvcGroupIndex_Type()
)
imaGroupPvcGroupIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupPvcGroupIndex.setStatus("current")


class _ImaGroupPvcVpi_Type(Integer32):
    """Custom type imaGroupPvcVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_ImaGroupPvcVpi_Type.__name__ = "Integer32"
_ImaGroupPvcVpi_Object = MibTableColumn
imaGroupPvcVpi = _ImaGroupPvcVpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 2, 1, 2),
    _ImaGroupPvcVpi_Type()
)
imaGroupPvcVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupPvcVpi.setStatus("current")


class _ImaGroupPvcVci_Type(Integer32):
    """Custom type imaGroupPvcVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_ImaGroupPvcVci_Type.__name__ = "Integer32"
_ImaGroupPvcVci_Object = MibTableColumn
imaGroupPvcVci = _ImaGroupPvcVci_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 2, 1, 3),
    _ImaGroupPvcVci_Type()
)
imaGroupPvcVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupPvcVci.setStatus("current")
_ImaGroupPvcPvid_Type = VlanIndex
_ImaGroupPvcPvid_Object = MibTableColumn
imaGroupPvcPvid = _ImaGroupPvcPvid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 2, 1, 4),
    _ImaGroupPvcPvid_Type()
)
imaGroupPvcPvid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupPvcPvid.setStatus("current")


class _ImaGroupPvcEncap_Type(Integer32):
    """Custom type imaGroupPvcEncap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("llc", 1),
          ("vc", 2))
    )


_ImaGroupPvcEncap_Type.__name__ = "Integer32"
_ImaGroupPvcEncap_Object = MibTableColumn
imaGroupPvcEncap = _ImaGroupPvcEncap_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 2, 1, 5),
    _ImaGroupPvcEncap_Type()
)
imaGroupPvcEncap.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    imaGroupPvcEncap.setStatus("current")


class _ImaGroupPvcPriority_Type(Integer32):
    """Custom type imaGroupPvcPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_ImaGroupPvcPriority_Type.__name__ = "Integer32"
_ImaGroupPvcPriority_Object = MibTableColumn
imaGroupPvcPriority = _ImaGroupPvcPriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 2, 1, 6),
    _ImaGroupPvcPriority_Type()
)
imaGroupPvcPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    imaGroupPvcPriority.setStatus("current")


class _ImaGruopPvcProfile_Type(DisplayString):
    """Custom type imaGruopPvcProfile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_ImaGruopPvcProfile_Type.__name__ = "DisplayString"
_ImaGruopPvcProfile_Object = MibTableColumn
imaGruopPvcProfile = _ImaGruopPvcProfile_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 2, 1, 7),
    _ImaGruopPvcProfile_Type()
)
imaGruopPvcProfile.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    imaGruopPvcProfile.setStatus("current")
_ImaGroupPvcRowStatus_Type = RowStatus
_ImaGroupPvcRowStatus_Object = MibTableColumn
imaGroupPvcRowStatus = _ImaGroupPvcRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 2, 1, 8),
    _ImaGroupPvcRowStatus_Type()
)
imaGroupPvcRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    imaGroupPvcRowStatus.setStatus("current")


class _ImaGroupPvcEgressTag_Type(Integer32):
    """Custom type imaGroupPvcEgressTag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("tag", 1),
          ("untag", 2))
    )


_ImaGroupPvcEgressTag_Type.__name__ = "Integer32"
_ImaGroupPvcEgressTag_Object = MibTableColumn
imaGroupPvcEgressTag = _ImaGroupPvcEgressTag_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 2, 1, 9),
    _ImaGroupPvcEgressTag_Type()
)
imaGroupPvcEgressTag.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    imaGroupPvcEgressTag.setStatus("current")
_ImaGroupDtPvcTable_Object = MibTable
imaGroupDtPvcTable = _ImaGroupDtPvcTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 3)
)
if mibBuilder.loadTexts:
    imaGroupDtPvcTable.setStatus("current")
_ImaGroupDtPvcEntry_Object = MibTableRow
imaGroupDtPvcEntry = _ImaGroupDtPvcEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 3, 1)
)
imaGroupDtPvcEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "imaGroupDTPvcGroupIndex"),
    (0, "ZYXEL-IES5000-MIB", "imaGroupDtPvcVpi"),
    (0, "ZYXEL-IES5000-MIB", "imaGroupDtPvcVci"),
    (0, "ZYXEL-IES5000-MIB", "imaGroupDtPvcSvid"),
    (0, "ZYXEL-IES5000-MIB", "imaGroupDtPvcCvid"),
)
if mibBuilder.loadTexts:
    imaGroupDtPvcEntry.setStatus("current")
_ImaGroupDTPvcGroupIndex_Type = Integer32
_ImaGroupDTPvcGroupIndex_Object = MibTableColumn
imaGroupDTPvcGroupIndex = _ImaGroupDTPvcGroupIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 3, 1, 1),
    _ImaGroupDTPvcGroupIndex_Type()
)
imaGroupDTPvcGroupIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupDTPvcGroupIndex.setStatus("current")


class _ImaGroupDtPvcVpi_Type(Integer32):
    """Custom type imaGroupDtPvcVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_ImaGroupDtPvcVpi_Type.__name__ = "Integer32"
_ImaGroupDtPvcVpi_Object = MibTableColumn
imaGroupDtPvcVpi = _ImaGroupDtPvcVpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 3, 1, 2),
    _ImaGroupDtPvcVpi_Type()
)
imaGroupDtPvcVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupDtPvcVpi.setStatus("current")


class _ImaGroupDtPvcVci_Type(Integer32):
    """Custom type imaGroupDtPvcVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_ImaGroupDtPvcVci_Type.__name__ = "Integer32"
_ImaGroupDtPvcVci_Object = MibTableColumn
imaGroupDtPvcVci = _ImaGroupDtPvcVci_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 3, 1, 3),
    _ImaGroupDtPvcVci_Type()
)
imaGroupDtPvcVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupDtPvcVci.setStatus("current")
_ImaGroupDtPvcSvid_Type = VlanIndex
_ImaGroupDtPvcSvid_Object = MibTableColumn
imaGroupDtPvcSvid = _ImaGroupDtPvcSvid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 3, 1, 4),
    _ImaGroupDtPvcSvid_Type()
)
imaGroupDtPvcSvid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupDtPvcSvid.setStatus("current")
_ImaGroupDtPvcCvid_Type = VlanIndex
_ImaGroupDtPvcCvid_Object = MibTableColumn
imaGroupDtPvcCvid = _ImaGroupDtPvcCvid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 3, 1, 5),
    _ImaGroupDtPvcCvid_Type()
)
imaGroupDtPvcCvid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGroupDtPvcCvid.setStatus("current")


class _ImaGroupDtPvcEncap_Type(Integer32):
    """Custom type imaGroupDtPvcEncap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("llc", 1),
          ("vc", 2))
    )


_ImaGroupDtPvcEncap_Type.__name__ = "Integer32"
_ImaGroupDtPvcEncap_Object = MibTableColumn
imaGroupDtPvcEncap = _ImaGroupDtPvcEncap_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 3, 1, 6),
    _ImaGroupDtPvcEncap_Type()
)
imaGroupDtPvcEncap.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    imaGroupDtPvcEncap.setStatus("current")


class _ImaGroupDtPvcSPriority_Type(Integer32):
    """Custom type imaGroupDtPvcSPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_ImaGroupDtPvcSPriority_Type.__name__ = "Integer32"
_ImaGroupDtPvcSPriority_Object = MibTableColumn
imaGroupDtPvcSPriority = _ImaGroupDtPvcSPriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 3, 1, 7),
    _ImaGroupDtPvcSPriority_Type()
)
imaGroupDtPvcSPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    imaGroupDtPvcSPriority.setStatus("current")


class _ImaGroupDtPvcCPriority_Type(Integer32):
    """Custom type imaGroupDtPvcCPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_ImaGroupDtPvcCPriority_Type.__name__ = "Integer32"
_ImaGroupDtPvcCPriority_Object = MibTableColumn
imaGroupDtPvcCPriority = _ImaGroupDtPvcCPriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 3, 1, 8),
    _ImaGroupDtPvcCPriority_Type()
)
imaGroupDtPvcCPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    imaGroupDtPvcCPriority.setStatus("current")


class _ImaGroupDtPvcProfile_Type(DisplayString):
    """Custom type imaGroupDtPvcProfile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_ImaGroupDtPvcProfile_Type.__name__ = "DisplayString"
_ImaGroupDtPvcProfile_Object = MibTableColumn
imaGroupDtPvcProfile = _ImaGroupDtPvcProfile_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 3, 1, 9),
    _ImaGroupDtPvcProfile_Type()
)
imaGroupDtPvcProfile.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    imaGroupDtPvcProfile.setStatus("current")
_ImaGroupDtPvcRowStatus_Type = RowStatus
_ImaGroupDtPvcRowStatus_Object = MibTableColumn
imaGroupDtPvcRowStatus = _ImaGroupDtPvcRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 2, 3, 1, 10),
    _ImaGroupDtPvcRowStatus_Type()
)
imaGroupDtPvcRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    imaGroupDtPvcRowStatus.setStatus("current")
_ImaMgmtPvcTable_Object = MibTable
imaMgmtPvcTable = _ImaMgmtPvcTable_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 3)
)
if mibBuilder.loadTexts:
    imaMgmtPvcTable.setStatus("current")
_ImaMgmtPvcEntry_Object = MibTableRow
imaMgmtPvcEntry = _ImaMgmtPvcEntry_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 3, 1)
)
imaMgmtPvcEntry.setIndexNames(
    (0, "ZYXEL-IES5000-MIB", "imaMgmtPvcGroupIndex"),
    (0, "ZYXEL-IES5000-MIB", "imaMgmtPvcVpi"),
    (0, "ZYXEL-IES5000-MIB", "imaMgmtPvcVci"),
    (0, "ZYXEL-IES5000-MIB", "imaMgmtPvcPvid"),
    (0, "ZYXEL-IES5000-MIB", "imaMgmtPvcManagedIp"),
    (0, "ZYXEL-IES5000-MIB", "imaMgmtPvcGatewayIp"),
)
if mibBuilder.loadTexts:
    imaMgmtPvcEntry.setStatus("current")
_ImaMgmtPvcGroupIndex_Type = Integer32
_ImaMgmtPvcGroupIndex_Object = MibTableColumn
imaMgmtPvcGroupIndex = _ImaMgmtPvcGroupIndex_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 3, 1, 1),
    _ImaMgmtPvcGroupIndex_Type()
)
imaMgmtPvcGroupIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaMgmtPvcGroupIndex.setStatus("current")


class _ImaMgmtPvcVpi_Type(Integer32):
    """Custom type imaMgmtPvcVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_ImaMgmtPvcVpi_Type.__name__ = "Integer32"
_ImaMgmtPvcVpi_Object = MibTableColumn
imaMgmtPvcVpi = _ImaMgmtPvcVpi_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 3, 1, 2),
    _ImaMgmtPvcVpi_Type()
)
imaMgmtPvcVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaMgmtPvcVpi.setStatus("current")


class _ImaMgmtPvcVci_Type(Integer32):
    """Custom type imaMgmtPvcVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_ImaMgmtPvcVci_Type.__name__ = "Integer32"
_ImaMgmtPvcVci_Object = MibTableColumn
imaMgmtPvcVci = _ImaMgmtPvcVci_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 3, 1, 3),
    _ImaMgmtPvcVci_Type()
)
imaMgmtPvcVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaMgmtPvcVci.setStatus("current")
_ImaMgmtPvcPvid_Type = VlanIndex
_ImaMgmtPvcPvid_Object = MibTableColumn
imaMgmtPvcPvid = _ImaMgmtPvcPvid_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 3, 1, 4),
    _ImaMgmtPvcPvid_Type()
)
imaMgmtPvcPvid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaMgmtPvcPvid.setStatus("current")


class _ImaMgmtPvcEncap_Type(Integer32):
    """Custom type imaMgmtPvcEncap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("llc", 1),
          ("vc", 2))
    )


_ImaMgmtPvcEncap_Type.__name__ = "Integer32"
_ImaMgmtPvcEncap_Object = MibTableColumn
imaMgmtPvcEncap = _ImaMgmtPvcEncap_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 3, 1, 5),
    _ImaMgmtPvcEncap_Type()
)
imaMgmtPvcEncap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imaMgmtPvcEncap.setStatus("current")


class _ImaMgmtPvcPriority_Type(Integer32):
    """Custom type imaMgmtPvcPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_ImaMgmtPvcPriority_Type.__name__ = "Integer32"
_ImaMgmtPvcPriority_Object = MibTableColumn
imaMgmtPvcPriority = _ImaMgmtPvcPriority_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 3, 1, 6),
    _ImaMgmtPvcPriority_Type()
)
imaMgmtPvcPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imaMgmtPvcPriority.setStatus("current")


class _ImaMgmtPvcProfile_Type(DisplayString):
    """Custom type imaMgmtPvcProfile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_ImaMgmtPvcProfile_Type.__name__ = "DisplayString"
_ImaMgmtPvcProfile_Object = MibTableColumn
imaMgmtPvcProfile = _ImaMgmtPvcProfile_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 3, 1, 7),
    _ImaMgmtPvcProfile_Type()
)
imaMgmtPvcProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imaMgmtPvcProfile.setStatus("current")
_ImaMgmtPvcRowStatus_Type = RowStatus
_ImaMgmtPvcRowStatus_Object = MibTableColumn
imaMgmtPvcRowStatus = _ImaMgmtPvcRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 3, 1, 8),
    _ImaMgmtPvcRowStatus_Type()
)
imaMgmtPvcRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    imaMgmtPvcRowStatus.setStatus("current")
_ImaMgmtPvcManagedIp_Type = IpAddress
_ImaMgmtPvcManagedIp_Object = MibTableColumn
imaMgmtPvcManagedIp = _ImaMgmtPvcManagedIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 3, 1, 9),
    _ImaMgmtPvcManagedIp_Type()
)
imaMgmtPvcManagedIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaMgmtPvcManagedIp.setStatus("current")
_ImaMgmtPvcGatewayIp_Type = IpAddress
_ImaMgmtPvcGatewayIp_Object = MibTableColumn
imaMgmtPvcGatewayIp = _ImaMgmtPvcGatewayIp_Object(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 17, 3, 1, 10),
    _ImaMgmtPvcGatewayIp_Type()
)
imaMgmtPvcGatewayIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaMgmtPvcGatewayIp.setStatus("current")
_Ies5005_ObjectIdentity = ObjectIdentity
ies5005 = _Ies5005_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 7)
)
_Ies6000_ObjectIdentity = ObjectIdentity
ies6000 = _Ies6000_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 8)
)

# Managed Objects groups


# Notification objects

dslLineEnable = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 2, 1)
)
dslLineEnable.setObjects(
    ("IF-MIB", "ifIndex")
)
if mibBuilder.loadTexts:
    dslLineEnable.setStatus(
        "current"
    )

dslLineDisable = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 2, 2)
)
dslLineDisable.setObjects(
    ("IF-MIB", "ifIndex")
)
if mibBuilder.loadTexts:
    dslLineDisable.setStatus(
        "current"
    )

dslLineBelowPlannedRate = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 2, 3)
)
dslLineBelowPlannedRate.setObjects(
    ("IF-MIB", "ifIndex")
)
if mibBuilder.loadTexts:
    dslLineBelowPlannedRate.setStatus(
        "current"
    )

dslLineLdmStart = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 2, 4)
)
dslLineLdmStart.setObjects(
    ("IF-MIB", "ifIndex")
)
if mibBuilder.loadTexts:
    dslLineLdmStart.setStatus(
        "current"
    )

dslLineLdmDone = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 2, 5)
)
dslLineLdmDone.setObjects(
    ("IF-MIB", "ifIndex")
)
if mibBuilder.loadTexts:
    dslLineLdmDone.setStatus(
        "current"
    )

dslLinePowerDownL2 = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 2, 6)
)
dslLinePowerDownL2.setObjects(
    ("IF-MIB", "ifIndex")
)
if mibBuilder.loadTexts:
    dslLinePowerDownL2.setStatus(
        "current"
    )

dslLinePowerDownL0 = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 2, 7)
)
dslLinePowerDownL0.setObjects(
    ("IF-MIB", "ifIndex")
)
if mibBuilder.loadTexts:
    dslLinePowerDownL0.setStatus(
        "current"
    )

dslLineFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 2, 8)
)
dslLineFailure.setObjects(
    ("IF-MIB", "ifIndex")
)
if mibBuilder.loadTexts:
    dslLineFailure.setStatus(
        "current"
    )

dslLineEnterTest = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 2, 9)
)
dslLineEnterTest.setObjects(
    ("IF-MIB", "ifIndex")
)
if mibBuilder.loadTexts:
    dslLineEnterTest.setStatus(
        "current"
    )

dslLineExitTest = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 2, 10)
)
dslLineExitTest.setObjects(
    ("IF-MIB", "ifIndex")
)
if mibBuilder.loadTexts:
    dslLineExitTest.setStatus(
        "current"
    )

dslLineVdslRateChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 2, 12)
)
dslLineVdslRateChange.setObjects(
    ("VDSL-LINE-MIB", "vdslChanCurrTxRate")
)
if mibBuilder.loadTexts:
    dslLineVdslRateChange.setStatus(
        "current"
    )

dslLoopGuard = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 2, 13)
)
dslLoopGuard.setObjects(
    ("IF-MIB", "ifIndex")
)
if mibBuilder.loadTexts:
    dslLoopGuard.setStatus(
        "current"
    )

dslMacAntiSpoof = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 2, 14)
)
dslMacAntiSpoof.setObjects(
      *(("ZYXEL-IES5000-MIB", "dslMacAntiSpoofOrig"),
        ("ZYXEL-IES5000-MIB", "dslMacAntiSpoofMac"),
        ("ZYXEL-IES5000-MIB", "chassisId"))
)
if mibBuilder.loadTexts:
    dslMacAntiSpoof.setStatus(
        "current"
    )

dslLineVturInfoReady = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 2, 15)
)
dslLineVturInfoReady.setObjects(
    ("IF-MIB", "ifIndex")
)
if mibBuilder.loadTexts:
    dslLineVturInfoReady.setStatus(
        "current"
    )

dslLineVturLpr = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 2, 16)
)
dslLineVturLpr.setObjects(
    ("IF-MIB", "ifIndex")
)
if mibBuilder.loadTexts:
    dslLineVturLpr.setStatus(
        "current"
    )

eqpt48VPowerFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 1)
)
eqpt48VPowerFailure.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "eqpt48VPowerIndex"))
)
if mibBuilder.loadTexts:
    eqpt48VPowerFailure.setStatus(
        "current"
    )

eqpt48VPowerNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 2)
)
eqpt48VPowerNormal.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "eqpt48VPowerIndex"))
)
if mibBuilder.loadTexts:
    eqpt48VPowerNormal.setStatus(
        "current"
    )

eqptVoltageError = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 3)
)
eqptVoltageError.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "slotId"),
        ("ZYXEL-IES5000-MIB", "voltageIndex"),
        ("ZYXEL-IES5000-MIB", "voltageCurValue"),
        ("ZYXEL-IES5000-MIB", "voltageLowThresh"),
        ("ZYXEL-IES5000-MIB", "voltageHighThresh"))
)
if mibBuilder.loadTexts:
    eqptVoltageError.setStatus(
        "current"
    )

eqptVoltageNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 4)
)
eqptVoltageNormal.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "slotId"),
        ("ZYXEL-IES5000-MIB", "voltageIndex"))
)
if mibBuilder.loadTexts:
    eqptVoltageNormal.setStatus(
        "current"
    )

eqptTempError = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 5)
)
eqptTempError.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "slotId"),
        ("ZYXEL-IES5000-MIB", "temperatureIndex"),
        ("ZYXEL-IES5000-MIB", "temperatureCurValue"),
        ("ZYXEL-IES5000-MIB", "temperatureHighThresh"),
        ("ZYXEL-IES5000-MIB", "temperatureLowThresh"))
)
if mibBuilder.loadTexts:
    eqptTempError.setStatus(
        "current"
    )

eqptTempNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 6)
)
eqptTempNormal.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "slotId"),
        ("ZYXEL-IES5000-MIB", "temperatureIndex"))
)
if mibBuilder.loadTexts:
    eqptTempNormal.setStatus(
        "current"
    )

eqptFanError = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 7)
)
eqptFanError.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "fanRpmIndex"),
        ("ZYXEL-IES5000-MIB", "fanRpmCurValue"),
        ("ZYXEL-IES5000-MIB", "fanRpmLowThresh"),
        ("ZYXEL-IES5000-MIB", "fanRpmHighThresh"))
)
if mibBuilder.loadTexts:
    eqptFanError.setStatus(
        "current"
    )

eqptFanNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 8)
)
eqptFanNormal.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "fanRpmIndex"))
)
if mibBuilder.loadTexts:
    eqptFanNormal.setStatus(
        "current"
    )

eqptTempLowFanStop = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 9)
)
eqptTempLowFanStop.setObjects(
    ("ZYXEL-IES5000-MIB", "chassisId")
)
if mibBuilder.loadTexts:
    eqptTempLowFanStop.setStatus(
        "current"
    )

eqptHWMonitorFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 10)
)
eqptHWMonitorFailure.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "slotId"))
)
if mibBuilder.loadTexts:
    eqptHWMonitorFailure.setStatus(
        "current"
    )

eqptExternalAlarmInput = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 11)
)
eqptExternalAlarmInput.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "eqptAlarmInputIndex"),
        ("ZYXEL-IES5000-MIB", "externalAlarmName"))
)
if mibBuilder.loadTexts:
    eqptExternalAlarmInput.setStatus(
        "current"
    )

eqptTopologyChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 12)
)
eqptTopologyChange.setObjects(
    ("ZYXEL-IES5000-MIB", "chassisId")
)
if mibBuilder.loadTexts:
    eqptTopologyChange.setStatus(
        "current"
    )

eqptFWUploadOK = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 13)
)
eqptFWUploadOK.setObjects(
    ("ZYXEL-IES5000-MIB", "chassisId")
)
if mibBuilder.loadTexts:
    eqptFWUploadOK.setStatus(
        "current"
    )

eqptFWUploadFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 14)
)
eqptFWUploadFailure.setObjects(
    ("ZYXEL-IES5000-MIB", "chassisId")
)
if mibBuilder.loadTexts:
    eqptFWUploadFailure.setStatus(
        "current"
    )

eqptLTPlugIn = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 15)
)
eqptLTPlugIn.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "slotId"))
)
if mibBuilder.loadTexts:
    eqptLTPlugIn.setStatus(
        "current"
    )

eqptLTPullOut = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 16)
)
eqptLTPullOut.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "slotId"))
)
if mibBuilder.loadTexts:
    eqptLTPullOut.setStatus(
        "current"
    )

eqptLTActive = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 17)
)
eqptLTActive.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "slotId"))
)
if mibBuilder.loadTexts:
    eqptLTActive.setStatus(
        "current"
    )

eqptLTInactive = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 18)
)
eqptLTInactive.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "slotId"))
)
if mibBuilder.loadTexts:
    eqptLTInactive.setStatus(
        "current"
    )

eqptLTFWUploadOK = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 19)
)
eqptLTFWUploadOK.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "slotId"))
)
if mibBuilder.loadTexts:
    eqptLTFWUploadOK.setStatus(
        "current"
    )

eqptLTFWUploadFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 20)
)
eqptLTFWUploadFailure.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "slotId"))
)
if mibBuilder.loadTexts:
    eqptLTFWUploadFailure.setStatus(
        "current"
    )

eqptLTDslDeviceFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 21)
)
eqptLTDslDeviceFailure.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "slotId"),
        ("ZYXEL-IES5000-MIB", "eqptDslDeviceIndex"))
)
if mibBuilder.loadTexts:
    eqptLTDslDeviceFailure.setStatus(
        "current"
    )

eqptLTDslDeviceRedownload = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 22)
)
eqptLTDslDeviceRedownload.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "slotId"),
        ("ZYXEL-IES5000-MIB", "eqptDslDeviceIndex"))
)
if mibBuilder.loadTexts:
    eqptLTDslDeviceRedownload.setStatus(
        "current"
    )

eqptLTShdslDeviceRedownload = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 23)
)
eqptLTShdslDeviceRedownload.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "slotId"),
        ("ZYXEL-IES5000-MIB", "eqptDslDeviceIndex"),
        ("ZYXEL-IES5000-MIB", "eqptShdslSubDeviceIndex"))
)
if mibBuilder.loadTexts:
    eqptLTShdslDeviceRedownload.setStatus(
        "current"
    )

eqptLTEnable = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 24)
)
eqptLTEnable.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "slotId"))
)
if mibBuilder.loadTexts:
    eqptLTEnable.setStatus(
        "current"
    )

eqptLTDisable = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 25)
)
eqptLTDisable.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "slotId"))
)
if mibBuilder.loadTexts:
    eqptLTDisable.setStatus(
        "current"
    )

eqptLTReset = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 26)
)
eqptLTReset.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "slotId"),
        ("ZYXEL-IES5000-MIB", "eqptLTResetSource"))
)
if mibBuilder.loadTexts:
    eqptLTReset.setStatus(
        "current"
    )

eqptExternalAlarmInputRelease = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 27)
)
eqptExternalAlarmInputRelease.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "eqptAlarmInputIndex"),
        ("ZYXEL-IES5000-MIB", "externalAlarmName"))
)
if mibBuilder.loadTexts:
    eqptExternalAlarmInputRelease.setStatus(
        "current"
    )

eqptNTSwitchOK = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 28)
)
eqptNTSwitchOK.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "slotId"))
)
if mibBuilder.loadTexts:
    eqptNTSwitchOK.setStatus(
        "current"
    )

eqptCpuUtilizationHigh = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 29)
)
eqptCpuUtilizationHigh.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "slotId"),
        ("ZYXEL-IES5000-MIB", "cpuIndex"),
        ("ZYXEL-IES5000-MIB", "cpuCurValue"),
        ("ZYXEL-IES5000-MIB", "cpuHighThresh"))
)
if mibBuilder.loadTexts:
    eqptCpuUtilizationHigh.setStatus(
        "current"
    )

eqptCpuUtilizationNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 30)
)
eqptCpuUtilizationNormal.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "slotId"),
        ("ZYXEL-IES5000-MIB", "cpuIndex"))
)
if mibBuilder.loadTexts:
    eqptCpuUtilizationNormal.setStatus(
        "current"
    )

eqptPacketBufferUsageHigh = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 31)
)
eqptPacketBufferUsageHigh.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "slotId"),
        ("ZYXEL-IES5000-MIB", "packetBufferIndex"),
        ("ZYXEL-IES5000-MIB", "packetBufferCurValue"),
        ("ZYXEL-IES5000-MIB", "packetBufferHighThresh"))
)
if mibBuilder.loadTexts:
    eqptPacketBufferUsageHigh.setStatus(
        "current"
    )

eqptPacketBufferUsageNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 32)
)
eqptPacketBufferUsageNormal.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "slotId"),
        ("ZYXEL-IES5000-MIB", "packetBufferIndex"))
)
if mibBuilder.loadTexts:
    eqptPacketBufferUsageNormal.setStatus(
        "current"
    )

eqptMemoryUsageHigh = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 33)
)
eqptMemoryUsageHigh.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "slotId"),
        ("ZYXEL-IES5000-MIB", "memoryIndex"),
        ("ZYXEL-IES5000-MIB", "memoryCurValue"),
        ("ZYXEL-IES5000-MIB", "memoryHighThresh"))
)
if mibBuilder.loadTexts:
    eqptMemoryUsageHigh.setStatus(
        "current"
    )

eqptMemoryUsageNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 34)
)
eqptMemoryUsageNormal.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "slotId"),
        ("ZYXEL-IES5000-MIB", "memoryIndex"))
)
if mibBuilder.loadTexts:
    eqptMemoryUsageNormal.setStatus(
        "current"
    )

eqptDbInactive = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 35)
)
eqptDbInactive.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "slotId"))
)
if mibBuilder.loadTexts:
    eqptDbInactive.setStatus(
        "current"
    )

eqptDbNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 36)
)
eqptDbNormal.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "slotId"))
)
if mibBuilder.loadTexts:
    eqptDbNormal.setStatus(
        "current"
    )

eqptDbReset = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 37)
)
eqptDbReset.setObjects(
      *(("ZYXEL-IES5000-MIB", "chassisId"),
        ("ZYXEL-IES5000-MIB", "slotId"))
)
if mibBuilder.loadTexts:
    eqptDbReset.setStatus(
        "current"
    )

eqptSptPortStateChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 38)
)
eqptSptPortStateChange.setObjects(
      *(("ZYXEL-IES5000-MIB", "eqptSptMstiInstanceId"),
        ("IF-MIB", "ifIndex"),
        ("ZYXEL-IES5000-MIB", "eqptSptPortStateOrig"),
        ("ZYXEL-IES5000-MIB", "eqptSptPortStateNew"))
)
if mibBuilder.loadTexts:
    eqptSptPortStateChange.setStatus(
        "current"
    )

eqptSptPortRoleChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 3, 39)
)
eqptSptPortRoleChange.setObjects(
      *(("ZYXEL-IES5000-MIB", "eqptSptMstiInstanceId"),
        ("IF-MIB", "ifIndex"),
        ("ZYXEL-IES5000-MIB", "eqptSptPortRoleOrig"),
        ("ZYXEL-IES5000-MIB", "eqptSptPortRoleNew"))
)
if mibBuilder.loadTexts:
    eqptSptPortRoleChange.setStatus(
        "current"
    )

sysReboot = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 4, 1)
)
sysReboot.setObjects(
    ("ZYXEL-IES5000-MIB", "chassisId")
)
if mibBuilder.loadTexts:
    sysReboot.setStatus(
        "current"
    )

sysConfigChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 4, 2)
)
sysConfigChange.setObjects(
    ("ZYXEL-IES5000-MIB", "chassisId")
)
if mibBuilder.loadTexts:
    sysConfigChange.setStatus(
        "current"
    )

sysConfigUploadOK = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 4, 3)
)
sysConfigUploadOK.setObjects(
    ("ZYXEL-IES5000-MIB", "chassisId")
)
if mibBuilder.loadTexts:
    sysConfigUploadOK.setStatus(
        "current"
    )

sysConfigUploadFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 4, 4)
)
sysConfigUploadFailure.setObjects(
    ("ZYXEL-IES5000-MIB", "chassisId")
)
if mibBuilder.loadTexts:
    sysConfigUploadFailure.setStatus(
        "current"
    )

sysTimeSyncFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 4, 5)
)
sysTimeSyncFailure.setObjects(
    ("ZYXEL-IES5000-MIB", "chassisId")
)
if mibBuilder.loadTexts:
    sysTimeSyncFailure.setStatus(
        "current"
    )

sysAlarmCutoffEnable = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 4, 6)
)
sysAlarmCutoffEnable.setObjects(
    ("ZYXEL-IES5000-MIB", "chassisId")
)
if mibBuilder.loadTexts:
    sysAlarmCutoffEnable.setStatus(
        "current"
    )

sysAlarmClearEnable = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 4, 7)
)
sysAlarmClearEnable.setObjects(
    ("ZYXEL-IES5000-MIB", "chassisId")
)
if mibBuilder.loadTexts:
    sysAlarmClearEnable.setStatus(
        "current"
    )

sysLoginFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 4, 8)
)
sysLoginFailure.setObjects(
      *(("ZYXEL-IES5000-MIB", "sysUser"),
        ("ZYXEL-IES5000-MIB", "sysAccessPoint"),
        ("ZYXEL-IES5000-MIB", "sysAccessPointIndex"),
        ("ZYXEL-IES5000-MIB", "sysUserLoginIp"),
        ("ZYXEL-IES5000-MIB", "chassisId"))
)
if mibBuilder.loadTexts:
    sysLoginFailure.setStatus(
        "current"
    )

sysLogin = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 4, 9)
)
sysLogin.setObjects(
      *(("ZYXEL-IES5000-MIB", "sysUser"),
        ("ZYXEL-IES5000-MIB", "sysAccessPoint"),
        ("ZYXEL-IES5000-MIB", "sysAccessPointIndex"),
        ("ZYXEL-IES5000-MIB", "sysUserLoginIp"),
        ("ZYXEL-IES5000-MIB", "chassisId"))
)
if mibBuilder.loadTexts:
    sysLogin.setStatus(
        "current"
    )

sysUserAdded = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 4, 10)
)
sysUserAdded.setObjects(
      *(("ZYXEL-IES5000-MIB", "sysUser"),
        ("ZYXEL-IES5000-MIB", "chassisId"))
)
if mibBuilder.loadTexts:
    sysUserAdded.setStatus(
        "current"
    )

sysUserDeleted = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 4, 11)
)
sysUserDeleted.setObjects(
      *(("ZYXEL-IES5000-MIB", "sysUser"),
        ("ZYXEL-IES5000-MIB", "chassisId"))
)
if mibBuilder.loadTexts:
    sysUserDeleted.setStatus(
        "current"
    )

sysUserModified = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 4, 12)
)
sysUserModified.setObjects(
      *(("ZYXEL-IES5000-MIB", "sysUser"),
        ("ZYXEL-IES5000-MIB", "chassisId"))
)
if mibBuilder.loadTexts:
    sysUserModified.setStatus(
        "current"
    )

sysSvrSyncProfOK = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 4, 13)
)
sysSvrSyncProfOK.setObjects(
      *(("ZYXEL-IES5000-MIB", "sysProfSyncIpAddress"),
        ("ZYXEL-IES5000-MIB", "chassisId"))
)
if mibBuilder.loadTexts:
    sysSvrSyncProfOK.setStatus(
        "current"
    )

sysSvrSyncProfFail = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 4, 14)
)
sysSvrSyncProfFail.setObjects(
      *(("ZYXEL-IES5000-MIB", "sysProfSyncIpAddress"),
        ("ZYXEL-IES5000-MIB", "chassisId"))
)
if mibBuilder.loadTexts:
    sysSvrSyncProfFail.setStatus(
        "current"
    )

sysCliSyncProfOK = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 4, 15)
)
sysCliSyncProfOK.setObjects(
      *(("ZYXEL-IES5000-MIB", "sysProfSyncIpAddress"),
        ("ZYXEL-IES5000-MIB", "chassisId"))
)
if mibBuilder.loadTexts:
    sysCliSyncProfOK.setStatus(
        "current"
    )

sysCliSyncProfFail = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 4, 16)
)
sysCliSyncProfFail.setObjects(
      *(("ZYXEL-IES5000-MIB", "sysProfSyncIpAddress"),
        ("ZYXEL-IES5000-MIB", "chassisId"))
)
if mibBuilder.loadTexts:
    sysCliSyncProfFail.setStatus(
        "current"
    )

sysMacAntiSpoofing = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 4, 17)
)
sysMacAntiSpoofing.setObjects(
      *(("ZYXEL-IES5000-MIB", "sysMacAntiSpoofOrig"),
        ("ZYXEL-IES5000-MIB", "sysMacAntiSpoofNew"),
        ("ZYXEL-IES5000-MIB", "sysMacAntiSpoofMac"),
        ("ZYXEL-IES5000-MIB", "chassisId"))
)
if mibBuilder.loadTexts:
    sysMacAntiSpoofing.setStatus(
        "current"
    )

sysClusterMemberAdd = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 4, 18)
)
sysClusterMemberAdd.setObjects(
    ("ZYXEL-IES5000-MIB", "clusterMemberConfId")
)
if mibBuilder.loadTexts:
    sysClusterMemberAdd.setStatus(
        "current"
    )

sysClusterMemberDelete = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 4, 19)
)
sysClusterMemberDelete.setObjects(
    ("ZYXEL-IES5000-MIB", "clusterMemberConfId")
)
if mibBuilder.loadTexts:
    sysClusterMemberDelete.setStatus(
        "current"
    )

sysClusterMemberActive = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 4, 20)
)
sysClusterMemberActive.setObjects(
    ("ZYXEL-IES5000-MIB", "clusterMemberConfId")
)
if mibBuilder.loadTexts:
    sysClusterMemberActive.setStatus(
        "current"
    )

sysClusterMemberInactive = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 4, 21)
)
sysClusterMemberInactive.setObjects(
    ("ZYXEL-IES5000-MIB", "clusterMemberConfId")
)
if mibBuilder.loadTexts:
    sysClusterMemberInactive.setStatus(
        "current"
    )

sysLoginInet = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 4, 22)
)
sysLoginInet.setObjects(
      *(("ZYXEL-IES5000-MIB", "sysUser"),
        ("ZYXEL-IES5000-MIB", "sysAccessPoint"),
        ("ZYXEL-IES5000-MIB", "sysAccessPointIndex"),
        ("ZYXEL-IES5000-MIB", "sysUserLoginInetAddrType"),
        ("ZYXEL-IES5000-MIB", "sysUserLoginInetAddr"),
        ("ZYXEL-IES5000-MIB", "chassisId"))
)
if mibBuilder.loadTexts:
    sysLoginInet.setStatus(
        "current"
    )

sysLoginFailureInet = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 4, 23)
)
sysLoginFailureInet.setObjects(
      *(("ZYXEL-IES5000-MIB", "sysUser"),
        ("ZYXEL-IES5000-MIB", "sysAccessPoint"),
        ("ZYXEL-IES5000-MIB", "sysAccessPointIndex"),
        ("ZYXEL-IES5000-MIB", "sysUserLoginInetAddrType"),
        ("ZYXEL-IES5000-MIB", "sysUserLoginInetAddr"),
        ("ZYXEL-IES5000-MIB", "chassisId"))
)
if mibBuilder.loadTexts:
    sysLoginFailureInet.setStatus(
        "current"
    )

enetEnable = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 5, 1)
)
enetEnable.setObjects(
    ("IF-MIB", "ifIndex")
)
if mibBuilder.loadTexts:
    enetEnable.setStatus(
        "current"
    )

enetDisable = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 5, 2)
)
enetDisable.setObjects(
    ("IF-MIB", "ifIndex")
)
if mibBuilder.loadTexts:
    enetDisable.setStatus(
        "current"
    )

enetLoopGuard = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 5, 3)
)
enetLoopGuard.setObjects(
    ("IF-MIB", "ifIndex")
)
if mibBuilder.loadTexts:
    enetLoopGuard.setStatus(
        "current"
    )

enetSfpError = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 5, 4)
)
enetSfpError.setObjects(
    ("IF-MIB", "ifIndex")
)
if mibBuilder.loadTexts:
    enetSfpError.setStatus(
        "current"
    )

enetSfpNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 5, 5)
)
enetSfpNormal.setObjects(
    ("IF-MIB", "ifIndex")
)
if mibBuilder.loadTexts:
    enetSfpNormal.setStatus(
        "current"
    )

enetSfpTxEnable = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 5, 6)
)
enetSfpTxEnable.setObjects(
    ("IF-MIB", "ifIndex")
)
if mibBuilder.loadTexts:
    enetSfpTxEnable.setStatus(
        "current"
    )

enetSfpTxDisable = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 5, 7)
)
enetSfpTxDisable.setObjects(
    ("IF-MIB", "ifIndex")
)
if mibBuilder.loadTexts:
    enetSfpTxDisable.setStatus(
        "current"
    )

cfmCcmError = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 6, 1)
)
cfmCcmError.setObjects(
      *(("IEEE8021-CFM-MIB", "dot1agCfmMdMdLevel"),
        ("IEEE8021-CFM-MIB", "dot1agCfmVlanPrimaryVid"),
        ("IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"),
        ("ZYXEL-IES5000-MIB", "intfCfmCcmErrorCause"))
)
if mibBuilder.loadTexts:
    cfmCcmError.setStatus(
        "current"
    )

e1AlarmLinkLOS = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 7, 1)
)
e1AlarmLinkLOS.setObjects(
      *(("IF-MIB", "ifIndex"),
        ("ZYXEL-IES5000-MIB", "e1AlarmStatus"))
)
if mibBuilder.loadTexts:
    e1AlarmLinkLOS.setStatus(
        "current"
    )

e1AlarmPathLOF = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 7, 2)
)
e1AlarmPathLOF.setObjects(
      *(("IF-MIB", "ifIndex"),
        ("ZYXEL-IES5000-MIB", "e1AlarmStatus"))
)
if mibBuilder.loadTexts:
    e1AlarmPathLOF.setStatus(
        "current"
    )

e1AlarmPathAIS = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 7, 3)
)
e1AlarmPathAIS.setObjects(
      *(("IF-MIB", "ifIndex"),
        ("ZYXEL-IES5000-MIB", "e1AlarmStatus"))
)
if mibBuilder.loadTexts:
    e1AlarmPathAIS.setStatus(
        "current"
    )

e1AlarmPathRDI = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 7, 4)
)
e1AlarmPathRDI.setObjects(
      *(("IF-MIB", "ifIndex"),
        ("ZYXEL-IES5000-MIB", "e1AlarmStatus"))
)
if mibBuilder.loadTexts:
    e1AlarmPathRDI.setStatus(
        "current"
    )

e1AlarmPathOCASMF = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 7, 5)
)
e1AlarmPathOCASMF.setObjects(
      *(("IF-MIB", "ifIndex"),
        ("ZYXEL-IES5000-MIB", "e1AlarmStatus"))
)
if mibBuilder.loadTexts:
    e1AlarmPathOCASMF.setStatus(
        "current"
    )

e1AlarmPathOCRCMF = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 7, 6)
)
e1AlarmPathOCRCMF.setObjects(
      *(("IF-MIB", "ifIndex"),
        ("ZYXEL-IES5000-MIB", "e1AlarmStatus"))
)
if mibBuilder.loadTexts:
    e1AlarmPathOCRCMF.setStatus(
        "current"
    )

e1AlarmLinkSF = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 7, 7)
)
e1AlarmLinkSF.setObjects(
      *(("IF-MIB", "ifIndex"),
        ("ZYXEL-IES5000-MIB", "e1AlarmStatus"))
)
if mibBuilder.loadTexts:
    e1AlarmLinkSF.setStatus(
        "current"
    )

e1AlarmLinkSD = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 7, 8)
)
e1AlarmLinkSD.setObjects(
      *(("IF-MIB", "ifIndex"),
        ("ZYXEL-IES5000-MIB", "e1AlarmStatus"))
)
if mibBuilder.loadTexts:
    e1AlarmLinkSD.setStatus(
        "current"
    )

e1AlarmTCAQuarterES = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 7, 9)
)
e1AlarmTCAQuarterES.setObjects(
      *(("IF-MIB", "ifIndex"),
        ("ZYXEL-IES5000-MIB", "e1AlarmCurrentValue"),
        ("ZYXEL-IES5000-MIB", "e1AlarmThreshold"))
)
if mibBuilder.loadTexts:
    e1AlarmTCAQuarterES.setStatus(
        "current"
    )

e1AlarmTCAQuarterSES = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 7, 10)
)
e1AlarmTCAQuarterSES.setObjects(
      *(("IF-MIB", "ifIndex"),
        ("ZYXEL-IES5000-MIB", "e1AlarmCurrentValue"),
        ("ZYXEL-IES5000-MIB", "e1AlarmThreshold"))
)
if mibBuilder.loadTexts:
    e1AlarmTCAQuarterSES.setStatus(
        "current"
    )

e1AlarmTCAQuarterUAS = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 7, 11)
)
e1AlarmTCAQuarterUAS.setObjects(
      *(("IF-MIB", "ifIndex"),
        ("ZYXEL-IES5000-MIB", "e1AlarmCurrentValue"),
        ("ZYXEL-IES5000-MIB", "e1AlarmThreshold"))
)
if mibBuilder.loadTexts:
    e1AlarmTCAQuarterUAS.setStatus(
        "current"
    )

e1AlarmTCADayES = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 7, 12)
)
e1AlarmTCADayES.setObjects(
      *(("IF-MIB", "ifIndex"),
        ("ZYXEL-IES5000-MIB", "e1AlarmCurrentValue"),
        ("ZYXEL-IES5000-MIB", "e1AlarmThreshold"))
)
if mibBuilder.loadTexts:
    e1AlarmTCADayES.setStatus(
        "current"
    )

e1AlarmTCADaySES = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 7, 13)
)
e1AlarmTCADaySES.setObjects(
      *(("IF-MIB", "ifIndex"),
        ("ZYXEL-IES5000-MIB", "e1AlarmCurrentValue"),
        ("ZYXEL-IES5000-MIB", "e1AlarmThreshold"))
)
if mibBuilder.loadTexts:
    e1AlarmTCADaySES.setStatus(
        "current"
    )

e1AlarmTCADayUAS = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 7, 14)
)
e1AlarmTCADayUAS.setObjects(
      *(("IF-MIB", "ifIndex"),
        ("ZYXEL-IES5000-MIB", "e1AlarmCurrentValue"),
        ("ZYXEL-IES5000-MIB", "e1AlarmThreshold"))
)
if mibBuilder.loadTexts:
    e1AlarmTCADayUAS.setStatus(
        "current"
    )

vopTempError = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 1)
)
vopTempError.setObjects(
      *(("ZYXEL-IES5000-MIB", "voipIfIndex"),
        ("ZYXEL-IES5000-MIB", "vopTermPhoneState"))
)
if mibBuilder.loadTexts:
    vopTempError.setStatus(
        "current"
    )

vopTempNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 2)
)
vopTempNormal.setObjects(
      *(("ZYXEL-IES5000-MIB", "voipIfIndex"),
        ("ZYXEL-IES5000-MIB", "vopTermPhoneState"))
)
if mibBuilder.loadTexts:
    vopTempNormal.setStatus(
        "current"
    )

vopDCFail = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 3)
)
vopDCFail.setObjects(
      *(("ZYXEL-IES5000-MIB", "voipIfIndex"),
        ("ZYXEL-IES5000-MIB", "vopTermPhoneState"))
)
if mibBuilder.loadTexts:
    vopDCFail.setStatus(
        "current"
    )

vopDCNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 4)
)
vopDCNormal.setObjects(
      *(("ZYXEL-IES5000-MIB", "voipIfIndex"),
        ("ZYXEL-IES5000-MIB", "vopTermPhoneState"))
)
if mibBuilder.loadTexts:
    vopDCNormal.setStatus(
        "current"
    )

vopACFail = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 5)
)
vopACFail.setObjects(
      *(("ZYXEL-IES5000-MIB", "voipIfIndex"),
        ("ZYXEL-IES5000-MIB", "vopTermPhoneState"))
)
if mibBuilder.loadTexts:
    vopACFail.setStatus(
        "current"
    )

vopACNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 6)
)
vopACNormal.setObjects(
      *(("ZYXEL-IES5000-MIB", "voipIfIndex"),
        ("ZYXEL-IES5000-MIB", "vopTermPhoneState"))
)
if mibBuilder.loadTexts:
    vopACNormal.setStatus(
        "current"
    )

vopRingTimer = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 7)
)
vopRingTimer.setObjects(
      *(("ZYXEL-IES5000-MIB", "slotId"),
        ("ZYXEL-IES5000-MIB", "vopRingTimerSegment"),
        ("ZYXEL-IES5000-MIB", "vopRingTimerId"))
)
if mibBuilder.loadTexts:
    vopRingTimer.setStatus(
        "current"
    )

vopRingResource = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 8)
)
vopRingResource.setObjects(
    ("ZYXEL-IES5000-MIB", "voipIfIndex")
)
if mibBuilder.loadTexts:
    vopRingResource.setStatus(
        "current"
    )

vopRingOverHead = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 9)
)
vopRingOverHead.setObjects(
    ("ZYXEL-IES5000-MIB", "voipIfIndex")
)
if mibBuilder.loadTexts:
    vopRingOverHead.setStatus(
        "current"
    )

vopNoFreeDSPChannel = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 10)
)
vopNoFreeDSPChannel.setObjects(
      *(("ZYXEL-IES5000-MIB", "voipIfIndex"),
        ("ZYXEL-IES5000-MIB", "vopDscCodecType"))
)
if mibBuilder.loadTexts:
    vopNoFreeDSPChannel.setStatus(
        "current"
    )

vopMCMissing = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 11)
)
vopMCMissing.setObjects(
      *(("ZYXEL-IES5000-MIB", "slotId"),
        ("ZYXEL-IES5000-MIB", "vopMcMediaId"))
)
if mibBuilder.loadTexts:
    vopMCMissing.setStatus(
        "current"
    )

vopSCMissing = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 12)
)
vopSCMissing.setObjects(
    ("ZYXEL-IES5000-MIB", "slotId")
)
if mibBuilder.loadTexts:
    vopSCMissing.setStatus(
        "current"
    )

vopTermNameDup = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 13)
)
vopTermNameDup.setObjects(
    ("ZYXEL-IES5000-MIB", "voipIfIndex")
)
if mibBuilder.loadTexts:
    vopTermNameDup.setStatus(
        "current"
    )

vopNoProtection = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 14)
)
vopNoProtection.setObjects(
    ("ZYXEL-IES5000-MIB", "slotId")
)
if mibBuilder.loadTexts:
    vopNoProtection.setStatus(
        "current"
    )

vopProtectionSwitch = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 15)
)
vopProtectionSwitch.setObjects(
    ("ZYXEL-IES5000-MIB", "slotId")
)
if mibBuilder.loadTexts:
    vopProtectionSwitch.setStatus(
        "current"
    )

vopDropCall = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 16)
)
vopDropCall.setObjects(
      *(("ZYXEL-IES5000-MIB", "slotId"),
        ("ZYXEL-IES5000-MIB", "vopMcMediaId"),
        ("ZYXEL-IES5000-MIB", "vopMcPort"),
        ("ZYXEL-IES5000-MIB", "vopDropCallType"))
)
if mibBuilder.loadTexts:
    vopDropCall.setStatus(
        "current"
    )

vopBatteryFail = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 17)
)
vopBatteryFail.setObjects(
      *(("ZYXEL-IES5000-MIB", "slotId"),
        ("ZYXEL-IES5000-MIB", "vopBatteryNum"))
)
if mibBuilder.loadTexts:
    vopBatteryFail.setStatus(
        "current"
    )

vopBatteryNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 18)
)
vopBatteryNormal.setObjects(
      *(("ZYXEL-IES5000-MIB", "slotId"),
        ("ZYXEL-IES5000-MIB", "vopBatteryNum"))
)
if mibBuilder.loadTexts:
    vopBatteryNormal.setStatus(
        "current"
    )

vopClockFail = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 19)
)
vopClockFail.setObjects(
    ("ZYXEL-IES5000-MIB", "vopDeviceId")
)
if mibBuilder.loadTexts:
    vopClockFail.setStatus(
        "current"
    )

vopClockNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 20)
)
vopClockNormal.setObjects(
    ("ZYXEL-IES5000-MIB", "vopDeviceId")
)
if mibBuilder.loadTexts:
    vopClockNormal.setStatus(
        "current"
    )

vopRingerFail = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 21)
)
vopRingerFail.setObjects(
      *(("ZYXEL-IES5000-MIB", "slotId"),
        ("ZYXEL-IES5000-MIB", "vopRingerShortCount"))
)
if mibBuilder.loadTexts:
    vopRingerFail.setStatus(
        "current"
    )

vopRingerNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 22)
)
vopRingerNormal.setObjects(
      *(("ZYXEL-IES5000-MIB", "slotId"),
        ("ZYXEL-IES5000-MIB", "vopRingerShortCount"))
)
if mibBuilder.loadTexts:
    vopRingerNormal.setStatus(
        "current"
    )

vopMgcMissing = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 23)
)
vopMgcMissing.setObjects(
      *(("ZYXEL-IES5000-MIB", "slotId"),
        ("ZYXEL-IES5000-MIB", "vopMgcIP"))
)
if mibBuilder.loadTexts:
    vopMgcMissing.setStatus(
        "current"
    )

vopMgcNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 24)
)
vopMgcNormal.setObjects(
      *(("ZYXEL-IES5000-MIB", "slotId"),
        ("ZYXEL-IES5000-MIB", "vopMgcIP"))
)
if mibBuilder.loadTexts:
    vopMgcNormal.setStatus(
        "current"
    )

vopMgEnable = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 25)
)
vopMgEnable.setObjects(
    ("ZYXEL-IES5000-MIB", "slotId")
)
if mibBuilder.loadTexts:
    vopMgEnable.setStatus(
        "current"
    )

vopMgDisable = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 26)
)
vopMgDisable.setObjects(
    ("ZYXEL-IES5000-MIB", "slotId")
)
if mibBuilder.loadTexts:
    vopMgDisable.setStatus(
        "current"
    )

vopPortMissing = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 27)
)
vopPortMissing.setObjects(
      *(("ZYXEL-IES5000-MIB", "slotId"),
        ("ZYXEL-IES5000-MIB", "vopMcMediaId"),
        ("ZYXEL-IES5000-MIB", "vopMcPort"))
)
if mibBuilder.loadTexts:
    vopPortMissing.setStatus(
        "current"
    )

vopPortNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 28)
)
vopPortNormal.setObjects(
      *(("ZYXEL-IES5000-MIB", "slotId"),
        ("ZYXEL-IES5000-MIB", "vopMcMediaId"),
        ("ZYXEL-IES5000-MIB", "vopMcPort"))
)
if mibBuilder.loadTexts:
    vopPortNormal.setStatus(
        "current"
    )

vopMcNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 29)
)
vopMcNormal.setObjects(
      *(("ZYXEL-IES5000-MIB", "slotId"),
        ("ZYXEL-IES5000-MIB", "vopMcMediaId"))
)
if mibBuilder.loadTexts:
    vopMcNormal.setStatus(
        "current"
    )

vopScNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 30)
)
vopScNormal.setObjects(
    ("ZYXEL-IES5000-MIB", "slotId")
)
if mibBuilder.loadTexts:
    vopScNormal.setStatus(
        "current"
    )

vopScBulkSyncReady = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 31)
)
vopScBulkSyncReady.setObjects(
    ("ZYXEL-IES5000-MIB", "slotId")
)
if mibBuilder.loadTexts:
    vopScBulkSyncReady.setStatus(
        "current"
    )

vopProtectionReady = NotificationType(
    (1, 3, 6, 1, 4, 1, 890, 1, 5, 13, 5, 12, 8, 32)
)
vopProtectionReady.setObjects(
    ("ZYXEL-IES5000-MIB", "slotId")
)
if mibBuilder.loadTexts:
    vopProtectionReady.setStatus(
        "current"
    )


# Notifications groups


# Agent capabilities


# Module compliance


# Export all MIB objects to the MIB builder

mibBuilder.exportSymbols(
    "ZYXEL-IES5000-MIB",
    **{"Xdsl2ConfigRtxMode": Xdsl2ConfigRtxMode,
       "Xdsl2StatusActualRaMode": Xdsl2StatusActualRaMode,
       "Xdsl2StatusRtxMode": Xdsl2StatusRtxMode,
       "Unsigned64": Unsigned64,
       "zyxel": zyxel,
       "products": products,
       "accessSwitch": accessSwitch,
       "iesSeries": iesSeries,
       "ies5000": ies5000,
       "acl": acl,
       "dhcp": dhcp,
       "dhcpRelayEnable": dhcpRelayEnable,
       "dhcpRelay82Table": dhcpRelay82Table,
       "dhcpRelay82Entry": dhcpRelay82Entry,
       "dhcpRelay82PrimaryServer": dhcpRelay82PrimaryServer,
       "dhcpRelay82SecondaryServer": dhcpRelay82SecondaryServer,
       "dhcpRelay82ActiveServer": dhcpRelay82ActiveServer,
       "dhcpRelay82Enable": dhcpRelay82Enable,
       "dhcpRelay82Info": dhcpRelay82Info,
       "dhcpRelay82RelayMode": dhcpRelay82RelayMode,
       "dhcpRelay82RowStatus": dhcpRelay82RowStatus,
       "dhcpRelay82Suboption2Enable": dhcpRelay82Suboption2Enable,
       "dhcpRelay82Suboption2Info": dhcpRelay82Suboption2Info,
       "dhcpRelay82Option82Mode": dhcpRelay82Option82Mode,
       "dhcpRelayInfo": dhcpRelayInfo,
       "maxNumOfDhcpRelay82Conf": maxNumOfDhcpRelay82Conf,
       "dhcpRelay82Delimiter": dhcpRelay82Delimiter,
       "dhcpRelayOption82CheckEnable": dhcpRelayOption82CheckEnable,
       "dot1x": dot1x,
       "dot1xEnable": dot1xEnable,
       "radiusServerTable": radiusServerTable,
       "radiusServerEntry": radiusServerEntry,
       "radiusServerIndex": radiusServerIndex,
       "radiusServerIp": radiusServerIp,
       "radiusServerPort": radiusServerPort,
       "radiusServerSecret": radiusServerSecret,
       "dot1xPortTable": dot1xPortTable,
       "dot1xPortEntry": dot1xPortEntry,
       "dot1xPortEnable": dot1xPortEnable,
       "dot1xPortControl": dot1xPortControl,
       "dot1xPortReAuthEnable": dot1xPortReAuthEnable,
       "dot1xPortReAuthPeriod": dot1xPortReAuthPeriod,
       "dot1xBatchSet": dot1xBatchSet,
       "dot1xTarget": dot1xTarget,
       "dot1xOps": dot1xOps,
       "dot1xReAuthPeriodForBatchSet": dot1xReAuthPeriodForBatchSet,
       "macfilter": macfilter,
       "macFilterPortTable": macFilterPortTable,
       "macFilterPortEntry": macFilterPortEntry,
       "macFilterPortEnable": macFilterPortEnable,
       "macFilterPortMacCount": macFilterPortMacCount,
       "macFilterPortFilterMode": macFilterPortFilterMode,
       "maxNumOfMacFiltersInSystem": maxNumOfMacFiltersInSystem,
       "maxNumOfMacFiltersPerPort": maxNumOfMacFiltersPerPort,
       "currNumOfMacFiltersInSystem": currNumOfMacFiltersInSystem,
       "macFilterTable": macFilterTable,
       "macFilterEntry": macFilterEntry,
       "macFilterAddr": macFilterAddr,
       "macFilterRowStatus": macFilterRowStatus,
       "macfilterBatchSet": macfilterBatchSet,
       "macfilterTarget": macfilterTarget,
       "macfilterOps": macfilterOps,
       "macFilterMacCountForBatchSet": macFilterMacCountForBatchSet,
       "ouiFilterTable": ouiFilterTable,
       "ouiFilterEntry": ouiFilterEntry,
       "ouiFilterAddr": ouiFilterAddr,
       "ouiFilterRowStatus": ouiFilterRowStatus,
       "maxNumOfOuiFiltersPerPort": maxNumOfOuiFiltersPerPort,
       "macFilterStatusTable": macFilterStatusTable,
       "macFilterStatusEntry": macFilterStatusEntry,
       "macFilterStatusId": macFilterStatusId,
       "macFilterStatusAddr": macFilterStatusAddr,
       "macFilterPerPVCTable": macFilterPerPVCTable,
       "macFilterPerPVCEntry": macFilterPerPVCEntry,
       "macFilterPerPVCVpi": macFilterPerPVCVpi,
       "macFilterPerPVCVci": macFilterPerPVCVci,
       "macFilterPerPVCEnable": macFilterPerPVCEnable,
       "macFilterPerPVCMode": macFilterPerPVCMode,
       "macFilterPerPVCMacCount": macFilterPerPVCMacCount,
       "macFilterPerPVCMACTable": macFilterPerPVCMACTable,
       "macFilterPerPVCMACEntry": macFilterPerPVCMACEntry,
       "macFilterPerPVCMACVpi": macFilterPerPVCMACVpi,
       "macFilterPerPVCMACVci": macFilterPerPVCMACVci,
       "macFilterPerPVCMACAddr": macFilterPerPVCMACAddr,
       "macFilterPerPVCMACRowStatus": macFilterPerPVCMACRowStatus,
       "pktfilter": pktfilter,
       "pktFilterPortTable": pktFilterPortTable,
       "pktFilterPortEntry": pktFilterPortEntry,
       "pktFilter": pktFilter,
       "pktfilterBatchSet": pktfilterBatchSet,
       "pktfilterTarget": pktfilterTarget,
       "pktfilterOps": pktfilterOps,
       "pktfilterForBatchSet": pktfilterForBatchSet,
       "pktFilterPerPVCTable": pktFilterPerPVCTable,
       "pktFilterPerPVCEntry": pktFilterPerPVCEntry,
       "pktFilterPerPVCVpi": pktFilterPerPVCVpi,
       "pktFilterPerPVCVci": pktFilterPerPVCVci,
       "pktFilterPerPVCpktFilter": pktFilterPerPVCpktFilter,
       "dhcpSnoop": dhcpSnoop,
       "dhcpSnoopPortTable": dhcpSnoopPortTable,
       "dhcpSnoopPortEntry": dhcpSnoopPortEntry,
       "dhcpSnoopEnable": dhcpSnoopEnable,
       "dhcpSnoopTarget": dhcpSnoopTarget,
       "dhcpSnoopOps": dhcpSnoopOps,
       "dhcpStaticTable": dhcpStaticTable,
       "dhcpStaticEntry": dhcpStaticEntry,
       "dhcpStaticIpAddr": dhcpStaticIpAddr,
       "dhcpStaticRowStatus": dhcpStaticRowStatus,
       "maxNumOfDhcpStaticIp": maxNumOfDhcpStaticIp,
       "dhcpSnoopLan2lanTable": dhcpSnoopLan2lanTable,
       "dhcpSnoopLan2lanEntry": dhcpSnoopLan2lanEntry,
       "dhcpSnoopLan2lanEnable": dhcpSnoopLan2lanEnable,
       "aclRule": aclRule,
       "aclSetTable": aclSetTable,
       "aclSetEntry": aclSetEntry,
       "aclSetVpi": aclSetVpi,
       "aclSetVci": aclSetVci,
       "aclSetProfileName": aclSetProfileName,
       "aclSetRowStatus": aclSetRowStatus,
       "aclNoMatchTable": aclNoMatchTable,
       "aclNoMatchEntry": aclNoMatchEntry,
       "aclNoMatchAction": aclNoMatchAction,
       "pppoeAgent": pppoeAgent,
       "pppoeAgentTable": pppoeAgentTable,
       "pppoeAgentEntry": pppoeAgentEntry,
       "pppoeAgentEnable": pppoeAgentEnable,
       "pppoeAgentInfo": pppoeAgentInfo,
       "pppoeAgentRowStatus": pppoeAgentRowStatus,
       "pppoeAgentOptionMode": pppoeAgentOptionMode,
       "maxNumOfPppoeDhcpRelay82Conf": maxNumOfPppoeDhcpRelay82Conf,
       "pppoeAgentDelimiter": pppoeAgentDelimiter,
       "dsBcast": dsBcast,
       "dsBcastTable": dsBcastTable,
       "dsBcastEntry": dsBcastEntry,
       "dsBcastRowStatus": dsBcastRowStatus,
       "usBcast": usBcast,
       "usBcastCtrlEnable": usBcastCtrlEnable,
       "usBcastCtrlRate": usBcastCtrlRate,
       "dscpMapping": dscpMapping,
       "dscpMappingTable": dscpMappingTable,
       "dscpMappingEntry": dscpMappingEntry,
       "dscpMappingSrcCodePoint": dscpMappingSrcCodePoint,
       "dscpMappingMapPriority": dscpMappingMapPriority,
       "dscpPortTable": dscpPortTable,
       "dscpPortEntry": dscpPortEntry,
       "dscpPortEnable": dscpPortEnable,
       "macAntiSpoofEnable": macAntiSpoofEnable,
       "subnetvlan": subnetvlan,
       "subnetvlanStatus": subnetvlanStatus,
       "subnetvlanTable": subnetvlanTable,
       "subnetvlanEntry": subnetvlanEntry,
       "subnetvlanIp": subnetvlanIp,
       "subnetvlanMask": subnetvlanMask,
       "subnetvlanVid": subnetvlanVid,
       "subnetvlanPriority": subnetvlanPriority,
       "subnetvlanName": subnetvlanName,
       "subnetvlanRowStatus": subnetvlanRowStatus,
       "subnetvlanInetTable": subnetvlanInetTable,
       "subnetvlanInetEntry": subnetvlanInetEntry,
       "subnetvlanInetAddrType": subnetvlanInetAddrType,
       "subnetvlanInetAddr": subnetvlanInetAddr,
       "subnetvlanInetMask": subnetvlanInetMask,
       "subnetvlanInetVid": subnetvlanInetVid,
       "subnetvlanInetPriority": subnetvlanInetPriority,
       "subnetvlanInetName": subnetvlanInetName,
       "subnetvlanInetRowStatus": subnetvlanInetRowStatus,
       "loopguard": loopguard,
       "loopguardTable": loopguardTable,
       "loopguardEntry": loopguardEntry,
       "loopguardStatus": loopguardStatus,
       "loopguardMode": loopguardMode,
       "loopguardRecoverTime": loopguardRecoverTime,
       "usStorm": usStorm,
       "usStormTable": usStormTable,
       "usStormEntry": usStormEntry,
       "usStormBcastThresh": usStormBcastThresh,
       "usStormMcastThresh": usStormMcastThresh,
       "usStormUcastThresh": usStormUcastThresh,
       "arpInspection": arpInspection,
       "arpInspectionTable": arpInspectionTable,
       "arpInspectionEntry": arpInspectionEntry,
       "arpInspectionEnable": arpInspectionEnable,
       "macFF": macFF,
       "macFFStaticTable": macFFStaticTable,
       "macFFStaticEntry": macFFStaticEntry,
       "macFFStaticIndex": macFFStaticIndex,
       "macFFStaticSrcIP": macFFStaticSrcIP,
       "macFFStaticMask": macFFStaticMask,
       "macFFStaticArasIP": macFFStaticArasIP,
       "macFFStaticVid": macFFStaticVid,
       "macFFStaticRowStatus": macFFStaticRowStatus,
       "macFFDynamicTable": macFFDynamicTable,
       "macFFDynamicEntry": macFFDynamicEntry,
       "macFFDynamicIndex": macFFDynamicIndex,
       "macFFDynamicSrcIP": macFFDynamicSrcIP,
       "macFFDynamicMask": macFFDynamicMask,
       "macFFDynamicArasIP": macFFDynamicArasIP,
       "macFFDynamicVid": macFFDynamicVid,
       "macFFVlanTable": macFFVlanTable,
       "macFFVlanEntry": macFFVlanEntry,
       "macFFVlanVid": macFFVlanVid,
       "macFFVlanRowStatus": macFFVlanRowStatus,
       "macFFFlush": macFFFlush,
       "dhcpv6": dhcpv6,
       "dhcpv6RelayTable": dhcpv6RelayTable,
       "dhcpv6RelayEntry": dhcpv6RelayEntry,
       "dhcpv6RelayLdraState": dhcpv6RelayLdraState,
       "dhcpv6RelayRowStatus": dhcpv6RelayRowStatus,
       "dhcpv6RelayOptionTable": dhcpv6RelayOptionTable,
       "dhcpv6RelayOptionEntry": dhcpv6RelayOptionEntry,
       "dhcpv6RelayOptionId": dhcpv6RelayOptionId,
       "dhcpv6RelayOptionState": dhcpv6RelayOptionState,
       "dhcpv6RelayOptionFormat": dhcpv6RelayOptionFormat,
       "alarmconf": alarmconf,
       "alarmOps": alarmOps,
       "alarmConfTable": alarmConfTable,
       "alarmConfEntry": alarmConfEntry,
       "alarmConfId": alarmConfId,
       "alarmConfFacility": alarmConfFacility,
       "alarmConfTarget": alarmConfTarget,
       "alarmConfSeverity": alarmConfSeverity,
       "alarmConfClearable": alarmConfClearable,
       "alarmCurrTable": alarmCurrTable,
       "alarmCurrEntry": alarmCurrEntry,
       "alarmCurrIndex": alarmCurrIndex,
       "alarmCurrOccurTime": alarmCurrOccurTime,
       "alarmCurrTrapOid": alarmCurrTrapOid,
       "alarmCurrParam1": alarmCurrParam1,
       "alarmCurrParam2": alarmCurrParam2,
       "alarmCurrParam3": alarmCurrParam3,
       "alarmCurrParam4": alarmCurrParam4,
       "alarmCurrParam5": alarmCurrParam5,
       "alarmCurrParam6": alarmCurrParam6,
       "alarmCurrParam7": alarmCurrParam7,
       "alarmCurrParam8": alarmCurrParam8,
       "alarmCurrTimeDescr": alarmCurrTimeDescr,
       "alarmCurrSeverity": alarmCurrSeverity,
       "alarmCurrDescr": alarmCurrDescr,
       "alarmSeverityPortTable": alarmSeverityPortTable,
       "alarmSeverityPortEntry": alarmSeverityPortEntry,
       "severityThresh": severityThresh,
       "externalAlarmTable": externalAlarmTable,
       "externalAlarmEntry": externalAlarmEntry,
       "externalAlarmIndex": externalAlarmIndex,
       "externalAlarmName": externalAlarmName,
       "alarmTarget": alarmTarget,
       "alarmHisTable": alarmHisTable,
       "alarmHisEntry": alarmHisEntry,
       "alarmHisIndex": alarmHisIndex,
       "alarmHisOccurTime": alarmHisOccurTime,
       "alarmHisTrapOid": alarmHisTrapOid,
       "alarmHisParam1": alarmHisParam1,
       "alarmHisParam2": alarmHisParam2,
       "alarmHisParam3": alarmHisParam3,
       "alarmHisParam4": alarmHisParam4,
       "alarmHisParam5": alarmHisParam5,
       "alarmHisParam6": alarmHisParam6,
       "alarmHisParam7": alarmHisParam7,
       "alarmHisParam8": alarmHisParam8,
       "alarmHisTimeDescr": alarmHisTimeDescr,
       "alarmHisSeverity": alarmHisSeverity,
       "alarmHisDescr": alarmHisDescr,
       "alarmHisFilter": alarmHisFilter,
       "alarmHisFilterByIfIndex": alarmHisFilterByIfIndex,
       "config": config,
       "configOps": configOps,
       "diagnostic": diagnostic,
       "loopback": loopback,
       "loopbackTarget": loopbackTarget,
       "loopbackOps": loopbackOps,
       "loopbackVpi": loopbackVpi,
       "loopbackVci": loopbackVci,
       "loopbackStatus": loopbackStatus,
       "ldm": ldm,
       "ldmTarget": ldmTarget,
       "ldmOps": ldmOps,
       "ldmStatus": ldmStatus,
       "ldmAtucLoopAttenuation": ldmAtucLoopAttenuation,
       "ldmAtucSignalAttenuation": ldmAtucSignalAttenuation,
       "ldmAtucSignalMargin": ldmAtucSignalMargin,
       "ldmAtucAggregateTxPower": ldmAtucAggregateTxPower,
       "ldmAtucAttainableBitRate": ldmAtucAttainableBitRate,
       "ldmAturLoopAttenuation": ldmAturLoopAttenuation,
       "ldmAturSignalAttenuation": ldmAturSignalAttenuation,
       "ldmAturSignalMargin": ldmAturSignalMargin,
       "ldmAturAggregateTxPower": ldmAturAggregateTxPower,
       "ldmAturAttainableBitRate": ldmAturAttainableBitRate,
       "ldmAtucNumOfSubcarriersPerPort": ldmAtucNumOfSubcarriersPerPort,
       "ldmAturNumOfSubcarriersPerPort": ldmAturNumOfSubcarriersPerPort,
       "ldmAtucHlinScale": ldmAtucHlinScale,
       "ldmAtucHlinReal1": ldmAtucHlinReal1,
       "ldmAtucHlinReal2": ldmAtucHlinReal2,
       "ldmAtucHlinImage1": ldmAtucHlinImage1,
       "ldmAtucHlinImage2": ldmAtucHlinImage2,
       "ldmAtucHlog1": ldmAtucHlog1,
       "ldmAtucHlog2": ldmAtucHlog2,
       "ldmAtucQln1": ldmAtucQln1,
       "ldmAtucQln2": ldmAtucQln2,
       "ldmAtucSnr1": ldmAtucSnr1,
       "ldmAtucSnr2": ldmAtucSnr2,
       "ldmAturHlinScale": ldmAturHlinScale,
       "ldmAturHlinReal": ldmAturHlinReal,
       "ldmAturHlinImage": ldmAturHlinImage,
       "ldmAturHlog": ldmAturHlog,
       "ldmAturQln": ldmAturQln,
       "ldmAturSnr": ldmAturSnr,
       "selt": selt,
       "seltTarget": seltTarget,
       "seltOps": seltOps,
       "seltStatus": seltStatus,
       "seltCableType": seltCableType,
       "seltLoopEstimateLengthFt": seltLoopEstimateLengthFt,
       "seltLoopEstimateLengthMeter": seltLoopEstimateLengthMeter,
       "mlt": mlt,
       "mltTarget": mltTarget,
       "mltOps": mltOps,
       "mltOption": mltOption,
       "mltForce": mltForce,
       "mltResult": mltResult,
       "mltVacTip": mltVacTip,
       "mltVacRing": mltVacRing,
       "mltVacDiff": mltVacDiff,
       "mltVdcTip": mltVdcTip,
       "mltVdcRing": mltVdcRing,
       "mltVdcDiff": mltVdcDiff,
       "mltRLoop": mltRLoop,
       "mltRtg": mltRtg,
       "mltRrg": mltRrg,
       "mltRtr": mltRtr,
       "mltCtg": mltCtg,
       "mltCrg": mltCrg,
       "mltCtr": mltCtr,
       "mltRen": mltRen,
       "mltVRing": mltVRing,
       "mltVMetering": mltVMetering,
       "mltDialToneDetected": mltDialToneDetected,
       "mltDetectedDtmfCount": mltDetectedDtmfCount,
       "mltDialToneDelay": mltDialToneDelay,
       "mltReceiverState": mltReceiverState,
       "mltDetectedDtmfDigit": mltDetectedDtmfDigit,
       "mltErrorMsg": mltErrorMsg,
       "mltRelayTable": mltRelayTable,
       "mltRelayEntry": mltRelayEntry,
       "mltRelaySet": mltRelaySet,
       "mltRelayTimeout": mltRelayTimeout,
       "mltRelayForce": mltRelayForce,
       "mltType": mltType,
       "mltCount": mltCount,
       "mltAbort": mltAbort,
       "oamloopback": oamloopback,
       "oamloopbackTarget": oamloopbackTarget,
       "oamloopbackOps": oamloopbackOps,
       "oamloopbackPacketNumber": oamloopbackPacketNumber,
       "oamloopbackPacketSize": oamloopbackPacketSize,
       "oamloopbackResult": oamloopbackResult,
       "oamloopbackRecvCnt": oamloopbackRecvCnt,
       "oamloopbackElapseTime": oamloopbackElapseTime,
       "oamloopbackErrorStatus": oamloopbackErrorStatus,
       "vdslldm": vdslldm,
       "vdslldmTarget": vdslldmTarget,
       "vdslldmOps": vdslldmOps,
       "vdslldmStatus": vdslldmStatus,
       "ldmVtuNeLoopAttenuationUS0": ldmVtuNeLoopAttenuationUS0,
       "ldmVtuNeLoopAttenuationUS1": ldmVtuNeLoopAttenuationUS1,
       "ldmVtuNeLoopAttenuationUS2": ldmVtuNeLoopAttenuationUS2,
       "ldmVtuNeLoopAttenuationUS3": ldmVtuNeLoopAttenuationUS3,
       "ldmVtuNeSignalAttenuationUS0": ldmVtuNeSignalAttenuationUS0,
       "ldmVtuNeSignalAttenuationUS1": ldmVtuNeSignalAttenuationUS1,
       "ldmVtuNeSignalAttenuationUS2": ldmVtuNeSignalAttenuationUS2,
       "ldmVtuNeSignalAttenuationUS3": ldmVtuNeSignalAttenuationUS3,
       "ldmVtuNeSignalMarginUS0": ldmVtuNeSignalMarginUS0,
       "ldmVtuNeSignalMarginUS1": ldmVtuNeSignalMarginUS1,
       "ldmVtuNeSignalMarginUS2": ldmVtuNeSignalMarginUS2,
       "ldmVtuNeSignalMarginUS3": ldmVtuNeSignalMarginUS3,
       "ldmVtuNeAggregateTxPower": ldmVtuNeAggregateTxPower,
       "ldmVtuNeAttainableBitRate": ldmVtuNeAttainableBitRate,
       "ldmVtuFeLoopAttenuationDS1": ldmVtuFeLoopAttenuationDS1,
       "ldmVtuFeLoopAttenuationDS2": ldmVtuFeLoopAttenuationDS2,
       "ldmVtuFeLoopAttenuationDS3": ldmVtuFeLoopAttenuationDS3,
       "ldmVtuFeSignalAttenuationDS1": ldmVtuFeSignalAttenuationDS1,
       "ldmVtuFeSignalAttenuationDS2": ldmVtuFeSignalAttenuationDS2,
       "ldmVtuFeSignalAttenuationDS3": ldmVtuFeSignalAttenuationDS3,
       "ldmVtuFeSignalMarginDS1": ldmVtuFeSignalMarginDS1,
       "ldmVtuFeSignalMarginDS2": ldmVtuFeSignalMarginDS2,
       "ldmVtuFeSignalMarginDS3": ldmVtuFeSignalMarginDS3,
       "ldmVtuFeAggregateTxPower": ldmVtuFeAggregateTxPower,
       "ldmVtuFeAttainableBitRate": ldmVtuFeAttainableBitRate,
       "ldmVtuNeHlinScale": ldmVtuNeHlinScale,
       "ldmVtuNeHlinReal": ldmVtuNeHlinReal,
       "ldmVtuNeHlinImage": ldmVtuNeHlinImage,
       "ldmVtuNeHlog": ldmVtuNeHlog,
       "ldmVtuNeQln": ldmVtuNeQln,
       "ldmVtuNeSnr": ldmVtuNeSnr,
       "ldmVtuFeHlinScale": ldmVtuFeHlinScale,
       "ldmVtuFeHlinReal": ldmVtuFeHlinReal,
       "ldmVtuFeHlinImage": ldmVtuFeHlinImage,
       "ldmVtuFeHlog": ldmVtuFeHlog,
       "ldmVtuFeQln": ldmVtuFeQln,
       "ldmVtuFeSnr": ldmVtuFeSnr,
       "ldmVtuNeHlinGroupSize": ldmVtuNeHlinGroupSize,
       "ldmVtuFeHlinGroupSize": ldmVtuFeHlinGroupSize,
       "ldmVtuNeHlogGroupSize": ldmVtuNeHlogGroupSize,
       "ldmVtuFeHlogGroupSize": ldmVtuFeHlogGroupSize,
       "ldmVtuNeQlnGroupSize": ldmVtuNeQlnGroupSize,
       "ldmVtuFeQlnGroupSize": ldmVtuFeQlnGroupSize,
       "ldmVtuNeSnrGroupSize": ldmVtuNeSnrGroupSize,
       "ldmVtuFeSnrGroupSize": ldmVtuFeSnrGroupSize,
       "imaOamF5Loopback": imaOamF5Loopback,
       "imaOamF5LoopbackTargetGroupIndex": imaOamF5LoopbackTargetGroupIndex,
       "imaOamF5LoopbackTargetVpi": imaOamF5LoopbackTargetVpi,
       "imaOamF5LoopbackTargetVci": imaOamF5LoopbackTargetVci,
       "imaOamF5LoopbackType": imaOamF5LoopbackType,
       "imaOamF5LoopbackOps": imaOamF5LoopbackOps,
       "imaOamF5LoopbackSegmentId": imaOamF5LoopbackSegmentId,
       "imaOamF5LoopbackStatus": imaOamF5LoopbackStatus,
       "xdsl2ExtStatus": xdsl2ExtStatus,
       "xdsl2ExtSCStatusTable": xdsl2ExtSCStatusTable,
       "xdsl2ExtSCStatusEntry": xdsl2ExtSCStatusEntry,
       "xdsl2SCStatusActAtp": xdsl2SCStatusActAtp,
       "xdsl2ExtSCStatusBandTable": xdsl2ExtSCStatusBandTable,
       "xdsl2ExtSCStatusBandEntry": xdsl2ExtSCStatusBandEntry,
       "xdsl2SCStatusBandSnrMargin": xdsl2SCStatusBandSnrMargin,
       "ipconf": ipconf,
       "staticRoute": staticRoute,
       "maxNumOfStaticRoutes": maxNumOfStaticRoutes,
       "staticRouteTable": staticRouteTable,
       "staticRouteEntry": staticRouteEntry,
       "staticRouteName": staticRouteName,
       "staticRouteDest": staticRouteDest,
       "staticRouteMask": staticRouteMask,
       "staticRouteGateway": staticRouteGateway,
       "staticRouteMetric": staticRouteMetric,
       "staticRouteRowStatus": staticRouteRowStatus,
       "staticIp": staticIp,
       "staticIpInbandIp": staticIpInbandIp,
       "staticIpInbandMask": staticIpInbandMask,
       "staticIpInbandVlan": staticIpInbandVlan,
       "staticIpOutbandIp": staticIpOutbandIp,
       "staticIpOutbandMask": staticIpOutbandMask,
       "staticIpGatewayIP": staticIpGatewayIP,
       "staticIpOps": staticIpOps,
       "lcm": lcm,
       "numOfChassis": numOfChassis,
       "chassisTable": chassisTable,
       "chassisEntry": chassisEntry,
       "chassisId": chassisId,
       "chassisFrameNumber": chassisFrameNumber,
       "chassisSerialNumber": chassisSerialNumber,
       "chassisNumber": chassisNumber,
       "chassisStatus": chassisStatus,
       "slotTable": slotTable,
       "slotEntry": slotEntry,
       "slotId": slotId,
       "slotModuleType": slotModuleType,
       "slotModuleDescr": slotModuleDescr,
       "slotModuleFWVersion": slotModuleFWVersion,
       "slotModuleDriverVersion": slotModuleDriverVersion,
       "slotModuleModemCodeVersion": slotModuleModemCodeVersion,
       "slotModuleStatus": slotModuleStatus,
       "slotModuleAlarmStatus": slotModuleAlarmStatus,
       "slotModuleSerialNumber": slotModuleSerialNumber,
       "slotModuleHWVersion": slotModuleHWVersion,
       "slotModuleUpTime": slotModuleUpTime,
       "slotModuleMacAddress": slotModuleMacAddress,
       "slotModuleMacAddress2": slotModuleMacAddress2,
       "mscPortTable": mscPortTable,
       "mscPortEntry": mscPortEntry,
       "mscPortId": mscPortId,
       "mscPortType": mscPortType,
       "multicast": multicast,
       "igmpEnable": igmpEnable,
       "staticMulticast": staticMulticast,
       "maxNumberOfMcastGroups": maxNumberOfMcastGroups,
       "mcastGroupTable": mcastGroupTable,
       "mcastGroupEntry": mcastGroupEntry,
       "mcastGroupIp": mcastGroupIp,
       "mcastGroupFixedPorts": mcastGroupFixedPorts,
       "mcastGroupForbiddenPorts": mcastGroupForbiddenPorts,
       "mcastGroupRowStatus": mcastGroupRowStatus,
       "maxNumberOfMacMcastGroups": maxNumberOfMacMcastGroups,
       "macMcastGroupTable": macMcastGroupTable,
       "macMcastGroupEntry": macMcastGroupEntry,
       "macMcastGroupMac": macMcastGroupMac,
       "macMcastGroupFixedPorts": macMcastGroupFixedPorts,
       "macMcastGroupRowStatus": macMcastGroupRowStatus,
       "mcastInetGroupTable": mcastInetGroupTable,
       "mcastInetGroupEntry": mcastInetGroupEntry,
       "mcastGroupInetAddrType": mcastGroupInetAddrType,
       "mcastGroupInetAddr": mcastGroupInetAddr,
       "mcastGroupInetFixedPorts": mcastGroupInetFixedPorts,
       "mcastGroupInetForbiddenPorts": mcastGroupInetForbiddenPorts,
       "mcastGroupInetRowStatus": mcastGroupInetRowStatus,
       "igmpFilter": igmpFilter,
       "maxNumOfIgmpFilters": maxNumOfIgmpFilters,
       "igmpFilterTable": igmpFilterTable,
       "igmpFilterEntry": igmpFilterEntry,
       "igmpFilterName": igmpFilterName,
       "igmpFilterIndex": igmpFilterIndex,
       "igmpFilterStartIp": igmpFilterStartIp,
       "igmpFilterEndIp": igmpFilterEndIp,
       "igmpFilterRowStatus": igmpFilterRowStatus,
       "igmpFilterInetAddrType": igmpFilterInetAddrType,
       "igmpFilterInetAddrStart": igmpFilterInetAddrStart,
       "igmpFilterInetAddrEnd": igmpFilterInetAddrEnd,
       "igmpFilterPortTable": igmpFilterPortTable,
       "igmpFilterPortEntry": igmpFilterPortEntry,
       "igmpFilterPortFilterName": igmpFilterPortFilterName,
       "igmpfilterBatchSet": igmpfilterBatchSet,
       "igmpfilterTarget": igmpfilterTarget,
       "igmpfilterOps": igmpfilterOps,
       "igmpfilterForBatchSet": igmpfilterForBatchSet,
       "mcastBandwidth": mcastBandwidth,
       "mcastDefaultBandwidth": mcastDefaultBandwidth,
       "maxNumOfMcastBw": maxNumOfMcastBw,
       "mcastBwTable": mcastBwTable,
       "mcastBwEntry": mcastBwEntry,
       "mcastBwIndex": mcastBwIndex,
       "mcastBwStartIp": mcastBwStartIp,
       "mcastBwEndIp": mcastBwEndIp,
       "mcastBwBandwidth": mcastBwBandwidth,
       "mcastBwRowStatus": mcastBwRowStatus,
       "mcastBwPortTable": mcastBwPortTable,
       "mcastBwPortEntry": mcastBwPortEntry,
       "mcastBwPortEnable": mcastBwPortEnable,
       "mcastBwPortBandwidth": mcastBwPortBandwidth,
       "mcastBwInetTable": mcastBwInetTable,
       "mcastBwInetEntry": mcastBwInetEntry,
       "mcastBwInetIndex": mcastBwInetIndex,
       "mcastBwInetAddrType": mcastBwInetAddrType,
       "mcastBwInetAddrStart": mcastBwInetAddrStart,
       "mcastBwInetAddrEnd": mcastBwInetAddrEnd,
       "mcastBwInetBandwidth": mcastBwInetBandwidth,
       "mcastBwInetRowStatus": mcastBwInetRowStatus,
       "igmpCount": igmpCount,
       "igmpCountPortTable": igmpCountPortTable,
       "igmpCountPortEntry": igmpCountPortEntry,
       "igmpCountPortEnable": igmpCountPortEnable,
       "igmpCountPortLimit": igmpCountPortLimit,
       "igmpMessageCountPortTable": igmpMessageCountPortTable,
       "igmpMessageCountPortEntry": igmpMessageCountPortEntry,
       "igmpMessageCountPortEnable": igmpMessageCountPortEnable,
       "igmpMessageCountPortLimit": igmpMessageCountPortLimit,
       "mvlan": mvlan,
       "maxNumOfMvlan": maxNumOfMvlan,
       "mvlanTable": mvlanTable,
       "mvlanEntry": mvlanEntry,
       "mvlanIndex": mvlanIndex,
       "mvlanName": mvlanName,
       "mvlanEgressPorts": mvlanEgressPorts,
       "mvlanRowStatus": mvlanRowStatus,
       "mvlan8021pPriority": mvlan8021pPriority,
       "mvlanTranslateTable": mvlanTranslateTable,
       "mvlanTranslateEntry": mvlanTranslateEntry,
       "mvlanTranslateIndex": mvlanTranslateIndex,
       "mvlanTranslateStartIp": mvlanTranslateStartIp,
       "mvlanTranslateEndIp": mvlanTranslateEndIp,
       "mvlanTranslateInetAddrType": mvlanTranslateInetAddrType,
       "mvlanTranslateInetAddrStart": mvlanTranslateInetAddrStart,
       "mvlanTranslateInetAddrEnd": mvlanTranslateInetAddrEnd,
       "mvlanExtTable": mvlanExtTable,
       "mvlanExtEntry": mvlanExtEntry,
       "mvlanExtReg": mvlanExtReg,
       "mvlanExtCvid": mvlanExtCvid,
       "mvlanNonmemberPort": mvlanNonmemberPort,
       "queryVid": queryVid,
       "maxNumOfQryVid": maxNumOfQryVid,
       "qryVidConfTable": qryVidConfTable,
       "qryVidConfEntry": qryVidConfEntry,
       "qryVid": qryVid,
       "qryVidRowStatus": qryVidRowStatus,
       "qryVidStatusTable": qryVidStatusTable,
       "qryVidStatusEntry": qryVidStatusEntry,
       "qryVidType": qryVidType,
       "igmpMode": igmpMode,
       "igmpVersion": igmpVersion,
       "igmpFastLeaveEnable": igmpFastLeaveEnable,
       "igmpFastLeaveTimer": igmpFastLeaveTimer,
       "unknownMulticast": unknownMulticast,
       "ipv6PassThrough": ipv6PassThrough,
       "reservedGroup": reservedGroup,
       "igmpHistoryTable": igmpHistoryTable,
       "igmpHistoryEntry": igmpHistoryEntry,
       "igmphistoryenable": igmphistoryenable,
       "port": port,
       "subrPortTable": subrPortTable,
       "subrPortEntry": subrPortEntry,
       "subrPortName": subrPortName,
       "subrPortTel": subrPortTel,
       "subrPortMdf": subrPortMdf,
       "adslPort": adslPort,
       "adslLineConfTable": adslLineConfTable,
       "adslLineConfEntry": adslLineConfEntry,
       "adslLineConfAdslMode": adslLineConfAdslMode,
       "adslLineConfAnnexL": adslLineConfAnnexL,
       "adslLineConfAnnexM": adslLineConfAnnexM,
       "adslLineConfAnnexI": adslLineConfAnnexI,
       "adslLineConfOptionMask": adslLineConfOptionMask,
       "adslLineConfPowerMgmt": adslLineConfPowerMgmt,
       "adslLineConfPowerMode": adslLineConfPowerMode,
       "adslLineConfAturMaxTxPower": adslLineConfAturMaxTxPower,
       "adslLineConfAtucMaxTxPower": adslLineConfAtucMaxTxPower,
       "adslLineConfMaxRxPower": adslLineConfMaxRxPower,
       "adslLineConfAturCarrierMask": adslLineConfAturCarrierMask,
       "adslLineConfAtucCarrierMask0": adslLineConfAtucCarrierMask0,
       "adslLineConfAtucCarrierMask1": adslLineConfAtucCarrierMask1,
       "adslLineConfAturInp": adslLineConfAturInp,
       "adslLineConfAtucInp": adslLineConfAtucInp,
       "bitLoad": bitLoad,
       "bitLoadTable": bitLoadTable,
       "bitLoadEntry": bitLoadEntry,
       "bitLoadBits": bitLoadBits,
       "bitLoadAtucNumOfCarriers": bitLoadAtucNumOfCarriers,
       "bitLoadAturNumOfCarriers": bitLoadAturNumOfCarriers,
       "adslPortBatchSet": adslPortBatchSet,
       "adslPortTarget": adslPortTarget,
       "adslPortOps": adslPortOps,
       "adslModeForBatchSet": adslModeForBatchSet,
       "adslLineProfileForBatchSet": adslLineProfileForBatchSet,
       "adslAlarmProfileForBatchSet": adslAlarmProfileForBatchSet,
       "adslOptionMaskForBatchSet": adslOptionMaskForBatchSet,
       "adslAturMaxTxPowerForBatchSet": adslAturMaxTxPowerForBatchSet,
       "adslAtucMaxTxPowerForBatchSet": adslAtucMaxTxPowerForBatchSet,
       "adslMaxRxPowerForBatchSet": adslMaxRxPowerForBatchSet,
       "adslAturCarrierMaskForBatchSet": adslAturCarrierMaskForBatchSet,
       "adslAtucCarrierMask0ForBatchSet": adslAtucCarrierMask0ForBatchSet,
       "adslAtucCarrierMask1ForBatchSet": adslAtucCarrierMask1ForBatchSet,
       "adslAturInpForBatchSet": adslAturInpForBatchSet,
       "adslAtucInpForBatchSet": adslAtucInpForBatchSet,
       "adslLineStatusTable": adslLineStatusTable,
       "adslLineStatusEntry": adslLineStatusEntry,
       "adslLineStatusMode": adslLineStatusMode,
       "adslLineStatusUpTime": adslLineStatusUpTime,
       "adslLineStatusAturInp": adslLineStatusAturInp,
       "adslLineStatusAtucInp": adslLineStatusAtucInp,
       "powerMgmtParamTable": powerMgmtParamTable,
       "powerMgmtParamEntry": powerMgmtParamEntry,
       "powerMgmtL0Time": powerMgmtL0Time,
       "powerMgmtL2Time": powerMgmtL2Time,
       "powerMgmtL2Atpr": powerMgmtL2Atpr,
       "powerMgmtL2Atprt": powerMgmtL2Atprt,
       "powerMgmtL2MinRate": powerMgmtL2MinRate,
       "powerMgmtL2MaxRate": powerMgmtL2MaxRate,
       "powerMgmtL2ThreshRate": powerMgmtL2ThreshRate,
       "powerMgmtPSDTable": powerMgmtPSDTable,
       "powerMgmtPSDEntry": powerMgmtPSDEntry,
       "powerMgmtAtucMaxPSD": powerMgmtAtucMaxPSD,
       "powerMgmtAturMaxPSD": powerMgmtAturMaxPSD,
       "shdslPort": shdslPort,
       "shdslLineConfTable": shdslLineConfTable,
       "shdslLineConfEntry": shdslLineConfEntry,
       "shdslLineConfShdslMode": shdslLineConfShdslMode,
       "shdslLineConfPmms": shdslLineConfPmms,
       "shdslLineConfPboMode": shdslLineConfPboMode,
       "shdslLineConfPboValue": shdslLineConfPboValue,
       "shdslLineConfModulation": shdslLineConfModulation,
       "shdslLineConfTCMode": shdslLineConfTCMode,
       "shdslPortBatchSet": shdslPortBatchSet,
       "shdslPortTarget": shdslPortTarget,
       "shdslPortOps": shdslPortOps,
       "shdslModeForBatchSet": shdslModeForBatchSet,
       "shdslLineProfileForBatchSet": shdslLineProfileForBatchSet,
       "shdslAlarmProfileForBatchSet": shdslAlarmProfileForBatchSet,
       "shdslPboValueForBatchSet": shdslPboValueForBatchSet,
       "shdslLineStatusTable": shdslLineStatusTable,
       "shdslLineStatusEntry": shdslLineStatusEntry,
       "shdslLineStatusWirePair": shdslLineStatusWirePair,
       "pvc": pvc,
       "maxNumOfPvcs": maxNumOfPvcs,
       "pvcTable": pvcTable,
       "pvcEntry": pvcEntry,
       "pvcVpi": pvcVpi,
       "pvcVci": pvcVci,
       "pvcPvid": pvcPvid,
       "pvcEncap": pvcEncap,
       "pvcPriority": pvcPriority,
       "pvcProfile": pvcProfile,
       "pvcRowStatus": pvcRowStatus,
       "pvcMvlanEnable": pvcMvlanEnable,
       "pvcAcName": pvcAcName,
       "pvcServiceName": pvcServiceName,
       "pvcHelloTime": pvcHelloTime,
       "pvcVlanTable": pvcVlanTable,
       "pvcVlanEntry": pvcVlanEntry,
       "pvcVlanReg": pvcVlanReg,
       "pvcVlanTag": pvcVlanTag,
       "pvcVlanRowStatus": pvcVlanRowStatus,
       "pvcUsRateLimitTable": pvcUsRateLimitTable,
       "pvcUsRateLimitEntry": pvcUsRateLimitEntry,
       "pvcUsRateLimitEnable": pvcUsRateLimitEnable,
       "pvcUsRateLimit": pvcUsRateLimit,
       "ppvc": ppvc,
       "maxNumOfPriorityPvcs": maxNumOfPriorityPvcs,
       "ppvcTable": ppvcTable,
       "ppvcEntry": ppvcEntry,
       "ppvcVpi": ppvcVpi,
       "ppvcVci": ppvcVci,
       "ppvcPvid": ppvcPvid,
       "ppvcEncap": ppvcEncap,
       "ppvcPriority": ppvcPriority,
       "ppvcRowStatus": ppvcRowStatus,
       "ppvcVlanTable": ppvcVlanTable,
       "ppvcVlanEntry": ppvcVlanEntry,
       "ppvcVlanReg": ppvcVlanReg,
       "ppvcVlanTag": ppvcVlanTag,
       "ppvcVlanRowStatus": ppvcVlanRowStatus,
       "ppvcMemberTable": ppvcMemberTable,
       "ppvcMemberEntry": ppvcMemberEntry,
       "ppvcMemberVpi": ppvcMemberVpi,
       "ppvcMemberVci": ppvcMemberVci,
       "ppvcMemberPriority": ppvcMemberPriority,
       "ppvcMemberProfile": ppvcMemberProfile,
       "ppvcMemberRowStatus": ppvcMemberRowStatus,
       "portOperation": portOperation,
       "portTarget": portTarget,
       "portOps": portOps,
       "pvcStats": pvcStats,
       "pvcStatsTable": pvcStatsTable,
       "pvcStatsEntry": pvcStatsEntry,
       "pvcStatsTxRate": pvcStatsTxRate,
       "pvcStatsRxRate": pvcStatsRxRate,
       "pvcStatsTxCells": pvcStatsTxCells,
       "pvcStatsRxCells": pvcStatsRxCells,
       "pvcStatsCrcErrors": pvcStatsCrcErrors,
       "pvcStatsTxPackets": pvcStatsTxPackets,
       "pvcStatsRxPackets": pvcStatsRxPackets,
       "pvcStatsTxUnicast": pvcStatsTxUnicast,
       "pvcStatsRxUnicast": pvcStatsRxUnicast,
       "pvcStatsTxMulticast": pvcStatsTxMulticast,
       "pvcStatsRxMulticast": pvcStatsRxMulticast,
       "pvcStatsTxBroadcast": pvcStatsTxBroadcast,
       "pvcStatsRxBroadcast": pvcStatsRxBroadcast,
       "pvcStatsTxDiscard": pvcStatsTxDiscard,
       "pvcStatsRxDiscard": pvcStatsRxDiscard,
       "pvcCounterIfIndex": pvcCounterIfIndex,
       "pvcCounterVpi": pvcCounterVpi,
       "pvcCounterVci": pvcCounterVci,
       "pvcCounterReset": pvcCounterReset,
       "paepvc": paepvc,
       "paepvcTable": paepvcTable,
       "paepvcEntry": paepvcEntry,
       "paepvcVpi": paepvcVpi,
       "paepvcVci": paepvcVci,
       "paepvcPvid": paepvcPvid,
       "paepvcEncap": paepvcEncap,
       "paepvcPriority": paepvcPriority,
       "paepvcProfile": paepvcProfile,
       "paepvcAcName": paepvcAcName,
       "paepvcServiceName": paepvcServiceName,
       "paepvcHelloTime": paepvcHelloTime,
       "paepvcRowStatus": paepvcRowStatus,
       "tlspvc": tlspvc,
       "tlspvcTable": tlspvcTable,
       "tlspvcEntry": tlspvcEntry,
       "tlspvcVpi": tlspvcVpi,
       "tlspvcVci": tlspvcVci,
       "tlspvcSvid": tlspvcSvid,
       "tlspvcEncap": tlspvcEncap,
       "tlspvcSpriority": tlspvcSpriority,
       "tlspvcProfile": tlspvcProfile,
       "tlspvcRowStatus": tlspvcRowStatus,
       "vdslPort": vdslPort,
       "vdslLineConfTable": vdslLineConfTable,
       "vdslLineConfEntry": vdslLineConfEntry,
       "vdslLineConfUpbo": vdslLineConfUpbo,
       "vdslLineConfVdslProfile": vdslLineConfVdslProfile,
       "vdslLineConfFrequencyPlan": vdslLineConfFrequencyPlan,
       "vdslLineConfRfiBand": vdslLineConfRfiBand,
       "vdslLineConfIpqosProfile": vdslLineConfIpqosProfile,
       "vdslLineConfVturInp": vdslLineConfVturInp,
       "vdslLineConfVtucInp": vdslLineConfVtucInp,
       "vdslLineConfOptionMask": vdslLineConfOptionMask,
       "vdslLineConfUpboForceLength": vdslLineConfUpboForceLength,
       "vdslLineConfPsdShape": vdslLineConfPsdShape,
       "vdslLineConfDpbo": vdslLineConfDpbo,
       "vdslLineConfDpboParamEsel": vdslLineConfDpboParamEsel,
       "vdslLineConfDpboParamEscma": vdslLineConfDpboParamEscma,
       "vdslLineConfDpboParamEscmb": vdslLineConfDpboParamEscmb,
       "vdslLineConfDpboParamEscmc": vdslLineConfDpboParamEscmc,
       "vdslLineConfDpboParamMus": vdslLineConfDpboParamMus,
       "vdslLineConfDpboParamFmin": vdslLineConfDpboParamFmin,
       "vdslLineConfDpboParamFmax": vdslLineConfDpboParamFmax,
       "vdslLineConfDpboParamPsdId": vdslLineConfDpboParamPsdId,
       "vdslLineConfCompatible": vdslLineConfCompatible,
       "vdslLineConfPowerMode": vdslLineConfPowerMode,
       "vdslLineConfVturMaxTxPower": vdslLineConfVturMaxTxPower,
       "vdslLineConfVtucMaxTxPower": vdslLineConfVtucMaxTxPower,
       "vdslLineConfMaxRxPower": vdslLineConfMaxRxPower,
       "vdslLineConfPMask": vdslLineConfPMask,
       "vdslLineConfAturCarrierMask": vdslLineConfAturCarrierMask,
       "vdslLineConfAtucCarrierMask0": vdslLineConfAtucCarrierMask0,
       "vdslLineConfAtucCarrierMask1": vdslLineConfAtucCarrierMask1,
       "vdslLineConfSnrModeDs": vdslLineConfSnrModeDs,
       "vdslLineConfSnrModeUs": vdslLineConfSnrModeUs,
       "vdslLineConfTxRefVnDs": vdslLineConfTxRefVnDs,
       "vdslLineConfTxRefVnUs": vdslLineConfTxRefVnUs,
       "vdslLineConfTpstcTypeAdsl": vdslLineConfTpstcTypeAdsl,
       "vdslLineConfTpstcTypeVdsl": vdslLineConfTpstcTypeVdsl,
       "vdslLineConfVturInmEq": vdslLineConfVturInmEq,
       "vdslLineConfVtucInmEq": vdslLineConfVtucInmEq,
       "vdslLineConfInmVturCC": vdslLineConfInmVturCC,
       "vdslLineConfInmVtucCC": vdslLineConfInmVtucCC,
       "vdslLineConfInmVturIATO": vdslLineConfInmVturIATO,
       "vdslLineConfInmVtucIATO": vdslLineConfInmVtucIATO,
       "vdslLineConfInmVturIATS": vdslLineConfInmVturIATS,
       "vdslLineConfInmVtucIATS": vdslLineConfInmVtucIATS,
       "vdslLineConfInmVtucISDBUS": vdslLineConfInmVtucISDBUS,
       "vdslLineConfGinpRtxModeDs": vdslLineConfGinpRtxModeDs,
       "vdslLineConfGinpRtxModeUs": vdslLineConfGinpRtxModeUs,
       "vdslLineConfGinpEtrMaxDs": vdslLineConfGinpEtrMaxDs,
       "vdslLineConfGinpEtrMaxUs": vdslLineConfGinpEtrMaxUs,
       "vdslLineConfGinpEtrMinDs": vdslLineConfGinpEtrMinDs,
       "vdslLineConfGinpEtrMinUs": vdslLineConfGinpEtrMinUs,
       "vdslLineConfGinpNdrMaxDs": vdslLineConfGinpNdrMaxDs,
       "vdslLineConfGinpNdrMaxUs": vdslLineConfGinpNdrMaxUs,
       "vdslLineConfGinpShineRatioDs": vdslLineConfGinpShineRatioDs,
       "vdslLineConfGinpShineRatioUs": vdslLineConfGinpShineRatioUs,
       "vdslLineConfGinpLeftrThresholdDs": vdslLineConfGinpLeftrThresholdDs,
       "vdslLineConfGinpLeftrThresholdUs": vdslLineConfGinpLeftrThresholdUs,
       "vdslLineConfGinpMaxDelayDs": vdslLineConfGinpMaxDelayDs,
       "vdslLineConfGinpMaxDelayUs": vdslLineConfGinpMaxDelayUs,
       "vdslLineConfGinpMinDelayDs": vdslLineConfGinpMinDelayDs,
       "vdslLineConfGinpMinDelayUs": vdslLineConfGinpMinDelayUs,
       "vdslLineConfGinpInpMinDs": vdslLineConfGinpInpMinDs,
       "vdslLineConfGinpInpMinUs": vdslLineConfGinpInpMinUs,
       "vdslLineConfGinpReinCfgInpDs": vdslLineConfGinpReinCfgInpDs,
       "vdslLineConfGinpReinCfgInpUs": vdslLineConfGinpReinCfgInpUs,
       "vdslLineConfGinpReinCfgFreqDs": vdslLineConfGinpReinCfgFreqDs,
       "vdslLineConfGinpReinCfgFreqUs": vdslLineConfGinpReinCfgFreqUs,
       "vdslLineConfSosMinRateB0Ds": vdslLineConfSosMinRateB0Ds,
       "vdslLineConfSosMinRateB0Us": vdslLineConfSosMinRateB0Us,
       "vdslLineConfSosTimeDs": vdslLineConfSosTimeDs,
       "vdslLineConfSosTimeUs": vdslLineConfSosTimeUs,
       "vdslLineConfSosCrcDs": vdslLineConfSosCrcDs,
       "vdslLineConfSosCrcUs": vdslLineConfSosCrcUs,
       "vdslLineConfSosNToneDs": vdslLineConfSosNToneDs,
       "vdslLineConfSosNToneUs": vdslLineConfSosNToneUs,
       "vdslLineConfSosMaxDs": vdslLineConfSosMaxDs,
       "vdslLineConfSosMaxUs": vdslLineConfSosMaxUs,
       "vdslLineConfSosMultiStepDs": vdslLineConfSosMultiStepDs,
       "vdslLineConfSosMultiStepUs": vdslLineConfSosMultiStepUs,
       "vdslLineConfRocEnableDs": vdslLineConfRocEnableDs,
       "vdslLineConfRocEnableUs": vdslLineConfRocEnableUs,
       "vdslLineConfRocSnrmDs": vdslLineConfRocSnrmDs,
       "vdslLineConfRocSnrmUs": vdslLineConfRocSnrmUs,
       "vdslLineConfRocMinInpDs": vdslLineConfRocMinInpDs,
       "vdslLineConfRocMinInpUs": vdslLineConfRocMinInpUs,
       "vdslLineConfSosEnableDs": vdslLineConfSosEnableDs,
       "vdslLineConfSosEnableUs": vdslLineConfSosEnableUs,
       "vdslLineConfDynamicDepthDs": vdslLineConfDynamicDepthDs,
       "vdslLineConfDynamicDepthUs": vdslLineConfDynamicDepthUs,
       "vdslLineConfDpboParamType": vdslLineConfDpboParamType,
       "vdslLineConfDpboParamEselMin": vdslLineConfDpboParamEselMin,
       "vdslLineConfHsTxA43Psd": vdslLineConfHsTxA43Psd,
       "vdslLineConfHsTxB43Psd": vdslLineConfHsTxB43Psd,
       "vdslLineConfHsTxA43cB43cPsd": vdslLineConfHsTxA43cB43cPsd,
       "vdslLineConfHsTxV43Carrier257Psd": vdslLineConfHsTxV43Carrier257Psd,
       "vdslLineConfHsTxV43Carrier383Psd": vdslLineConfHsTxV43Carrier383Psd,
       "vdslLineConfHsTxV43Carrier511Psd": vdslLineConfHsTxV43Carrier511Psd,
       "vdslVlan": vdslVlan,
       "vdslPortConfTable": vdslPortConfTable,
       "vdslPortConfEntry": vdslPortConfEntry,
       "vdslPortConfPvid": vdslPortConfPvid,
       "vdslPortConfPriority": vdslPortConfPriority,
       "vdslPortConfAcceptableFrameType": vdslPortConfAcceptableFrameType,
       "vdslPortConfTlsEnable": vdslPortConfTlsEnable,
       "vdslPortConfTlsVid": vdslPortConfTlsVid,
       "vdslPortConfTlsPriority": vdslPortConfTlsPriority,
       "vdslPortConfDtEnable": vdslPortConfDtEnable,
       "vdslPortConfDtSvid": vdslPortConfDtSvid,
       "vdslPortConfDtSpriority": vdslPortConfDtSpriority,
       "vdslPortConfDtCvid": vdslPortConfDtCvid,
       "vdslPortConfDtCpriority": vdslPortConfDtCpriority,
       "vdslPortConfTlsPrioCopyEnable": vdslPortConfTlsPrioCopyEnable,
       "vdslPortVlanTable": vdslPortVlanTable,
       "vdslPortVlanEntry": vdslPortVlanEntry,
       "vdslPortVlanReg": vdslPortVlanReg,
       "vdslPortVlanTag": vdslPortVlanTag,
       "vdslPortVlanRowStatus": vdslPortVlanRowStatus,
       "vdslVlanStaticTable": vdslVlanStaticTable,
       "vdslVlanStaticEntry": vdslVlanStaticEntry,
       "vdslVlanStaticEgressPorts": vdslVlanStaticEgressPorts,
       "vdslVlanStaticUntaggedPorts": vdslVlanStaticUntaggedPorts,
       "vdslVlanStaticRowStatus": vdslVlanStaticRowStatus,
       "vdslPortPvlanTable": vdslPortPvlanTable,
       "vdslPortPvlanEntry": vdslPortPvlanEntry,
       "vdslPortPvlanEtype": vdslPortPvlanEtype,
       "vdslPortPvlanVid": vdslPortPvlanVid,
       "vdslPortPvlanPriority": vdslPortPvlanPriority,
       "vdslPortPvlanRowStatus": vdslPortPvlanRowStatus,
       "vdslRfiCustomTable": vdslRfiCustomTable,
       "vdslRfiCustomEntry": vdslRfiCustomEntry,
       "vdslRfiCustomIndex": vdslRfiCustomIndex,
       "vdslRfiCustomStartFreq": vdslRfiCustomStartFreq,
       "vdslRfiCustomEndFreq": vdslRfiCustomEndFreq,
       "vdslRfiCustomEnable": vdslRfiCustomEnable,
       "vdslRfiCustomMode": vdslRfiCustomMode,
       "vdslLineConfUpboParamTable": vdslLineConfUpboParamTable,
       "vdslLineConfUpboParamEntry": vdslLineConfUpboParamEntry,
       "vdslLineConfUpboParamBand": vdslLineConfUpboParamBand,
       "vdslLineConfUpboParamA": vdslLineConfUpboParamA,
       "vdslLineConfUpboParamB": vdslLineConfUpboParamB,
       "vdslLineConfDpboTable": vdslLineConfDpboTable,
       "vdslLineConfDpboEntry": vdslLineConfDpboEntry,
       "vdslLineConfDpboIndex": vdslLineConfDpboIndex,
       "vdslLineConfDpboTone": vdslLineConfDpboTone,
       "vdslLineConfDpboPsd": vdslLineConfDpboPsd,
       "ipbpvc": ipbpvc,
       "ipbpvcDomainTable": ipbpvcDomainTable,
       "ipbpvcDomainEntry": ipbpvcDomainEntry,
       "ipbpvcDomainName": ipbpvcDomainName,
       "ipbpvcDomainRowStatus": ipbpvcDomainRowStatus,
       "ipbpvcDomainVlanTable": ipbpvcDomainVlanTable,
       "ipbpvcDomainVlanEntry": ipbpvcDomainVlanEntry,
       "ipbpvcDomainVlanId": ipbpvcDomainVlanId,
       "ipbpvcDomainDhcpVlanEnable": ipbpvcDomainDhcpVlanEnable,
       "ipbpvcDomainVlanRowStatus": ipbpvcDomainVlanRowStatus,
       "ipbpvcEdgeRouterTable": ipbpvcEdgeRouterTable,
       "ipbpvcEdgeRouterEntry": ipbpvcEdgeRouterEntry,
       "ipbpvcEdgeRouterIp": ipbpvcEdgeRouterIp,
       "ipbpvcEdgeRouterVid": ipbpvcEdgeRouterVid,
       "ipbpvcEdgeRouterMask": ipbpvcEdgeRouterMask,
       "ipbpvcEdgeRouterRowStatus": ipbpvcEdgeRouterRowStatus,
       "ipbpvcInterfaceTable": ipbpvcInterfaceTable,
       "ipbpvcInterfaceEntry": ipbpvcInterfaceEntry,
       "ipbpvcInterfaceIp": ipbpvcInterfaceIp,
       "ipbpvcInterfaceMask": ipbpvcInterfaceMask,
       "ipbpvcInterfaceVid": ipbpvcInterfaceVid,
       "ipbpvcInterfaceIfIndex": ipbpvcInterfaceIfIndex,
       "ipbpvcInterfaceVpi": ipbpvcInterfaceVpi,
       "ipbpvcInterfaceVci": ipbpvcInterfaceVci,
       "ipbpvcInterfaceRowStatus": ipbpvcInterfaceRowStatus,
       "ipbpvcRouteTable": ipbpvcRouteTable,
       "ipbpvcRouteEntry": ipbpvcRouteEntry,
       "ipbpvcRouteIp": ipbpvcRouteIp,
       "ipbpvcRouteMask": ipbpvcRouteMask,
       "ipbpvcRouteNextHop": ipbpvcRouteNextHop,
       "ipbpvcRouteMetric": ipbpvcRouteMetric,
       "ipbpvcRoutePriority": ipbpvcRoutePriority,
       "ipbpvcRouteRowStatus": ipbpvcRouteRowStatus,
       "ipbpvcTable": ipbpvcTable,
       "ipbpvcEntry": ipbpvcEntry,
       "ipbpvcVpi": ipbpvcVpi,
       "ipbpvcVci": ipbpvcVci,
       "ipbpvcPvid": ipbpvcPvid,
       "ipbpvcEncap": ipbpvcEncap,
       "ipbpvcPriority": ipbpvcPriority,
       "ipbpvcProfile": ipbpvcProfile,
       "ipbpvcRowStatus": ipbpvcRowStatus,
       "ipbpvcVlanTable": ipbpvcVlanTable,
       "ipbpvcVlanEntry": ipbpvcVlanEntry,
       "ipbpvcVlanReg": ipbpvcVlanReg,
       "ipbpvcVlanTag": ipbpvcVlanTag,
       "ipbpvcVlanRowStatus": ipbpvcVlanRowStatus,
       "arpproxy": arpproxy,
       "arpproxyAge": arpproxyAge,
       "arpproxyFlush": arpproxyFlush,
       "arpproxyFlushTarget": arpproxyFlushTarget,
       "arpproxyFlushOps": arpproxyFlushOps,
       "arpproxyFlushEdgeRouterIp": arpproxyFlushEdgeRouterIp,
       "arpproxyFlushEdgeRouterVid": arpproxyFlushEdgeRouterVid,
       "arpproxyFlushInterfaceIp": arpproxyFlushInterfaceIp,
       "arpproxyFlushInterfaceMask": arpproxyFlushInterfaceMask,
       "arpproxyFlushInterfaceVid": arpproxyFlushInterfaceVid,
       "voipPort": voipPort,
       "voipSipLineConfTable": voipSipLineConfTable,
       "voipSipLineConfEntry": voipSipLineConfEntry,
       "voipSipLineConfSipProfile": voipSipLineConfSipProfile,
       "voipSipLineConfSipCallSvcProfile": voipSipLineConfSipCallSvcProfile,
       "voipSipLineConfDspProfile": voipSipLineConfDspProfile,
       "voipSipLineConfAccount": voipSipLineConfAccount,
       "voipSipLineConfPassword": voipSipLineConfPassword,
       "voipSipLineConfDataProfile": voipSipLineConfDataProfile,
       "voipPortH248": voipPortH248,
       "voipH248LineConfTable": voipH248LineConfTable,
       "voipH248LineConfEntry": voipH248LineConfEntry,
       "voipH248LineConfMgName": voipH248LineConfMgName,
       "voipH248LineConfDspProfile": voipH248LineConfDspProfile,
       "voipH248LineConfDataProfile": voipH248LineConfDataProfile,
       "voipH248TerminationTable": voipH248TerminationTable,
       "voipH248TerminationEntry": voipH248TerminationEntry,
       "voipH248TerminationName": voipH248TerminationName,
       "voipPotsImpedanceConfTable": voipPotsImpedanceConfTable,
       "voipPotsImpedanceConfEntry": voipPotsImpedanceConfEntry,
       "voipPotsImpedance": voipPotsImpedance,
       "voipPotsGainConfTable": voipPotsGainConfTable,
       "voipPotsGainConfEntry": voipPotsGainConfEntry,
       "voipPotsTxGain": voipPotsTxGain,
       "voipPotsRxGain": voipPotsRxGain,
       "voipPotsDataTxGain": voipPotsDataTxGain,
       "voipPotsDataRxGain": voipPotsDataRxGain,
       "voipOpmodeConfTable": voipOpmodeConfTable,
       "voipOpmodeConfEntry": voipOpmodeConfEntry,
       "voipOpMode": voipOpMode,
       "voipPolarityReverseConfTable": voipPolarityReverseConfTable,
       "voipPolarityReverseConfEntry": voipPolarityReverseConfEntry,
       "voipPolarityReverse": voipPolarityReverse,
       "voipPotsCidConfTable": voipPotsCidConfTable,
       "voipPotsCidConfEntry": voipPotsCidConfEntry,
       "voipPotsCidASType": voipPotsCidASType,
       "voipPotsCidPayloadType": voipPotsCidPayloadType,
       "voipPotsLineConfTable": voipPotsLineConfTable,
       "voipPotsLineConfEntry": voipPotsLineConfEntry,
       "voipPotsLineFlashDefault": voipPotsLineFlashDefault,
       "voipPotsLineFlashMax": voipPotsLineFlashMax,
       "voipPotsLineFlashMin": voipPotsLineFlashMin,
       "voipPotsLineLoop": voipPotsLineLoop,
       "enetPort": enetPort,
       "enetLineConfTable": enetLineConfTable,
       "enetLineConfEntry": enetLineConfEntry,
       "enetLineConfBandWidthIngress": enetLineConfBandWidthIngress,
       "enetLineConfBandWidthEgress": enetLineConfBandWidthEgress,
       "enetLineConfFlowCtrlEnable": enetLineConfFlowCtrlEnable,
       "enetLineConfSpeed": enetLineConfSpeed,
       "enetPortConfTable": enetPortConfTable,
       "enetPortConfEntry": enetPortConfEntry,
       "enetPortConfPriority": enetPortConfPriority,
       "enetPortConfPvid": enetPortConfPvid,
       "enetPortConfAcceptableFrameType": enetPortConfAcceptableFrameType,
       "enetPortConfTlsEnable": enetPortConfTlsEnable,
       "enetPortConfTlsVid": enetPortConfTlsVid,
       "enetPortConfTlsPriority": enetPortConfTlsPriority,
       "enetPortConfRateLimitProfile": enetPortConfRateLimitProfile,
       "enetPortConfQueueRateLimitProfile": enetPortConfQueueRateLimitProfile,
       "enetPortConfDtEnable": enetPortConfDtEnable,
       "enetPortConfDtSvid": enetPortConfDtSvid,
       "enetPortConfDtSpriority": enetPortConfDtSpriority,
       "enetPortConfDtCvid": enetPortConfDtCvid,
       "enetPortVlanTable": enetPortVlanTable,
       "enetPortVlanEntry": enetPortVlanEntry,
       "enetPortVlanReg": enetPortVlanReg,
       "enetPortVlanTag": enetPortVlanTag,
       "enetPortVlanRowStatus": enetPortVlanRowStatus,
       "elcDot3ad": elcDot3ad,
       "elcDot3adTable": elcDot3adTable,
       "elcDot3adEntry": elcDot3adEntry,
       "elcDot3adSlotId": elcDot3adSlotId,
       "elcDot3adGroupId": elcDot3adGroupId,
       "elcDot3adEnable": elcDot3adEnable,
       "elcAggPortTable": elcAggPortTable,
       "elcAggPortEntry": elcAggPortEntry,
       "elcAggPortJoin": elcAggPortJoin,
       "enetQoS": enetQoS,
       "enetQScheduleTable": enetQScheduleTable,
       "enetQScheduleEntry": enetQScheduleEntry,
       "enetQScheduleType": enetQScheduleType,
       "enetQueueWeightTable": enetQueueWeightTable,
       "enetQueueWeightEntry": enetQueueWeightEntry,
       "enetQueueWeight": enetQueueWeight,
       "enetPortPvlanTable": enetPortPvlanTable,
       "enetPortPvlanEntry": enetPortPvlanEntry,
       "enetPortPvlanEtype": enetPortPvlanEtype,
       "enetPortPvlanVid": enetPortPvlanVid,
       "enetPortPvlanPriority": enetPortPvlanPriority,
       "enetPortPvlanRowStatus": enetPortPvlanRowStatus,
       "enetPortXvlanTable": enetPortXvlanTable,
       "enetPortXvlanEntry": enetPortXvlanEntry,
       "enetPortXvlanCvid": enetPortXvlanCvid,
       "enetPortXvlanSvid": enetPortXvlanSvid,
       "enetPortXvlanRowStatus": enetPortXvlanRowStatus,
       "gbondGroupTable": gbondGroupTable,
       "gbondGroupEntry": gbondGroupEntry,
       "gbondGroupName": gbondGroupName,
       "gbondGroupPorts": gbondGroupPorts,
       "gbondGroupRowStatus": gbondGroupRowStatus,
       "dtpvc": dtpvc,
       "dtpvcTable": dtpvcTable,
       "dtpvcEntry": dtpvcEntry,
       "dtpvcVpi": dtpvcVpi,
       "dtpvcVci": dtpvcVci,
       "dtpvcSvid": dtpvcSvid,
       "dtpvcCvid": dtpvcCvid,
       "dtpvcEncap": dtpvcEncap,
       "dtpvcSPriority": dtpvcSPriority,
       "dtpvcCPriority": dtpvcCPriority,
       "dtpvcProfile": dtpvcProfile,
       "dtpvcRowStatus": dtpvcRowStatus,
       "dtpvcMvlanEnable": dtpvcMvlanEnable,
       "e1Port": e1Port,
       "e1PortConfTable": e1PortConfTable,
       "e1PortConfEntry": e1PortConfEntry,
       "e1PortConfAdminStatus": e1PortConfAdminStatus,
       "e1PortConfAlarmProfile": e1PortConfAlarmProfile,
       "e1PortConfImpedance": e1PortConfImpedance,
       "e1PortConfTimingSrc": e1PortConfTimingSrc,
       "xvlan": xvlan,
       "xvlanTable": xvlanTable,
       "xvlanEntry": xvlanEntry,
       "xvlanCvid": xvlanCvid,
       "xvlanSvid": xvlanSvid,
       "xvlanCvids": xvlanCvids,
       "xvlanRowStatus": xvlanRowStatus,
       "vdsl2Port": vdsl2Port,
       "vdsl2LineConfTable": vdsl2LineConfTable,
       "vdsl2LineConfEntry": vdsl2LineConfEntry,
       "vdsl2LineConfRateLimitProfile": vdsl2LineConfRateLimitProfile,
       "vdsl2LineConfQueueRateLimitProfile": vdsl2LineConfQueueRateLimitProfile,
       "vdsl2Pvc": vdsl2Pvc,
       "vdsl2PvcTable": vdsl2PvcTable,
       "vdsl2PvcEntry": vdsl2PvcEntry,
       "vdsl2PvcVpi": vdsl2PvcVpi,
       "vdsl2PvcVci": vdsl2PvcVci,
       "vdsl2PvcPvid": vdsl2PvcPvid,
       "vdsl2PvcEncap": vdsl2PvcEncap,
       "vdsl2PvcPriority": vdsl2PvcPriority,
       "vdsl2PvcSuper": vdsl2PvcSuper,
       "vdsl2PvcRowStatus": vdsl2PvcRowStatus,
       "vdsl2QSchedule": vdsl2QSchedule,
       "vdsl2QScheduleTable": vdsl2QScheduleTable,
       "vdsl2QScheduleEntry": vdsl2QScheduleEntry,
       "vdsl2QScheduleType": vdsl2QScheduleType,
       "vdsl2QueueWeightTable": vdsl2QueueWeightTable,
       "vdsl2QueueWeightEntry": vdsl2QueueWeightEntry,
       "vdsl2QueueWeight": vdsl2QueueWeight,
       "vdsl2Paepvc": vdsl2Paepvc,
       "vdsl2PaepvcTable": vdsl2PaepvcTable,
       "vdsl2PaepvcEntry": vdsl2PaepvcEntry,
       "vdsl2PaepvcVpi": vdsl2PaepvcVpi,
       "vdsl2PaepvcVci": vdsl2PaepvcVci,
       "vdsl2PaepvcPvid": vdsl2PaepvcPvid,
       "vdsl2PaepvcEncap": vdsl2PaepvcEncap,
       "vdsl2PaepvcPriority": vdsl2PaepvcPriority,
       "vdsl2PaepvcAcName": vdsl2PaepvcAcName,
       "vdsl2PaepvcServiceName": vdsl2PaepvcServiceName,
       "vdsl2PaepvcHelloTime": vdsl2PaepvcHelloTime,
       "vdsl2PaepvcRowStatus": vdsl2PaepvcRowStatus,
       "pvcAll": pvcAll,
       "pvcAllFilter": pvcAllFilter,
       "pvcAllTable": pvcAllTable,
       "pvcAllEntry": pvcAllEntry,
       "pvcAllVpi": pvcAllVpi,
       "pvcAllVci": pvcAllVci,
       "pvcAllEncap": pvcAllEncap,
       "pvcAllType": pvcAllType,
       "profile": profile,
       "adslProfile": adslProfile,
       "maxNumOfAdslLineProfiles": maxNumOfAdslLineProfiles,
       "maxNumOfAdslAlarmProfiles": maxNumOfAdslAlarmProfiles,
       "shdslProfile": shdslProfile,
       "maxNumOfShdslLineProfiles": maxNumOfShdslLineProfiles,
       "maxNumOfShdslAlarmProfiles": maxNumOfShdslAlarmProfiles,
       "atmProfile": atmProfile,
       "maxNumOfAtmProfiles": maxNumOfAtmProfiles,
       "atmProfileTable": atmProfileTable,
       "atmProfileEntry": atmProfileEntry,
       "atmProfileName": atmProfileName,
       "atmProfileAAL": atmProfileAAL,
       "atmProfileClass": atmProfileClass,
       "atmProfilePcr": atmProfilePcr,
       "atmProfileCdvt": atmProfileCdvt,
       "atmProfileScrMcr": atmProfileScrMcr,
       "atmProfileBt": atmProfileBt,
       "atmProfileRowStatus": atmProfileRowStatus,
       "profsvr": profsvr,
       "profileServerMode": profileServerMode,
       "profileServerIp": profileServerIp,
       "profsvrClientTable": profsvrClientTable,
       "profsvrClientEntry": profsvrClientEntry,
       "profsvrClientIp": profsvrClientIp,
       "profsvrClientType": profsvrClientType,
       "profsvrClientRowStatus": profsvrClientRowStatus,
       "profileServerSync": profileServerSync,
       "aclProfile": aclProfile,
       "aclProfileTable": aclProfileTable,
       "aclProfileEntry": aclProfileEntry,
       "aclProfileRuleName": aclProfileRuleName,
       "aclProfileRuleNumber": aclProfileRuleNumber,
       "aclProfileActionNumber": aclProfileActionNumber,
       "aclProfileRuleParamMask": aclProfileRuleParamMask,
       "aclProfileRuleEtype": aclProfileRuleEtype,
       "aclProfileRuleVid": aclProfileRuleVid,
       "aclProfileRuleSmac": aclProfileRuleSmac,
       "aclProfileRuleDmac": aclProfileRuleDmac,
       "aclProfileRulePriority": aclProfileRulePriority,
       "aclProfileRuleProtocol": aclProfileRuleProtocol,
       "aclProfileRuleSrcIP": aclProfileRuleSrcIP,
       "aclProfileRuleSrcIPMask": aclProfileRuleSrcIPMask,
       "aclProfileRuleDestIP": aclProfileRuleDestIP,
       "aclProfileRuleDestIPMask": aclProfileRuleDestIPMask,
       "aclProfileRuleStartTos": aclProfileRuleStartTos,
       "aclProfileRuleEndTos": aclProfileRuleEndTos,
       "aclProfileRuleSrcStartPort": aclProfileRuleSrcStartPort,
       "aclProfileRuleSrcEndPort": aclProfileRuleSrcEndPort,
       "aclProfileRuleDestStartPort": aclProfileRuleDestStartPort,
       "aclProfileRuleDestEndPort": aclProfileRuleDestEndPort,
       "aclProfileActionRate": aclProfileActionRate,
       "aclProfileActionrvlan": aclProfileActionrvlan,
       "aclProfileActionrpri": aclProfileActionrpri,
       "aclProfileRowStatus": aclProfileRowStatus,
       "aclProfileRuleSip": aclProfileRuleSip,
       "aclProfileRuleDip": aclProfileRuleDip,
       "aclProfileRuleSport": aclProfileRuleSport,
       "aclProfileRuleDport": aclProfileRuleDport,
       "aclProfileRuleSrcIp6": aclProfileRuleSrcIp6,
       "aclProfileRuleDstIp6": aclProfileRuleDstIp6,
       "aclProfileRuleSip6": aclProfileRuleSip6,
       "aclProfileRuleDip6": aclProfileRuleDip6,
       "vdslProfile": vdslProfile,
       "maxNumOfVdslLineProfiles": maxNumOfVdslLineProfiles,
       "maxNumOfVdslAlarmProfiles": maxNumOfVdslAlarmProfiles,
       "vdslLineConfProfileExtendedTable": vdslLineConfProfileExtendedTable,
       "vdslLineConfProfileExtendedEntry": vdslLineConfProfileExtendedEntry,
       "vdsl2LConfProfRaModeDs": vdsl2LConfProfRaModeDs,
       "vdsl2LConfProfRaModeUs": vdsl2LConfProfRaModeUs,
       "vdsl2LConfProfRaUsNrmDs": vdsl2LConfProfRaUsNrmDs,
       "vdsl2LConfProfRaUsNrmUs": vdsl2LConfProfRaUsNrmUs,
       "vdsl2LConfProfRaDsNrmDs": vdsl2LConfProfRaDsNrmDs,
       "vdsl2LConfProfRaDsNrmUs": vdsl2LConfProfRaDsNrmUs,
       "vdsl2LConfProfProfileName": vdsl2LConfProfProfileName,
       "vdslLineAlarmConfProfileExtendedTable": vdslLineAlarmConfProfileExtendedTable,
       "vdslLineAlarmConfProfileExtendedEntry": vdslLineAlarmConfProfileExtendedEntry,
       "vdslLAlarmConfProfProfileName": vdslLAlarmConfProfProfileName,
       "voipProfile": voipProfile,
       "sipProfile": sipProfile,
       "maxNumOfSipProfiles": maxNumOfSipProfiles,
       "sipProfileTable": sipProfileTable,
       "sipProfileEntry": sipProfileEntry,
       "sipProfileName": sipProfileName,
       "sipProfileSipSvr": sipProfileSipSvr,
       "sipProfileRegSvr": sipProfileRegSvr,
       "sipProfileProxySvr": sipProfileProxySvr,
       "sipProfileSipPort": sipProfileSipPort,
       "sipProfileRegSvrPort": sipProfileRegSvrPort,
       "sipProfileProxySvrPort": sipProfileProxySvrPort,
       "sipProfileUriType": sipProfileUriType,
       "sipProfilePbit": sipProfilePbit,
       "sipProfileDscp": sipProfileDscp,
       "sipProfileKeepAlive": sipProfileKeepAlive,
       "sipProfileSe": sipProfileSe,
       "sipProfilePrack": sipProfilePrack,
       "sipProfileRowStatus": sipProfileRowStatus,
       "sipProfileReSend": sipProfileReSend,
       "sipProfileNonceCountKeep": sipProfileNonceCountKeep,
       "sipProfileQopQuote": sipProfileQopQuote,
       "sipProfileRefertobracket": sipProfileRefertobracket,
       "sipProfileRefertodot": sipProfileRefertodot,
       "sipProfileRtpStartPort": sipProfileRtpStartPort,
       "sipProfileRtpEndPort": sipProfileRtpEndPort,
       "maxNumOfSipCallSvcProfiles": maxNumOfSipCallSvcProfiles,
       "sipCallSvcProfileTable": sipCallSvcProfileTable,
       "sipCallSvcProfileEntry": sipCallSvcProfileEntry,
       "sipCallSvcProfileName": sipCallSvcProfileName,
       "sipCallSvcProfilePasswdOn": sipCallSvcProfilePasswdOn,
       "sipCallSvcProfilePasswd": sipCallSvcProfilePasswd,
       "sipCallSvcProfileNumberPlanOn": sipCallSvcProfileNumberPlanOn,
       "sipCallSvcProfileNumberPlanCc": sipCallSvcProfileNumberPlanCc,
       "sipCallSvcProfileNumberPlanNdc": sipCallSvcProfileNumberPlanNdc,
       "sipCallSvcProfileNumberPlanTable": sipCallSvcProfileNumberPlanTable,
       "sipCallSvcProfileStateMask": sipCallSvcProfileStateMask,
       "sipCallSvcProfileDtmf": sipCallSvcProfileDtmf,
       "sipCallSvcProfileFax": sipCallSvcProfileFax,
       "sipCallSvcProfileRowStatus": sipCallSvcProfileRowStatus,
       "sipCallSvcProfileKeypattern": sipCallSvcProfileKeypattern,
       "sipCallSvcProfileRegTime": sipCallSvcProfileRegTime,
       "sipCallSvcProfileFlash": sipCallSvcProfileFlash,
       "sipCallSvcProfileFlashPattern": sipCallSvcProfileFlashPattern,
       "sipCallSvcProfileReanswerTime": sipCallSvcProfileReanswerTime,
       "sipCallSvcProfileFirstDigit": sipCallSvcProfileFirstDigit,
       "sipCallSvcProfileInterdigit": sipCallSvcProfileInterdigit,
       "sipCallSvcProfileLocalHelpTable": sipCallSvcProfileLocalHelpTable,
       "sipCallSvcProfileLocalHelpEntry": sipCallSvcProfileLocalHelpEntry,
       "sipCallSvcProfileLocalHelpIndex": sipCallSvcProfileLocalHelpIndex,
       "sipCallSvcProfileLocalHelpTableName": sipCallSvcProfileLocalHelpTableName,
       "sipCallSvcProfileLocalHelpTableTel": sipCallSvcProfileLocalHelpTableTel,
       "maxNumOfSipDialPlanProfiles": maxNumOfSipDialPlanProfiles,
       "sipDialPlanProfileTable": sipDialPlanProfileTable,
       "sipDialPlanProfileEntry": sipDialPlanProfileEntry,
       "sipDialPlanProfileName": sipDialPlanProfileName,
       "sipDialPlanProfileIndex": sipDialPlanProfileIndex,
       "sipDialPlanProfileDialPlanTableName": sipDialPlanProfileDialPlanTableName,
       "sipDialPlanProfileRowStatus": sipDialPlanProfileRowStatus,
       "maxNumOfDspProfiles": maxNumOfDspProfiles,
       "dspProfileTable": dspProfileTable,
       "dspProfileEntry": dspProfileEntry,
       "dspProfileName": dspProfileName,
       "dspProfileCodec": dspProfileCodec,
       "dspProfilePlayBufferMinDelay": dspProfilePlayBufferMinDelay,
       "dspProfilePlayBufferMaxDelay": dspProfilePlayBufferMaxDelay,
       "dspProfileEchoTail": dspProfileEchoTail,
       "dspProfileRowStatus": dspProfileRowStatus,
       "dspProfileEchocancelOn": dspProfileEchocancelOn,
       "dspProfileVadOn": dspProfileVadOn,
       "dspProfileg711vpi": dspProfileg711vpi,
       "dspProfileg723vpi": dspProfileg723vpi,
       "dspProfileg726vpi": dspProfileg726vpi,
       "dspProfileg729vpi": dspProfileg729vpi,
       "dspProfilePbit": dspProfilePbit,
       "dspProfileDscp": dspProfileDscp,
       "dspProfileCodecPriority": dspProfileCodecPriority,
       "h248Profile": h248Profile,
       "maxNumOfH248Profiles": maxNumOfH248Profiles,
       "h248ProfileTable": h248ProfileTable,
       "h248ProfileEntry": h248ProfileEntry,
       "h248ProfileName": h248ProfileName,
       "h248ProfileMgc": h248ProfileMgc,
       "h248ProfileMgcPort": h248ProfileMgcPort,
       "h248ProfileMgc2On": h248ProfileMgc2On,
       "h248ProfileMgc2": h248ProfileMgc2,
       "h248ProfileMgc2Port": h248ProfileMgc2Port,
       "h248ProfileTransport": h248ProfileTransport,
       "h248ProfileEncode": h248ProfileEncode,
       "h248ProfilePbit": h248ProfilePbit,
       "h248ProfileDscp": h248ProfileDscp,
       "h248ProfileRowStatus": h248ProfileRowStatus,
       "h248ProfileSoftswitch": h248ProfileSoftswitch,
       "h248ProfileInactivityTimer": h248ProfileInactivityTimer,
       "h248ProfilePrefixName": h248ProfilePrefixName,
       "h248ProfileRtpPortStart": h248ProfileRtpPortStart,
       "h248ProfileRtpPortEnd": h248ProfileRtpPortEnd,
       "h248ProfileInitRetranTime": h248ProfileInitRetranTime,
       "h248ProfileMinRetranTime": h248ProfileMinRetranTime,
       "h248ProfileMaxRetranTime": h248ProfileMaxRetranTime,
       "h248ProfileRetranWindow": h248ProfileRetranWindow,
       "h248ProfileStartTimeout": h248ProfileStartTimeout,
       "h248ProfileShortTimeout": h248ProfileShortTimeout,
       "h248ProfileLongTimeout": h248ProfileLongTimeout,
       "h248ProfileVBD": h248ProfileVBD,
       "h248ProfileSuffixStartNum": h248ProfileSuffixStartNum,
       "h248ProfileSuffixSuffixLen": h248ProfileSuffixSuffixLen,
       "h248ProfileRFC2833": h248ProfileRFC2833,
       "h248ProfileRFC2833PT": h248ProfileRFC2833PT,
       "h248ProfileT38": h248ProfileT38,
       "h248ProfileForceVersion": h248ProfileForceVersion,
       "h248ProfileLocalcall": h248ProfileLocalcall,
       "h248ProfileCallthrough": h248ProfileCallthrough,
       "ipqosProfile": ipqosProfile,
       "maxNumOfIpqosProfiles": maxNumOfIpqosProfiles,
       "ipqosProfileTable": ipqosProfileTable,
       "ipqosProfileEntry": ipqosProfileEntry,
       "ipqosProfileName": ipqosProfileName,
       "ipqosProfileNumOfQueue": ipqosProfileNumOfQueue,
       "ipqosProfileRowStatus": ipqosProfileRowStatus,
       "ipqosProfileQueueTable": ipqosProfileQueueTable,
       "ipqosProfileQueueEntry": ipqosProfileQueueEntry,
       "ipqosProfileQueueIndex": ipqosProfileQueueIndex,
       "ipqosProfileQueuePIR": ipqosProfileQueuePIR,
       "ipqosProfileQueueCIR": ipqosProfileQueueCIR,
       "ipqosProfileQueuePBS": ipqosProfileQueuePBS,
       "ipqosProfileQueueCBS": ipqosProfileQueueCBS,
       "ipqosProfileQueueLevel": ipqosProfileQueueLevel,
       "ipqosProfileQueueWeight": ipqosProfileQueueWeight,
       "rateLimitProfile": rateLimitProfile,
       "maxNumOfRateLimitProfiles": maxNumOfRateLimitProfiles,
       "rateLimitProfileTable": rateLimitProfileTable,
       "rateLimitProfileEntry": rateLimitProfileEntry,
       "rateLimitProfileName": rateLimitProfileName,
       "rateLimitProfileIngressRate": rateLimitProfileIngressRate,
       "rateLimitProfileEgressRate": rateLimitProfileEgressRate,
       "rateLimitProfileRowStatus": rateLimitProfileRowStatus,
       "e1AlarmProfile": e1AlarmProfile,
       "maxNumOfE1AlarmProfile": maxNumOfE1AlarmProfile,
       "e1AlarmProfileTable": e1AlarmProfileTable,
       "e1AlarmProfileEntry": e1AlarmProfileEntry,
       "e1AlarmProfileName": e1AlarmProfileName,
       "e1AlarmProfileQEs": e1AlarmProfileQEs,
       "e1AlarmProfileQSes": e1AlarmProfileQSes,
       "e1AlarmProfileQUas": e1AlarmProfileQUas,
       "e1AlarmProfileDayEs": e1AlarmProfileDayEs,
       "e1AlarmProfileDaySes": e1AlarmProfileDaySes,
       "e1AlarmProfileDayUas": e1AlarmProfileDayUas,
       "e1AlarmProfileRowStatus": e1AlarmProfileRowStatus,
       "vdsl2Profile": vdsl2Profile,
       "maxNumOfVdsl2TemplateProfiles": maxNumOfVdsl2TemplateProfiles,
       "maxNumOfVdsl2LineProfiles": maxNumOfVdsl2LineProfiles,
       "maxNumOfVdsl2ChanProfiles": maxNumOfVdsl2ChanProfiles,
       "maxNumOfVdsl2AlarmTemplateProfiles": maxNumOfVdsl2AlarmTemplateProfiles,
       "maxNumOfVdsl2AlarmLineProfiles": maxNumOfVdsl2AlarmLineProfiles,
       "maxNumOfVdsl2AlarmChanProfiles": maxNumOfVdsl2AlarmChanProfiles,
       "vdsl2LineConfProfileExtendedTable": vdsl2LineConfProfileExtendedTable,
       "vdsl2LineConfProfileExtendedEntry": vdsl2LineConfProfileExtendedEntry,
       "vdsl2LineProfDpboEPsdID": vdsl2LineProfDpboEPsdID,
       "vdsl2LineProfBitSwapDs": vdsl2LineProfBitSwapDs,
       "vdsl2LineProfBitSwapUs": vdsl2LineProfBitSwapUs,
       "vdsl2LineProfProfileName": vdsl2LineProfProfileName,
       "vdsl2LineProfDynamicDepthEnableDs": vdsl2LineProfDynamicDepthEnableDs,
       "vdsl2LineProfDynamicDepthEnableUs": vdsl2LineProfDynamicDepthEnableUs,
       "vdsl2LineProfSosTimeDs": vdsl2LineProfSosTimeDs,
       "vdsl2LineProfSosTimeUs": vdsl2LineProfSosTimeUs,
       "vdsl2LineProfSosCrcDs": vdsl2LineProfSosCrcDs,
       "vdsl2LineProfSosCrcUs": vdsl2LineProfSosCrcUs,
       "vdsl2LineProfSosNToneDs": vdsl2LineProfSosNToneDs,
       "vdsl2LineProfSosNToneUs": vdsl2LineProfSosNToneUs,
       "vdsl2LineProfSosMaxDs": vdsl2LineProfSosMaxDs,
       "vdsl2LineProfSosMaxUs": vdsl2LineProfSosMaxUs,
       "vdsl2LineProfSosMultiStepDs": vdsl2LineProfSosMultiStepDs,
       "vdsl2LineProfSosMultiStepUs": vdsl2LineProfSosMultiStepUs,
       "vdsl2LineProfRocEnableDs": vdsl2LineProfRocEnableDs,
       "vdsl2LineProfRocEnableUs": vdsl2LineProfRocEnableUs,
       "vdsl2LineProfRocSnrmDs": vdsl2LineProfRocSnrmDs,
       "vdsl2LineProfRocSnrmUs": vdsl2LineProfRocSnrmUs,
       "vdsl2LineProfRocMinInpDs": vdsl2LineProfRocMinInpDs,
       "vdsl2LineProfRocMinInpUs": vdsl2LineProfRocMinInpUs,
       "vdsl2LineProfDpboType": vdsl2LineProfDpboType,
       "vdsl2LineProfDpboEselMin": vdsl2LineProfDpboEselMin,
       "vdsl2LineProfCompatible": vdsl2LineProfCompatible,
       "vdsl2LineProfTransmissionType": vdsl2LineProfTransmissionType,
       "vdsl2ChanConfProfileExtendedTable": vdsl2ChanConfProfileExtendedTable,
       "vdsl2ChanConfProfileExtendedEntry": vdsl2ChanConfProfileExtendedEntry,
       "vdsl2ChanConfProfphyRds": vdsl2ChanConfProfphyRds,
       "vdsl2ChanConfProfphyRus": vdsl2ChanConfProfphyRus,
       "vdsl2ChanConfProfProfileName": vdsl2ChanConfProfProfileName,
       "vdsl2ChanConfProfGinpRtxModeDs": vdsl2ChanConfProfGinpRtxModeDs,
       "vdsl2ChanConfProfGinpRtxModeUs": vdsl2ChanConfProfGinpRtxModeUs,
       "vdsl2ChanConfProfGinpEtrMaxDs": vdsl2ChanConfProfGinpEtrMaxDs,
       "vdsl2ChanConfProfGinpEtrMaxUs": vdsl2ChanConfProfGinpEtrMaxUs,
       "vdsl2ChanConfProfGinpEtrMinDs": vdsl2ChanConfProfGinpEtrMinDs,
       "vdsl2ChanConfProfGinpEtrMinUs": vdsl2ChanConfProfGinpEtrMinUs,
       "vdsl2ChanConfProfGinpNdrMaxDs": vdsl2ChanConfProfGinpNdrMaxDs,
       "vdsl2ChanConfProfGinpNdrMaxUs": vdsl2ChanConfProfGinpNdrMaxUs,
       "vdsl2ChanConfProfGinpShineRatioDs": vdsl2ChanConfProfGinpShineRatioDs,
       "vdsl2ChanConfProfGinpShineRatioUs": vdsl2ChanConfProfGinpShineRatioUs,
       "vdsl2ChanConfProfGinpLeftrThresholdDs": vdsl2ChanConfProfGinpLeftrThresholdDs,
       "vdsl2ChanConfProfGinpLeftrThresholdUs": vdsl2ChanConfProfGinpLeftrThresholdUs,
       "vdsl2ChanConfProfGinpMaxDelayDs": vdsl2ChanConfProfGinpMaxDelayDs,
       "vdsl2ChanConfProfGinpMaxDelayUs": vdsl2ChanConfProfGinpMaxDelayUs,
       "vdsl2ChanConfProfGinpMinDelayDs": vdsl2ChanConfProfGinpMinDelayDs,
       "vdsl2ChanConfProfGinpMinDelayUs": vdsl2ChanConfProfGinpMinDelayUs,
       "vdsl2ChanConfProfGinpInpMinDs": vdsl2ChanConfProfGinpInpMinDs,
       "vdsl2ChanConfProfGinpInpMinUs": vdsl2ChanConfProfGinpInpMinUs,
       "vdsl2ChanConfProfGinpReinCfgInpDs": vdsl2ChanConfProfGinpReinCfgInpDs,
       "vdsl2ChanConfProfGinpReinCfgInpUs": vdsl2ChanConfProfGinpReinCfgInpUs,
       "vdsl2ChanConfProfGinpReinCfgFreqDs": vdsl2ChanConfProfGinpReinCfgFreqDs,
       "vdsl2ChanConfProfGinpReinCfgFreqUs": vdsl2ChanConfProfGinpReinCfgFreqUs,
       "vdsl2ChanConfProfSosMinRateB0Ds": vdsl2ChanConfProfSosMinRateB0Ds,
       "vdsl2ChanConfProfSosMinRateB0Us": vdsl2ChanConfProfSosMinRateB0Us,
       "vdsl2LineAlarmConfProfileExtendedTable": vdsl2LineAlarmConfProfileExtendedTable,
       "vdsl2LineAlarmConfProfileExtendedEntry": vdsl2LineAlarmConfProfileExtendedEntry,
       "xdsl2LineAlarmConfProfileXtucThresh15MinLofs": xdsl2LineAlarmConfProfileXtucThresh15MinLofs,
       "xdsl2LineAlarmConfProfileXturThresh15MinLofs": xdsl2LineAlarmConfProfileXturThresh15MinLofs,
       "xdsl2LineAlarmConfProfileThresh15MinLprs": xdsl2LineAlarmConfProfileThresh15MinLprs,
       "xdsl2LineAlarmConfProfileProfileName": xdsl2LineAlarmConfProfileProfileName,
       "xdsl2LineAlarmConfProfileXtucThresh15MinLols": xdsl2LineAlarmConfProfileXtucThresh15MinLols,
       "vdsl2LineConfTempExtendedTable": vdsl2LineConfTempExtendedTable,
       "vdsl2LineConfTempExtendedEntry": vdsl2LineConfTempExtendedEntry,
       "vdsl2LineConfTempTemplateName": vdsl2LineConfTempTemplateName,
       "vdsl2LineConfTempTemplatePortMap": vdsl2LineConfTempTemplatePortMap,
       "vdsl2LineConfTempInmProfile": vdsl2LineConfTempInmProfile,
       "vdsl2AlarmConfTempExtendedTable": vdsl2AlarmConfTempExtendedTable,
       "vdsl2AlarmConfTempExtendedEntry": vdsl2AlarmConfTempExtendedEntry,
       "vdsl2AlarmConfTempTemplateName": vdsl2AlarmConfTempTemplateName,
       "vdsl2ChanAlarmConfProfileExtendedTable": vdsl2ChanAlarmConfProfileExtendedTable,
       "vdsl2ChanAlarmConfProfileExtendedEntry": vdsl2ChanAlarmConfProfileExtendedEntry,
       "vdsl2ChanAlarmConfProfProfileName": vdsl2ChanAlarmConfProfProfileName,
       "maxNumOfVdsl2InmProfiles": maxNumOfVdsl2InmProfiles,
       "vdsl2InmConfProfileExtendedTable": vdsl2InmConfProfileExtendedTable,
       "vdsl2InmConfProfileExtendedEntry": vdsl2InmConfProfileExtendedEntry,
       "xdsl2InmConfProfProfileName": xdsl2InmConfProfProfileName,
       "xdsl2InmConfProfVtucInpEq": xdsl2InmConfProfVtucInpEq,
       "xdsl2InmConfProfVturInpEq": xdsl2InmConfProfVturInpEq,
       "xdsl2InmConfProfVtucCC": xdsl2InmConfProfVtucCC,
       "xdsl2InmConfProfVturCC": xdsl2InmConfProfVturCC,
       "xdsl2InmConfProfVtucIATO": xdsl2InmConfProfVtucIATO,
       "xdsl2InmConfProfVturIATO": xdsl2InmConfProfVturIATO,
       "xdsl2InmConfProfVtucIATS": xdsl2InmConfProfVtucIATS,
       "xdsl2InmConfProfVturIATS": xdsl2InmConfProfVturIATS,
       "xdsl2InmConfProfRowStatus": xdsl2InmConfProfRowStatus,
       "xdsl2InmConfProfVtucISDBUS": xdsl2InmConfProfVtucISDBUS,
       "queueRateLimitProfile": queueRateLimitProfile,
       "maxNumOfQueueRateLimitProfiles": maxNumOfQueueRateLimitProfiles,
       "queueRateLimitProfileTable": queueRateLimitProfileTable,
       "queueRateLimitProfileEntry": queueRateLimitProfileEntry,
       "queueRateLimitProfileName": queueRateLimitProfileName,
       "queueRateLimitProfileQueue0CIR": queueRateLimitProfileQueue0CIR,
       "queueRateLimitProfileQueue0PIR": queueRateLimitProfileQueue0PIR,
       "queueRateLimitProfileQueue1CIR": queueRateLimitProfileQueue1CIR,
       "queueRateLimitProfileQueue1PIR": queueRateLimitProfileQueue1PIR,
       "queueRateLimitProfileQueue2CIR": queueRateLimitProfileQueue2CIR,
       "queueRateLimitProfileQueue2PIR": queueRateLimitProfileQueue2PIR,
       "queueRateLimitProfileQueue3CIR": queueRateLimitProfileQueue3CIR,
       "queueRateLimitProfileQueue3PIR": queueRateLimitProfileQueue3PIR,
       "queueRateLimitProfileQueue4CIR": queueRateLimitProfileQueue4CIR,
       "queueRateLimitProfileQueue4PIR": queueRateLimitProfileQueue4PIR,
       "queueRateLimitProfileQueue5CIR": queueRateLimitProfileQueue5CIR,
       "queueRateLimitProfileQueue5PIR": queueRateLimitProfileQueue5PIR,
       "queueRateLimitProfileQueue6CIR": queueRateLimitProfileQueue6CIR,
       "queueRateLimitProfileQueue6PIR": queueRateLimitProfileQueue6PIR,
       "queueRateLimitProfileQueue7CIR": queueRateLimitProfileQueue7CIR,
       "queueRateLimitProfileQueue7PIR": queueRateLimitProfileQueue7PIR,
       "queueRateLimitProfileRowStatus": queueRateLimitProfileRowStatus,
       "ipqos2Profile": ipqos2Profile,
       "maxNumOfIpqos2Profiles": maxNumOfIpqos2Profiles,
       "ipqos2ProfileTable": ipqos2ProfileTable,
       "ipqos2ProfileEntry": ipqos2ProfileEntry,
       "ipqos2ProfileName": ipqos2ProfileName,
       "ipqos2ProfileAlgorithm": ipqos2ProfileAlgorithm,
       "ipqos2ProfileVcLevel": ipqos2ProfileVcLevel,
       "ipqos2ProfileVcMaxRate": ipqos2ProfileVcMaxRate,
       "ipqos2ProfileVcDepth": ipqos2ProfileVcDepth,
       "ipqos2ProfileQueue0Weight": ipqos2ProfileQueue0Weight,
       "ipqos2ProfileQueue0MaxRate": ipqos2ProfileQueue0MaxRate,
       "ipqos2ProfileQueue0Depth": ipqos2ProfileQueue0Depth,
       "ipqos2ProfileQueue1Weight": ipqos2ProfileQueue1Weight,
       "ipqos2ProfileQueue1MaxRate": ipqos2ProfileQueue1MaxRate,
       "ipqos2ProfileQueue1Depth": ipqos2ProfileQueue1Depth,
       "ipqos2ProfileQueue2Weight": ipqos2ProfileQueue2Weight,
       "ipqos2ProfileQueue2MaxRate": ipqos2ProfileQueue2MaxRate,
       "ipqos2ProfileQueue2Depth": ipqos2ProfileQueue2Depth,
       "ipqos2ProfileQueue3Weight": ipqos2ProfileQueue3Weight,
       "ipqos2ProfileQueue3MaxRate": ipqos2ProfileQueue3MaxRate,
       "ipqos2ProfileQueue3Depth": ipqos2ProfileQueue3Depth,
       "ipqos2ProfileQueue4Weight": ipqos2ProfileQueue4Weight,
       "ipqos2ProfileQueue4MaxRate": ipqos2ProfileQueue4MaxRate,
       "ipqos2ProfileQueue4Depth": ipqos2ProfileQueue4Depth,
       "ipqos2ProfileQueue5Weight": ipqos2ProfileQueue5Weight,
       "ipqos2ProfileQueue5MaxRate": ipqos2ProfileQueue5MaxRate,
       "ipqos2ProfileQueue5Depth": ipqos2ProfileQueue5Depth,
       "ipqos2ProfileQueue6Weight": ipqos2ProfileQueue6Weight,
       "ipqos2ProfileQueue6MaxRate": ipqos2ProfileQueue6MaxRate,
       "ipqos2ProfileQueue6Depth": ipqos2ProfileQueue6Depth,
       "ipqos2ProfileQueue7Weight": ipqos2ProfileQueue7Weight,
       "ipqos2ProfileQueue7MaxRate": ipqos2ProfileQueue7MaxRate,
       "ipqos2ProfileQueue7Depth": ipqos2ProfileQueue7Depth,
       "ipqos2ProfileRowStatus": ipqos2ProfileRowStatus,
       "switch": switch,
       "managementVLANId": managementVLANId,
       "maxNumOfStaticVlans": maxNumOfStaticVlans,
       "enetport": enetport,
       "enetPortTable": enetPortTable,
       "enetPortEntry": enetPortEntry,
       "enetPortSpeed": enetPortSpeed,
       "enetPortFlowControl": enetPortFlowControl,
       "enetPortMode": enetPortMode,
       "enetPortVLANTrunkEnable": enetPortVLANTrunkEnable,
       "enetPortDscpEnable": enetPortDscpEnable,
       "enetPortTpid": enetPortTpid,
       "enetPortSfpTable": enetPortSfpTable,
       "enetPortSfpEntry": enetPortSfpEntry,
       "sfpTempLow": sfpTempLow,
       "sfpTempHigh": sfpTempHigh,
       "sfpVccLow": sfpVccLow,
       "sfpVccHigh": sfpVccHigh,
       "sfpTxBiasLow": sfpTxBiasLow,
       "sfpTxBiasHigh": sfpTxBiasHigh,
       "sfpTxPowerLow": sfpTxPowerLow,
       "sfpTxPowerHigh": sfpTxPowerHigh,
       "sfpRxPowerLow": sfpRxPowerLow,
       "sfpRxPowerHigh": sfpRxPowerHigh,
       "bandwidth": bandwidth,
       "bwPortTable": bwPortTable,
       "bwPortEntry": bwPortEntry,
       "bwPortEnable": bwPortEnable,
       "bwPortIngressRate": bwPortIngressRate,
       "bwPortEgressRate": bwPortEgressRate,
       "qschedule": qschedule,
       "qschedulePortTable": qschedulePortTable,
       "qschedulePortEntry": qschedulePortEntry,
       "qschedulePortType": qschedulePortType,
       "queueWeightTable": queueWeightTable,
       "queueWeightEntry": queueWeightEntry,
       "queueWeight": queueWeight,
       "dot3ad": dot3ad,
       "dot3adTable": dot3adTable,
       "dot3adEntry": dot3adEntry,
       "dot3adGroupId": dot3adGroupId,
       "dot3adEnable": dot3adEnable,
       "dot3adGroupName": dot3adGroupName,
       "dot3adGroupPortList": dot3adGroupPortList,
       "lacpPriority": lacpPriority,
       "lacpTimeout": lacpTimeout,
       "portTrunkingTable": portTrunkingTable,
       "portTrunkingEntry": portTrunkingEntry,
       "portTrunkingGroupId": portTrunkingGroupId,
       "portTrunkingStatus": portTrunkingStatus,
       "portTrunkingPortList": portTrunkingPortList,
       "aggPortTable": aggPortTable,
       "aggPortEntry": aggPortEntry,
       "aggPortJoin": aggPortJoin,
       "elcPortTrunkingTable": elcPortTrunkingTable,
       "elcPortTrunkingEntry": elcPortTrunkingEntry,
       "elcPortTrunkingSlot": elcPortTrunkingSlot,
       "elcPortTrunkingGroupId": elcPortTrunkingGroupId,
       "elcPortTrunkingStatus": elcPortTrunkingStatus,
       "elcPortTrunkingPortList": elcPortTrunkingPortList,
       "stp": stp,
       "rstpEnable": rstpEnable,
       "bcastCtrl": bcastCtrl,
       "bctrlPortTable": bctrlPortTable,
       "bctrlPortEntry": bctrlPortEntry,
       "bctrlPortBcastEnable": bctrlPortBcastEnable,
       "bctrlPortMcastEnable": bctrlPortMcastEnable,
       "bctrlPortUcastEnable": bctrlPortUcastEnable,
       "bctrlPortBcastThresh": bctrlPortBcastThresh,
       "bctrlPortMcastThresh": bctrlPortMcastThresh,
       "bctrlPortUcastThresh": bctrlPortUcastThresh,
       "portIsolation": portIsolation,
       "portIsolationEnable": portIsolationEnable,
       "dscp": dscp,
       "dscpMappingPortTable": dscpMappingPortTable,
       "dscpMappingPortEntry": dscpMappingPortEntry,
       "dscpMappingPortSrcCodePoint": dscpMappingPortSrcCodePoint,
       "dscpMappingPortMapCodePoint": dscpMappingPortMapCodePoint,
       "dscpMappingPortMapPriority": dscpMappingPortMapPriority,
       "mstp": mstp,
       "mstpEnable": mstpEnable,
       "mstpProtocolVersion": mstpProtocolVersion,
       "mstpBridgeMaxAge": mstpBridgeMaxAge,
       "mstpBridgeHelloTime": mstpBridgeHelloTime,
       "mstpBridgeForwardDelay": mstpBridgeForwardDelay,
       "mstpMaxHops": mstpMaxHops,
       "mstpCfgName": mstpCfgName,
       "mstpCfgRevLevel": mstpCfgRevLevel,
       "mstpCfgDigest": mstpCfgDigest,
       "mstpMapTable": mstpMapTable,
       "mstpMapEntry": mstpMapEntry,
       "mstpMapIndex": mstpMapIndex,
       "mstpMapVlans1k": mstpMapVlans1k,
       "mstpMapVlans2k": mstpMapVlans2k,
       "mstpMapVlans3k": mstpMapVlans3k,
       "mstpMapVlans4k": mstpMapVlans4k,
       "mstpVlanTable": mstpVlanTable,
       "mstpVlanEntry": mstpVlanEntry,
       "mstpVlanIndex": mstpVlanIndex,
       "mstpVlanMstIndex": mstpVlanMstIndex,
       "mstpPortTable": mstpPortTable,
       "mstpPortEntry": mstpPortEntry,
       "mstpPortAdminEdgePort": mstpPortAdminEdgePort,
       "mstpPortAdminPointToPoint": mstpPortAdminPointToPoint,
       "mstpXstTable": mstpXstTable,
       "mstpXstEntry": mstpXstEntry,
       "mstpXstId": mstpXstId,
       "mstpXstBridgePriority": mstpXstBridgePriority,
       "mstpXstPortTable": mstpXstPortTable,
       "mstpXstPortEntry": mstpXstPortEntry,
       "mstpXstPortXstId": mstpXstPortXstId,
       "mstpXstPortIndex": mstpXstPortIndex,
       "mstpXstPortEnable": mstpXstPortEnable,
       "mstpXstPortPriority": mstpXstPortPriority,
       "mstpXstPortAdminPathCost": mstpXstPortAdminPathCost,
       "vlanIsolation": vlanIsolation,
       "vlanIsolationTable": vlanIsolationTable,
       "vlanIsolationEntry": vlanIsolationEntry,
       "vlanIsolationRowStatus": vlanIsolationRowStatus,
       "mac": mac,
       "macAgingTime": macAgingTime,
       "cfm": cfm,
       "cfmLoopbackPortTable": cfmLoopbackPortTable,
       "cfmLoopbackPortEntry": cfmLoopbackPortEntry,
       "cfmLoopbackPortState": cfmLoopbackPortState,
       "cfmMIPTable": cfmMIPTable,
       "cfmMIPEntry": cfmMIPEntry,
       "cfmLevel": cfmLevel,
       "cfmVlanID": cfmVlanID,
       "cfmPort": cfmPort,
       "cfmMIPRowStatus": cfmMIPRowStatus,
       "cfmMIPMacAddress": cfmMIPMacAddress,
       "cfmActionEnableStatus": cfmActionEnableStatus,
       "cfmMode": cfmMode,
       "cfmMIPRespondMcastLbm": cfmMIPRespondMcastLbm,
       "cfmLoopbackTimeout": cfmLoopbackTimeout,
       "cfmLbrTable": cfmLbrTable,
       "cfmLbrEntry": cfmLbrEntry,
       "cfmLbrSeqNumber": cfmLbrSeqNumber,
       "cfmLbrReceiveOrder": cfmLbrReceiveOrder,
       "cfmLbrSrcMac": cfmLbrSrcMac,
       "oam": oam,
       "remoteLoopbackTable": remoteLoopbackTable,
       "remoteLoopbackEntry": remoteLoopbackEntry,
       "remoteLoopbackEnable": remoteLoopbackEnable,
       "vlanpriority": vlanpriority,
       "vlanpriorityEnable": vlanpriorityEnable,
       "vlanpriorityTable": vlanpriorityTable,
       "vlanpriorityEntry": vlanpriorityEntry,
       "vlanpriorityVid": vlanpriorityVid,
       "vlanpriorityPri": vlanpriorityPri,
       "vlanpriorityRowStatus": vlanpriorityRowStatus,
       "mirror": mirror,
       "mirrorEnable": mirrorEnable,
       "mirrorMonitorPort": mirrorMonitorPort,
       "mirrorPortTable": mirrorPortTable,
       "mirrorPortEntry": mirrorPortEntry,
       "mirrorPortDirection": mirrorPortDirection,
       "lldp": lldp,
       "lldpEnable": lldpEnable,
       "sys": sys,
       "sysState": sysState,
       "systemStatus": systemStatus,
       "ledStatus": ledStatus,
       "ledAlarmStatus": ledAlarmStatus,
       "chassisStats": chassisStats,
       "dcPowerStatus": dcPowerStatus,
       "extAlarmStatus": extAlarmStatus,
       "sysOperation": sysOperation,
       "sysTarget": sysTarget,
       "sysOps": sysOps,
       "sysRebootTime": sysRebootTime,
       "hwMonitor": hwMonitor,
       "fanRpmTable": fanRpmTable,
       "fanRpmEntry": fanRpmEntry,
       "fanRpmIndex": fanRpmIndex,
       "fanRpmCurValue": fanRpmCurValue,
       "fanRpmMaxValue": fanRpmMaxValue,
       "fanRpmMinValue": fanRpmMinValue,
       "fanRpmLowThresh": fanRpmLowThresh,
       "fanRpmDescr": fanRpmDescr,
       "fanRpmHighThresh": fanRpmHighThresh,
       "voltageTable": voltageTable,
       "voltageEntry": voltageEntry,
       "voltageIndex": voltageIndex,
       "voltageCurValue": voltageCurValue,
       "voltageMaxValue": voltageMaxValue,
       "voltageMinValue": voltageMinValue,
       "voltageNominalValue": voltageNominalValue,
       "voltageLowThresh": voltageLowThresh,
       "voltageDescr": voltageDescr,
       "voltageHighThresh": voltageHighThresh,
       "temperatureTable": temperatureTable,
       "temperatureEntry": temperatureEntry,
       "temperatureIndex": temperatureIndex,
       "temperatureCurValue": temperatureCurValue,
       "temperatureMaxValue": temperatureMaxValue,
       "temperatureMinValue": temperatureMinValue,
       "temperatureHighThresh": temperatureHighThresh,
       "temperatureDescr": temperatureDescr,
       "temperatureLowThresh": temperatureLowThresh,
       "cpuUtilizationTable": cpuUtilizationTable,
       "cpuUtilizationEntry": cpuUtilizationEntry,
       "cpuIndex": cpuIndex,
       "cpuCurValue": cpuCurValue,
       "cpuMaxValue": cpuMaxValue,
       "cpuHighThresh": cpuHighThresh,
       "cpuDescr": cpuDescr,
       "packetBufferUsageTable": packetBufferUsageTable,
       "packetBufferUsageEntry": packetBufferUsageEntry,
       "packetBufferIndex": packetBufferIndex,
       "packetBufferCurValue": packetBufferCurValue,
       "packetBufferMaxValue": packetBufferMaxValue,
       "packetBufferHighThresh": packetBufferHighThresh,
       "packetBufferDescr": packetBufferDescr,
       "memoryUsageTable": memoryUsageTable,
       "memoryUsageEntry": memoryUsageEntry,
       "memoryIndex": memoryIndex,
       "memoryCurValue": memoryCurValue,
       "memoryMaxValue": memoryMaxValue,
       "memoryHighThresh": memoryHighThresh,
       "memoryDescr": memoryDescr,
       "timeSetup": timeSetup,
       "timeServerMode": timeServerMode,
       "timeServerIP": timeServerIP,
       "systemTime": systemTime,
       "systemDate": systemDate,
       "systemTimeZone": systemTimeZone,
       "timeServerSync": timeServerSync,
       "dayLightSaving": dayLightSaving,
       "dayLightSavingAdminStatus": dayLightSavingAdminStatus,
       "dayLightSavingStartTime": dayLightSavingStartTime,
       "dayLightSavingStartMonth": dayLightSavingStartMonth,
       "dayLightSavingStartWeek": dayLightSavingStartWeek,
       "dayLightSavingStartWday": dayLightSavingStartWday,
       "dayLightSavingStartHour": dayLightSavingStartHour,
       "dayLightSavingEndTime": dayLightSavingEndTime,
       "dayLightSavingEndMonth": dayLightSavingEndMonth,
       "dayLightSavingEndWeek": dayLightSavingEndWeek,
       "dayLightSavingEndWday": dayLightSavingEndWday,
       "dayLightSavingEndHour": dayLightSavingEndHour,
       "timeServerInetAddrType": timeServerInetAddrType,
       "timeServerInetAddr": timeServerInetAddr,
       "accessCtrl": accessCtrl,
       "accessCtrlTable": accessCtrlTable,
       "accessCtrlEntry": accessCtrlEntry,
       "accessCtrlService": accessCtrlService,
       "accessCtrlEnable": accessCtrlEnable,
       "accessCtrlPort": accessCtrlPort,
       "securedClientTable": securedClientTable,
       "securedClientEntry": securedClientEntry,
       "securedClientIndex": securedClientIndex,
       "securedClientStartIp": securedClientStartIp,
       "securedClientEndIp": securedClientEndIp,
       "securedClientService": securedClientService,
       "securedClientEnable": securedClientEnable,
       "securedClientInetTable": securedClientInetTable,
       "securedClientInetEntry": securedClientInetEntry,
       "securedClientInetIndex": securedClientInetIndex,
       "securedClientInetAddrType": securedClientInetAddrType,
       "securedClientInetAddr": securedClientInetAddr,
       "securedClientInetMask": securedClientInetMask,
       "securedClientInetService": securedClientInetService,
       "securedClientInetEnable": securedClientInetEnable,
       "syslog": syslog,
       "syslogEnable": syslogEnable,
       "syslogTable": syslogTable,
       "syslogEntry": syslogEntry,
       "syslogFacility": syslogFacility,
       "syslogServer": syslogServer,
       "syslogServerInetAddrType": syslogServerInetAddrType,
       "syslogServerInetAddr": syslogServerInetAddr,
       "snmp": snmp,
       "trapDestTable": trapDestTable,
       "trapDestEntry": trapDestEntry,
       "trapDestIndex": trapDestIndex,
       "trapDestIp": trapDestIp,
       "trapDestPort": trapDestPort,
       "trapDestSnmpVersion": trapDestSnmpVersion,
       "trapDestUserName": trapDestUserName,
       "trapDestInetAddrType": trapDestInetAddrType,
       "trapDestInetAddr": trapDestInetAddr,
       "snmpGetCommunity": snmpGetCommunity,
       "snmpSetCommunity": snmpSetCommunity,
       "snmpTrapCommunity": snmpTrapCommunity,
       "snmpUserTable": snmpUserTable,
       "snmpUserEntry": snmpUserEntry,
       "snmpUserName": snmpUserName,
       "snmpUserSecurityLevel": snmpUserSecurityLevel,
       "snmpUserAuthProtocol": snmpUserAuthProtocol,
       "snmpUserPrivProtocol": snmpUserPrivProtocol,
       "snmpVersion": snmpVersion,
       "user": user,
       "userTable": userTable,
       "userEntry": userEntry,
       "userName": userName,
       "userPassword": userPassword,
       "userPriviledge": userPriviledge,
       "userRowStatus": userRowStatus,
       "aaa": aaa,
       "auth": auth,
       "loginMethod1": loginMethod1,
       "loginMethod2": loginMethod2,
       "loginMethod3": loginMethod3,
       "enableMethod1": enableMethod1,
       "enableMethod2": enableMethod2,
       "loginTryCont": loginTryCont,
       "acct": acct,
       "systemActive": systemActive,
       "systemMethod": systemMethod,
       "systemBroadcast": systemBroadcast,
       "execActive": execActive,
       "execMethod": execMethod,
       "execMode": execMode,
       "execBroadcast": execBroadcast,
       "commandsActive": commandsActive,
       "commandsPrivilege": commandsPrivilege,
       "commandsBroadcast": commandsBroadcast,
       "updatePeriod": updatePeriod,
       "radius": radius,
       "radiusAuth": radiusAuth,
       "radiusAuthRedundantMode": radiusAuthRedundantMode,
       "radiusAuthTimeoutPeriod": radiusAuthTimeoutPeriod,
       "radiusAuthServerTable": radiusAuthServerTable,
       "radiusAuthServerEntry": radiusAuthServerEntry,
       "radiusAuthServerIndex": radiusAuthServerIndex,
       "radiusAuthServerIP": radiusAuthServerIP,
       "radiusAuthServerPort": radiusAuthServerPort,
       "radiusAuthServerSecret": radiusAuthServerSecret,
       "radiusAcct": radiusAcct,
       "radiusAcctTimeoutPeriod": radiusAcctTimeoutPeriod,
       "radiusAcctServerTable": radiusAcctServerTable,
       "radiusAcctServerEntry": radiusAcctServerEntry,
       "radiusAcctServerIndex": radiusAcctServerIndex,
       "radiusAcctServerIP": radiusAcctServerIP,
       "radiusAcctServerPort": radiusAcctServerPort,
       "radiusAcctServerSecret": radiusAcctServerSecret,
       "radiusAcctRedundantMode": radiusAcctRedundantMode,
       "tacacsplus": tacacsplus,
       "tacacsplusAuth": tacacsplusAuth,
       "tacacsplusAuthRedundantMode": tacacsplusAuthRedundantMode,
       "tacacsplusAuthTimeoutPeriod": tacacsplusAuthTimeoutPeriod,
       "tacacsplusAuthServerTable": tacacsplusAuthServerTable,
       "tacacsplusAuthServerEntry": tacacsplusAuthServerEntry,
       "tacscsplusAuthServerIndex": tacscsplusAuthServerIndex,
       "tacscsplusAuthServerIP": tacscsplusAuthServerIP,
       "tacscsplusAuthServerPort": tacscsplusAuthServerPort,
       "tacscsplusAuthServerSecret": tacscsplusAuthServerSecret,
       "tacacsplusAcct": tacacsplusAcct,
       "tacacsplusAcctTimeoutPeriod": tacacsplusAcctTimeoutPeriod,
       "tacacsplusAcctServerTable": tacacsplusAcctServerTable,
       "tacacsplusAcctServerEntry": tacacsplusAcctServerEntry,
       "tacacsplusAcctServerIndex": tacacsplusAcctServerIndex,
       "tacacsplusAcctServerIP": tacacsplusAcctServerIP,
       "tacacsplusAcctServerPort": tacacsplusAcctServerPort,
       "tacacsplusAcctServerSecret": tacacsplusAcctServerSecret,
       "tacacsplusAcctRedundantMode": tacacsplusAcctRedundantMode,
       "tacacsplusAuthor": tacacsplusAuthor,
       "tacacsplusAuthorRedundantMode": tacacsplusAuthorRedundantMode,
       "tacacsplusAuthorTimeoutPeriod": tacacsplusAuthorTimeoutPeriod,
       "tacacsplusAuthorServerTable": tacacsplusAuthorServerTable,
       "tacacsplusAuthorServerEntry": tacacsplusAuthorServerEntry,
       "tacscsplusAuthorServerIndex": tacscsplusAuthorServerIndex,
       "tacscsplusAuthorServerIP": tacscsplusAuthorServerIP,
       "tacscsplusAuthorServerPort": tacscsplusAuthorServerPort,
       "tacscsplusAuthorServerSecret": tacscsplusAuthorServerSecret,
       "author": author,
       "authorCmdMethodTable": authorCmdMethodTable,
       "authorCmdMethodEntry": authorCmdMethodEntry,
       "authorCmdMethod": authorCmdMethod,
       "authorExec": authorExec,
       "session": session,
       "sessionTimeOut": sessionTimeOut,
       "sessionLoginMessage": sessionLoginMessage,
       "bootimage": bootimage,
       "sysBootImage": sysBootImage,
       "trap": trap,
       "object": object,
       "eqpt48VPowerIndex": eqpt48VPowerIndex,
       "eqptAlarmInputIndex": eqptAlarmInputIndex,
       "eqptDslDeviceIndex": eqptDslDeviceIndex,
       "eqptShdslSubDeviceIndex": eqptShdslSubDeviceIndex,
       "sysUser": sysUser,
       "sysAccessPoint": sysAccessPoint,
       "sysAccessPointIndex": sysAccessPointIndex,
       "sysUserLoginIp": sysUserLoginIp,
       "eqptLTResetSource": eqptLTResetSource,
       "sysProfSyncIpAddress": sysProfSyncIpAddress,
       "sysMacAntiSpoofOrig": sysMacAntiSpoofOrig,
       "sysMacAntiSpoofNew": sysMacAntiSpoofNew,
       "sysMacAntiSpoofMac": sysMacAntiSpoofMac,
       "intfCfmCcmErrorCause": intfCfmCcmErrorCause,
       "e1AlarmStatus": e1AlarmStatus,
       "e1AlarmCurrentValue": e1AlarmCurrentValue,
       "e1AlarmThreshold": e1AlarmThreshold,
       "dslMacAntiSpoofOrig": dslMacAntiSpoofOrig,
       "dslMacAntiSpoofMac": dslMacAntiSpoofMac,
       "vopTermPhoneState": vopTermPhoneState,
       "vopRingTimerSegment": vopRingTimerSegment,
       "vopRingTimerId": vopRingTimerId,
       "vopDscCodecType": vopDscCodecType,
       "vopMcMediaId": vopMcMediaId,
       "vopMcPort": vopMcPort,
       "vopDropCallType": vopDropCallType,
       "sysUserLoginInetAddrType": sysUserLoginInetAddrType,
       "sysUserLoginInetAddr": sysUserLoginInetAddr,
       "vopDeviceId": vopDeviceId,
       "vopBatteryNum": vopBatteryNum,
       "vopRingerShortCount": vopRingerShortCount,
       "vopMgcIP": vopMgcIP,
       "eqptSptMstiInstanceId": eqptSptMstiInstanceId,
       "eqptSptPortStateOrig": eqptSptPortStateOrig,
       "eqptSptPortStateNew": eqptSptPortStateNew,
       "eqptSptPortRoleOrig": eqptSptPortRoleOrig,
       "eqptSptPortRoleNew": eqptSptPortRoleNew,
       "dsl": dsl,
       "dslLineEnable": dslLineEnable,
       "dslLineDisable": dslLineDisable,
       "dslLineBelowPlannedRate": dslLineBelowPlannedRate,
       "dslLineLdmStart": dslLineLdmStart,
       "dslLineLdmDone": dslLineLdmDone,
       "dslLinePowerDownL2": dslLinePowerDownL2,
       "dslLinePowerDownL0": dslLinePowerDownL0,
       "dslLineFailure": dslLineFailure,
       "dslLineEnterTest": dslLineEnterTest,
       "dslLineExitTest": dslLineExitTest,
       "dslLineVdslRateChange": dslLineVdslRateChange,
       "dslLoopGuard": dslLoopGuard,
       "dslMacAntiSpoof": dslMacAntiSpoof,
       "dslLineVturInfoReady": dslLineVturInfoReady,
       "dslLineVturLpr": dslLineVturLpr,
       "equipment": equipment,
       "eqpt48VPowerFailure": eqpt48VPowerFailure,
       "eqpt48VPowerNormal": eqpt48VPowerNormal,
       "eqptVoltageError": eqptVoltageError,
       "eqptVoltageNormal": eqptVoltageNormal,
       "eqptTempError": eqptTempError,
       "eqptTempNormal": eqptTempNormal,
       "eqptFanError": eqptFanError,
       "eqptFanNormal": eqptFanNormal,
       "eqptTempLowFanStop": eqptTempLowFanStop,
       "eqptHWMonitorFailure": eqptHWMonitorFailure,
       "eqptExternalAlarmInput": eqptExternalAlarmInput,
       "eqptTopologyChange": eqptTopologyChange,
       "eqptFWUploadOK": eqptFWUploadOK,
       "eqptFWUploadFailure": eqptFWUploadFailure,
       "eqptLTPlugIn": eqptLTPlugIn,
       "eqptLTPullOut": eqptLTPullOut,
       "eqptLTActive": eqptLTActive,
       "eqptLTInactive": eqptLTInactive,
       "eqptLTFWUploadOK": eqptLTFWUploadOK,
       "eqptLTFWUploadFailure": eqptLTFWUploadFailure,
       "eqptLTDslDeviceFailure": eqptLTDslDeviceFailure,
       "eqptLTDslDeviceRedownload": eqptLTDslDeviceRedownload,
       "eqptLTShdslDeviceRedownload": eqptLTShdslDeviceRedownload,
       "eqptLTEnable": eqptLTEnable,
       "eqptLTDisable": eqptLTDisable,
       "eqptLTReset": eqptLTReset,
       "eqptExternalAlarmInputRelease": eqptExternalAlarmInputRelease,
       "eqptNTSwitchOK": eqptNTSwitchOK,
       "eqptCpuUtilizationHigh": eqptCpuUtilizationHigh,
       "eqptCpuUtilizationNormal": eqptCpuUtilizationNormal,
       "eqptPacketBufferUsageHigh": eqptPacketBufferUsageHigh,
       "eqptPacketBufferUsageNormal": eqptPacketBufferUsageNormal,
       "eqptMemoryUsageHigh": eqptMemoryUsageHigh,
       "eqptMemoryUsageNormal": eqptMemoryUsageNormal,
       "eqptDbInactive": eqptDbInactive,
       "eqptDbNormal": eqptDbNormal,
       "eqptDbReset": eqptDbReset,
       "eqptSptPortStateChange": eqptSptPortStateChange,
       "eqptSptPortRoleChange": eqptSptPortRoleChange,
       "systrap": systrap,
       "sysReboot": sysReboot,
       "sysConfigChange": sysConfigChange,
       "sysConfigUploadOK": sysConfigUploadOK,
       "sysConfigUploadFailure": sysConfigUploadFailure,
       "sysTimeSyncFailure": sysTimeSyncFailure,
       "sysAlarmCutoffEnable": sysAlarmCutoffEnable,
       "sysAlarmClearEnable": sysAlarmClearEnable,
       "sysLoginFailure": sysLoginFailure,
       "sysLogin": sysLogin,
       "sysUserAdded": sysUserAdded,
       "sysUserDeleted": sysUserDeleted,
       "sysUserModified": sysUserModified,
       "sysSvrSyncProfOK": sysSvrSyncProfOK,
       "sysSvrSyncProfFail": sysSvrSyncProfFail,
       "sysCliSyncProfOK": sysCliSyncProfOK,
       "sysCliSyncProfFail": sysCliSyncProfFail,
       "sysMacAntiSpoofing": sysMacAntiSpoofing,
       "sysClusterMemberAdd": sysClusterMemberAdd,
       "sysClusterMemberDelete": sysClusterMemberDelete,
       "sysClusterMemberActive": sysClusterMemberActive,
       "sysClusterMemberInactive": sysClusterMemberInactive,
       "sysLoginInet": sysLoginInet,
       "sysLoginFailureInet": sysLoginFailureInet,
       "enet": enet,
       "enetEnable": enetEnable,
       "enetDisable": enetDisable,
       "enetLoopGuard": enetLoopGuard,
       "enetSfpError": enetSfpError,
       "enetSfpNormal": enetSfpNormal,
       "enetSfpTxEnable": enetSfpTxEnable,
       "enetSfpTxDisable": enetSfpTxDisable,
       "interface": interface,
       "cfmCcmError": cfmCcmError,
       "tdm": tdm,
       "e1AlarmLinkLOS": e1AlarmLinkLOS,
       "e1AlarmPathLOF": e1AlarmPathLOF,
       "e1AlarmPathAIS": e1AlarmPathAIS,
       "e1AlarmPathRDI": e1AlarmPathRDI,
       "e1AlarmPathOCASMF": e1AlarmPathOCASMF,
       "e1AlarmPathOCRCMF": e1AlarmPathOCRCMF,
       "e1AlarmLinkSF": e1AlarmLinkSF,
       "e1AlarmLinkSD": e1AlarmLinkSD,
       "e1AlarmTCAQuarterES": e1AlarmTCAQuarterES,
       "e1AlarmTCAQuarterSES": e1AlarmTCAQuarterSES,
       "e1AlarmTCAQuarterUAS": e1AlarmTCAQuarterUAS,
       "e1AlarmTCADayES": e1AlarmTCADayES,
       "e1AlarmTCADaySES": e1AlarmTCADaySES,
       "e1AlarmTCADayUAS": e1AlarmTCADayUAS,
       "voiptrap": voiptrap,
       "vopTempError": vopTempError,
       "vopTempNormal": vopTempNormal,
       "vopDCFail": vopDCFail,
       "vopDCNormal": vopDCNormal,
       "vopACFail": vopACFail,
       "vopACNormal": vopACNormal,
       "vopRingTimer": vopRingTimer,
       "vopRingResource": vopRingResource,
       "vopRingOverHead": vopRingOverHead,
       "vopNoFreeDSPChannel": vopNoFreeDSPChannel,
       "vopMCMissing": vopMCMissing,
       "vopSCMissing": vopSCMissing,
       "vopTermNameDup": vopTermNameDup,
       "vopNoProtection": vopNoProtection,
       "vopProtectionSwitch": vopProtectionSwitch,
       "vopDropCall": vopDropCall,
       "vopBatteryFail": vopBatteryFail,
       "vopBatteryNormal": vopBatteryNormal,
       "vopClockFail": vopClockFail,
       "vopClockNormal": vopClockNormal,
       "vopRingerFail": vopRingerFail,
       "vopRingerNormal": vopRingerNormal,
       "vopMgcMissing": vopMgcMissing,
       "vopMgcNormal": vopMgcNormal,
       "vopMgEnable": vopMgEnable,
       "vopMgDisable": vopMgDisable,
       "vopPortMissing": vopPortMissing,
       "vopPortNormal": vopPortNormal,
       "vopMcNormal": vopMcNormal,
       "vopScNormal": vopScNormal,
       "vopScBulkSyncReady": vopScBulkSyncReady,
       "vopProtectionReady": vopProtectionReady,
       "statistics": statistics,
       "dhcpStats": dhcpStats,
       "dhcpSnoopIpTable": dhcpSnoopIpTable,
       "dhcpSnoopIpEntry": dhcpSnoopIpEntry,
       "dhcpSnoopIp": dhcpSnoopIp,
       "dhcpSnoopMac": dhcpSnoopMac,
       "dhcpSnoopVid": dhcpSnoopVid,
       "dhcpSnoopCounterTable": dhcpSnoopCounterTable,
       "dhcpSnoopCounterEntry": dhcpSnoopCounterEntry,
       "dhcpDiscovery": dhcpDiscovery,
       "dhcpOffer": dhcpOffer,
       "dhcpRequest": dhcpRequest,
       "dhcpAck": dhcpAck,
       "dhcpAckBySnoopFull": dhcpAckBySnoopFull,
       "dhcpv6Solicit": dhcpv6Solicit,
       "dhcpv6Advertise": dhcpv6Advertise,
       "dhcpv6Request": dhcpv6Request,
       "dhcpv6Reply": dhcpv6Reply,
       "dhcpv6Renew": dhcpv6Renew,
       "dhcpv6Rebind": dhcpv6Rebind,
       "dhcpv6Release": dhcpv6Release,
       "dhcpv6RelayFwd": dhcpv6RelayFwd,
       "dhcpv6RelayReply": dhcpv6RelayReply,
       "dhcpv6SnoopIpTable": dhcpv6SnoopIpTable,
       "dhcpv6SnoopIpEntry": dhcpv6SnoopIpEntry,
       "dhcpv6SnoopInetAddrType": dhcpv6SnoopInetAddrType,
       "dhcpv6SnoopInetAddr": dhcpv6SnoopInetAddr,
       "dhcpv6SnoopMac": dhcpv6SnoopMac,
       "dhcpv6SnoopVid": dhcpv6SnoopVid,
       "igmpStats": igmpStats,
       "igmpQueryCntTotal": igmpQueryCntTotal,
       "igmpReportCntTotal": igmpReportCntTotal,
       "igmpLeaveCntTotal": igmpLeaveCntTotal,
       "igmpNumOfActiveGroups": igmpNumOfActiveGroups,
       "igmpGroupTable": igmpGroupTable,
       "igmpGroupEntry": igmpGroupEntry,
       "igmpGroupVid": igmpGroupVid,
       "igmpGroupIp": igmpGroupIp,
       "igmpGroupNumOfMembers": igmpGroupNumOfMembers,
       "igmpGroupMemberPorts": igmpGroupMemberPorts,
       "igmpGroupPortTable": igmpGroupPortTable,
       "igmpGroupPortEntry": igmpGroupPortEntry,
       "igmpGroupPortVid": igmpGroupPortVid,
       "igmpGroupPortIp": igmpGroupPortIp,
       "igmpGroupPortSourceIp": igmpGroupPortSourceIp,
       "igmpPortCtrlPduTable": igmpPortCtrlPduTable,
       "igmpPortCtrlPduEntry": igmpPortCtrlPduEntry,
       "igmpPortCtrlPduQueryCnt": igmpPortCtrlPduQueryCnt,
       "igmpPortCtrlPduReportCnt": igmpPortCtrlPduReportCnt,
       "igmpPortCtrlPduLeaveCnt": igmpPortCtrlPduLeaveCnt,
       "igmpPortNumOfActiveGroups": igmpPortNumOfActiveGroups,
       "igmpPortCtrlPduV2SuccessJoinCnt": igmpPortCtrlPduV2SuccessJoinCnt,
       "igmpPortCtrlPduV2UnsuccJoinCnt": igmpPortCtrlPduV2UnsuccJoinCnt,
       "igmpPortCtrlPduGenQryCnt": igmpPortCtrlPduGenQryCnt,
       "igmpPortCtrlPduSpecQryCnt": igmpPortCtrlPduSpecQryCnt,
       "igmpPortCtrlPduV3SuccessReportCnt": igmpPortCtrlPduV3SuccessReportCnt,
       "igmpPortCtrlPduV3UnsuccReportCnt": igmpPortCtrlPduV3UnsuccReportCnt,
       "igmpPortCtrlPduInvalidCnt": igmpPortCtrlPduInvalidCnt,
       "igmpVlanStatsTable": igmpVlanStatsTable,
       "igmpVlanStatsEntry": igmpVlanStatsEntry,
       "igmpVlanStatsVlanIndex": igmpVlanStatsVlanIndex,
       "igmpVlanStatsQueryCnt": igmpVlanStatsQueryCnt,
       "igmpVlanStatsReportCnt": igmpVlanStatsReportCnt,
       "igmpVlanStatsLeaveCnt": igmpVlanStatsLeaveCnt,
       "igmpVlanStatsNumOfActiveGroups": igmpVlanStatsNumOfActiveGroups,
       "igmpVlanStatsQueryPort": igmpVlanStatsQueryPort,
       "igmpVlanStatsQuerierIp": igmpVlanStatsQuerierIp,
       "igmpVlanStatsUnsuccessReportCnt": igmpVlanStatsUnsuccessReportCnt,
       "igmpVlanStatsSuccessReportCnt": igmpVlanStatsSuccessReportCnt,
       "igmpVlanStatsGeneralQueryInCnt": igmpVlanStatsGeneralQueryInCnt,
       "igmpVlanStatsGeneralQueryOutCnt": igmpVlanStatsGeneralQueryOutCnt,
       "igmpVlanStatsSpecificQueryInCnt": igmpVlanStatsSpecificQueryInCnt,
       "igmpVlanStatsSpecificQueryOutCnt": igmpVlanStatsSpecificQueryOutCnt,
       "igmpQueryOutCnt": igmpQueryOutCnt,
       "igmpReportOutCnt": igmpReportOutCnt,
       "igmpLeaveOutCnt": igmpLeaveOutCnt,
       "igmpQueryDropCnt": igmpQueryDropCnt,
       "igmpReportDropCnt": igmpReportDropCnt,
       "igmpLeaveDropCnt": igmpLeaveDropCnt,
       "macStats": macStats,
       "macDisplayTarget": macDisplayTarget,
       "macTable": macTable,
       "macEntry": macEntry,
       "macAddress": macAddress,
       "macPort": macPort,
       "macStatus": macStatus,
       "macFlush": macFlush,
       "adslStats": adslStats,
       "adslLineStatsAtucNumOfSubcarriersPerPort": adslLineStatsAtucNumOfSubcarriersPerPort,
       "adslLineStatsAturNumOfSubcarriersPerPort": adslLineStatsAturNumOfSubcarriersPerPort,
       "adslLineStatsTable": adslLineStatsTable,
       "adslLineStatsEntry": adslLineStatsEntry,
       "adslLineStatsAtucHlog1": adslLineStatsAtucHlog1,
       "adslLineStatsAtucHlog2": adslLineStatsAtucHlog2,
       "adslLineStatsAturHlog": adslLineStatsAturHlog,
       "adslLineStatsAtucQln1": adslLineStatsAtucQln1,
       "adslLineStatsAtucQln2": adslLineStatsAtucQln2,
       "adslLineStatsAturQln": adslLineStatsAturQln,
       "adslLineStatsAtucTssi1": adslLineStatsAtucTssi1,
       "adslLineStatsAtucTssi2": adslLineStatsAtucTssi2,
       "adslLineStatsAturTssi": adslLineStatsAturTssi,
       "adslLineStatsAtucGain1": adslLineStatsAtucGain1,
       "adslLineStatsAtucGain2": adslLineStatsAtucGain2,
       "adslLineStatsAturGain": adslLineStatsAturGain,
       "adslLineStatsAtucBits1": adslLineStatsAtucBits1,
       "adslLineStatsAtucBits2": adslLineStatsAtucBits2,
       "adslLineStatsAturBits": adslLineStatsAturBits,
       "adslLinePerfTable": adslLinePerfTable,
       "adslLinePerfEntry": adslLinePerfEntry,
       "adslLinePerfAtucCrcFast": adslLinePerfAtucCrcFast,
       "adslLinePerfAturCrcFast": adslLinePerfAturCrcFast,
       "adslLinePerfAtucFecFast": adslLinePerfAtucFecFast,
       "adslLinePerfAturFecFast": adslLinePerfAturFecFast,
       "adslLinePerfAtucCrcInterleave": adslLinePerfAtucCrcInterleave,
       "adslLinePerfAturCrcInterleave": adslLinePerfAturCrcInterleave,
       "adslLinePerfAtucFecInterleave": adslLinePerfAtucFecInterleave,
       "adslLinePerfAturFecInterleave": adslLinePerfAturFecInterleave,
       "adslLinePerfAtucEs": adslLinePerfAtucEs,
       "adslLinePerfAturEs": adslLinePerfAturEs,
       "adslLinePerfAtucSes": adslLinePerfAtucSes,
       "adslLinePerfAturSes": adslLinePerfAturSes,
       "adslLinePerfAtucUas": adslLinePerfAtucUas,
       "adslLinePerfAturUas": adslLinePerfAturUas,
       "adslLinePerfAtucLofs": adslLinePerfAtucLofs,
       "adslLinePerfAturLofs": adslLinePerfAturLofs,
       "adslLinePerfAtucLoss": adslLinePerfAtucLoss,
       "adslLinePerfAturLoss": adslLinePerfAturLoss,
       "adslLinePerfAtucLprs": adslLinePerfAtucLprs,
       "adslLinePerfAturLprs": adslLinePerfAturLprs,
       "shdslStats": shdslStats,
       "shdslLinePerfTable": shdslLinePerfTable,
       "shdslLinePerfEntry": shdslLinePerfEntry,
       "shdslLinePerfEs": shdslLinePerfEs,
       "shdslLinePerfSes": shdslLinePerfSes,
       "shdslLinePerfCrc": shdslLinePerfCrc,
       "shdslLinePerfLosws": shdslLinePerfLosws,
       "shdslLinePerfUas": shdslLinePerfUas,
       "shdslLinePerfSegmentAnomalies": shdslLinePerfSegmentAnomalies,
       "shdslLinePerfSegmentDefect": shdslLinePerfSegmentDefect,
       "shdslPerfCurrTable": shdslPerfCurrTable,
       "shdslPerfCurrEntry": shdslPerfCurrEntry,
       "shdslPerfCurrSturLPR": shdslPerfCurrSturLPR,
       "ipStats": ipStats,
       "ipInterfaceTable": ipInterfaceTable,
       "ipInterfaceEntry": ipInterfaceEntry,
       "ipInterface": ipInterface,
       "ipAddress": ipAddress,
       "ipNetmask": ipNetmask,
       "ipBroadcast": ipBroadcast,
       "ipMtu": ipMtu,
       "ipVid": ipVid,
       "ipInOctet": ipInOctet,
       "ipInUnicast": ipInUnicast,
       "ipInMulticast": ipInMulticast,
       "ipInDiscard": ipInDiscard,
       "ipInError": ipInError,
       "ipInUnknown": ipInUnknown,
       "ipOutOctet": ipOutOctet,
       "ipOutUnicast": ipOutUnicast,
       "ipOutMulticast": ipOutMulticast,
       "ipOutDiscard": ipOutDiscard,
       "ipOutError": ipOutError,
       "mstpStats": mstpStats,
       "mstpExternalRootId": mstpExternalRootId,
       "mstpExternalRootCost": mstpExternalRootCost,
       "mstpExternalRootPortId": mstpExternalRootPortId,
       "mstpExternalRootMaxAge": mstpExternalRootMaxAge,
       "mstpExternalRootHelloTime": mstpExternalRootHelloTime,
       "mstpExternalRootForwardDelay": mstpExternalRootForwardDelay,
       "mstpPortStatsTable": mstpPortStatsTable,
       "mstpPortStatsEntry": mstpPortStatsEntry,
       "mstpPortStatsExternalRootId": mstpPortStatsExternalRootId,
       "mstpPortStatsExternalRootCost": mstpPortStatsExternalRootCost,
       "mstpPortStatsExternalPortCost": mstpPortStatsExternalPortCost,
       "mstpPortStatsOperEdgePort": mstpPortStatsOperEdgePort,
       "mstpPortStatsOperPoint2Point": mstpPortStatsOperPoint2Point,
       "mstpPortStatsMACOperational": mstpPortStatsMACOperational,
       "mstpPortStatsRecvInternal": mstpPortStatsRecvInternal,
       "mstpPortStatsRxStpCfgBPDU": mstpPortStatsRxStpCfgBPDU,
       "mstpPortStatsRxStpTcnBPDU": mstpPortStatsRxStpTcnBPDU,
       "mstpPortStatsRxRstpBPDU": mstpPortStatsRxRstpBPDU,
       "mstpPortStatsRxMstpBPDU": mstpPortStatsRxMstpBPDU,
       "mstpXstStatsTable": mstpXstStatsTable,
       "mstpXstStatsEntry": mstpXstStatsEntry,
       "mstpXstStatsBridgeId": mstpXstStatsBridgeId,
       "mstpXstStatsTimeSinceTopologyChange": mstpXstStatsTimeSinceTopologyChange,
       "mstpXstStatsTopologyChangesCount": mstpXstStatsTopologyChangesCount,
       "mstpXstStatsInternalRootPortId": mstpXstStatsInternalRootPortId,
       "mstpXstStatsInternalRootId": mstpXstStatsInternalRootId,
       "mstpXstStatsInternalRootCost": mstpXstStatsInternalRootCost,
       "mstpXstPortStatsTable": mstpXstPortStatsTable,
       "mstpXstPortStatsEntry": mstpXstPortStatsEntry,
       "mstpXstPortStatsUptime": mstpXstPortStatsUptime,
       "mstpXstPortStatsPortId": mstpXstPortStatsPortId,
       "mstpXstPortStatsState": mstpXstPortStatsState,
       "mstpXstPortStatsDesignatedBridgeId": mstpXstPortStatsDesignatedBridgeId,
       "mstpXstPortStatsDesignatedPortId": mstpXstPortStatsDesignatedPortId,
       "mstpXstPortStatsInternalPortCost": mstpXstPortStatsInternalPortCost,
       "mstpXstPortStatsInternalRootId": mstpXstPortStatsInternalRootId,
       "vdslStats": vdslStats,
       "vdslLinePerfTable": vdslLinePerfTable,
       "vdslLinePerfEntry": vdslLinePerfEntry,
       "vdslLinePerfVtucCrc": vdslLinePerfVtucCrc,
       "vdslLinePerfVturCrc": vdslLinePerfVturCrc,
       "vdslLinePerfVtucFec": vdslLinePerfVtucFec,
       "vdslLinePerfVturFec": vdslLinePerfVturFec,
       "vdslLinePerfVtucLofs": vdslLinePerfVtucLofs,
       "vdslLinePerfVturLofs": vdslLinePerfVturLofs,
       "vdslLinePerfVtucLoss": vdslLinePerfVtucLoss,
       "vdslLinePerfVturLoss": vdslLinePerfVturLoss,
       "vdslLinePerfVtucLprs": vdslLinePerfVtucLprs,
       "vdslLinePerfVturLprs": vdslLinePerfVturLprs,
       "vdslLinePerfVtucLols": vdslLinePerfVtucLols,
       "vdslLinePerfVturLols": vdslLinePerfVturLols,
       "vdslLinePerfVtucESs": vdslLinePerfVtucESs,
       "vdslLinePerfVturESs": vdslLinePerfVturESs,
       "vdslLinePerfVtucSESs": vdslLinePerfVtucSESs,
       "vdslLinePerfVturSESs": vdslLinePerfVturSESs,
       "vdslLinePerfVtucUASs": vdslLinePerfVtucUASs,
       "vdslLinePerfVturUASs": vdslLinePerfVturUASs,
       "vdslLinePerfInmVtucEqInp": vdslLinePerfInmVtucEqInp,
       "vdslLinePerfInmVturEqInp": vdslLinePerfInmVturEqInp,
       "vdslLinePerfInmVtucIAT": vdslLinePerfInmVtucIAT,
       "vdslLinePerfInmVturIAT": vdslLinePerfInmVturIAT,
       "vdslLinePerfInmVtucME": vdslLinePerfInmVtucME,
       "vdslLinePerfInmVturME": vdslLinePerfInmVturME,
       "vdslLinePerfVtucRx": vdslLinePerfVtucRx,
       "vdslLinePerfVturRx": vdslLinePerfVturRx,
       "vdslLinePerfVtucRxCorrected": vdslLinePerfVtucRxCorrected,
       "vdslLinePerfVturRxCorrected": vdslLinePerfVturRxCorrected,
       "vdslLinePerfVtucRxUncorrected": vdslLinePerfVtucRxUncorrected,
       "vdslLinePerfVturRxUncorrected": vdslLinePerfVturRxUncorrected,
       "vdslLinePerfVtucLEFTRs": vdslLinePerfVtucLEFTRs,
       "vdslLinePerfVturLEFTRs": vdslLinePerfVturLEFTRs,
       "vdslLinePerfVtucErrFreeBits": vdslLinePerfVtucErrFreeBits,
       "vdslLinePerfVturErrFreeBits": vdslLinePerfVturErrFreeBits,
       "vdslLinePerfVtucMinEftr": vdslLinePerfVtucMinEftr,
       "vdslLinePerfVturMinEftr": vdslLinePerfVturMinEftr,
       "vdslLineStatsTable": vdslLineStatsTable,
       "vdslLineStatsEntry": vdslLineStatsEntry,
       "vdslLineStatsVtucBits1": vdslLineStatsVtucBits1,
       "vdslLineStatsVtucBits2": vdslLineStatsVtucBits2,
       "vdslLineStatsVtucBits3": vdslLineStatsVtucBits3,
       "vdslLineStatsVtucBits4": vdslLineStatsVtucBits4,
       "vdslLineStatsVturBits1": vdslLineStatsVturBits1,
       "vdslLineStatsVturBits2": vdslLineStatsVturBits2,
       "vdslLineStatsVturBits3": vdslLineStatsVturBits3,
       "vdslLineStatsVturBits4": vdslLineStatsVturBits4,
       "vdslLineStatsVtucGain1": vdslLineStatsVtucGain1,
       "vdslLineStatsVtucGain2": vdslLineStatsVtucGain2,
       "vdslLineStatsVtucGain3": vdslLineStatsVtucGain3,
       "vdslLineStatsVtucGain4": vdslLineStatsVtucGain4,
       "vdslLineStatsVtucGain5": vdslLineStatsVtucGain5,
       "vdslLineStatsVtucGain6": vdslLineStatsVtucGain6,
       "vdslLineStatsVtucGain7": vdslLineStatsVtucGain7,
       "vdslLineStatsVtucGain8": vdslLineStatsVtucGain8,
       "vdslLineStatsVturGain1": vdslLineStatsVturGain1,
       "vdslLineStatsVturGain2": vdslLineStatsVturGain2,
       "vdslLineStatsVturGain3": vdslLineStatsVturGain3,
       "vdslLineStatsVturGain4": vdslLineStatsVturGain4,
       "vdslLineStatsVturGain5": vdslLineStatsVturGain5,
       "vdslLineStatsVturGain6": vdslLineStatsVturGain6,
       "vdslLineStatsVturGain7": vdslLineStatsVturGain7,
       "vdslLineStatsVturGain8": vdslLineStatsVturGain8,
       "vdslLineStatsVtucHlog": vdslLineStatsVtucHlog,
       "vdslLineStatsVturHlog": vdslLineStatsVturHlog,
       "vdslLineStatsVtucQln": vdslLineStatsVtucQln,
       "vdslLineStatsVturQln": vdslLineStatsVturQln,
       "vdslLineStatsVtucSnr": vdslLineStatsVtucSnr,
       "vdslLineStatsVturSnr": vdslLineStatsVturSnr,
       "vdslLineStatsVtucTssi": vdslLineStatsVtucTssi,
       "vdslLineStatsVturTssi": vdslLineStatsVturTssi,
       "vdslLineStatsProtocol": vdslLineStatsProtocol,
       "vdslLineStatsUsCodingMode": vdslLineStatsUsCodingMode,
       "vdslLineStatsDsCodingMode": vdslLineStatsDsCodingMode,
       "vdslLineStatsVtucHlogGroupSize": vdslLineStatsVtucHlogGroupSize,
       "vdslLineStatsVturHlogGroupSize": vdslLineStatsVturHlogGroupSize,
       "vdslLineStatsVtucQlnGroupSize": vdslLineStatsVtucQlnGroupSize,
       "vdslLineStatsVturQlnGroupSize": vdslLineStatsVturQlnGroupSize,
       "vdslLineStatsVtucSnrGroupSize": vdslLineStatsVtucSnrGroupSize,
       "vdslLineStatsVturSnrGroupSize": vdslLineStatsVturSnrGroupSize,
       "vdslLineStatsVtucRxPower": vdslLineStatsVtucRxPower,
       "vdslLineStatsVturRxPower": vdslLineStatsVturRxPower,
       "vdslLineStatsVtucSnrMargin": vdslLineStatsVtucSnrMargin,
       "vdslLineStatsVturSnrMargin": vdslLineStatsVturSnrMargin,
       "vdslLineStatsVtucSigAtten": vdslLineStatsVtucSigAtten,
       "vdslLineStatsVturSigAtten": vdslLineStatsVturSigAtten,
       "vdslLineStatsVtucLineAtten": vdslLineStatsVtucLineAtten,
       "vdslLineStatsVturLineAtten": vdslLineStatsVturLineAtten,
       "vdslLineUsBandPlanTable": vdslLineUsBandPlanTable,
       "vdslLineUsBandPlanEntry": vdslLineUsBandPlanEntry,
       "vdslLineUsBandId": vdslLineUsBandId,
       "vdslLineUsBandStartToneId": vdslLineUsBandStartToneId,
       "vdslLineUsBandStopToneId": vdslLineUsBandStopToneId,
       "vdslLineDsBandPlanTable": vdslLineDsBandPlanTable,
       "vdslLineDsBandPlanEntry": vdslLineDsBandPlanEntry,
       "vdslLineDsBandId": vdslLineDsBandId,
       "vdslLineDsBandStartToneId": vdslLineDsBandStartToneId,
       "vdslLineDsBandStopToneId": vdslLineDsBandStopToneId,
       "vdslLineUsResultMaskTable": vdslLineUsResultMaskTable,
       "vdslLineUsResultMaskEntry": vdslLineUsResultMaskEntry,
       "vdslLineUsMaskId": vdslLineUsMaskId,
       "vdslLineUsMaskTone": vdslLineUsMaskTone,
       "vdslLineUsMaskPsd": vdslLineUsMaskPsd,
       "vdslLineDsResultMaskTable": vdslLineDsResultMaskTable,
       "vdslLineDsResultMaskEntry": vdslLineDsResultMaskEntry,
       "vdslLineDsMaskId": vdslLineDsMaskId,
       "vdslLineDsMaskTone": vdslLineDsMaskTone,
       "vdslLineDsMaskPsd": vdslLineDsMaskPsd,
       "vdslLinePerfCurrTable": vdslLinePerfCurrTable,
       "vdslLinePerfCurrEntry": vdslLinePerfCurrEntry,
       "vdslLinePerfCurrInmVtucEqInp": vdslLinePerfCurrInmVtucEqInp,
       "vdslLinePerfCurrInmVturEqInp": vdslLinePerfCurrInmVturEqInp,
       "vdslLinePerfCurr15MInmVtucEqInp": vdslLinePerfCurr15MInmVtucEqInp,
       "vdslLinePerfCurr15MInmVturEqInp": vdslLinePerfCurr15MInmVturEqInp,
       "vdslLinePerfCurr1DayInmVtucEqInp": vdslLinePerfCurr1DayInmVtucEqInp,
       "vdslLinePerfCurr1DayInmVturEqInp": vdslLinePerfCurr1DayInmVturEqInp,
       "vdslLinePerfCurrInmVtucIAT": vdslLinePerfCurrInmVtucIAT,
       "vdslLinePerfCurrInmVturIAT": vdslLinePerfCurrInmVturIAT,
       "vdslLinePerfCurr15MInmVtucIAT": vdslLinePerfCurr15MInmVtucIAT,
       "vdslLinePerfCurr15MInmVturIAT": vdslLinePerfCurr15MInmVturIAT,
       "vdslLinePerfCurr1DayInmVtucIAT": vdslLinePerfCurr1DayInmVtucIAT,
       "vdslLinePerfCurr1DayInmVturIAT": vdslLinePerfCurr1DayInmVturIAT,
       "vdslLinePerfCurrInmVtucME": vdslLinePerfCurrInmVtucME,
       "vdslLinePerfCurrInmVturME": vdslLinePerfCurrInmVturME,
       "vdslLinePerfCurr15MInmVtucME": vdslLinePerfCurr15MInmVtucME,
       "vdslLinePerfCurr15MInmVturME": vdslLinePerfCurr15MInmVturME,
       "vdslLinePerfCurr1DayInmVtucME": vdslLinePerfCurr1DayInmVtucME,
       "vdslLinePerfCurr1DayInmVturME": vdslLinePerfCurr1DayInmVturME,
       "vdslLinePerfCurrVtucRx": vdslLinePerfCurrVtucRx,
       "vdslLinePerfCurrVturRx": vdslLinePerfCurrVturRx,
       "vdslLinePerfCurr15MVtucRx": vdslLinePerfCurr15MVtucRx,
       "vdslLinePerfCurr15MVturRx": vdslLinePerfCurr15MVturRx,
       "vdslLinePerfCurr1DayVtucRx": vdslLinePerfCurr1DayVtucRx,
       "vdslLinePerfCurr1DayVturRx": vdslLinePerfCurr1DayVturRx,
       "vdslLinePerfCurrVtucRxCorrected": vdslLinePerfCurrVtucRxCorrected,
       "vdslLinePerfCurrVturRxCorrected": vdslLinePerfCurrVturRxCorrected,
       "vdslLinePerfCurr15MVtucRxCorrected": vdslLinePerfCurr15MVtucRxCorrected,
       "vdslLinePerfCurr15MVturRxCorrected": vdslLinePerfCurr15MVturRxCorrected,
       "vdslLinePerfCurr1DayVtucRxCorrected": vdslLinePerfCurr1DayVtucRxCorrected,
       "vdslLinePerfCurr1DayVturRxCorrected": vdslLinePerfCurr1DayVturRxCorrected,
       "vdslLinePerfCurrVtucRxUncorrected": vdslLinePerfCurrVtucRxUncorrected,
       "vdslLinePerfCurrVturRxUncorrected": vdslLinePerfCurrVturRxUncorrected,
       "vdslLinePerfCurr15MVtucRxUncorrected": vdslLinePerfCurr15MVtucRxUncorrected,
       "vdslLinePerfCurr15MVturRxUncorrected": vdslLinePerfCurr15MVturRxUncorrected,
       "vdslLinePerfCurr1DayVtucRxUncorrected": vdslLinePerfCurr1DayVtucRxUncorrected,
       "vdslLinePerfCurr1DayVturRxUncorrected": vdslLinePerfCurr1DayVturRxUncorrected,
       "vdslLinePerfCurrVtucLEFTRs": vdslLinePerfCurrVtucLEFTRs,
       "vdslLinePerfCurrVturLEFTRs": vdslLinePerfCurrVturLEFTRs,
       "vdslLinePerfCurr15MVtucLEFTRs": vdslLinePerfCurr15MVtucLEFTRs,
       "vdslLinePerfCurr15MVturLEFTRs": vdslLinePerfCurr15MVturLEFTRs,
       "vdslLinePerfCurr1DayVtucLEFTRs": vdslLinePerfCurr1DayVtucLEFTRs,
       "vdslLinePerfCurr1DayVturLEFTRs": vdslLinePerfCurr1DayVturLEFTRs,
       "vdslLinePerfCurrVtucErrFreeBits": vdslLinePerfCurrVtucErrFreeBits,
       "vdslLinePerfCurrVturErrFreeBits": vdslLinePerfCurrVturErrFreeBits,
       "vdslLinePerfCurr15MVtucErrFreeBits": vdslLinePerfCurr15MVtucErrFreeBits,
       "vdslLinePerfCurr15MVturErrFreeBits": vdslLinePerfCurr15MVturErrFreeBits,
       "vdslLinePerfCurr1DayVtucErrFreeBits": vdslLinePerfCurr1DayVtucErrFreeBits,
       "vdslLinePerfCurr1DayVturErrFreeBits": vdslLinePerfCurr1DayVturErrFreeBits,
       "vdslLinePerfCurrVtucMinEftr": vdslLinePerfCurrVtucMinEftr,
       "vdslLinePerfCurrVturMinEftr": vdslLinePerfCurrVturMinEftr,
       "vdslLinePerfCurr15MinVtucMinEftr": vdslLinePerfCurr15MinVtucMinEftr,
       "vdslLinePerfCurr15MinVturMinEftr": vdslLinePerfCurr15MinVturMinEftr,
       "vdslLinePerfCurr1DayVtucMinEftr": vdslLinePerfCurr1DayVtucMinEftr,
       "vdslLinePerfCurr1DayVturMinEftr": vdslLinePerfCurr1DayVturMinEftr,
       "vdslLinePerfHist15MinTable": vdslLinePerfHist15MinTable,
       "vdslLinePerfHist15MinEntry": vdslLinePerfHist15MinEntry,
       "vdslLinePerfHist15MInmVtucEqInp": vdslLinePerfHist15MInmVtucEqInp,
       "vdslLinePerfHist15MInmVturEqInp": vdslLinePerfHist15MInmVturEqInp,
       "vdslLinePerfHist15MInmVtucIAT": vdslLinePerfHist15MInmVtucIAT,
       "vdslLinePerfHist15MInmVturIAT": vdslLinePerfHist15MInmVturIAT,
       "vdslLinePerfHist15MInmVtucME": vdslLinePerfHist15MInmVtucME,
       "vdslLinePerfHist15MInmVturME": vdslLinePerfHist15MInmVturME,
       "vdslLinePerfHist15MVtucRtx": vdslLinePerfHist15MVtucRtx,
       "vdslLinePerfHist15MVturRtx": vdslLinePerfHist15MVturRtx,
       "vdslLinePerfHist15MVtucRtxCorrected": vdslLinePerfHist15MVtucRtxCorrected,
       "vdslLinePerfHist15MVturRtxCorrected": vdslLinePerfHist15MVturRtxCorrected,
       "vdslLinePerfHist15MVtucRtxUncorrected": vdslLinePerfHist15MVtucRtxUncorrected,
       "vdslLinePerfHist15MVturRtxUncorrected": vdslLinePerfHist15MVturRtxUncorrected,
       "vdslLinePerfHist15MVtucLEFTRs": vdslLinePerfHist15MVtucLEFTRs,
       "vdslLinePerfHist15MVturLEFTRs": vdslLinePerfHist15MVturLEFTRs,
       "vdslLinePerfHist15MVtucErrFreeBits": vdslLinePerfHist15MVtucErrFreeBits,
       "vdslLinePerfHist15MVturErrFreeBits": vdslLinePerfHist15MVturErrFreeBits,
       "vdslLinePerfHist15MVtucMinEftr": vdslLinePerfHist15MVtucMinEftr,
       "vdslLinePerfHist15MVturMinEftr": vdslLinePerfHist15MVturMinEftr,
       "vdslLinePerfHist1DayTable": vdslLinePerfHist1DayTable,
       "vdslLinePerfHist1DayEntry": vdslLinePerfHist1DayEntry,
       "vdslLinePerfHist1DayInmVtucEqInp": vdslLinePerfHist1DayInmVtucEqInp,
       "vdslLinePerfHist1DayInmVturEqInp": vdslLinePerfHist1DayInmVturEqInp,
       "vdslLinePerfHist1DayInmVtucIAT": vdslLinePerfHist1DayInmVtucIAT,
       "vdslLinePerfHist1DayInmVturIAT": vdslLinePerfHist1DayInmVturIAT,
       "vdslLinePerfHist1DayInmVtucME": vdslLinePerfHist1DayInmVtucME,
       "vdslLinePerfHist1DayInmVturME": vdslLinePerfHist1DayInmVturME,
       "vdslLinePerfHist1DayVtucRtx": vdslLinePerfHist1DayVtucRtx,
       "vdslLinePerfHist1DayVturRtx": vdslLinePerfHist1DayVturRtx,
       "vdslLinePerfHist1DayVtucRtxCorrected": vdslLinePerfHist1DayVtucRtxCorrected,
       "vdslLinePerfHist1DayVturRtxCorrected": vdslLinePerfHist1DayVturRtxCorrected,
       "vdslLinePerfHist1DayVtucRtxUncorrected": vdslLinePerfHist1DayVtucRtxUncorrected,
       "vdslLinePerfHist1DayVturRtxUncorrected": vdslLinePerfHist1DayVturRtxUncorrected,
       "vdslLinePerfHist1DayVtucLEFTRs": vdslLinePerfHist1DayVtucLEFTRs,
       "vdslLinePerfHist1DayVturLEFTRs": vdslLinePerfHist1DayVturLEFTRs,
       "vdslLinePerfHist1DayVtucErrFreeBits": vdslLinePerfHist1DayVtucErrFreeBits,
       "vdslLinePerfHist1DayVturErrFreeBits": vdslLinePerfHist1DayVturErrFreeBits,
       "vdslLinePerfHist1DayVtucMinEftr": vdslLinePerfHist1DayVtucMinEftr,
       "vdslLinePerfHist1DayVturMinEftr": vdslLinePerfHist1DayVturMinEftr,
       "vdslChanStatsTable": vdslChanStatsTable,
       "vdslChanStatsEntry": vdslChanStatsEntry,
       "vdslChanStatsActualRaMode": vdslChanStatsActualRaMode,
       "vdslChanStatsRetransmissionMode": vdslChanStatsRetransmissionMode,
       "vdslChanStatsRetransmissionOverhead": vdslChanStatsRetransmissionOverhead,
       "paepvcStats": paepvcStats,
       "paepvcSessionTable": paepvcSessionTable,
       "paepvcSessionEntry": paepvcSessionEntry,
       "paepvcSessionVpi": paepvcSessionVpi,
       "paepvcSessionVci": paepvcSessionVci,
       "paepvcSessionState": paepvcSessionState,
       "paepvcSessionId": paepvcSessionId,
       "paepvcSessionUpTime": paepvcSessionUpTime,
       "paepvcSessionAcName": paepvcSessionAcName,
       "paepvcSessionSrvcName": paepvcSessionSrvcName,
       "paepvcCountTable": paepvcCountTable,
       "paepvcCountEntry": paepvcCountEntry,
       "paepvcCountVpi": paepvcCountVpi,
       "paepvcCountVci": paepvcCountVci,
       "paepvcCountPppLcpCfgReqRx": paepvcCountPppLcpCfgReqRx,
       "paepvcCountPppLcpEchoReqRx": paepvcCountPppLcpEchoReqRx,
       "paepvcCountPppLcpEchoReplyRx": paepvcCountPppLcpEchoReplyRx,
       "paepvcCountPadiTx": paepvcCountPadiTx,
       "paepvcCountPadoRx": paepvcCountPadoRx,
       "paepvcCountPadrTx": paepvcCountPadrTx,
       "paepvcCountPadsRx": paepvcCountPadsRx,
       "paepvcCountPadtTx": paepvcCountPadtTx,
       "paepvcCountPadtRx": paepvcCountPadtRx,
       "paepvcCountSrvcnameErrRx": paepvcCountSrvcnameErrRx,
       "paepvcCountAcnameErrRx": paepvcCountAcnameErrRx,
       "paepvcCountGenericErrTx": paepvcCountGenericErrTx,
       "paepvcCountGenericErrRx": paepvcCountGenericErrRx,
       "vlanMacStats": vlanMacStats,
       "vlanMacDisplayTarget": vlanMacDisplayTarget,
       "vlanMacDisplayVid": vlanMacDisplayVid,
       "vlanMacTable": vlanMacTable,
       "vlanMacEntry": vlanMacEntry,
       "vlanMacAddress": vlanMacAddress,
       "vlanMacPort": vlanMacPort,
       "vlanMacStatus": vlanMacStatus,
       "ipbpvcStats": ipbpvcStats,
       "arpproxyTable": arpproxyTable,
       "arpproxyEntry": arpproxyEntry,
       "arpproxyIp": arpproxyIp,
       "arpproxyMac": arpproxyMac,
       "arpproxyIfIndex": arpproxyIfIndex,
       "arpproxyVpi": arpproxyVpi,
       "arpproxyVci": arpproxyVci,
       "arpproxyInterfaceIp": arpproxyInterfaceIp,
       "arpproxyInterfaceMask": arpproxyInterfaceMask,
       "arpproxyInterfaceVid": arpproxyInterfaceVid,
       "arpproxyDhcpIp": arpproxyDhcpIp,
       "arpproxyType": arpproxyType,
       "ipbpvcIfDynamicTable": ipbpvcIfDynamicTable,
       "ipbpvcIfDynamicEntry": ipbpvcIfDynamicEntry,
       "ipbpvcIfDynamicIp": ipbpvcIfDynamicIp,
       "ipbpvcIfDynamicMask": ipbpvcIfDynamicMask,
       "ipbpvcIfDynamicIfIndex": ipbpvcIfDynamicIfIndex,
       "ipbpvcIfDynamicVpi": ipbpvcIfDynamicVpi,
       "ipbpvcIfDynamicVci": ipbpvcIfDynamicVci,
       "ipbpvcRouteDynamicTable": ipbpvcRouteDynamicTable,
       "ipbpvcRouteDynamicEntry": ipbpvcRouteDynamicEntry,
       "ipbpvcRouteDynamicType": ipbpvcRouteDynamicType,
       "ipbpvcRouteDynamicIp": ipbpvcRouteDynamicIp,
       "ipbpvcRouteDynamicMask": ipbpvcRouteDynamicMask,
       "ipbpvcRouteDynamicNextHop": ipbpvcRouteDynamicNextHop,
       "ipbpvcRouteDynamicMetric": ipbpvcRouteDynamicMetric,
       "ipbpvcRouteDynamicPriority": ipbpvcRouteDynamicPriority,
       "voipStats": voipStats,
       "voipLineStatusTable": voipLineStatusTable,
       "voipLineStatusEntry": voipLineStatusEntry,
       "voipLineStatusFxsStatus": voipLineStatusFxsStatus,
       "voipLineStatusServiceStatus": voipLineStatusServiceStatus,
       "voipLineInfoTable": voipLineInfoTable,
       "voipLineInfoEntry": voipLineInfoEntry,
       "voipLineInfoSipLocalUri": voipLineInfoSipLocalUri,
       "voipLineInfoSipRemoteUri": voipLineInfoSipRemoteUri,
       "voipLineInfoRtpTxCodecType": voipLineInfoRtpTxCodecType,
       "voipLineInfoRtpRxCodecType": voipLineInfoRtpRxCodecType,
       "voipLineInfoRtpTxPt": voipLineInfoRtpTxPt,
       "voipLineInfoRtpRxPt": voipLineInfoRtpRxPt,
       "voipLineInfoRtpLocalIp": voipLineInfoRtpLocalIp,
       "voipLineInfoRtpRemoteIp": voipLineInfoRtpRemoteIp,
       "voipLineInfoRtpLocalPort": voipLineInfoRtpLocalPort,
       "voipLineInfoRtpRemotePort": voipLineInfoRtpRemotePort,
       "voipLineInfoLastCidMode": voipLineInfoLastCidMode,
       "voipLineInfoPlaySignalTel": voipLineInfoPlaySignalTel,
       "voipLineInfoPlaySignalNet": voipLineInfoPlaySignalNet,
       "voipH248StatTable": voipH248StatTable,
       "voipH248StatEntry": voipH248StatEntry,
       "voipH248StatSlot": voipH248StatSlot,
       "voipH248StatMgName": voipH248StatMgName,
       "voipH248StatMgState": voipH248StatMgState,
       "voipSipStatTable": voipSipStatTable,
       "voipSipStatEntry": voipSipStatEntry,
       "voipSipStatSlot": voipSipStatSlot,
       "voipSipStatProxyIndex": voipSipStatProxyIndex,
       "voipSipStatProxySvr": voipSipStatProxySvr,
       "voipSipStatProxyPort": voipSipStatProxyPort,
       "voipSipStatState": voipSipStatState,
       "voipH248InterfaceStatTable": voipH248InterfaceStatTable,
       "voipH248InterfaceStatEntry": voipH248InterfaceStatEntry,
       "voipH248InterfaceStatId": voipH248InterfaceStatId,
       "voipH248InterfaceStatMgState": voipH248InterfaceStatMgState,
       "voipH248InterfaceStatPrimarySlot": voipH248InterfaceStatPrimarySlot,
       "voipH248InterfaceStatSecondarySlot": voipH248InterfaceStatSecondarySlot,
       "voipH248InterfaceStatPrimaryProtectionState": voipH248InterfaceStatPrimaryProtectionState,
       "voipH248InterfaceStatSecondaryProtectionState": voipH248InterfaceStatSecondaryProtectionState,
       "voipH248InterfaceStatRedundantState": voipH248InterfaceStatRedundantState,
       "voipH248MediaStatTable": voipH248MediaStatTable,
       "voipH248MediaStatEntry": voipH248MediaStatEntry,
       "voipH248MediaStatInterfaceId": voipH248MediaStatInterfaceId,
       "voipH248MediaStatSlaveId": voipH248MediaStatSlaveId,
       "voipH248MediaStatSlaveIp": voipH248MediaStatSlaveIp,
       "voipH248MediaStatMgmtInbandIp": voipH248MediaStatMgmtInbandIp,
       "voipH248MediaStatMgmtOutbandIp": voipH248MediaStatMgmtOutbandIp,
       "voipH248MediaStatSlotId": voipH248MediaStatSlotId,
       "voipH248MediaStatPortCount": voipH248MediaStatPortCount,
       "voipH248MediaStatState": voipH248MediaStatState,
       "voipH248TerminationStatTable": voipH248TerminationStatTable,
       "voipH248TerminationStatEntry": voipH248TerminationStatEntry,
       "voipH248TerminationStatStateId": voipH248TerminationStatStateId,
       "voipH248TerminationStatStateMediaId": voipH248TerminationStatStateMediaId,
       "voipH248TerminationStatStatePortNumber": voipH248TerminationStatStatePortNumber,
       "voipH248TerminationStatName": voipH248TerminationStatName,
       "voipH248TerminationStatPhoneState": voipH248TerminationStatPhoneState,
       "voipH248TerminationStatCallServiceState": voipH248TerminationStatCallServiceState,
       "voipH248TerminationStatQuery": voipH248TerminationStatQuery,
       "voipH248TerminationStatQueryInterfaceId": voipH248TerminationStatQueryInterfaceId,
       "voipH248TerminationStatQueryTerminationName": voipH248TerminationStatQueryTerminationName,
       "voipH248TerminationStatQuerySlaveId": voipH248TerminationStatQuerySlaveId,
       "voipH248TerminationStatQuerySlaveIp": voipH248TerminationStatQuerySlaveIp,
       "voipH248TerminationStatQueryMgmtInbandIp": voipH248TerminationStatQueryMgmtInbandIp,
       "voipH248TerminationStatQueryMgmtOutbandIp": voipH248TerminationStatQueryMgmtOutbandIp,
       "voipH248TerminationStatQuerySlotId": voipH248TerminationStatQuerySlotId,
       "voipH248TerminationStatQueryPortCount": voipH248TerminationStatQueryPortCount,
       "voipH248TerminationStatQueryState": voipH248TerminationStatQueryState,
       "voipH248TerminationStatQueryPortNumber": voipH248TerminationStatQueryPortNumber,
       "voipH248TerminationStatQueryPhoneState": voipH248TerminationStatQueryPhoneState,
       "voipH248TerminationStatQueryCallServiceState": voipH248TerminationStatQueryCallServiceState,
       "voipRtpStatTable": voipRtpStatTable,
       "voipRtpStatEntry": voipRtpStatEntry,
       "voipRtpStatTxRate": voipRtpStatTxRate,
       "voipRtpStatRxRate": voipRtpStatRxRate,
       "voipRtpStatTxPktCnt": voipRtpStatTxPktCnt,
       "voipRtpStatRxPktCnt": voipRtpStatRxPktCnt,
       "voipRtpStatTxFracLost": voipRtpStatTxFracLost,
       "voipRtpStatRxFracLost": voipRtpStatRxFracLost,
       "voipRtpStatTxJitter": voipRtpStatTxJitter,
       "voipRtpStatRxJitter": voipRtpStatRxJitter,
       "voipRtpStatTxAvgDelay": voipRtpStatTxAvgDelay,
       "voipRtpStatRxAvgDelay": voipRtpStatRxAvgDelay,
       "voipCdrStat": voipCdrStat,
       "voipCdrStatFilter": voipCdrStatFilter,
       "voipCdrStatFilterInterface": voipCdrStatFilterInterface,
       "voipCdrStatFilterIndexEnable": voipCdrStatFilterIndexEnable,
       "voipCdrStatFilterIndex": voipCdrStatFilterIndex,
       "voipCdrStatFilterSlotPortEnable": voipCdrStatFilterSlotPortEnable,
       "voipCdrStatFilterSlot": voipCdrStatFilterSlot,
       "voipCdrStatFilterPort": voipCdrStatFilterPort,
       "voipCdrStatFilterRtpElpasedTimeEnable": voipCdrStatFilterRtpElpasedTimeEnable,
       "voipCdrStatFilterRtpElpasedTimeMin": voipCdrStatFilterRtpElpasedTimeMin,
       "voipCdrStatFilterRtpElpasedTimeMax": voipCdrStatFilterRtpElpasedTimeMax,
       "voipCdrStatFilterTelEnable": voipCdrStatFilterTelEnable,
       "voipCdrStatFilterTel": voipCdrStatFilterTel,
       "voipCdrStatFilterOffhookEnable": voipCdrStatFilterOffhookEnable,
       "voipCdrStatFilterOffhookDateMin": voipCdrStatFilterOffhookDateMin,
       "voipCdrStatFilterOffhookTimeMin": voipCdrStatFilterOffhookTimeMin,
       "voipCdrStatFilterOffhookDateMax": voipCdrStatFilterOffhookDateMax,
       "voipCdrStatFilterOffhookTimeMax": voipCdrStatFilterOffhookTimeMax,
       "voipCdrStatFilterCodeEnable": voipCdrStatFilterCodeEnable,
       "voipCdrStatFilterCode": voipCdrStatFilterCode,
       "voipCdrStatFilterErrCodeEnable": voipCdrStatFilterErrCodeEnable,
       "voipCdrStatResultTable": voipCdrStatResultTable,
       "voipCdrStatResultEntry": voipCdrStatResultEntry,
       "voipCdrStatResultIndex": voipCdrStatResultIndex,
       "voipCdrStatResultSlot": voipCdrStatResultSlot,
       "voipCdrStatResultPort": voipCdrStatResultPort,
       "voipCdrStatResultTermName": voipCdrStatResultTermName,
       "voipCdrStatResultLineDirection": voipCdrStatResultLineDirection,
       "voipCdrStatResultLocalNumber": voipCdrStatResultLocalNumber,
       "voipCdrStatResultRemoteNumber": voipCdrStatResultRemoteNumber,
       "voipCdrStatResultOffHookDatetime": voipCdrStatResultOffHookDatetime,
       "voipCdrStatResultOnHookDatetime": voipCdrStatResultOnHookDatetime,
       "voipCdrStatResultRingStartDatetime": voipCdrStatResultRingStartDatetime,
       "voipCdrStatResultRingStopDatetime": voipCdrStatResultRingStopDatetime,
       "voipCdrStatResultRtpStartDatetime": voipCdrStatResultRtpStartDatetime,
       "voipCdrStatResultRtpStopDatetime": voipCdrStatResultRtpStopDatetime,
       "voipCdrStatResultRtpElapsedTime": voipCdrStatResultRtpElapsedTime,
       "voipCdrStatResultTxRate": voipCdrStatResultTxRate,
       "voipCdrStatResultRxRate": voipCdrStatResultRxRate,
       "voipCdrStatResultTxPktCnt": voipCdrStatResultTxPktCnt,
       "voipCdrStatResultRxPktCnt": voipCdrStatResultRxPktCnt,
       "voipCdrStatResultTxFracLost": voipCdrStatResultTxFracLost,
       "voipCdrStatResultRxFracLost": voipCdrStatResultRxFracLost,
       "voipCdrStatResultTxJitter": voipCdrStatResultTxJitter,
       "voipCdrStatResultRxJitter": voipCdrStatResultRxJitter,
       "voipCdrStatResultTxAvgDelay": voipCdrStatResultTxAvgDelay,
       "voipCdrStatResultRxAvgDelay": voipCdrStatResultRxAvgDelay,
       "voipCdrStatResultCode": voipCdrStatResultCode,
       "voipCdrStatResultErrCode": voipCdrStatResultErrCode,
       "voipCdrStatResultTerminationCause": voipCdrStatResultTerminationCause,
       "voipH248Statistics": voipH248Statistics,
       "voipH248StatisticsInterface": voipH248StatisticsInterface,
       "voipH248StatisticsMsgSent": voipH248StatisticsMsgSent,
       "voipH248StatisticsMsgRecv": voipH248StatisticsMsgRecv,
       "voipH248StatisticsMsgLost": voipH248StatisticsMsgLost,
       "voipH248StatisticsMsgResent": voipH248StatisticsMsgResent,
       "voipH248StatisticsErrorMsg": voipH248StatisticsErrorMsg,
       "voipH248StatisticsUnIdentifiedMsg": voipH248StatisticsUnIdentifiedMsg,
       "enetStats": enetStats,
       "enetPortStatusTable": enetPortStatusTable,
       "enetPortStatusEntry": enetPortStatusEntry,
       "enetPortStatusLinkUpType": enetPortStatusLinkUpType,
       "enetPortStatusLinkUpTime": enetPortStatusLinkUpTime,
       "enetPortStatusLinkSpeed": enetPortStatusLinkSpeed,
       "enetPortStatusLinkDuplex": enetPortStatusLinkDuplex,
       "enetPortStatusDataRateTx": enetPortStatusDataRateTx,
       "enetPortStatusDataRateRx": enetPortStatusDataRateRx,
       "enetPortStatusDataUtilTx": enetPortStatusDataUtilTx,
       "enetPortStatusDataUtilRx": enetPortStatusDataUtilRx,
       "sfpPortStatusTable": sfpPortStatusTable,
       "sfpPortStatusEntry": sfpPortStatusEntry,
       "sfpId": sfpId,
       "sfpConnector": sfpConnector,
       "sfpTransceiver": sfpTransceiver,
       "sfpEncoding": sfpEncoding,
       "sfpName": sfpName,
       "sfpPartNumber": sfpPartNumber,
       "sfpRevision": sfpRevision,
       "sfpSerialNumber": sfpSerialNumber,
       "sfpTemperature": sfpTemperature,
       "sfpSupplyVoltage": sfpSupplyVoltage,
       "sfpTxBiasCurrent": sfpTxBiasCurrent,
       "sfpTxPower": sfpTxPower,
       "sfpRxPower": sfpRxPower,
       "ifStats": ifStats,
       "ifStatusTable": ifStatusTable,
       "ifStatusEntry": ifStatusEntry,
       "ifInRate": ifInRate,
       "ifOutRate": ifOutRate,
       "ifCurrentStatus": ifCurrentStatus,
       "ifUpTime": ifUpTime,
       "imaStats": imaStats,
       "imaPvcStatsTable": imaPvcStatsTable,
       "imaPvcStatsEntry": imaPvcStatsEntry,
       "imaPvcStatsGroupIndex": imaPvcStatsGroupIndex,
       "imaPvcStatsVpi": imaPvcStatsVpi,
       "imaPvcStatsVci": imaPvcStatsVci,
       "imaPvcStatsTxPackets": imaPvcStatsTxPackets,
       "imaPvcStatsRxPackets": imaPvcStatsRxPackets,
       "imaPvcStatsTxUnicast": imaPvcStatsTxUnicast,
       "imaPvcStatsRxUnicast": imaPvcStatsRxUnicast,
       "imaPvcStatsTxMulticast": imaPvcStatsTxMulticast,
       "imaPvcStatsRxMulticast": imaPvcStatsRxMulticast,
       "imaPvcStatsTxBroadcast": imaPvcStatsTxBroadcast,
       "imaPvcStatsRxBroadcast": imaPvcStatsRxBroadcast,
       "imaPvcStatsTxDiscard": imaPvcStatsTxDiscard,
       "imaPvcStatsRxDiscard": imaPvcStatsRxDiscard,
       "imaGroupStatsTable": imaGroupStatsTable,
       "imaGroupStatsEntry": imaGroupStatsEntry,
       "imaGroupStatsGroupIndex": imaGroupStatsGroupIndex,
       "imaGroupStatsTxCells": imaGroupStatsTxCells,
       "imaGroupStatsRxCells": imaGroupStatsRxCells,
       "imaGroupStatsTxRate": imaGroupStatsTxRate,
       "imaGroupStatsRxRate": imaGroupStatsRxRate,
       "imaGroupStatsCrcErr": imaGroupStatsCrcErr,
       "imaGroupCurrDayTable": imaGroupCurrDayTable,
       "imaGroupCurrDayEntry": imaGroupCurrDayEntry,
       "imaGroupCurrDayGroupIndex": imaGroupCurrDayGroupIndex,
       "imaGroupCurrDayUnavailSecs": imaGroupCurrDayUnavailSecs,
       "imaGroupCurrDayNeNumFailures": imaGroupCurrDayNeNumFailures,
       "imaGroupCurrDayFeNumFailures": imaGroupCurrDayFeNumFailures,
       "imaLinkCurrDayTable": imaLinkCurrDayTable,
       "imaLinkCurrDayEntry": imaLinkCurrDayEntry,
       "imaLinkCurrDayIfindex": imaLinkCurrDayIfindex,
       "imaLinkCurrDayImaViolations": imaLinkCurrDayImaViolations,
       "imaLinkCurrDayOifAnomalies": imaLinkCurrDayOifAnomalies,
       "imaLinkCurrDayNeSevErroredSecs": imaLinkCurrDayNeSevErroredSecs,
       "imaLinkCurrDayFeSevErroredSecs": imaLinkCurrDayFeSevErroredSecs,
       "imaLinkCurrDayNeUnavailSecs": imaLinkCurrDayNeUnavailSecs,
       "imaLinkCurrDayFeUnavailSecs": imaLinkCurrDayFeUnavailSecs,
       "imaLinkCurrDayNeTxUnusableSecs": imaLinkCurrDayNeTxUnusableSecs,
       "imaLinkCurrDayNeRxUnusableSecs": imaLinkCurrDayNeRxUnusableSecs,
       "imaLinkCurrDayFeTxUnusableSecs": imaLinkCurrDayFeTxUnusableSecs,
       "imaLinkCurrDayFeRxUnusableSecs": imaLinkCurrDayFeRxUnusableSecs,
       "imaLinkCurrDayNeTxNumFailures": imaLinkCurrDayNeTxNumFailures,
       "imaLinkCurrDayNeRxNumFailures": imaLinkCurrDayNeRxNumFailures,
       "imaLinkCurrDayFeTxNumFailures": imaLinkCurrDayFeTxNumFailures,
       "imaLinkCurrDayFeRxNumFailures": imaLinkCurrDayFeRxNumFailures,
       "imaLinkCurrDayTxStuffs": imaLinkCurrDayTxStuffs,
       "imaLinkCurrDayRxStuffs": imaLinkCurrDayRxStuffs,
       "imaGroupConfReadyTable": imaGroupConfReadyTable,
       "imaGroupConfReadyEntry": imaGroupConfReadyEntry,
       "imaGroupConfReadyIndex": imaGroupConfReadyIndex,
       "imaGroupConfReadyState": imaGroupConfReadyState,
       "imaGroupStatusTable": imaGroupStatusTable,
       "imaGroupStatusEntry": imaGroupStatusEntry,
       "imaGroupStatusGroupIndex": imaGroupStatusGroupIndex,
       "imaGroupStatusTxPayloadRate": imaGroupStatusTxPayloadRate,
       "imaGroupStatusRxPayloadRate": imaGroupStatusRxPayloadRate,
       "e1Stats": e1Stats,
       "e1CurrDayTable": e1CurrDayTable,
       "e1CurrDayEntry": e1CurrDayEntry,
       "e1CurrDayIfindex": e1CurrDayIfindex,
       "e1CurrDayLCVs": e1CurrDayLCVs,
       "e1CurrDayPCVs": e1CurrDayPCVs,
       "e1CurrDayESs": e1CurrDayESs,
       "e1CurrDaySESs": e1CurrDaySESs,
       "e1CurrDayUASs": e1CurrDayUASs,
       "e1StatusTable": e1StatusTable,
       "e1StatusEntry": e1StatusEntry,
       "e1StatusIfindex": e1StatusIfindex,
       "e1StatusTxPayloadRate": e1StatusTxPayloadRate,
       "e1StatusRxPayloadRate": e1StatusRxPayloadRate,
       "e1StatusUpTime": e1StatusUpTime,
       "loopguardStats": loopguardStats,
       "loopguardStatsTable": loopguardStatsTable,
       "loopguardStatsEntry": loopguardStatsEntry,
       "loopguardStatsPort": loopguardStatsPort,
       "loopguardStatsPortStatus": loopguardStatsPortStatus,
       "loopguardStatsLoopguardStatus": loopguardStatsLoopguardStatus,
       "loopguardStatsTotalTxPackets": loopguardStatsTotalTxPackets,
       "loopguardStatsTotalRxPackets": loopguardStatsTotalRxPackets,
       "loopguardStatsBadPackets": loopguardStatsBadPackets,
       "loopguardStatsShutdownTime": loopguardStatsShutdownTime,
       "stpStats": stpStats,
       "stpPortStatsTable": stpPortStatsTable,
       "stpPortStatsEntry": stpPortStatsEntry,
       "stpPortStatus": stpPortStatus,
       "stpStatsPortNum": stpStatsPortNum,
       "stpStatsPortNumForwarding": stpStatsPortNumForwarding,
       "stpStatsPortNumLearning": stpStatsPortNumLearning,
       "stpStatsPortNumDiscarding": stpStatsPortNumDiscarding,
       "stpStatsPortNumDown": stpStatsPortNumDown,
       "gbondStats": gbondStats,
       "gbondStatsTable": gbondStatsTable,
       "gbondStatsEntry": gbondStatsEntry,
       "gbondStatsName": gbondStatsName,
       "gbondStatsUpRate": gbondStatsUpRate,
       "gbondStatsDownRate": gbondStatsDownRate,
       "gbondStatsMember": gbondStatsMember,
       "gbondStatslinkup": gbondStatslinkup,
       "gbondStatsTx": gbondStatsTx,
       "gbondStatsRx": gbondStatsRx,
       "gbondStatslinkdown": gbondStatslinkdown,
       "gbondStatsTCMode": gbondStatsTCMode,
       "gbondStatsTxRate": gbondStatsTxRate,
       "gbondStatsRxRate": gbondStatsRxRate,
       "vdsl2Stats": vdsl2Stats,
       "vdslChanExtendedTable": vdslChanExtendedTable,
       "vdslChanExtendedEntry": vdslChanExtendedEntry,
       "vdslChanExtendedPrevTxRate": vdslChanExtendedPrevTxRate,
       "vdslChanExtendedActualRaMode": vdslChanExtendedActualRaMode,
       "vdslChanExtendedRetransmissionMode": vdslChanExtendedRetransmissionMode,
       "vdslChanExtendedRetransmissionOverhead": vdslChanExtendedRetransmissionOverhead,
       "vdslChanExtendedGinpFramingType": vdslChanExtendedGinpFramingType,
       "vdslChanExtendedActualInpAgainstREIN": vdslChanExtendedActualInpAgainstREIN,
       "vdslChanExtendedReedSolomonCodeWordPerDtu": vdslChanExtendedReedSolomonCodeWordPerDtu,
       "vdslPerfDataExtendedTable": vdslPerfDataExtendedTable,
       "vdslPerfDataExtendedEntry": vdslPerfDataExtendedEntry,
       "vdslPerfDataFECs": vdslPerfDataFECs,
       "vdslChanPerfDataExtendedTable": vdslChanPerfDataExtendedTable,
       "vdslChanPerfDataExtendedEntry": vdslChanPerfDataExtendedEntry,
       "vdslChanPerfDataCorrectedBlks": vdslChanPerfDataCorrectedBlks,
       "vdslChanPerfDataUncorrectBlks": vdslChanPerfDataUncorrectBlks,
       "vdslChanPerfDataCodeViolations": vdslChanPerfDataCodeViolations,
       "xdsl2PMEx": xdsl2PMEx,
       "xdsl2PMLineEx": xdsl2PMLineEx,
       "xdsl2PMLineCurrExtendedTable": xdsl2PMLineCurrExtendedTable,
       "xdsl2PMLineCurrExtendedEntry": xdsl2PMLineCurrExtendedEntry,
       "xdsl2PMLCurr15MMonitoredTime": xdsl2PMLCurr15MMonitoredTime,
       "xdsl2PMLCurr15MLofs": xdsl2PMLCurr15MLofs,
       "xdsl2PMLCurr15MLols": xdsl2PMLCurr15MLols,
       "xdsl2PMLCurr15MLol": xdsl2PMLCurr15MLol,
       "xdsl2PMLCurr15MLprs": xdsl2PMLCurr15MLprs,
       "xdsl2PMLCurr15MLpr": xdsl2PMLCurr15MLpr,
       "xdsl2PMLCurr15MInits": xdsl2PMLCurr15MInits,
       "xdsl2PMLCurr1DayMonitoredTime": xdsl2PMLCurr1DayMonitoredTime,
       "xdsl2PMLCurr1DayLofs": xdsl2PMLCurr1DayLofs,
       "xdsl2PMLCurr1DayLols": xdsl2PMLCurr1DayLols,
       "xdsl2PMLCurr1DayLol": xdsl2PMLCurr1DayLol,
       "xdsl2PMLCurr1DayLprs": xdsl2PMLCurr1DayLprs,
       "xdsl2PMLCurr1DayLpr": xdsl2PMLCurr1DayLpr,
       "xdsl2PMLCurr1DayInits": xdsl2PMLCurr1DayInits,
       "xdsl2PMLSinceLinkInmEqInp": xdsl2PMLSinceLinkInmEqInp,
       "xdsl2PMLSinceLinkInmIAT": xdsl2PMLSinceLinkInmIAT,
       "xdsl2PMLSinceLinkInmME": xdsl2PMLSinceLinkInmME,
       "xdsl2PMLCurr15MInmEqInp": xdsl2PMLCurr15MInmEqInp,
       "xdsl2PMLCurr15MInmIAT": xdsl2PMLCurr15MInmIAT,
       "xdsl2PMLCurr15MInmME": xdsl2PMLCurr15MInmME,
       "xdsl2PMLCurr1DayInmEqInp": xdsl2PMLCurr1DayInmEqInp,
       "xdsl2PMLCurr1DayInmIAT": xdsl2PMLCurr1DayInmIAT,
       "xdsl2PMLCurr1DayInmME": xdsl2PMLCurr1DayInmME,
       "xdsl2PMLSinceInitLofs": xdsl2PMLSinceInitLofs,
       "xdsl2PMLSinceInitLols": xdsl2PMLSinceInitLols,
       "xdsl2PMLSinceInitLol": xdsl2PMLSinceInitLol,
       "xdsl2PMLSinceInitLprs": xdsl2PMLSinceInitLprs,
       "xdsl2PMLSinceInitLpr": xdsl2PMLSinceInitLpr,
       "xdsl2PMLSinceInitInits": xdsl2PMLSinceInitInits,
       "xdsl2PMLineHist15MinExtendedTable": xdsl2PMLineHist15MinExtendedTable,
       "xdsl2PMLineHist15MinExtendedEntry": xdsl2PMLineHist15MinExtendedEntry,
       "xdsl2PMLHist15MLofs": xdsl2PMLHist15MLofs,
       "xdsl2PMLHist15MLols": xdsl2PMLHist15MLols,
       "xdsl2PMLHist15MLol": xdsl2PMLHist15MLol,
       "xdsl2PMLHist15MLprs": xdsl2PMLHist15MLprs,
       "xdsl2PMLHist15MLpr": xdsl2PMLHist15MLpr,
       "xdsl2PMLHist15MInits": xdsl2PMLHist15MInits,
       "xdsl2PMLHist15MInmEqInp": xdsl2PMLHist15MInmEqInp,
       "xdsl2PMLHist15MInmIAT": xdsl2PMLHist15MInmIAT,
       "xdsl2PMLHist15MInmME": xdsl2PMLHist15MInmME,
       "xdsl2PMLineHist1DayExtendedTable": xdsl2PMLineHist1DayExtendedTable,
       "xdsl2PMLineHist1DayExtendedEntry": xdsl2PMLineHist1DayExtendedEntry,
       "xdsl2PMLHist1DLofs": xdsl2PMLHist1DLofs,
       "xdsl2PMLHist1DLols": xdsl2PMLHist1DLols,
       "xdsl2PMLHist1DLol": xdsl2PMLHist1DLol,
       "xdsl2PMLHist1DLprs": xdsl2PMLHist1DLprs,
       "xdsl2PMLHist1DLpr": xdsl2PMLHist1DLpr,
       "xdsl2PMLHist1DInits": xdsl2PMLHist1DInits,
       "xdsl2PMLHist1DInmEqInp": xdsl2PMLHist1DInmEqInp,
       "xdsl2PMLHist1DInmIAT": xdsl2PMLHist1DInmIAT,
       "xdsl2PMLHist1DInmME": xdsl2PMLHist1DInmME,
       "xdsl2PMLineChannelEx": xdsl2PMLineChannelEx,
       "xdsl2PMChCurrExtendedTable": xdsl2PMChCurrExtendedTable,
       "xdsl2PMChCurrExtendedEntry": xdsl2PMChCurrExtendedEntry,
       "xdsl2PMChCurr15MUncorrectBlks": xdsl2PMChCurr15MUncorrectBlks,
       "xdsl2PMChCurr1DayUncorrectBlks": xdsl2PMChCurr1DayUncorrectBlks,
       "xdsl2PMChSinceLinkRtx": xdsl2PMChSinceLinkRtx,
       "xdsl2PMChCurr15MRtx": xdsl2PMChCurr15MRtx,
       "xdsl2PMChCurr1DayRtx": xdsl2PMChCurr1DayRtx,
       "xdsl2PMChSinceLinkRtxCorrected": xdsl2PMChSinceLinkRtxCorrected,
       "xdsl2PMChCurr15MRtxCorrected": xdsl2PMChCurr15MRtxCorrected,
       "xdsl2PMChCurr1DayRtxCorrected": xdsl2PMChCurr1DayRtxCorrected,
       "xdsl2PMChSinceLinkRtxUncorrected": xdsl2PMChSinceLinkRtxUncorrected,
       "xdsl2PMChCurr15MRtxUncorrected": xdsl2PMChCurr15MRtxUncorrected,
       "xdsl2PMChCurr1DayRtxUncorrected": xdsl2PMChCurr1DayRtxUncorrected,
       "xdsl2PMChSinceLinkLEFTRs": xdsl2PMChSinceLinkLEFTRs,
       "xdsl2PMChCurr15MLEFTRs": xdsl2PMChCurr15MLEFTRs,
       "xdsl2PMChCurr1DayLEFTRs": xdsl2PMChCurr1DayLEFTRs,
       "xdsl2PMChSinceLinkMinEFTR": xdsl2PMChSinceLinkMinEFTR,
       "xdsl2PMChCurr15MMinEFTR": xdsl2PMChCurr15MMinEFTR,
       "xdsl2PMChCurr1DayMinEFTR": xdsl2PMChCurr1DayMinEFTR,
       "xdsl2PMChSinceLinkErrFreeBits": xdsl2PMChSinceLinkErrFreeBits,
       "xdsl2PMChCurr15MErrFreeBits": xdsl2PMChCurr15MErrFreeBits,
       "xdsl2PMChCurr1DayErrFreeBits": xdsl2PMChCurr1DayErrFreeBits,
       "xdsl2PMChannelEx": xdsl2PMChannelEx,
       "xdsl2PMChHist15MinExtendedTable": xdsl2PMChHist15MinExtendedTable,
       "xdsl2PMChHist15MinExtendedEntry": xdsl2PMChHist15MinExtendedEntry,
       "xdsl2PMChHist15MUncorrectBlks": xdsl2PMChHist15MUncorrectBlks,
       "xdsl2PMChHist15MRtx": xdsl2PMChHist15MRtx,
       "xdsl2PMChHist15MRtxCorrected": xdsl2PMChHist15MRtxCorrected,
       "xdsl2PMChHist15MRtxUncorrected": xdsl2PMChHist15MRtxUncorrected,
       "xdsl2PMChHist15MLEFTRs": xdsl2PMChHist15MLEFTRs,
       "xdsl2PMChHist15MMinEFTR": xdsl2PMChHist15MMinEFTR,
       "xdsl2PMChHist15MErrFreeBits": xdsl2PMChHist15MErrFreeBits,
       "xdsl2PMChHist1DExtendedTable": xdsl2PMChHist1DExtendedTable,
       "xdsl2PMChHist1DExtendedEntry": xdsl2PMChHist1DExtendedEntry,
       "xdsl2PMChHist1DUncorrectBlks": xdsl2PMChHist1DUncorrectBlks,
       "xdsl2PMChHist1DayRtx": xdsl2PMChHist1DayRtx,
       "xdsl2PMChHist1DayRtxCorrected": xdsl2PMChHist1DayRtxCorrected,
       "xdsl2PMChHist1DayRtxUncorrected": xdsl2PMChHist1DayRtxUncorrected,
       "xdsl2PMChHist1DayLEFTRs": xdsl2PMChHist1DayLEFTRs,
       "xdsl2PMChHist1DayMinEFTR": xdsl2PMChHist1DayMinEFTR,
       "xdsl2PMChHist1DayErrFreeBits": xdsl2PMChHist1DayErrFreeBits,
       "xdsl2LineBandExtTable": xdsl2LineBandExtTable,
       "xdsl2LineBandExtEntry": xdsl2LineBandExtEntry,
       "xdsl2LineBandTxPower": xdsl2LineBandTxPower,
       "xdsl2LineBandRxPower": xdsl2LineBandRxPower,
       "mldStats": mldStats,
       "mldStatsV1QueryInCnt": mldStatsV1QueryInCnt,
       "mldStatsV1ReportInCnt": mldStatsV1ReportInCnt,
       "mldStatsV1DoneInCnt": mldStatsV1DoneInCnt,
       "mldStatsV1QueryInDropCnt": mldStatsV1QueryInDropCnt,
       "mldStatsV1ReportInDropCnt": mldStatsV1ReportInDropCnt,
       "mldStatsV1DoneInDropCnt": mldStatsV1DoneInDropCnt,
       "mldStatsV1QueryOutCnt": mldStatsV1QueryOutCnt,
       "mldStatsV1ReportOutCnt": mldStatsV1ReportOutCnt,
       "mldStatsV1DoneOutCnt": mldStatsV1DoneOutCnt,
       "mldStatsV2QueryInCnt": mldStatsV2QueryInCnt,
       "mldStatsV2ReportInCnt": mldStatsV2ReportInCnt,
       "mldStatsV2QueryInDropCnt": mldStatsV2QueryInDropCnt,
       "mldStatsV2ReportInDropCnt": mldStatsV2ReportInDropCnt,
       "mldStatsV2QueryOutCnt": mldStatsV2QueryOutCnt,
       "mldStatsV2ReportOutCnt": mldStatsV2ReportOutCnt,
       "mldNumOfActiveGroups": mldNumOfActiveGroups,
       "mldGroupTable": mldGroupTable,
       "mldGroupEntry": mldGroupEntry,
       "mldGroupVid": mldGroupVid,
       "mldGroupIp": mldGroupIp,
       "mldGroupNumOfMembers": mldGroupNumOfMembers,
       "mldGroupMemberPorts": mldGroupMemberPorts,
       "mldGroupNumOfActiveUsers": mldGroupNumOfActiveUsers,
       "mldGroupPortTable": mldGroupPortTable,
       "mldGroupPortEntry": mldGroupPortEntry,
       "mldGroupPortVid": mldGroupPortVid,
       "mldGroupPortIp": mldGroupPortIp,
       "mldGroupPortSourceIp": mldGroupPortSourceIp,
       "mldPortCtrlPduTable": mldPortCtrlPduTable,
       "mldPortCtrlPduEntry": mldPortCtrlPduEntry,
       "mldPortCtrlPduQueryCnt": mldPortCtrlPduQueryCnt,
       "mldPortCtrlPduReportCnt": mldPortCtrlPduReportCnt,
       "mldPortCtrlPduLeaveCnt": mldPortCtrlPduLeaveCnt,
       "mldPortNumOfActiveGroups": mldPortNumOfActiveGroups,
       "mldPortCtrlPduV1SuccessJoinCnt": mldPortCtrlPduV1SuccessJoinCnt,
       "mldPortCtrlPduV1UnsuccJoinCnt": mldPortCtrlPduV1UnsuccJoinCnt,
       "mldPortCtrlPduGenQryCnt": mldPortCtrlPduGenQryCnt,
       "mldPortCtrlPduSpecQryCnt": mldPortCtrlPduSpecQryCnt,
       "mldPortCtrlPduV2SuccessReportCnt": mldPortCtrlPduV2SuccessReportCnt,
       "mldPortCtrlPduV2UnsuccReportCnt": mldPortCtrlPduV2UnsuccReportCnt,
       "mldPortCtrlPduInvalidCnt": mldPortCtrlPduInvalidCnt,
       "mldVlanStatsTable": mldVlanStatsTable,
       "mldVlanStatsuEntry": mldVlanStatsuEntry,
       "mldVlanStatsVlanIndex": mldVlanStatsVlanIndex,
       "mldVlanStatsNumOfActiveGroups": mldVlanStatsNumOfActiveGroups,
       "mldVlanStatsQueryPort": mldVlanStatsQueryPort,
       "mldVlanStatsQuerierIp": mldVlanStatsQuerierIp,
       "mldVlanStatsV1QueryInCnt": mldVlanStatsV1QueryInCnt,
       "mldVlanStatsV1ReportInCnt": mldVlanStatsV1ReportInCnt,
       "mldVlanStatsV1DoneInCnt": mldVlanStatsV1DoneInCnt,
       "mldVlanStatsV1QueryInDropCnt": mldVlanStatsV1QueryInDropCnt,
       "mldVlanStatsV1ReportInDropCnt": mldVlanStatsV1ReportInDropCnt,
       "mldVlanStatsV1DoneInDropCnt": mldVlanStatsV1DoneInDropCnt,
       "mldVlanStatsV1QueryOutCnt": mldVlanStatsV1QueryOutCnt,
       "mldVlanStatsV1ReportOutCnt": mldVlanStatsV1ReportOutCnt,
       "mldVlanStatsV1DoneOutCnt": mldVlanStatsV1DoneOutCnt,
       "mldVlanStatsV2QueryInCnt": mldVlanStatsV2QueryInCnt,
       "mldVlanStatsV2ReportInCnt": mldVlanStatsV2ReportInCnt,
       "mldVlanStatsV2QueryInDropCnt": mldVlanStatsV2QueryInDropCnt,
       "mldVlanStatsV2ReportInDropCnt": mldVlanStatsV2ReportInDropCnt,
       "mldVlanStatsV2QueryOutCnt": mldVlanStatsV2QueryOutCnt,
       "mldVlanStatsV2ReportOutCnt": mldVlanStatsV2ReportOutCnt,
       "macFFStats": macFFStats,
       "macFFArpStatusUplinkTable": macFFArpStatusUplinkTable,
       "macFFArpStatusUplinkEntry": macFFArpStatusUplinkEntry,
       "macFFArpStatusUplinkIpAddr": macFFArpStatusUplinkIpAddr,
       "macFFArpStatusUplinkMacAddr": macFFArpStatusUplinkMacAddr,
       "macFFArpStatusUplinkMacVid": macFFArpStatusUplinkMacVid,
       "macFFArpStatusSlotTable": macFFArpStatusSlotTable,
       "macFFArpStatusSlotEntry": macFFArpStatusSlotEntry,
       "macFFArpStatusSlotIpAddr": macFFArpStatusSlotIpAddr,
       "macFFArpStatusSlotMacAddr": macFFArpStatusSlotMacAddr,
       "macFFArpStatusSlotMacVid": macFFArpStatusSlotMacVid,
       "macFFArpStatusSlotPort": macFFArpStatusSlotPort,
       "macFFArpCntUplinkTable": macFFArpCntUplinkTable,
       "macFFArpCntUplinkEntry": macFFArpCntUplinkEntry,
       "macFFArpCntUplinkReqRx": macFFArpCntUplinkReqRx,
       "macFFArpCntUplinkReqTx": macFFArpCntUplinkReqTx,
       "macFFArpCntUplinkReqRxDrop": macFFArpCntUplinkReqRxDrop,
       "macFFArpCntUplinkRpyRx": macFFArpCntUplinkRpyRx,
       "macFFArpCntUplinkRpyTx": macFFArpCntUplinkRpyTx,
       "macFFArpCntUplinkRpyRxDrop": macFFArpCntUplinkRpyRxDrop,
       "macFFArpCntPortTable": macFFArpCntPortTable,
       "macFFArpCntPortEntry": macFFArpCntPortEntry,
       "macFFArpCntPortReqRx": macFFArpCntPortReqRx,
       "macFFArpCntPortReqTx": macFFArpCntPortReqTx,
       "macFFArpCntPortReqRxDrop": macFFArpCntPortReqRxDrop,
       "macFFArpCntPortRpyRx": macFFArpCntPortRpyRx,
       "macFFArpCntPortRpyTx": macFFArpCntPortRpyTx,
       "macFFArpCntPortRpyRxDrop": macFFArpCntPortRpyRxDrop,
       "imageStats": imageStats,
       "sysBootUpFwIndex": sysBootUpFwIndex,
       "sysBootUpFwVersion": sysBootUpFwVersion,
       "sysFlashFwInfoTable": sysFlashFwInfoTable,
       "sysFlashFwInfoEntry": sysFlashFwInfoEntry,
       "sysFlashFwIndex": sysFlashFwIndex,
       "sysFlashFwVersion": sysFlashFwVersion,
       "clear": clear,
       "counterClearTarget": counterClearTarget,
       "counterClearOps": counterClearOps,
       "counterClearVpi": counterClearVpi,
       "counterClearVci": counterClearVci,
       "imaClear": imaClear,
       "imaClearOps": imaClearOps,
       "imaClearTargetGroupIndex": imaClearTargetGroupIndex,
       "imaClearTargetLinkIndex": imaClearTargetLinkIndex,
       "imaClearTargetVpi": imaClearTargetVpi,
       "imaClearTargetVci": imaClearTargetVci,
       "imaClearTargetIfindex": imaClearTargetIfindex,
       "voipClear": voipClear,
       "voipClearOps": voipClearOps,
       "voipClearH248TargetInterface": voipClearH248TargetInterface,
       "cluster": cluster,
       "clusterEnable": clusterEnable,
       "clusterName": clusterName,
       "clusterMemberPassword": clusterMemberPassword,
       "clusterVlan": clusterVlan,
       "clusterCandidate": clusterCandidate,
       "clusterCandidateFlush": clusterCandidateFlush,
       "clusterCandidateTable": clusterCandidateTable,
       "clusterCandidateEntry": clusterCandidateEntry,
       "clusterCandidateMacAddr": clusterCandidateMacAddr,
       "clusterCandidateHostName": clusterCandidateHostName,
       "clusterCandidateModelName": clusterCandidateModelName,
       "clusterCandidateDeviceType": clusterCandidateDeviceType,
       "clusterMemberConfTable": clusterMemberConfTable,
       "clusterMemberConfEntry": clusterMemberConfEntry,
       "clusterMemberConfId": clusterMemberConfId,
       "clusterMemberConfMacAddr": clusterMemberConfMacAddr,
       "clusterMemberConfPasswd": clusterMemberConfPasswd,
       "clusterMemberStatusTable": clusterMemberStatusTable,
       "clusterMemberStatusEntry": clusterMemberStatusEntry,
       "clusterMemberStatusState": clusterMemberStatusState,
       "clusterMemberStatusMacAddr": clusterMemberStatusMacAddr,
       "clusterMemberStatusHostName": clusterMemberStatusHostName,
       "clusterMemberStatusModelName": clusterMemberStatusModelName,
       "clusterMemberStatusDeviceType": clusterMemberStatusDeviceType,
       "clusterMemberStatusFWVersion": clusterMemberStatusFWVersion,
       "clusterMemberStatusUpTime": clusterMemberStatusUpTime,
       "voip": voip,
       "voipArp": voipArp,
       "voipArpFlushTarget": voipArpFlushTarget,
       "voipArpFlushOps": voipArpFlushOps,
       "voipArpShowTable": voipArpShowTable,
       "voipArpShowEntry": voipArpShowEntry,
       "voipArpShowIp": voipArpShowIp,
       "voipArpShowMac": voipArpShowMac,
       "voipArpShowTimer": voipArpShowTimer,
       "voipSip": voipSip,
       "maxNumOfVoipNumberPlan": maxNumOfVoipNumberPlan,
       "voipNumberPlanTable": voipNumberPlanTable,
       "voipNumberPlanEntry": voipNumberPlanEntry,
       "voipNumberPlanName": voipNumberPlanName,
       "voipNumberPlanIndex": voipNumberPlanIndex,
       "voipNumberPlanPattern": voipNumberPlanPattern,
       "voipNumberPlanRule": voipNumberPlanRule,
       "voipNumberPlanRowStatus": voipNumberPlanRowStatus,
       "maxNumOfVoipDialPlan": maxNumOfVoipDialPlan,
       "voipDialPlanTable": voipDialPlanTable,
       "voipDialPlanEntry": voipDialPlanEntry,
       "voipDialPlanName": voipDialPlanName,
       "voipDialPlanPattern": voipDialPlanPattern,
       "voipDialPlanNumOfPrefixCut": voipDialPlanNumOfPrefixCut,
       "voipDialPlanSipServer": voipDialPlanSipServer,
       "voipDialPlanPrefixAddDigits": voipDialPlanPrefixAddDigits,
       "voipDialPlanNumberOfInterdigit": voipDialPlanNumberOfInterdigit,
       "voipDialPlanInterdigitTimeout": voipDialPlanInterdigitTimeout,
       "voipDialPlanRowStatus": voipDialPlanRowStatus,
       "maxNumOfVoipKeyPattern": maxNumOfVoipKeyPattern,
       "voipKeyPatternTable": voipKeyPatternTable,
       "voipKeyPatternEntry": voipKeyPatternEntry,
       "voipKeyPatternName": voipKeyPatternName,
       "voipKeyPatternServiceType": voipKeyPatternServiceType,
       "voipKeyPatternPattern": voipKeyPatternPattern,
       "voipKeyPatternRowStatus": voipKeyPatternRowStatus,
       "voipLocalCall": voipLocalCall,
       "voipLocalCallSync": voipLocalCallSync,
       "voipLocalCallEnterTime": voipLocalCallEnterTime,
       "voipLocalCallExitTime": voipLocalCallExitTime,
       "maxNumOfVoipLocalHelp": maxNumOfVoipLocalHelp,
       "voipLocalHelpTable": voipLocalHelpTable,
       "voipLocalHelpEntry": voipLocalHelpEntry,
       "voipLocalHelpName": voipLocalHelpName,
       "voipLocalHelpIndex": voipLocalHelpIndex,
       "voipLocalHelpTelNumber": voipLocalHelpTelNumber,
       "voipLocalHelpRowStatus": voipLocalHelpRowStatus,
       "voipIpSetTable": voipIpSetTable,
       "voipIpSetEntry": voipIpSetEntry,
       "voipIpSetIp": voipIpSetIp,
       "voipIpSetVid": voipIpSetVid,
       "voipIpSetMask": voipIpSetMask,
       "voipDnsTable": voipDnsTable,
       "voipDnsEntry": voipDnsEntry,
       "voipDnsIp": voipDnsIp,
       "maxNumOfVoipRoute": maxNumOfVoipRoute,
       "voipRouteTable": voipRouteTable,
       "voipRouteEntry": voipRouteEntry,
       "voipRouteSlot": voipRouteSlot,
       "voipRouteIp": voipRouteIp,
       "voipRouteGateway": voipRouteGateway,
       "voipRouteMask": voipRouteMask,
       "voipRouteMetric": voipRouteMetric,
       "voipRouteRowStatus": voipRouteRowStatus,
       "voipCountryCode": voipCountryCode,
       "voipH248": voipH248,
       "voipH248MgConfTable": voipH248MgConfTable,
       "voipH248MgConfEntry": voipH248MgConfEntry,
       "voipH248MgConfSlot": voipH248MgConfSlot,
       "voipH248MgConfName": voipH248MgConfName,
       "voipH248MgConfEnable": voipH248MgConfEnable,
       "voipH248MgConfH248Profile": voipH248MgConfH248Profile,
       "voipH248MgConfPort": voipH248MgConfPort,
       "voipH248MgConfRowStatus": voipH248MgConfRowStatus,
       "voipH248InterfaceConfTable": voipH248InterfaceConfTable,
       "voipH248InterfaceConfEntry": voipH248InterfaceConfEntry,
       "voipH248InterfaceConfId": voipH248InterfaceConfId,
       "voipH248InterfaceConfMgName": voipH248InterfaceConfMgName,
       "voipH248InterfaceConfMgEnable": voipH248InterfaceConfMgEnable,
       "voipH248InterfaceConfH248Profile": voipH248InterfaceConfH248Profile,
       "voipH248InterfaceConfPort": voipH248InterfaceConfPort,
       "voipH248InterfaceConfIp": voipH248InterfaceConfIp,
       "voipH248InterfaceConfMasklen": voipH248InterfaceConfMasklen,
       "voipH248InterfaceConfVid": voipH248InterfaceConfVid,
       "voipH248InterfaceConfPrimary": voipH248InterfaceConfPrimary,
       "voipH248InterfaceConfSecondary": voipH248InterfaceConfSecondary,
       "voipH248InterfaceConfBhcaPeak": voipH248InterfaceConfBhcaPeak,
       "voipH248InterfaceConfBhcaAverage": voipH248InterfaceConfBhcaAverage,
       "voipH248SlotConfTable": voipH248SlotConfTable,
       "voipH248SlotConfEntry": voipH248SlotConfEntry,
       "voipH248SlotConfId": voipH248SlotConfId,
       "voipH248SlotConfMasterIp1": voipH248SlotConfMasterIp1,
       "voipH248SlotConfMasterIp2": voipH248SlotConfMasterIp2,
       "voipH248SlotConfOpmode": voipH248SlotConfOpmode,
       "voipH248SlotConf8021pPrio": voipH248SlotConf8021pPrio,
       "voipH248SlotConfPriorityDscp": voipH248SlotConfPriorityDscp,
       "voipH248SlaveConfTable": voipH248SlaveConfTable,
       "voipH248SlaveConfEntry": voipH248SlaveConfEntry,
       "voipH248SlaveConfInterfaceId": voipH248SlaveConfInterfaceId,
       "voipH248SlaveConfSlaveId": voipH248SlaveConfSlaveId,
       "voipH248SlaveConfSlaveIp": voipH248SlaveConfSlaveIp,
       "voipH248Localcall": voipH248Localcall,
       "voipH248LocalcallEnterTime": voipH248LocalcallEnterTime,
       "voipH248LocalcallExistTime": voipH248LocalcallExistTime,
       "voipCountryCodeParam": voipCountryCodeParam,
       "law": law,
       "impedance": impedance,
       "loopCurrent": loopCurrent,
       "taxType": taxType,
       "ringFrequency": ringFrequency,
       "ringAmplitude": ringAmplitude,
       "ringOnTime1": ringOnTime1,
       "ringOffTime1": ringOffTime1,
       "ringOnTime2": ringOnTime2,
       "ringOffTime2": ringOffTime2,
       "flashMin": flashMin,
       "flashMax": flashMax,
       "breakMin": breakMin,
       "breakMax": breakMax,
       "makeMin": makeMin,
       "makeMax": makeMax,
       "interDigitMin": interDigitMin,
       "meterFrequency": meterFrequency,
       "meterOnTime": meterOnTime,
       "meterOffTime": meterOffTime,
       "cidType": cidType,
       "payloadType": payloadType,
       "firstTASType": firstTASType,
       "secondTASType": secondTASType,
       "firstTASInterval": firstTASInterval,
       "secondTASInterval": secondTASInterval,
       "startToRing": startToRing,
       "dialTone": dialTone,
       "ringBackTone": ringBackTone,
       "busyTone": busyTone,
       "congestionTone": congestionTone,
       "callWaitingTone1": callWaitingTone1,
       "callWaitingTone2": callWaitingTone2,
       "specialDialTone": specialDialTone,
       "howlerTone": howlerTone,
       "warningTone": warningTone,
       "confirmationTone": confirmationTone,
       "holdingTone": holdingTone,
       "numberUnobtainableTone": numberUnobtainableTone,
       "recallDialTone": recallDialTone,
       "specialInformationTone": specialInformationTone,
       "voipPots": voipPots,
       "voipPotsRingTable": voipPotsRingTable,
       "voipPotsRingEntry": voipPotsRingEntry,
       "voipPotsRingConfId": voipPotsRingConfId,
       "voipPotsRingConfNameDefval": voipPotsRingConfNameDefval,
       "voipPotsRingConfName": voipPotsRingConfName,
       "voipPotsRingConfPatternDefval": voipPotsRingConfPatternDefval,
       "voipPotsRingConfPatternOn1": voipPotsRingConfPatternOn1,
       "voipPotsRingConfPatternOff1": voipPotsRingConfPatternOff1,
       "voipPotsRingConfPatternOn2": voipPotsRingConfPatternOn2,
       "voipPotsRingConfPatternOff2": voipPotsRingConfPatternOff2,
       "voipPotsRingConfPatternOn3": voipPotsRingConfPatternOn3,
       "voipPotsRingConfPatternOff3": voipPotsRingConfPatternOff3,
       "voipPotsFlash": voipPotsFlash,
       "voipPotsFlashDefval": voipPotsFlashDefval,
       "voipPotsFlashMinTime": voipPotsFlashMinTime,
       "voipPotsFlashMaxTime": voipPotsFlashMaxTime,
       "voipPotsRingVoltage": voipPotsRingVoltage,
       "voipIfindexMap": voipIfindexMap,
       "voipInterfaceMapTable": voipInterfaceMapTable,
       "voipInterfaceMapEntry": voipInterfaceMapEntry,
       "voipIfIndex": voipIfIndex,
       "ifIndexValue": ifIndexValue,
       "voipIfTable": voipIfTable,
       "voipIfEntry": voipIfEntry,
       "voipIfIndexValue": voipIfIndexValue,
       "voipSingleIp": voipSingleIp,
       "voipExtH248": voipExtH248,
       "voipExtH248InterfaceConf": voipExtH248InterfaceConf,
       "voipExtH248InterfaceConfMgName": voipExtH248InterfaceConfMgName,
       "voipExtH248InterfaceConfMgEnable": voipExtH248InterfaceConfMgEnable,
       "voipExtH248InterfaceConfH248Profile": voipExtH248InterfaceConfH248Profile,
       "voipExtH248InterfaceConfPort": voipExtH248InterfaceConfPort,
       "voipExtH248InterfaceConfSignalIp": voipExtH248InterfaceConfSignalIp,
       "voipExtH248InterfaceConfSignalMasklen": voipExtH248InterfaceConfSignalMasklen,
       "voipExtH248InterfaceConfSignalVid": voipExtH248InterfaceConfSignalVid,
       "voipExtH248InterfaceConfMediaIp": voipExtH248InterfaceConfMediaIp,
       "voipExtH248InterfaceConfMediaMasklen": voipExtH248InterfaceConfMediaMasklen,
       "voipExtH248InterfaceConfMediaVid": voipExtH248InterfaceConfMediaVid,
       "voipExtH248InterfaceConfDnsIp": voipExtH248InterfaceConfDnsIp,
       "voipExtH248InterfaceConfRegisterRetry": voipExtH248InterfaceConfRegisterRetry,
       "voipExtH248InterfaceMaxNumOfVoipRoute": voipExtH248InterfaceMaxNumOfVoipRoute,
       "voipExtH248InterfaceRouteTable": voipExtH248InterfaceRouteTable,
       "voipExtH248InterfaceRouteEntry": voipExtH248InterfaceRouteEntry,
       "voipExtH248InterfaceRouteIp": voipExtH248InterfaceRouteIp,
       "voipExtH248InterfaceRouteGateway": voipExtH248InterfaceRouteGateway,
       "voipExtH248InterfaceRouteMask": voipExtH248InterfaceRouteMask,
       "voipExtH248InterfaceRouteMetric": voipExtH248InterfaceRouteMetric,
       "voipExtH248InterfaceRouteRowStatus": voipExtH248InterfaceRouteRowStatus,
       "voipExtStats": voipExtStats,
       "voipExtH248InterfaceStat": voipExtH248InterfaceStat,
       "voipExtH248InterfaceStatMgState": voipExtH248InterfaceStatMgState,
       "voipExtH248InterfaceStatPrimaryProtectionState": voipExtH248InterfaceStatPrimaryProtectionState,
       "voipExtH248InterfaceStatSecondaryProtectionState": voipExtH248InterfaceStatSecondaryProtectionState,
       "voipExtH248InterfaceStatRedundantState": voipExtH248InterfaceStatRedundantState,
       "voipExtH248InterfaceStatMgcIp": voipExtH248InterfaceStatMgcIp,
       "voipExtH248InterfaceStatMgH248Mac": voipExtH248InterfaceStatMgH248Mac,
       "voipExtH248InterfaceStatLocalcallStat": voipExtH248InterfaceStatLocalcallStat,
       "voipExtH248MediaStatTable": voipExtH248MediaStatTable,
       "voipExtH248MediaStatEntry": voipExtH248MediaStatEntry,
       "voipExtH248MediaStatSlotId": voipExtH248MediaStatSlotId,
       "voipExtH248MediaStatPortCount": voipExtH248MediaStatPortCount,
       "voipExtH248MediaStatState": voipExtH248MediaStatState,
       "voipExtH248TerminationStatTable": voipExtH248TerminationStatTable,
       "voipExtH248TerminationStatEntry": voipExtH248TerminationStatEntry,
       "voipExtH248TerminationStatStateSlotId": voipExtH248TerminationStatStateSlotId,
       "voipExtH248TerminationStatStatePortNumber": voipExtH248TerminationStatStatePortNumber,
       "voipExtH248TerminationStatName": voipExtH248TerminationStatName,
       "voipExtH248TerminationStatPhoneState": voipExtH248TerminationStatPhoneState,
       "voipExtH248TerminationStatCallServiceState": voipExtH248TerminationStatCallServiceState,
       "voipExtH248TerminationStatQuery": voipExtH248TerminationStatQuery,
       "voipExtH248TerminationStatQueryTerminationName": voipExtH248TerminationStatQueryTerminationName,
       "voipExtH248TerminationStatQuerySlotId": voipExtH248TerminationStatQuerySlotId,
       "voipExtH248TerminationStatQueryPortNumber": voipExtH248TerminationStatQueryPortNumber,
       "voipExtH248TerminationStatQueryPhoneState": voipExtH248TerminationStatQueryPhoneState,
       "voipExtH248TerminationStatQueryCallServiceState": voipExtH248TerminationStatQueryCallServiceState,
       "voipExtSipProfile": voipExtSipProfile,
       "voipExtMaxNumOfSipProfiles": voipExtMaxNumOfSipProfiles,
       "voipExtSipProfileTable": voipExtSipProfileTable,
       "voipExtSipProfileEntry": voipExtSipProfileEntry,
       "voipExtSipProfileName": voipExtSipProfileName,
       "voipExtSipProfileSipSvr": voipExtSipProfileSipSvr,
       "voipExtSipProfileRegSvr": voipExtSipProfileRegSvr,
       "voipExtSipProfileProxySvr": voipExtSipProfileProxySvr,
       "voipExtSipProfileSipPort": voipExtSipProfileSipPort,
       "voipExtSipProfileRegSvrPort": voipExtSipProfileRegSvrPort,
       "voipExtSipProfileProxySvrPort": voipExtSipProfileProxySvrPort,
       "voipExtSipProfilePbit": voipExtSipProfilePbit,
       "voipExtSipProfileDscp": voipExtSipProfileDscp,
       "voipExtSipProfileKeepAlive": voipExtSipProfileKeepAlive,
       "voipExtSipProfilePrack": voipExtSipProfilePrack,
       "voipExtSipProfileSe": voipExtSipProfileSe,
       "voipExtSipProfileSwitchType": voipExtSipProfileSwitchType,
       "voipExtSipProfileRtpStartPort": voipExtSipProfileRtpStartPort,
       "voipExtSipProfileRtpEndPort": voipExtSipProfileRtpEndPort,
       "voipExtSipProfileRegistrationExpire": voipExtSipProfileRegistrationExpire,
       "voipExtSipProfileRegistrationExpireTime": voipExtSipProfileRegistrationExpireTime,
       "voipExtSipProfileRegistrationRetryTime": voipExtSipProfileRegistrationRetryTime,
       "voipExtSipProfileRowStatus": voipExtSipProfileRowStatus,
       "voipExtSipProfilePrefixAddDigits": voipExtSipProfilePrefixAddDigits,
       "voipExtMaxNumOfSipCallSvcProfiles": voipExtMaxNumOfSipCallSvcProfiles,
       "voipExtSipCallSvcProfileTable": voipExtSipCallSvcProfileTable,
       "voipExtSipCallSvcProfileEntry": voipExtSipCallSvcProfileEntry,
       "voipExtSipCallSvcProfileName": voipExtSipCallSvcProfileName,
       "voipExtSipCallSvcProfileKeypattern": voipExtSipCallSvcProfileKeypattern,
       "voipExtSipCallSvcProfileDialPlanOn": voipExtSipCallSvcProfileDialPlanOn,
       "voipExtSipCallSvcProfileDialPlanCc": voipExtSipCallSvcProfileDialPlanCc,
       "voipExtSipCallSvcProfileDialPlanNdc": voipExtSipCallSvcProfileDialPlanNdc,
       "voipExtSipCallSvcProfileDialPlanTable": voipExtSipCallSvcProfileDialPlanTable,
       "voipExtSipCallSvcProfileDndOn": voipExtSipCallSvcProfileDndOn,
       "voipExtSipCallSvcProfileDtmf": voipExtSipCallSvcProfileDtmf,
       "voipExtSipCallSvcProfileDtmfRfc2833Payload": voipExtSipCallSvcProfileDtmfRfc2833Payload,
       "voipExtSipCallSvcProfileCallWaitOn": voipExtSipCallSvcProfileCallWaitOn,
       "voipExtSipCallSvcProfileClipOn": voipExtSipCallSvcProfileClipOn,
       "voipExtSipCallSvcProfileClirOn": voipExtSipCallSvcProfileClirOn,
       "voipExtSipCallSvcProfileCallTransferOn": voipExtSipCallSvcProfileCallTransferOn,
       "voipExtSipCallSvcProfileCallConferenceOn": voipExtSipCallSvcProfileCallConferenceOn,
       "voipExtSipCallSvcProfileFax": voipExtSipCallSvcProfileFax,
       "voipExtSipCallSvcProfileFirstDigit": voipExtSipCallSvcProfileFirstDigit,
       "voipExtSipCallSvcProfileInterdigit": voipExtSipCallSvcProfileInterdigit,
       "voipExtSipCallSvcProfileMatchdigit": voipExtSipCallSvcProfileMatchdigit,
       "voipExtSipCallSvcProfileFlash": voipExtSipCallSvcProfileFlash,
       "voipExtSipCallSvcProfileFlashPattern": voipExtSipCallSvcProfileFlashPattern,
       "voipExtSipCallSvcProfileLocalCallOn": voipExtSipCallSvcProfileLocalCallOn,
       "voipExtSipCallSvcProfileMWIOn": voipExtSipCallSvcProfileMWIOn,
       "voipExtSipCallSvcProfileCentrexOn": voipExtSipCallSvcProfileCentrexOn,
       "voipExtSipCallSvcProfileRowStatus": voipExtSipCallSvcProfileRowStatus,
       "voipExtSipCallSvcProfileLocalHelpTable": voipExtSipCallSvcProfileLocalHelpTable,
       "voipExtSipCallSvcProfileLocalHelpEntry": voipExtSipCallSvcProfileLocalHelpEntry,
       "voipExtSipCallSvcProfileLocalHelpIndex": voipExtSipCallSvcProfileLocalHelpIndex,
       "voipExtSipCallSvcProfileLocalHelpTableName": voipExtSipCallSvcProfileLocalHelpTableName,
       "voipExtSipCallSvcProfileLocalHelpTableTel": voipExtSipCallSvcProfileLocalHelpTableTel,
       "voipExtMaxNumOfVoipDialPlan": voipExtMaxNumOfVoipDialPlan,
       "voipExtDialPlanTable": voipExtDialPlanTable,
       "voipExtDialPlanEntry": voipExtDialPlanEntry,
       "voipExtDialPlanName": voipExtDialPlanName,
       "voipExtDialPlanIndex": voipExtDialPlanIndex,
       "voipExtDialPlanPattern": voipExtDialPlanPattern,
       "voipExtDialPlanRule": voipExtDialPlanRule,
       "voipExtDialPlanRowStatus": voipExtDialPlanRowStatus,
       "voipExtSip": voipExtSip,
       "voipExtSipIp": voipExtSipIp,
       "voipExtSipSignalIp": voipExtSipSignalIp,
       "voipExtSipSignalMask": voipExtSipSignalMask,
       "voipExtSipSignalVid": voipExtSipSignalVid,
       "voipExtSipMediaIp": voipExtSipMediaIp,
       "voipExtSipMediaMask": voipExtSipMediaMask,
       "voipExtSipMediaVid": voipExtSipMediaVid,
       "voipExtSipDnsIp": voipExtSipDnsIp,
       "voipExtSipDnsIp2": voipExtSipDnsIp2,
       "voipExtSipMaxNumOfVoipRoute": voipExtSipMaxNumOfVoipRoute,
       "voipExtSipRouteTable": voipExtSipRouteTable,
       "voipExtSipRouteEntry": voipExtSipRouteEntry,
       "voipExtSipRouteIp": voipExtSipRouteIp,
       "voipExtSipRouteGateway": voipExtSipRouteGateway,
       "voipExtSipRouteMask": voipExtSipRouteMask,
       "voipExtSipRouteMetric": voipExtSipRouteMetric,
       "voipExtSipRouteRowStatus": voipExtSipRouteRowStatus,
       "voipExtSipRegcount": voipExtSipRegcount,
       "voipExtSipCptReorder": voipExtSipCptReorder,
       "voipExtSipCptHowler": voipExtSipCptHowler,
       "voipExtSipCptAlerting": voipExtSipCptAlerting,
       "voipExtSipPktLog": voipExtSipPktLog,
       "voipExtSipPktLogClear": voipExtSipPktLogClear,
       "voipExtSipLineConfTable": voipExtSipLineConfTable,
       "voipExtSipLineConfEntry": voipExtSipLineConfEntry,
       "voipExtSipLineConfHotlineOn": voipExtSipLineConfHotlineOn,
       "voipExtSipLineConfHotlineNo": voipExtSipLineConfHotlineNo,
       "voipExtSipLineConfHotlineTimeout": voipExtSipLineConfHotlineTimeout,
       "voipExtSipLineConfTax": voipExtSipLineConfTax,
       "voipExtSipLineStatusTable": voipExtSipLineStatusTable,
       "voipExtSipLineStatusEntry": voipExtSipLineStatusEntry,
       "voipExtSipLineStatusFxsStatus": voipExtSipLineStatusFxsStatus,
       "voipExtSipLineStatusServiceStatus": voipExtSipLineStatusServiceStatus,
       "voipExtSipLineStatusLocalcallStatus": voipExtSipLineStatusLocalcallStatus,
       "ima": ima,
       "imaGroupTable": imaGroupTable,
       "imaGroupEntry": imaGroupEntry,
       "imaGroupIndex": imaGroupIndex,
       "imaGroupClkMode": imaGroupClkMode,
       "imaGroupVersion": imaGroupVersion,
       "imaGroupChan": imaGroupChan,
       "imaGroupChanNumTable": imaGroupChanNumTable,
       "imaGroupChanNumEntry": imaGroupChanNumEntry,
       "imaGroupChanNumSlot": imaGroupChanNumSlot,
       "imaGroupChanNumMaximum": imaGroupChanNumMaximum,
       "imaGroupChanNumCurrentTotal": imaGroupChanNumCurrentTotal,
       "imaGroupChanNumCurrentPvc": imaGroupChanNumCurrentPvc,
       "imaGroupChanNumCurrentDtpvc": imaGroupChanNumCurrentDtpvc,
       "imaGroupPvcTable": imaGroupPvcTable,
       "imaGroupPvcEntry": imaGroupPvcEntry,
       "imaGroupPvcGroupIndex": imaGroupPvcGroupIndex,
       "imaGroupPvcVpi": imaGroupPvcVpi,
       "imaGroupPvcVci": imaGroupPvcVci,
       "imaGroupPvcPvid": imaGroupPvcPvid,
       "imaGroupPvcEncap": imaGroupPvcEncap,
       "imaGroupPvcPriority": imaGroupPvcPriority,
       "imaGruopPvcProfile": imaGruopPvcProfile,
       "imaGroupPvcRowStatus": imaGroupPvcRowStatus,
       "imaGroupPvcEgressTag": imaGroupPvcEgressTag,
       "imaGroupDtPvcTable": imaGroupDtPvcTable,
       "imaGroupDtPvcEntry": imaGroupDtPvcEntry,
       "imaGroupDTPvcGroupIndex": imaGroupDTPvcGroupIndex,
       "imaGroupDtPvcVpi": imaGroupDtPvcVpi,
       "imaGroupDtPvcVci": imaGroupDtPvcVci,
       "imaGroupDtPvcSvid": imaGroupDtPvcSvid,
       "imaGroupDtPvcCvid": imaGroupDtPvcCvid,
       "imaGroupDtPvcEncap": imaGroupDtPvcEncap,
       "imaGroupDtPvcSPriority": imaGroupDtPvcSPriority,
       "imaGroupDtPvcCPriority": imaGroupDtPvcCPriority,
       "imaGroupDtPvcProfile": imaGroupDtPvcProfile,
       "imaGroupDtPvcRowStatus": imaGroupDtPvcRowStatus,
       "imaMgmtPvcTable": imaMgmtPvcTable,
       "imaMgmtPvcEntry": imaMgmtPvcEntry,
       "imaMgmtPvcGroupIndex": imaMgmtPvcGroupIndex,
       "imaMgmtPvcVpi": imaMgmtPvcVpi,
       "imaMgmtPvcVci": imaMgmtPvcVci,
       "imaMgmtPvcPvid": imaMgmtPvcPvid,
       "imaMgmtPvcEncap": imaMgmtPvcEncap,
       "imaMgmtPvcPriority": imaMgmtPvcPriority,
       "imaMgmtPvcProfile": imaMgmtPvcProfile,
       "imaMgmtPvcRowStatus": imaMgmtPvcRowStatus,
       "imaMgmtPvcManagedIp": imaMgmtPvcManagedIp,
       "imaMgmtPvcGatewayIp": imaMgmtPvcGatewayIp,
       "ies5005": ies5005,
       "ies6000": ies6000}
)
